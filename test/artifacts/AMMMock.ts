
/* Autogenerated file, do not edit! */

/* eslint-disable */
import {
  AztecAddress,
  AztecAddressLike,
  CompleteAddress,
  Contract,
  ContractArtifact,
  ContractBase,
  ContractFunctionInteraction,
  ContractInstanceWithAddress,
  ContractMethod,
  ContractStorageLayout,
  ContractNotes,
  DeployMethod,
  EthAddress,
  EthAddressLike,
  FieldLike,
  Fr,
  FunctionSelectorLike,
  loadContractArtifact,
  NoirCompiledContract,
  Point,
  PublicKey,
  Wallet,
  WrappedFieldLike,
} from '@aztec/aztec.js';
import AMMMockContractArtifactJson from '../../aztec-contracts/mock_amm/target/mock_amm-AMMMock.json' assert { type: 'json' };
export const AMMMockContractArtifact = loadContractArtifact(AMMMockContractArtifactJson as NoirCompiledContract);

/**
 * Type-safe interface for contract AMMMock;
 */
export class AMMMockContract extends ContractBase {
  
  private constructor(
    instance: ContractInstanceWithAddress,
    wallet: Wallet,
  ) {
    super(instance, AMMMockContractArtifact, wallet);
  }
  

  
  /**
   * Creates a contract instance.
   * @param address - The deployed contract's address.
   * @param wallet - The wallet to use when interacting with the contract.
   * @returns A promise that resolves to a new Contract instance.
   */
  public static async at(
    address: AztecAddress,
    wallet: Wallet,
  ) {
    return Contract.at(address, AMMMockContract.artifact, wallet) as Promise<AMMMockContract>;
  }

  
  /**
   * Creates a tx to deploy a new instance of this contract.
   */
  public static deploy(wallet: Wallet, admin: AztecAddressLike, token0: AztecAddressLike, token1: AztecAddressLike) {
    return new DeployMethod<AMMMockContract>(Point.ZERO, wallet, AMMMockContractArtifact, AMMMockContract.at, Array.from(arguments).slice(1));
  }

  /**
   * Creates a tx to deploy a new instance of this contract using the specified public key to derive the address.
   */
  public static deployWithPublicKey(publicKey: PublicKey, wallet: Wallet, admin: AztecAddressLike, token0: AztecAddressLike, token1: AztecAddressLike) {
    return new DeployMethod<AMMMockContract>(publicKey, wallet, AMMMockContractArtifact, AMMMockContract.at, Array.from(arguments).slice(2));
  }

  /**
   * Creates a tx to deploy a new instance of this contract using the specified constructor method.
   */
  public static deployWithOpts<M extends keyof AMMMockContract['methods']>(
    opts: { publicKey?: PublicKey; method?: M; wallet: Wallet },
    ...args: Parameters<AMMMockContract['methods'][M]>
  ) {
    return new DeployMethod<AMMMockContract>(
      opts.publicKey ?? Point.ZERO,
      opts.wallet,
      AMMMockContractArtifact,
      AMMMockContract.at,
      Array.from(arguments).slice(1),
      opts.method ?? 'constructor',
    );
  }
  

  
  /**
   * Returns this contract's artifact.
   */
  public static get artifact(): ContractArtifact {
    return AMMMockContractArtifact;
  }
  

  
    public static get storage(): ContractStorageLayout<'admin' | 'token0' | 'token1'> {
      return {
        admin: {
          slot: new Fr(1n),
          typ: "PublicImmutable<AztecAddress>",
        }
      ,
token0: {
          slot: new Fr(2n),
          typ: "SharedImmutable<AztecAddress>",
        }
      ,
token1: {
          slot: new Fr(3n),
          typ: "SharedImmutable<AztecAddress>",
        }
      
      } as ContractStorageLayout<'admin' | 'token0' | 'token1'>;
    }
    

  

  /** Type-safe wrappers for the public methods exposed by the contract. */
  public methods!: {
    
    /** swap_private(amount0: field, amount1: field, nonce0: field, nonce1: field, secret_hash: field) */
    swap_private: ((amount0: FieldLike, amount1: FieldLike, nonce0: FieldLike, nonce1: FieldLike, secret_hash: FieldLike) => ContractFunctionInteraction) & Pick<ContractMethod, 'selector'>;

    /** get_token1() */
    get_token1: (() => ContractFunctionInteraction) & Pick<ContractMethod, 'selector'>;

    /** compute_note_hash_and_nullifier(contract_address: struct, nonce: field, storage_slot: field, note_type_id: field, serialized_note: array) */
    compute_note_hash_and_nullifier: ((contract_address: AztecAddressLike, nonce: FieldLike, storage_slot: FieldLike, note_type_id: FieldLike, serialized_note: FieldLike[]) => ContractFunctionInteraction) & Pick<ContractMethod, 'selector'>;

    /** add_liquidity(token0: struct, amount: field, nonce: field) */
    add_liquidity: ((token0: AztecAddressLike, amount: FieldLike, nonce: FieldLike) => ContractFunctionInteraction) & Pick<ContractMethod, 'selector'>;

    /** get_token0() */
    get_token0: (() => ContractFunctionInteraction) & Pick<ContractMethod, 'selector'>;

    /** swap_public(amount0: field, amount1: field, nonce0: field, nonce1: field) */
    swap_public: ((amount0: FieldLike, amount1: FieldLike, nonce0: FieldLike, nonce1: FieldLike) => ContractFunctionInteraction) & Pick<ContractMethod, 'selector'>;

    /** get_admin() */
    get_admin: (() => ContractFunctionInteraction) & Pick<ContractMethod, 'selector'>;

    /** constructor(admin: struct, token0: struct, token1: struct) */
    constructor: ((admin: AztecAddressLike, token0: AztecAddressLike, token1: AztecAddressLike) => ContractFunctionInteraction) & Pick<ContractMethod, 'selector'>;
  };
}
