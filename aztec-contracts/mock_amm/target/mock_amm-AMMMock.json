{"noir_version":"0.27.0+783feebcc2543497cc9a23db958af64902afa589","name":"AMMMock","functions":[{"name":"_initialize","is_unconstrained":true,"custom_attributes":["aztec(public)","aztec(internal)","aztec(noinitcheck)"],"abi":{"parameters":[{"name":"inputs","type":{"kind":"struct","path":"aztec::context::inputs::public_context_inputs::PublicContextInputs","fields":[{"name":"call_context","type":{"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"storage_contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"portal_contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"gas_left","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l1_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}},{"name":"side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"gas_settings","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::GasSettings","fields":[{"name":"da","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::DimensionGasSettings","fields":[{"name":"gas_limit","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"teardown_gas_limit","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"max_fee_per_gas","type":{"kind":"field"}}]}},{"name":"l1","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::DimensionGasSettings","fields":[{"name":"gas_limit","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"teardown_gas_limit","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"max_fee_per_gas","type":{"kind":"field"}}]}},{"name":"l2","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::DimensionGasSettings","fields":[{"name":"gas_limit","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"teardown_gas_limit","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"max_fee_per_gas","type":{"kind":"field"}}]}},{"name":"inclusion_fee","type":{"kind":"field"}}]}},{"name":"transaction_fee","type":{"kind":"field"}}]}},{"name":"historical_header","type":{"kind":"struct","path":"aztec::protocol_types::header::Header","fields":[{"name":"last_archive","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"content_commitment","type":{"kind":"struct","path":"aztec::protocol_types::content_commitment::ContentCommitment","fields":[{"name":"tx_tree_height","type":{"kind":"field"}},{"name":"txs_effects_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}]}},{"name":"state","type":{"kind":"struct","path":"aztec::protocol_types::state_reference::StateReference","fields":[{"name":"l1_to_l2_message_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"partial","type":{"kind":"struct","path":"aztec::protocol_types::partial_state_reference::PartialStateReference","fields":[{"name":"note_hash_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"nullifier_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"public_data_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}}]}},{"name":"global_variables","type":{"kind":"struct","path":"aztec::protocol_types::abis::global_variables::GlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"fee_recipient","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"gas_fees","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l1_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}}]}}]}},{"name":"public_global_variables","type":{"kind":"struct","path":"aztec::protocol_types::abis::global_variables::GlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"fee_recipient","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"gas_fees","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l1_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}}]}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}]},"visibility":"private"},{"name":"admin","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]},"visibility":"private"},{"name":"token0","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]},"visibility":"private"},{"name":"token1","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]},"visibility":"private"}],"param_witnesses":{"admin":[{"start":54,"end":55}],"inputs":[{"start":0,"end":54}],"token0":[{"start":55,"end":56}],"token1":[{"start":56,"end":57}]},"return_type":{"abi_type":{"kind":"struct","path":"aztec::protocol_types::abis::public_circuit_public_inputs::PublicCircuitPublicInputs","fields":[{"name":"call_context","type":{"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"storage_contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"portal_contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"gas_left","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l1_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}},{"name":"side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"gas_settings","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::GasSettings","fields":[{"name":"da","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::DimensionGasSettings","fields":[{"name":"gas_limit","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"teardown_gas_limit","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"max_fee_per_gas","type":{"kind":"field"}}]}},{"name":"l1","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::DimensionGasSettings","fields":[{"name":"gas_limit","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"teardown_gas_limit","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"max_fee_per_gas","type":{"kind":"field"}}]}},{"name":"l2","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::DimensionGasSettings","fields":[{"name":"gas_limit","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"teardown_gas_limit","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"max_fee_per_gas","type":{"kind":"field"}}]}},{"name":"inclusion_fee","type":{"kind":"field"}}]}},{"name":"transaction_fee","type":{"kind":"field"}}]}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"nullifier_read_requests","type":{"kind":"array","length":2,"type":{"kind":"struct","path":"aztec::protocol_types::abis::read_request::ReadRequest","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"nullifier_non_existent_read_requests","type":{"kind":"array","length":2,"type":{"kind":"struct","path":"aztec::protocol_types::abis::read_request::ReadRequest","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"contract_storage_update_requests","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::contrakt::storage_update_request::StorageUpdateRequest","fields":[{"name":"storage_slot","type":{"kind":"field"}},{"name":"new_value","type":{"kind":"field"}}]}}},{"name":"contract_storage_reads","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::contrakt::storage_read::StorageRead","fields":[{"name":"storage_slot","type":{"kind":"field"}},{"name":"current_value","type":{"kind":"field"}}]}}},{"name":"public_call_stack_hashes","type":{"kind":"array","length":4,"type":{"kind":"field"}}},{"name":"new_note_hashes","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::abis::side_effect::SideEffect","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"new_nullifiers","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::abis::side_effect::SideEffectLinkedToNoteHash","fields":[{"name":"value","type":{"kind":"field"}},{"name":"note_hash","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"new_l2_to_l1_msgs","type":{"kind":"array","length":2,"type":{"kind":"struct","path":"aztec::protocol_types::messaging::l2_to_l1_message::L2ToL1Message","fields":[{"name":"recipient","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"content","type":{"kind":"field"}}]}}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"unencrypted_logs_hash","type":{"kind":"field"}},{"name":"unencrypted_log_preimages_length","type":{"kind":"field"}},{"name":"historical_header","type":{"kind":"struct","path":"aztec::protocol_types::header::Header","fields":[{"name":"last_archive","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"content_commitment","type":{"kind":"struct","path":"aztec::protocol_types::content_commitment::ContentCommitment","fields":[{"name":"tx_tree_height","type":{"kind":"field"}},{"name":"txs_effects_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}]}},{"name":"state","type":{"kind":"struct","path":"aztec::protocol_types::state_reference::StateReference","fields":[{"name":"l1_to_l2_message_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"partial","type":{"kind":"struct","path":"aztec::protocol_types::partial_state_reference::PartialStateReference","fields":[{"name":"note_hash_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"nullifier_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"public_data_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}}]}},{"name":"global_variables","type":{"kind":"struct","path":"aztec::protocol_types::abis::global_variables::GlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"fee_recipient","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"gas_fees","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l1_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}}]}}]}},{"name":"prover_address","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"revert_code","type":{"kind":"integer","sign":"unsigned","width":8}},{"name":"gas_left","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l1_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]},"visibility":"public"},"return_witnesses":[57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271]},"bytecode":"","debug_symbols":""},{"name":"swap_public","is_unconstrained":true,"custom_attributes":["aztec(public)"],"abi":{"parameters":[{"name":"inputs","type":{"kind":"struct","path":"aztec::context::inputs::public_context_inputs::PublicContextInputs","fields":[{"name":"call_context","type":{"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"storage_contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"portal_contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"gas_left","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l1_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}},{"name":"side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"gas_settings","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::GasSettings","fields":[{"name":"da","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::DimensionGasSettings","fields":[{"name":"gas_limit","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"teardown_gas_limit","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"max_fee_per_gas","type":{"kind":"field"}}]}},{"name":"l1","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::DimensionGasSettings","fields":[{"name":"gas_limit","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"teardown_gas_limit","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"max_fee_per_gas","type":{"kind":"field"}}]}},{"name":"l2","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::DimensionGasSettings","fields":[{"name":"gas_limit","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"teardown_gas_limit","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"max_fee_per_gas","type":{"kind":"field"}}]}},{"name":"inclusion_fee","type":{"kind":"field"}}]}},{"name":"transaction_fee","type":{"kind":"field"}}]}},{"name":"historical_header","type":{"kind":"struct","path":"aztec::protocol_types::header::Header","fields":[{"name":"last_archive","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"content_commitment","type":{"kind":"struct","path":"aztec::protocol_types::content_commitment::ContentCommitment","fields":[{"name":"tx_tree_height","type":{"kind":"field"}},{"name":"txs_effects_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}]}},{"name":"state","type":{"kind":"struct","path":"aztec::protocol_types::state_reference::StateReference","fields":[{"name":"l1_to_l2_message_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"partial","type":{"kind":"struct","path":"aztec::protocol_types::partial_state_reference::PartialStateReference","fields":[{"name":"note_hash_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"nullifier_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"public_data_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}}]}},{"name":"global_variables","type":{"kind":"struct","path":"aztec::protocol_types::abis::global_variables::GlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"fee_recipient","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"gas_fees","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l1_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}}]}}]}},{"name":"public_global_variables","type":{"kind":"struct","path":"aztec::protocol_types::abis::global_variables::GlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"fee_recipient","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"gas_fees","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l1_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}}]}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}]},"visibility":"private"},{"name":"amount0","type":{"kind":"field"},"visibility":"private"},{"name":"amount1","type":{"kind":"field"},"visibility":"private"},{"name":"nonce0","type":{"kind":"field"},"visibility":"private"},{"name":"nonce1","type":{"kind":"field"},"visibility":"private"}],"param_witnesses":{"amount0":[{"start":54,"end":55}],"amount1":[{"start":55,"end":56}],"inputs":[{"start":0,"end":54}],"nonce0":[{"start":56,"end":57}],"nonce1":[{"start":57,"end":58}]},"return_type":{"abi_type":{"kind":"struct","path":"aztec::protocol_types::abis::public_circuit_public_inputs::PublicCircuitPublicInputs","fields":[{"name":"call_context","type":{"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"storage_contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"portal_contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"gas_left","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l1_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}},{"name":"side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"gas_settings","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::GasSettings","fields":[{"name":"da","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::DimensionGasSettings","fields":[{"name":"gas_limit","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"teardown_gas_limit","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"max_fee_per_gas","type":{"kind":"field"}}]}},{"name":"l1","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::DimensionGasSettings","fields":[{"name":"gas_limit","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"teardown_gas_limit","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"max_fee_per_gas","type":{"kind":"field"}}]}},{"name":"l2","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::DimensionGasSettings","fields":[{"name":"gas_limit","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"teardown_gas_limit","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"max_fee_per_gas","type":{"kind":"field"}}]}},{"name":"inclusion_fee","type":{"kind":"field"}}]}},{"name":"transaction_fee","type":{"kind":"field"}}]}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"nullifier_read_requests","type":{"kind":"array","length":2,"type":{"kind":"struct","path":"aztec::protocol_types::abis::read_request::ReadRequest","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"nullifier_non_existent_read_requests","type":{"kind":"array","length":2,"type":{"kind":"struct","path":"aztec::protocol_types::abis::read_request::ReadRequest","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"contract_storage_update_requests","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::contrakt::storage_update_request::StorageUpdateRequest","fields":[{"name":"storage_slot","type":{"kind":"field"}},{"name":"new_value","type":{"kind":"field"}}]}}},{"name":"contract_storage_reads","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::contrakt::storage_read::StorageRead","fields":[{"name":"storage_slot","type":{"kind":"field"}},{"name":"current_value","type":{"kind":"field"}}]}}},{"name":"public_call_stack_hashes","type":{"kind":"array","length":4,"type":{"kind":"field"}}},{"name":"new_note_hashes","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::abis::side_effect::SideEffect","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"new_nullifiers","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::abis::side_effect::SideEffectLinkedToNoteHash","fields":[{"name":"value","type":{"kind":"field"}},{"name":"note_hash","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"new_l2_to_l1_msgs","type":{"kind":"array","length":2,"type":{"kind":"struct","path":"aztec::protocol_types::messaging::l2_to_l1_message::L2ToL1Message","fields":[{"name":"recipient","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"content","type":{"kind":"field"}}]}}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"unencrypted_logs_hash","type":{"kind":"field"}},{"name":"unencrypted_log_preimages_length","type":{"kind":"field"}},{"name":"historical_header","type":{"kind":"struct","path":"aztec::protocol_types::header::Header","fields":[{"name":"last_archive","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"content_commitment","type":{"kind":"struct","path":"aztec::protocol_types::content_commitment::ContentCommitment","fields":[{"name":"tx_tree_height","type":{"kind":"field"}},{"name":"txs_effects_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}]}},{"name":"state","type":{"kind":"struct","path":"aztec::protocol_types::state_reference::StateReference","fields":[{"name":"l1_to_l2_message_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"partial","type":{"kind":"struct","path":"aztec::protocol_types::partial_state_reference::PartialStateReference","fields":[{"name":"note_hash_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"nullifier_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"public_data_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}}]}},{"name":"global_variables","type":{"kind":"struct","path":"aztec::protocol_types::abis::global_variables::GlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"fee_recipient","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"gas_fees","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l1_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}}]}}]}},{"name":"prover_address","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"revert_code","type":{"kind":"integer","sign":"unsigned","width":8}},{"name":"gas_left","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l1_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]},"visibility":"public"},"return_witnesses":[58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272]},"bytecode":"","debug_symbols":""},{"name":"swap_private","is_unconstrained":false,"custom_attributes":["aztec(private)"],"abi":{"parameters":[{"name":"inputs","type":{"kind":"struct","path":"aztec::context::inputs::private_context_inputs::PrivateContextInputs","fields":[{"name":"call_context","type":{"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"storage_contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"portal_contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"gas_left","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l1_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}},{"name":"side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"gas_settings","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::GasSettings","fields":[{"name":"da","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::DimensionGasSettings","fields":[{"name":"gas_limit","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"teardown_gas_limit","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"max_fee_per_gas","type":{"kind":"field"}}]}},{"name":"l1","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::DimensionGasSettings","fields":[{"name":"gas_limit","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"teardown_gas_limit","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"max_fee_per_gas","type":{"kind":"field"}}]}},{"name":"l2","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::DimensionGasSettings","fields":[{"name":"gas_limit","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"teardown_gas_limit","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"max_fee_per_gas","type":{"kind":"field"}}]}},{"name":"inclusion_fee","type":{"kind":"field"}}]}},{"name":"transaction_fee","type":{"kind":"field"}}]}},{"name":"historical_header","type":{"kind":"struct","path":"aztec::protocol_types::header::Header","fields":[{"name":"last_archive","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"content_commitment","type":{"kind":"struct","path":"aztec::protocol_types::content_commitment::ContentCommitment","fields":[{"name":"tx_tree_height","type":{"kind":"field"}},{"name":"txs_effects_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}]}},{"name":"state","type":{"kind":"struct","path":"aztec::protocol_types::state_reference::StateReference","fields":[{"name":"l1_to_l2_message_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"partial","type":{"kind":"struct","path":"aztec::protocol_types::partial_state_reference::PartialStateReference","fields":[{"name":"note_hash_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"nullifier_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"public_data_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}}]}},{"name":"global_variables","type":{"kind":"struct","path":"aztec::protocol_types::abis::global_variables::GlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"fee_recipient","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"gas_fees","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l1_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}}]}}]}},{"name":"private_global_variables","type":{"kind":"struct","path":"aztec::context::globals::private_global_variables::PrivateGlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}}]}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}]},"visibility":"private"},{"name":"amount0","type":{"kind":"field"},"visibility":"private"},{"name":"amount1","type":{"kind":"field"},"visibility":"private"},{"name":"nonce0","type":{"kind":"field"},"visibility":"private"},{"name":"nonce1","type":{"kind":"field"},"visibility":"private"},{"name":"secret_hash","type":{"kind":"field"},"visibility":"private"}],"param_witnesses":{"amount0":[{"start":47,"end":48}],"amount1":[{"start":48,"end":49}],"inputs":[{"start":0,"end":47}],"nonce0":[{"start":49,"end":50}],"nonce1":[{"start":50,"end":51}],"secret_hash":[{"start":51,"end":52}]},"return_type":{"abi_type":{"kind":"struct","path":"aztec::protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs","fields":[{"name":"call_context","type":{"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"storage_contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"portal_contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"gas_left","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l1_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}},{"name":"side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"gas_settings","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::GasSettings","fields":[{"name":"da","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::DimensionGasSettings","fields":[{"name":"gas_limit","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"teardown_gas_limit","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"max_fee_per_gas","type":{"kind":"field"}}]}},{"name":"l1","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::DimensionGasSettings","fields":[{"name":"gas_limit","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"teardown_gas_limit","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"max_fee_per_gas","type":{"kind":"field"}}]}},{"name":"l2","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::DimensionGasSettings","fields":[{"name":"gas_limit","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"teardown_gas_limit","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"max_fee_per_gas","type":{"kind":"field"}}]}},{"name":"inclusion_fee","type":{"kind":"field"}}]}},{"name":"transaction_fee","type":{"kind":"field"}}]}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"min_revertible_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"max_block_number","type":{"kind":"struct","path":"aztec::protocol_types::abis::max_block_number::MaxBlockNumber","fields":[{"name":"_opt","type":{"kind":"struct","path":"std::option::Option","fields":[{"name":"_is_some","type":{"kind":"boolean"}},{"name":"_value","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}},{"name":"note_hash_read_requests","type":{"kind":"array","length":32,"type":{"kind":"struct","path":"aztec::protocol_types::abis::side_effect::SideEffect","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"nullifier_read_requests","type":{"kind":"array","length":2,"type":{"kind":"struct","path":"aztec::protocol_types::abis::read_request::ReadRequest","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"nullifier_key_validation_requests","type":{"kind":"array","length":1,"type":{"kind":"struct","path":"aztec::protocol_types::abis::nullifier_key_validation_request::NullifierKeyValidationRequest","fields":[{"name":"public_key","type":{"kind":"struct","path":"aztec::protocol_types::grumpkin_point::GrumpkinPoint","fields":[{"name":"x","type":{"kind":"field"}},{"name":"y","type":{"kind":"field"}}]}},{"name":"secret_key","type":{"kind":"struct","path":"aztec::protocol_types::grumpkin_private_key::GrumpkinPrivateKey","fields":[{"name":"high","type":{"kind":"field"}},{"name":"low","type":{"kind":"field"}}]}}]}}},{"name":"new_note_hashes","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::abis::side_effect::SideEffect","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"new_nullifiers","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::abis::side_effect::SideEffectLinkedToNoteHash","fields":[{"name":"value","type":{"kind":"field"}},{"name":"note_hash","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"private_call_stack_hashes","type":{"kind":"array","length":4,"type":{"kind":"field"}}},{"name":"public_call_stack_hashes","type":{"kind":"array","length":4,"type":{"kind":"field"}}},{"name":"new_l2_to_l1_msgs","type":{"kind":"array","length":2,"type":{"kind":"struct","path":"aztec::protocol_types::messaging::l2_to_l1_message::L2ToL1Message","fields":[{"name":"recipient","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"content","type":{"kind":"field"}}]}}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"encrypted_logs_hash","type":{"kind":"field"}},{"name":"unencrypted_logs_hash","type":{"kind":"field"}},{"name":"encrypted_log_preimages_length","type":{"kind":"field"}},{"name":"unencrypted_log_preimages_length","type":{"kind":"field"}},{"name":"historical_header","type":{"kind":"struct","path":"aztec::protocol_types::header::Header","fields":[{"name":"last_archive","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"content_commitment","type":{"kind":"struct","path":"aztec::protocol_types::content_commitment::ContentCommitment","fields":[{"name":"tx_tree_height","type":{"kind":"field"}},{"name":"txs_effects_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}]}},{"name":"state","type":{"kind":"struct","path":"aztec::protocol_types::state_reference::StateReference","fields":[{"name":"l1_to_l2_message_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"partial","type":{"kind":"struct","path":"aztec::protocol_types::partial_state_reference::PartialStateReference","fields":[{"name":"note_hash_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"nullifier_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"public_data_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}}]}},{"name":"global_variables","type":{"kind":"struct","path":"aztec::protocol_types::abis::global_variables::GlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"fee_recipient","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"gas_fees","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l1_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}}]}}]}},{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}}]},"visibility":"public"},"return_witnesses":[1314,1315,1316,1317,1318,1319,1320,1321,1322,1323,1324,1325,1326,1327,1328,1329,1330,1331,1332,1333,1334,1335,1336,1337,1338,1339,1340,1341,1342,1343,1344,1345,1346,1347,1348,1349,1350,1351,1352,1353,1354,1355,1356,1357,1358,1359,1360,1361,1362,1363,1364,1365,1366,1367,1368,1369,1370,1371,1372,1373,1374,1375,1376,1377,1378,1379,1380,1381,1382,1383,1384,1385,1386,1387,1388,1389,1390,1391,1392,1393,1394,1395,1396,1397,1398,1399,1400,1401,1402,1403,1404,1405,1406,1407,1408,1409,1410,1411,1412,1413,1414,1415,1416,1417,1418,1419,1420,1421,1422,1423,1424,1425,1426,1427,1428,1429,1430,1431,1432,1433,1434,1435,1436,1437,1438,1439,1440,1441,1442,1443,1444,1445,1446,1447,1448,1449,1450,1451,1452,1453,1454,1455,1456,1457,1458,1459,1460,1461,1462,1463,1464,1465,1466,1467,1468,1469,1470,1471,1472,1473,1474,1475,1476,1477,1478,1479,1480,1481,1482,1483,1484,1485,1486,1487,1488,1489,1490,1491,1492,1493,1494,1495,1496,1497,1498,1499,1500,1501,1502,1503,1504,1505,1506,1507,1508,1509,1510,1511,1512,1513,1514,1515,1516,1517,1518,1519,1520,1521,1522,1523,1524,1525,1526,1527,1528,1529,1530,1531,1532,1533,1534]},"bytecode":"","debug_symbols":"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9TNNNsw0WRI82eePw8PecyhZDRyagGQ1cGgCktXAoQlIVgOHJiBZDRyZAElWA4cmIFkNHOixCSR5hT80Acmr9qEJiFmJv4ckZm39HlKD1ZLvtzB4H/2bId3E0v1fjrQzpCxvSKXvkBp/TdLA/ebK4Tdwv7l0+E738L3u4Qfdwyfdw4+6h590Dz/rHr7uVTfqXnWT7lU36V51k+5VN+ledRt43lw6fN2rbtK96ibdq27Sveom3atu1r3qZt2rbta96mbdq24Lb54rh6971c26V92se9XNulfdrHvVLbpX3aJ71S26V92ie9Vt4c1z5fB1r7pF96pbdK+6RfeqW3Svuqx71WXdqy7rXnVZ96rbwpvnyuHrXnVZ96rLuldd1r3qsupVlxbVqy4tqlddWlSvurSoXnVpUb3q0qJ61aVF9apLi+pVlxbVqy4tulddp3vVdbpXXad71XW6V90WvlRXDl/3qut0r7pO96rrdK+6Tveq63Wvul73qut1r7pe96rbwpfqyuHrXnW97lXX6151ve5V1+tedYPuVTfoXnWD7lU36F51W/g/XTl83atu0L3qBt2rbtC96gbdqy7pXnVJ96pLuldd0r3qtvB6unL4uldd0r3qku5VV7c3Fen2piLd3lSk25uKdHtTkW5vKtLtTUW6valItzcV6famIt3eVKTbm4p0e1ORbm8q0u1NRbq9qUi3NxXp9qYi3d5UpNubinR7U5FubyrS7U1Fur2pSLc3Fen2piLd3lSk25uKdHtTkW5vKtLtTUW6valItzcV6famIt3eVKTbm4p0e1ORbm8q0u1NRbq9qUi3NxXp9qYi3d5UpNubinR7U5FubyrS7U1Fur2pSLc3Fen2piLd3lSk25sq6vamirq9qaJub6qo25sqLqpX3ajbmyrq9qaKur2pom5vqqjbmyrq9qaKur2pom5vqqjbmyrq9qaKur2pom5vqqjbmyrq9qaKur2pom5vqqjbmyrq9qaKur2pom5vqqjbmyrq9qaKur2pom5vqqjbmyrq9qaKur2pom5vqqjbmyrq9qaKur2pom5vqqjbmyrq9qaKur2pom5vqqjbmyrq9qaKur2pom5vqqjbmyrq9qaKur2pom5vqqjbmyrq9qaKur2pom5vqqjbmyrq9qaKur2pom5vqqjbmyrq9qaKur2pom5vqqjbmyrq9qaKur2pom5vqqjbmyrq9qaKur2pom5vqqjbmyrq9qaKur2pom5vqqjbmyrq9qaKur2pom5vqqjbmyrq9qaKur2pom5vqqjbmyrq9qaKur2pom5vqqjbmyrq9qaKur2pom5vqqjbmyrq9qaKur2pom5vqqjbmyrq9qaKur2pom5vqqjbmyrq9qaKur2pkm5vqqTbmyrp9qZKur2p0qJ61U26vamSbm+qpNubKun2pkq6vamSbm+qpNubKun2pkq6vamSbm+qpNubKun2pkq6vamSbm+qpNubKun2pkq6vamSbm+qpNubKun2pkq6vamSbm+qpNubKun2pkq6vamSbm+qpNubKun2pkq6vamSbm+qpNubKun2pkq6vamSbm+qpNubKun2pkq6vamSbm+qpNubKun2pkq6vamSbm+qpNubKun2pkq6vamSbm+qpNubKun2pkq6vamSbm+qpNubKun2pkq6vamSbm+qpNubKun2pkq6vamSbm+qpNubKun2pkq6vamSbm+qpNubKun2pkq6vamSbm+qpNubKun2pkq6vamSbm+qpNubKun2pkq6vamSbm+qpNubKun2pkq6vamSbm+qpNubKun2pkq6vamSbm+qpNubKun2pkq6vamSbm+qpNubKun2pkq6vamSbm+qpNubKun2pkq6vamSbm+qpNubKuv2psq6vamybm+qrNubKi+qV92s25sq6/amyrq9qbJub6qs25sq6/amyrq9qbJub6qs25sq6/amyrq9qbJub6qs25sq6/amyrq9qbJub6qs25sq6/amyrq9qbJub6qs25sq6/amyrq9qbJub6qs25sq6/amyrq9qbJub6qs25sq6/amyrq9qbJub6qs25sq6/amyrq9qbJub6qs25sq6/amyrq9qbJub6qs25sq6/amyrq9qbJub6qs25sq6/amyrq9qbJub6qs25sq6/amyrq9qbJub6qs25sq6/amyrq9qbJub6qs25sq6/amyrq9qbJub6qs25sq6/amyrq9qbJub6qs25sq6/amyrq9qbJub6qs25sq6/amyrq9qbJub6qs25sq6/amyrq9qbJub6qs25sq6/amyrq9qbJub6qs25sq6/amyrq9qbJub6qs25sq6/amyrq9qbJub6qs25sq6/amyrq9qbJub6qs25sq6/amyrq9qYpub6qi25uq6PamKrq9qcqietUtur2pim5vqqLbm6ro9qYqur2pim5vqqLbm6ro9qYqur2pim5vqqLbm6ro9qYqur2pim5vqqLbm6ro9qYqur2pim5vqqLbm6ro9qYqur2pim5vqqLbm6ro9qYqur2pim5vqqLbm6ro9qYqur2pim5vqqLbm6ro9qYqur2pim5vqqLbm6ro9qYqur2pim5vqqLbm6ro9qYqur2pim5vqqLbm6ro9qYqur2pim5vqqLbm6ro9qYqur2pim5vqqLbm6ro9qYqur2pim5vqqLbm6ro9qYqur2pim5vqqLbm6ro9qYqur2pim5vqqLbm6ro9qYqur2pim5vqqLbm6ro9qYqur2pim5vqqLbm6ro9qYqur2pim5vqqLbm6ro9qYqur2pim5vqqLbm6ro9qYqur2pim5vqqLbm6ro9qYqur2pim5vqqLbm6ro9qYqur2pim5vqqLbm6ro9qYqur2pim5vqqLbm4p1e1Oxbm8q1u1Nxbq9qXhRveqybm8q1u1Nxbq9qVi3NxXr9qZi3d5UrNubinV7U7FubyrW7U3Fur2pWLc3Fev2pmLd3lSs25uKdXtTsW5vKtbtTcW6valYtzcV6/amYt3eVKzbm4p1e1Oxbm8q1u1Nxbq9qVi3NxXr9qZi3d5UrNubinV7U7FubyrW7U3Fur2pWLc3Fev2pmLd3lSs25uKdXtTsW5vKtbtTcW6valYtzcV6/amYt3eVKzbm4p1e1Oxbm8q1u1Nxbq9qVi3NxXr9qZi3d5UrNubinV7U7FubyrW7U3Fur2pWLc3Fev2pmLd3lSs25uKdXtTsW5vKtbtTcW6valYtzcV6/amYt3eVKzbm4p1e1Oxbm8q1u1Nxbq9qVi3NxXr9qZi3d5UrNubinV7U7FubyrW7U3Fur2pWLc3Fev2pmLd3lSs25uKdXtTsW5vKtbtTcW6valYtzcV6/amYt3eVKzbm8otus2pbuNXve7exq964b2NX/XKexu/6qX3Nn7Va+9t/KoX39v4Va++t/GrXn5v41e+/uq2qbqNX/n6q9uo6jZ+5euvbquq2/iVr7+6zapu41e+/uq2q7qNX/n6q9uw6jY65euvbsuq2+iUr7+6Tatuo1O+/uq2rbqNTvn6q9u46jY65euvbuuq2/iVr7+6zatu41e+/uq2r7qNX/n6q9vA6jZ+5euvbgur2/iVr7+6Taxu41e+/uq2sbqNX/n6q9vI6jZ+5euvbiur2/iVr7+6zaxu41e+/uq2s7qNX/n6q9vQ6jZ+5euvbkur2/iVr7+6Ta1u41e+/uq2tbqNX/n6q9vY6jZ+5euvbmur2/iVr7+6za1u41e+/uq2t7qNX/n6q9vg6jZ+5euvbour2/iVr7+6Ta5u41e+/uq2ubqNX/n6q9vo6jZ+5euvbqur2/iVr7+6za5u41e+/uq2u7qNX/n6q9vw6jZ+5euvbsur2/iVr7+6Ta9u41e+/uq2vbqNX/n6q9v46jZ+5euvbuur2/iVr7+6za9u41e+/uq2v7qNX/f665T7Xznl/ldOuf+VU+5/5Rbd669T7n/llPtfOeX+V065/5VT7n/llPtfOeX+V065/5VT7n/llPtfOeX+V065/5VT7n/llPtfOeX+V065/5VT7n/llPtfOeX+V065/5VT7n/llPtfOeX+V065/5VT7n/llPtfOeX+V065/5VT7n/llPtfOeX+V065/5VT7n/llPtfOeX+V065/5VT7n/llPtfOeX+V065/5VT7n/llPtfOeX+V065/5VT7n/llPtfOeX+V065/5VT7n/llPtfOeX+V065/5VT7n/llPtfOeX+V065/5VT7n/llPtfOeX+V065/5VT7n/llPtfOeX+V065/5VT7n/llPtfOeX+V065/5VT7n/llPtfOeX+V065/5VT7n/llPtfOeX+V065/5VT7n/llPtfOeX+V065/5VT7n/llPtfOeX+V065/5VT7n/llPtfOeX+V065/5VT7n/llPtfOeX+V065/5VT7n/llPtfOeX+V165/5VX7n/llftfeeX+V37Rvf565f5XXrn/lVfuf+WV+1955f5XXrn/lVfuf+WV+1955f5XXrn/lVfuf+WV+1955f5XXrn/lVfuf+WV+1955f5XXrn/lVfuf+WV+1955f5XXrn/lVfuf+WV+1955f5XXrn/lVfuf+WV+1955f5XXrn/lVfuf+WV+1955f5XXrn/lVfuf+WV+1955f5XXrn/lVfuf+WV+1955f5XXrn/lVfuf+WV+1955f5XXrn/lVfuf+WV+195yf5Lgd2fvw28O37B7/9D4xf8/qHlPgpyaWf8kv1/Do1f8Pvn0PgFv38OjV+w/j80flI+fsHvf0rxPv7i9sYv+P1/aPyC9f+h8QvW/4fG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"},{"name":"get_admin","is_unconstrained":true,"custom_attributes":[],"abi":{"parameters":[],"param_witnesses":{},"return_type":{"abi_type":{"kind":"field"},"visibility":"public"},"return_witnesses":[0]},"bytecode":"H4sIAAAAAAAA/72UTU7DMBCFnT83JSqCJYJF2LNwJQ5grsANghIQm0ZKWwkuH4GRh35yvKvhSdGMx2PP8/M4mToh87aIxAQP3taIWf85mHPwaLbabVKqKFbfX+X9Bnm5j10jloGnzM+peBqzvVRLjWpoZxPWCu/Awi+gR5jXYD5HLA/WOl3vMV9F1uhIPfF5J3J1OrKWOlU4i/W+OQ8/OrGWxVjqbcBD/wMftrLFuELtVfraplanN5r6TGucwYK/1CuRc+ftlVqCewlP9qTDBlpJbhPRkX1dIp9vMuX7d/tq8E61L89GnVSgk+Cve/jCa+uwP4xT9zY8D12fgVoZ0KQl9RnjHHH6RSQ2w/J3InVdTNol1g78FYXttVZLeZO+lULFkUV8xm69vfH2aZq6z/Z91w8f7Xg8tONr+zIed/3+d8UXdqw6UsoHAAA=","debug_symbols":"zZfNqsIwEIXfJetyyUym+emrXO4iVysUShVbBSl9d1OsdaEgFpWzy5BzMh8DOTC9qrer2FXbplVFr/RProrfXrW72Ix128V9pwrRwWaqbNbpSGSHTG2qukyFH7I7MRsfJjEL61lMJA/UxvH8spm1noa/LNFYKBoHReOhaAIUDWksHMLCYSwcg4UjWDhYiUxYkUxYmUxYoUxYqcxYqcyfTeVLD/5Cjzfkpxg998j5yViJgkxqYn0bLGs3EQkcUQ5HZOGIHByRhyMKaETm4e9n6yaX0XKXfEYWePIFHrvA4xZ4/GueVBzjvor/dTmuvePdoVldt+BUdqfd5WY4Aw=="},{"name":"get_token1","is_unconstrained":true,"custom_attributes":[],"abi":{"parameters":[],"param_witnesses":{},"return_type":{"abi_type":{"kind":"field"},"visibility":"public"},"return_witnesses":[0]},"bytecode":"H4sIAAAAAAAA/72UTU7DMBCFnd+mREWwRLAIexaO4ADmCtwgKAGxaaS0leDyERh56CfHu5o+KZrxeOx5fh4nUUckzmaBmODB2Qox4z4LfQqedFvaTXIVxOrnK5xfIy91sWvEEvCU+TkWT60fL9VSowramXi1Wv8ODPwMevh5NeZTxFJvrdX1HvNFYE0ZqCc+70SurgyspU4FzmKcr0/Dr06sZTCWehvwKM/Ah61sMC5QexW/tq7U8Y3GPtMaZzDgL/Vy5Nw5e6WW4F7Ckz1psYFWklsHdGRf58jnm4z4/lu7bwnesfbl2aiT8nQS/HcPXzhtLXb7cereh5eh6xNQyz2atKQ+Y5wiTj8LxGZY/k6kro1Ju4Tagb8iv73Wailv1LeSqTCSgM/YrbM3zj5PU/fVfGz74bMZD/tmfGtex8O23/2t+AbXU+RoygcAAA==","debug_symbols":"zZfNCsIwEITfJeci2c1v+yriIWqFQqliqyCl726KbT1YEIvK3LJkJvuxkIFtRXnchaY4VrXIWiFXRmTrVtSnUPV13YRzIzLNqU1EXu3jUbHuEnEoyjwWvktexExOD2JmaSYxyTm1cjy+TGrSeuo2SaSxUDQOisZD0aRQNCSxcAgLh7FwFBaOxsLBSmTCimTCymTCCmXCSmXGSmX+bSo/evAfenwhP5nM1EO5N2MlSkciYvkcLEs3EGk4IgNHZOGIHByRhyNK0YjU7O9n6waXkvol+ZRe4DELPHaBxy3w+M88sbiGcxG2Zd6vvf3dpdqNW3Asm9vpcdPdAQ=="},{"name":"get_token0","is_unconstrained":true,"custom_attributes":[],"abi":{"parameters":[],"param_witnesses":{},"return_type":{"abi_type":{"kind":"field"},"visibility":"public"},"return_witnesses":[0]},"bytecode":"H4sIAAAAAAAA/72UTU7DMBCFnd+mREWwRLAIexYO4gDmCtwgKAGxaaS0leDyERh56CfHu5o+KZrxeOx5fh4nUUckzmaBmODB2Qox4z4LfQqedFvaTXIVxOrnK5xfIy91sWvEEvCU+TkWT60fL9VSowramXi1Wv8ODPwMevh5NeZTxFJvrdX1HvNFYE0ZqCc+70SurgyspU4FzmKcr0/Dr06sZTCWehvwKM/Ah61sMC5QexW/tq7U8Y3GPtMaZzDgL/Vy5Nw5e6WW4F7Ckz1psYFWklsHdGRf58jnm4z4/lu7bwnesfbl2aiT8nQS/HcPXzhtLXb7cereh5eh6xNQyz2atKQ+Y5wiTj8LxGZY/k6kro1Ju4Tagb8iv73Wailv1LeSqTCSgM/YrbM3zj5PU/fVfGz74bMZD/tmfGtex8O23/2t+AYnrzOYygcAAA==","debug_symbols":"zZfNCsIwEITfJeci2U3SpH0V8RC1QqFUsVWQ0nc3pT8eWhCLytyyZCb7sZCBbURxPvg6P5eVSBshN0ak20ZUF192dVX7ay1STQlHIiuP4cgs20ic8iILhWujmZjJ6kEctGYSk1xSKzu9TGrSOmp3UaCJoWgsFI2DokmgaEhi4RAWDmPhKCwcjYWDlciEFcmElcmEFcqElcqMlcr821Tue/AfenwhP5nM1EPZN2MlSkYiYvkaLEs7EGk4IgNHFMMRWTgiB0eUoBGpxd/PsR1cSupZ8im9wmNWeOIVHrvC4z7zhOLur7nfF1m39nZ3t/IwbsGhrB+X/qZ9Ag=="},{"name":"compute_note_hash_and_nullifier","is_unconstrained":true,"custom_attributes":[],"abi":{"parameters":[{"name":"contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]},"visibility":"private"},{"name":"nonce","type":{"kind":"field"},"visibility":"private"},{"name":"storage_slot","type":{"kind":"field"},"visibility":"private"},{"name":"note_type_id","type":{"kind":"field"},"visibility":"private"},{"name":"serialized_note","type":{"kind":"array","length":20,"type":{"kind":"field"}},"visibility":"private"}],"param_witnesses":{"contract_address":[{"start":0,"end":1}],"nonce":[{"start":1,"end":2}],"note_type_id":[{"start":3,"end":4}],"serialized_note":[{"start":4,"end":24}],"storage_slot":[{"start":2,"end":3}]},"return_type":{"abi_type":{"kind":"array","length":4,"type":{"kind":"field"}},"visibility":"public"},"return_witnesses":[24,25,26,27]},"bytecode":"H4sIAAAAAAAA/+2ZyXLbMAyGSUnWYsfK5sRLuu9HKXbS9qZb36Od9v2foFODIUYw3fTSHwfMhDMaUxT18yNAUiDt3UO62V8+5vP9NXHHiZ8P8bf7v9QDtTpNTm+EMzPCmQM5iW3hdMdpoWBXNOPEAGNpgLEywFgbYGwMME4NMM4MMJ4YYJwbYGwNMJ4aYDwzwHhugPHCAOOlAcaFAcYrA4zXBhiXQEYvGIuYX+2v9f7auIc9+/dYXrsxDSiGXf+DYnZufOUOE8UmGd8UY1nO3KKM+TNRxmcMeTH2oYT3oduRboXWjbEZ270UNikTn1DbG1FWwPvYf6mFPWG6nZrtwthm+/DetRL3bKsm5oFnML1s28erEW266CPOr0Vdrsf2yISPKVGcyf5v/vFekbzXijrlX/o/OGz/q4SnSpgnkYkSxSqrYrRLyoY8HyPdKV73wOdF4pOpKOc630Q/ncgPEJ67MK88XPc+rAMZXvcraeVw3c/bOhlTGN3bTq6HQDts5TcKqPtLrrNA3Z+1G8cw0G87Of+Burdy/gPtEM7MZkrj4UTJvnOledHi7RB4T5XmxRle9460zvF+C+PhQslvl3g7hPVhoeS3K6V5ca1k3yWeN4yzldI4WyvNi42SfW/wdgi6z/C64Tv0HG/fEEe9wPPek9ZLPG/4br7C84Z5/Fpp/L5RGr9v8bxh/X2H1w3r73slv31Q8ttHPO+WYwdKn4Q+x2wDrK1uJ8+DOPnkfhB5GTfO8Dy9Uj87GZv+BuqSrdrEVnViq1bUkfFxq2A/L9plbclB6Yn5ifkx5pk7nONcJp/zb5b0RZ6jc/3GHa8n0A5xg/Kg30c4ekYHNXSoQgcglRsPAaeis/MITJtBWnxpk0UbItq80EaDNgUUwC9FG4/9uXGU/gAif8QsrigAAA==","debug_symbols":"ndZBCoNADEDRu2QtxTpJql6ldDG1FgRRUVso4t2rlB7Av5tM+Lu3yCJtX8W56btJykXSU+ZSXheZhtjtH9Mcx1nKLLdE6u6xvYp0TeTZtLWUmq+3ZG8uoMlBUxxvQgqaM2gy0ATQKGgMNMBBAA4CcBCAAwUOFDhQ4ECBAwUOFDhQ4ECBAwUOFDgw4MCAAwMODDgw4MCAAwMODDgw4MCAAwcOHDhw4MCBAwcOHDhw4MCBAwcOHDi4HHSwDe84NvHe1vvFtO9eXfU/oLZx/gy/zfoF"},{"name":"constructor","is_unconstrained":false,"custom_attributes":["aztec(private)","aztec(initializer)"],"abi":{"parameters":[{"name":"inputs","type":{"kind":"struct","path":"aztec::context::inputs::private_context_inputs::PrivateContextInputs","fields":[{"name":"call_context","type":{"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"storage_contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"portal_contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"gas_left","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l1_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}},{"name":"side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"gas_settings","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::GasSettings","fields":[{"name":"da","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::DimensionGasSettings","fields":[{"name":"gas_limit","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"teardown_gas_limit","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"max_fee_per_gas","type":{"kind":"field"}}]}},{"name":"l1","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::DimensionGasSettings","fields":[{"name":"gas_limit","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"teardown_gas_limit","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"max_fee_per_gas","type":{"kind":"field"}}]}},{"name":"l2","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::DimensionGasSettings","fields":[{"name":"gas_limit","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"teardown_gas_limit","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"max_fee_per_gas","type":{"kind":"field"}}]}},{"name":"inclusion_fee","type":{"kind":"field"}}]}},{"name":"transaction_fee","type":{"kind":"field"}}]}},{"name":"historical_header","type":{"kind":"struct","path":"aztec::protocol_types::header::Header","fields":[{"name":"last_archive","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"content_commitment","type":{"kind":"struct","path":"aztec::protocol_types::content_commitment::ContentCommitment","fields":[{"name":"tx_tree_height","type":{"kind":"field"}},{"name":"txs_effects_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}]}},{"name":"state","type":{"kind":"struct","path":"aztec::protocol_types::state_reference::StateReference","fields":[{"name":"l1_to_l2_message_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"partial","type":{"kind":"struct","path":"aztec::protocol_types::partial_state_reference::PartialStateReference","fields":[{"name":"note_hash_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"nullifier_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"public_data_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}}]}},{"name":"global_variables","type":{"kind":"struct","path":"aztec::protocol_types::abis::global_variables::GlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"fee_recipient","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"gas_fees","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l1_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}}]}}]}},{"name":"private_global_variables","type":{"kind":"struct","path":"aztec::context::globals::private_global_variables::PrivateGlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}}]}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}]},"visibility":"private"},{"name":"admin","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]},"visibility":"private"},{"name":"token0","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]},"visibility":"private"},{"name":"token1","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]},"visibility":"private"}],"param_witnesses":{"admin":[{"start":47,"end":48}],"inputs":[{"start":0,"end":47}],"token0":[{"start":48,"end":49}],"token1":[{"start":49,"end":50}]},"return_type":{"abi_type":{"kind":"struct","path":"aztec::protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs","fields":[{"name":"call_context","type":{"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"storage_contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"portal_contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"gas_left","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l1_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}},{"name":"side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"gas_settings","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::GasSettings","fields":[{"name":"da","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::DimensionGasSettings","fields":[{"name":"gas_limit","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"teardown_gas_limit","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"max_fee_per_gas","type":{"kind":"field"}}]}},{"name":"l1","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::DimensionGasSettings","fields":[{"name":"gas_limit","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"teardown_gas_limit","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"max_fee_per_gas","type":{"kind":"field"}}]}},{"name":"l2","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::DimensionGasSettings","fields":[{"name":"gas_limit","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"teardown_gas_limit","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"max_fee_per_gas","type":{"kind":"field"}}]}},{"name":"inclusion_fee","type":{"kind":"field"}}]}},{"name":"transaction_fee","type":{"kind":"field"}}]}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"min_revertible_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"max_block_number","type":{"kind":"struct","path":"aztec::protocol_types::abis::max_block_number::MaxBlockNumber","fields":[{"name":"_opt","type":{"kind":"struct","path":"std::option::Option","fields":[{"name":"_is_some","type":{"kind":"boolean"}},{"name":"_value","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}},{"name":"note_hash_read_requests","type":{"kind":"array","length":32,"type":{"kind":"struct","path":"aztec::protocol_types::abis::side_effect::SideEffect","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"nullifier_read_requests","type":{"kind":"array","length":2,"type":{"kind":"struct","path":"aztec::protocol_types::abis::read_request::ReadRequest","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"nullifier_key_validation_requests","type":{"kind":"array","length":1,"type":{"kind":"struct","path":"aztec::protocol_types::abis::nullifier_key_validation_request::NullifierKeyValidationRequest","fields":[{"name":"public_key","type":{"kind":"struct","path":"aztec::protocol_types::grumpkin_point::GrumpkinPoint","fields":[{"name":"x","type":{"kind":"field"}},{"name":"y","type":{"kind":"field"}}]}},{"name":"secret_key","type":{"kind":"struct","path":"aztec::protocol_types::grumpkin_private_key::GrumpkinPrivateKey","fields":[{"name":"high","type":{"kind":"field"}},{"name":"low","type":{"kind":"field"}}]}}]}}},{"name":"new_note_hashes","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::abis::side_effect::SideEffect","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"new_nullifiers","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::abis::side_effect::SideEffectLinkedToNoteHash","fields":[{"name":"value","type":{"kind":"field"}},{"name":"note_hash","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"private_call_stack_hashes","type":{"kind":"array","length":4,"type":{"kind":"field"}}},{"name":"public_call_stack_hashes","type":{"kind":"array","length":4,"type":{"kind":"field"}}},{"name":"new_l2_to_l1_msgs","type":{"kind":"array","length":2,"type":{"kind":"struct","path":"aztec::protocol_types::messaging::l2_to_l1_message::L2ToL1Message","fields":[{"name":"recipient","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"content","type":{"kind":"field"}}]}}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"encrypted_logs_hash","type":{"kind":"field"}},{"name":"unencrypted_logs_hash","type":{"kind":"field"}},{"name":"encrypted_log_preimages_length","type":{"kind":"field"}},{"name":"unencrypted_log_preimages_length","type":{"kind":"field"}},{"name":"historical_header","type":{"kind":"struct","path":"aztec::protocol_types::header::Header","fields":[{"name":"last_archive","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"content_commitment","type":{"kind":"struct","path":"aztec::protocol_types::content_commitment::ContentCommitment","fields":[{"name":"tx_tree_height","type":{"kind":"field"}},{"name":"txs_effects_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}]}},{"name":"state","type":{"kind":"struct","path":"aztec::protocol_types::state_reference::StateReference","fields":[{"name":"l1_to_l2_message_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"partial","type":{"kind":"struct","path":"aztec::protocol_types::partial_state_reference::PartialStateReference","fields":[{"name":"note_hash_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"nullifier_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"public_data_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}}]}},{"name":"global_variables","type":{"kind":"struct","path":"aztec::protocol_types::abis::global_variables::GlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"fee_recipient","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"gas_fees","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l1_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}}]}}]}},{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}}]},"visibility":"public"},"return_witnesses":[195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,376,377,378,379,380,381,382,383,384,385,386,387,388,389,390,391,392,393,394,395,396,397,398,399,400,401,402,403,404,405,406,407,408,409,410,411,412,413,414,415]},"bytecode":"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","debug_symbols":"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"},{"name":"add_liquidity","is_unconstrained":true,"custom_attributes":["aztec(public)"],"abi":{"parameters":[{"name":"inputs","type":{"kind":"struct","path":"aztec::context::inputs::public_context_inputs::PublicContextInputs","fields":[{"name":"call_context","type":{"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"storage_contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"portal_contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"gas_left","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l1_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}},{"name":"side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"gas_settings","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::GasSettings","fields":[{"name":"da","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::DimensionGasSettings","fields":[{"name":"gas_limit","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"teardown_gas_limit","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"max_fee_per_gas","type":{"kind":"field"}}]}},{"name":"l1","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::DimensionGasSettings","fields":[{"name":"gas_limit","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"teardown_gas_limit","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"max_fee_per_gas","type":{"kind":"field"}}]}},{"name":"l2","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::DimensionGasSettings","fields":[{"name":"gas_limit","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"teardown_gas_limit","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"max_fee_per_gas","type":{"kind":"field"}}]}},{"name":"inclusion_fee","type":{"kind":"field"}}]}},{"name":"transaction_fee","type":{"kind":"field"}}]}},{"name":"historical_header","type":{"kind":"struct","path":"aztec::protocol_types::header::Header","fields":[{"name":"last_archive","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"content_commitment","type":{"kind":"struct","path":"aztec::protocol_types::content_commitment::ContentCommitment","fields":[{"name":"tx_tree_height","type":{"kind":"field"}},{"name":"txs_effects_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}]}},{"name":"state","type":{"kind":"struct","path":"aztec::protocol_types::state_reference::StateReference","fields":[{"name":"l1_to_l2_message_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"partial","type":{"kind":"struct","path":"aztec::protocol_types::partial_state_reference::PartialStateReference","fields":[{"name":"note_hash_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"nullifier_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"public_data_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}}]}},{"name":"global_variables","type":{"kind":"struct","path":"aztec::protocol_types::abis::global_variables::GlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"fee_recipient","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"gas_fees","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l1_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}}]}}]}},{"name":"public_global_variables","type":{"kind":"struct","path":"aztec::protocol_types::abis::global_variables::GlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"fee_recipient","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"gas_fees","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l1_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}}]}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}]},"visibility":"private"},{"name":"token0","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]},"visibility":"private"},{"name":"amount","type":{"kind":"field"},"visibility":"private"},{"name":"nonce","type":{"kind":"field"},"visibility":"private"}],"param_witnesses":{"amount":[{"start":55,"end":56}],"inputs":[{"start":0,"end":54}],"nonce":[{"start":56,"end":57}],"token0":[{"start":54,"end":55}]},"return_type":{"abi_type":{"kind":"struct","path":"aztec::protocol_types::abis::public_circuit_public_inputs::PublicCircuitPublicInputs","fields":[{"name":"call_context","type":{"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"storage_contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"portal_contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"gas_left","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l1_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}},{"name":"side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"gas_settings","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::GasSettings","fields":[{"name":"da","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::DimensionGasSettings","fields":[{"name":"gas_limit","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"teardown_gas_limit","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"max_fee_per_gas","type":{"kind":"field"}}]}},{"name":"l1","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::DimensionGasSettings","fields":[{"name":"gas_limit","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"teardown_gas_limit","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"max_fee_per_gas","type":{"kind":"field"}}]}},{"name":"l2","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::DimensionGasSettings","fields":[{"name":"gas_limit","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"teardown_gas_limit","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"max_fee_per_gas","type":{"kind":"field"}}]}},{"name":"inclusion_fee","type":{"kind":"field"}}]}},{"name":"transaction_fee","type":{"kind":"field"}}]}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"nullifier_read_requests","type":{"kind":"array","length":2,"type":{"kind":"struct","path":"aztec::protocol_types::abis::read_request::ReadRequest","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"nullifier_non_existent_read_requests","type":{"kind":"array","length":2,"type":{"kind":"struct","path":"aztec::protocol_types::abis::read_request::ReadRequest","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"contract_storage_update_requests","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::contrakt::storage_update_request::StorageUpdateRequest","fields":[{"name":"storage_slot","type":{"kind":"field"}},{"name":"new_value","type":{"kind":"field"}}]}}},{"name":"contract_storage_reads","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::contrakt::storage_read::StorageRead","fields":[{"name":"storage_slot","type":{"kind":"field"}},{"name":"current_value","type":{"kind":"field"}}]}}},{"name":"public_call_stack_hashes","type":{"kind":"array","length":4,"type":{"kind":"field"}}},{"name":"new_note_hashes","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::abis::side_effect::SideEffect","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"new_nullifiers","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::abis::side_effect::SideEffectLinkedToNoteHash","fields":[{"name":"value","type":{"kind":"field"}},{"name":"note_hash","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"new_l2_to_l1_msgs","type":{"kind":"array","length":2,"type":{"kind":"struct","path":"aztec::protocol_types::messaging::l2_to_l1_message::L2ToL1Message","fields":[{"name":"recipient","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"content","type":{"kind":"field"}}]}}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"unencrypted_logs_hash","type":{"kind":"field"}},{"name":"unencrypted_log_preimages_length","type":{"kind":"field"}},{"name":"historical_header","type":{"kind":"struct","path":"aztec::protocol_types::header::Header","fields":[{"name":"last_archive","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"content_commitment","type":{"kind":"struct","path":"aztec::protocol_types::content_commitment::ContentCommitment","fields":[{"name":"tx_tree_height","type":{"kind":"field"}},{"name":"txs_effects_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}]}},{"name":"state","type":{"kind":"struct","path":"aztec::protocol_types::state_reference::StateReference","fields":[{"name":"l1_to_l2_message_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"partial","type":{"kind":"struct","path":"aztec::protocol_types::partial_state_reference::PartialStateReference","fields":[{"name":"note_hash_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"nullifier_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"public_data_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}}]}},{"name":"global_variables","type":{"kind":"struct","path":"aztec::protocol_types::abis::global_variables::GlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"fee_recipient","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"gas_fees","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l1_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}}]}}]}},{"name":"prover_address","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"revert_code","type":{"kind":"integer","sign":"unsigned","width":8}},{"name":"gas_left","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l1_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]},"visibility":"public"},"return_witnesses":[57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271]},"bytecode":"","debug_symbols":"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4uuTFF+fpPj6JMXXJym+Pknx9UmKr09SfH2S4uuTFF+fpPj6JMXXJym+Pknx9UmKr09SfH2S4uuTFF+fpPj6JMXXJym+Pknx9UmKr2+k+PpGiq9vpPj6Roqvbxwr5S2a8hZLeYunvCVS3pIy+ym+vpHi6xspvr6R4usbKb6+keLrGym+vpHi6xspvr6R4usbKb6+keLrGym+vpHi6xspvr6R4usbKb6+keLrGym+vpHi6xspvr6R4usbKb6+keLrGym+vpHi6xspvr6R4usbKb6+keLrGym+vpHi6xspvr6R4usbKb6+keLrGym+vpHi6xspvr6R4usbKb6+keLrGym+vpHi6xspvr6R4usbKb6+keLrGym+vpHi6xspvr6R4usbKb6+keLrGym+vpHi6xspvr6R4usbKb6+keLrGym+vpHi6xspvr6R4usbKb6+keLrGym+vpHi6xspvr6R4usbKb6+keLrGym+vpHi6xspvr6R4usbKb6+keLrGym+vpHi6xspvr6R4usbKb6+keLrGym+vpHi6xspvr6R4usbKb6+keLrmym+vpni65spvr6Z4uubx0p5i6a8xVLe4ilviZS3pMx+iq9vpvj6Zoqvb6b4+maKr2+m+Ppmiq9vpvj6Zoqvb6b4+maKr2+m+Ppmiq9vpvj6Zoqvb6b4+maKr2+m+Ppmiq9vpvj6Zoqvb6b4+maKr2+m+Ppmiq9vpvj6Zoqvb6b4+maKr2+m+Ppmiq9vpvj6Zoqvb6b4+maKr2+m+Ppmiq9vpvj6Zoqvb6b4+maKr2+m+Ppmiq9vpvj6Zoqvb6b4+maKr2+m+Ppmiq9vpvj6Zoqvb6b4+maKr2+m+Ppmiq9vpvj6Zoqvb6b4+maKr2+m+Ppmiq9vpvj6Zoqvb6b4+maKr2+m+Ppmiq9vpvj6Zoqvb6b4+maKr2+m+Ppmiq9vpvj6Zoqvb6b4+maKr2+m+Ppmiq9vpvj6Zoqvb6b4+maKr2+m+Ppmiq9vpvj6Zoqvb6b4+maKr2+m+PpWiq9vpfj6Voqvb6X4+taxUt6iKW+xlLd4ylsi5S0ps5/i61spvr6V4utbKb6+leLrWym+vpXi61spvr6V4utbKb6+leLrWym+vpXi61spvr6V4utbKb6+leLrWym+vpXi61spvr6V4utbKb6+leLrWym+vpXi61spvr6V4utbKb6+leLrWym+vpXi61spvr6V4utbKb6+leLrWym+vpXi61spvr6V4utbKb6+leLrWym+vpXi61spvr6V4utbKb6+leLrWym+vpXi61spvr6V4utbKb6+leLrWym+vpXi61spvr6V4utbKb6+leLrWym+vpXi61spvr6V4utbKb6+leLrWym+vpXi61spvr6V4utbKb6+leLrWym+vpXi61spvr6V4utbKb6+leLrWym+vpXi61spvr6V4utbKb6+leLrWym+vpXi61spvr6V4utbKb6+leLrWym+Pk3x9WmKr09TfH2a4uvTY6W8RVPeYilv8ZS3RMpbUmY/xdenKb4+TfH1aYqvT1N8fZri69MUX5+m+Po0xdenKb4+TfH1aYqvT1N8fZri69MUX5+m+Po0xdenKb4+TfH1aYqvT1N8fZri69MUX5+m+Po0xdenKb4+TfH1aYqvT1N8fZri69MUX5+m+Po0xdenKb4+TfH1aYqvT1N8fZri69MUX5+m+Po0xdenKb4+TfH1aYqvT1N8fZri69MUX5+m+Po0xdenKb4+TfH1aYqvT1N8fZri69MUX5+m+Po0xdenKb4+TfH1aYqvT1N8fZri69MUX5+m+Po0xdenKb4+TfH1aYqvT1N8fZri69MUX5+m+Po0xdenKb4+TfH1aYqvT1N8fZri69MUX5+m+Po0xdenKb4+TfH1aYqvT1N8fZri69MUX5+m+Po0xdenKb4+S/H1WYqvz1J8fZbi67NjpbxFU95iKW/xlLdEyltSZj/F12cpvj5L8fVZiq/PUnx9luLrsxRfn6X4+izF12cpvj5L8fVZiq/PUnx9luLrsxRfn6X4+izF12cpvj5L8fVZiq/PUnx9luLrsxRfn6X4+izF12cpvj5L8fVZiq/PUnx9luLrsxRfn6X4+izF12cpvj5L8fVZiq/PUnx9luLrsxRfn6X4+izF12cpvj5L8fVZiq/PUnx9luLrsxRfn6X4+izF12d/zddnf+0tv3zvrzn1Pn5PfuP3xm/83vyN31u/8Xv6G79nv/F7/hu/F7/xe7/xnxf/jf+8+G/858V/4z8v/hv/efHf+M+L/8Z/Xv6Kk0nG/m7gv1UH98N++fD5x18/bPbjJZ7xksh4yU54yV9xMf3kl0jGS0bGS2bGS1bGSzTjJRkTHxkTHxkTHxkTvzMmfmdM/M6Y+J0x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KgdLlYOlypulypulypulypulypulypulypulypulypulyhulynqgVFkPlCrrgVJlPVCqrAdKlfVAqbIeKFXWA6XKeqBUWQ+WKgtLlYWlysJSZWGpsrBUWViqLCxVFpYqC0uVhaXKg6XKg6XKg6XKg6XKg6XKg6XKg6XKg6XKg6XKg6XKk6XKk6XKk6XKk6XKk6XKk6XKk6XKk6XKk6XKk6XKi6XKi6XKi6XKi6XKi6XKi6XKi6XKi6XKi6XKi6XKylJlZamyslRZWaqsqaossn398uHzz1t/fNzsm4+PZfpVxtp/waId3/KXtr8Sdc8/+n/69Fe32qpba9Wtt+o2WnW7O3WbS4X+4d1Kq25Hq25nq25Xq25b7VLWapeyVruUtdqlrNUu5a12KW+1S3mrXcpb7VK5HP0f3m2rXcpb7VLeapfyVruUt9qlotUuFa12qWi1S0WrXSo3/eIP77bVLhWtdqlotUtFq10qWu1Su9UutVvtUrvVLrVb7VK5mTV/eLetdqndapfarXap3WqX2p12KTs67VJ2dNql7Oi0S9nRaZeyY7XqttMuZUenXcqOTruUHZ12KTta7VLSapeSVruUtNqlpNUulZsP94d322qXkla7lLTapaTVLiWtdqnRapcarXap0WqXGq12qdxUxz+821a71Gi1S41Wu9RotUuNVrvUbLVLzVa71Gy1S81Wu1RuFusf3m2rXWq22qVmq11qttqlZqtdarXapVarXWq12qVWq10qN0H5D++21S61Wu1Sq9UutVrtUqvVLqWtdilttUtpq11KW+1SrXLPrVXuubXKPbdWuefWKvfcWuWeW6vcc2uVe26tcs+tVe65tco9t1a559Yq99xa5Z5bq9xza5V7bq1yz61V7rm1yj23Vrnn1ir33Frlnlur3HNrlXturXLPrVXuubXKPbdWuefWKvfcWuWeW6vcc2uVe26tcs+tVe65tco9t1a559Yq99xa5Z5bq9xza5V7bq1yz61V7rm1yj23Vrnn1ir33Frlnnur3HNvlXvurXLPvVXuuR+rVbeddilvlXvurXLPvVXuubfKPfdWuefeKvfcW+Wee6vcc2+Ve+6tcs+9Ve65t8o991a5594q99xb5Z57q9xzb5V77q1yz71V7rm3yj33Vrnn3ir33Fvlnnur3HNvlXvurXLPvVXuubfKPfdWuefeKvfcW+Wee6vcc2+Ve+6tcs+9Ve65t8o991a5594q99xb5Z57q9xzb5V77q1yz71V7rm3yj33Vrnn3ir33Fvlnnur3HNvlXvurXLPvVXuubfKPfdWuefeKvfcW+Wee6vcc2+Ve+6tcs+9Ve65t8o991a5594q99xb5Z57q9xzb5V77q1yz71V7rm3yj33Vrnn3ir33Fvlnnur3HNvlXvurXLPvVXuubfKPfdWuefeKvfcW+Wee6vcc2+Ve+6tcs+9Ve65t8o991a5594q99xb5Z57q9xzb5V77q1yz71V7rm3yj33Vrnn3ir3PFrlnker3PNolXserXLP41ituu20S0Wr3PNolXserXLPo1XuebTKPY9WuefRKvc8WuWeR6vc82iVex6tcs+jVe55tMo9j1a559Eq9zxa5Z5Hq9zzaJV7Hm/KPXf7KuT84/q22xftUhe6fdEudaHbF+1SF7p90S51odsX7VKfu31T7vmFbl+0S13o9kW71IVuX7RLXeh2teq21S71ptzzC9222qXelHt+odtWu9Sbcs8vdNtql3pT7vmFblvtUm/KPb/Qbatd6k255xe6bbVLvSn3/EK3rXapN+WeX+i21S71ptzzC9222qXelHt+odtWu9Sbcs8vdNtql3pT7vmFblvtUm/KPb/Qbatd6k255xe6bbVLvSn3/EK3rXapN+WeX+i21S71ptzzC9222qXelHt+odtWu9Sbcs8vdNtql3pT7vmFblvtUm/KPb/Qbatd6k255xe6bbVLvSn3/EK3rXapN+WeX+i21S71ptzzC9222qXelHt+odtWu9Sbcs8vdNtql3pT7vmFblvtUm/KPb/Qbatd6k255xe6bbVLvSn3/EK3rXapN+WeX+i20y6135R7fqHbTrvUflPu+YVuO+1S+1ituu20S+035Z5f6LbTLrXflHt+odtWu9Sbcs8vdNtql3pT7vmFblvtUm/KPb/Qbatd6k255xe6bbVLvSn3/EK3rXapN+WeX+i21S71ptzzC9222qVa5Z7vVrnnu1Xu+W6Ve75b5Z7vVrnnu1Xu+W6Ve75b5Z7vVrnnu1Xu+W6Ve75b5Z7vVrnnu1Xu+W6Ve75b5Z7vVrnnu1Xu+W6Ve75b5Z7vVrnnu1Xu+W6Ve75b5Z7vVrnnu1Xu+W6Ve75b5Z7vVrnnu1Xu+W6Ve75b5Z7vVrnnu1Xu+W6Ve75b5Z7vVrnnu1Xu+W6Ve75b5Z7vVrnnu1Xu+W6Ve75b5Z7vVrnnu1Xu+W6Ve75b5Z7vVrnnu1Xu+W6Ve75b5Z7vVrnnu1Xu+W6Ve75b5Z7vVrnnu1Xu+W6Ve75b5Z7vVrnnu1Xu+W6Ve75b5Z7vVrnnu1Xu+W6Ve75b5Z7vVrnnu1Xu+W6Ve75b5Z7vVrnnu1Xu+e6Ue65Hp9zzs9tGu9TZbaNd6uy20S51drtaddtolzq7bbRLnd022qXObhvtUme3rXapTrnnZ7etdqlOuednt612qU6552e3rXapTrnnZ7etdqlOuednt612qU6552e3rXapTrnnZ7etdqlOuednt612qU6552e3rXapTrnnZ7etdqlOuednoa12qU6552ehrXapTrnnZ6GtdqlOuednoa12qU6552ehrXapTrnnZ7etdqlOuednt612qU6552e3rXapTrnnZ7etdqlOuednt612qU6552e3rXapTrnnZ7etdqlOuednt612qU6552e3rXapTrnnZ7etdqlOuednt612qU6552e3rXapTrnnZ7etdqlOuednt612qU6552e3rXapTrnnZ7etdqlOuednt612qU6552e3rXapTrnnZ7etdqlOuednt612qU6552e3rXapTrnnZ7etdqlOuednt612qU6552e3rXapTrnnZ7etdqlOuednt612qU6552e3L9qlYh5fn44p33a7WnX7ol3qQrcv2qUudPuiXSo8fnTr+9tuX7RLXej2RbvUx27lTbnnF7p90S51odsXnbf7kK9Pb5Fvu33ReXuh2/do8pw/nn3+Ub/t9j2aPJeMr27XGt91+6L85Cvdvuffga50+x5NvtLtezT5Srfv+XegK92+59+BrnT7ovP2QretztsXZexe6fY9/w50pdv33Cdf6bbVLvWijN259o9/B1L79Om14+uG8s+JLj8+PeTXv5s3bV4/++/mTXvaz/67edNW99f/br66fdNWp/5DL/f33b5pq/vY7YvSfq90+6at7nO3b9rqPnf7pq3uc7erVbdv2tM+d/umzetzt2/apT5322qXelHa74VuX5T2e6XbVrvUi9J+r3Tbapd6UdrvlW5b7VIvSvu90m2rXepFab9Xum21S70o7fdKt612qRel/V7pttUu9aK03yvdttqlXpT2e6XbVrvUi9J+r3Tbapd6Udrv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1z514dlUH8uvferCs6k+ll/71IVnU30sv/apC8+m+lh+7VMXnk31sfzapy48m+pj+bVPXXg21cfya5+68Gyqj+XXPnXh2VQfyy996io8m+pj+aVPXYVnU30sv/Spq0fpU1fh2VQfyy996io8m+pj+aVPXYVnU30qH55N9bH82qcuPJvqY/m1T114NtXH8mufuvBsqo/l1z514dlUH8uvferCs6k+ll/71IVnU30sv/apC8+m+lh+7VMXnk31sfzapy48m+pj+bVPXXg21cfya5+68Gyqj+XXPnXh2VQfy6996sKzqT6WX/vUrZ1NpbWzqbR2NpXWzqbS2tlUWjubSmtnU2ntbCqtnU2ltbOptHY2ldbOptLa2VRaO5tKa2dTae1sKq2dTaW1s6m0djaV1s6m0trZVFo7m0prZ1Np7WwqrZ1NpbWzqbR2NpXWzqbS2tlUWjubSmtnU2ntbCqtnU2ltbOptHY2ldbOptLa2VRaO5tKa2dTae1sKq2dTaW1s6m0djaV1s6m0trZVFo7m0prZ1Np7WwqrZ1NpbWzqbR2NpXWzqbS2tlUWjubSmtnU2ntbCqtnU2ltbOptHY2ldbOptLa2VRaO5vKamdTWe1sKqudTWW1s6nsKH3qWu1sKqudTWW1s6msdjaV1c6mstrZVFY7m8pqZ1NZ7Wwqq51NZbWzqax2NpXVzqay2tlUVjubympnU1ntbCqrnU1ltbOprHY2ldXOprLa2VRWO5vKamdTWe1sKqudTWW1s6msdjaV1c6mstrZVFY7m8pqZ1NZ7Wwqq51NZbWzqax2NpXVzqay2tlUVjubympnU1ntbCqrnU1ltbOprHY2ldXOprLa2VRWO5vKamdTWe1sKqudTWW1s6msdjaV1c6mstrZVFY7m8pqZ1NZ7Wwqq51NZbWzqax2NpXVzqay2tlUVjubympnU1ntbCqrnU1ltbOprHY2ldXOprLa2VRWO5vKamdTWe1sKqudTWW1s6msdjaV1c6mstrZVFY7m8pqZ1NZ7Wwqq51NZbWzqax2NpXVzqay2tlUVjubympnU1ntbCqrnU1ltbOprHY2ldXOprLa2VRWO5vKa2dTee1sKq+dTeW1s6n8KH3qeu1sKq+dTeW1s6m8djaV186m8trZVF47m8prZ1N57Wwqr51N5bWzqbx2NpXXzqby2tlUXjubymtnU3ntbCqvnU3ltbOpvHY2ldfOpvLa2VReO5vKa2dTee1sKq+dTeW1s6m8djaV186m8trZVF47m8prZ1N57Wwqr51N5bWzqbx2NpXXzqby2tlUXjubymtnU3ntbCqvnU3ltbOpvHY2ldfOpvLa2VReO5vKa2dTee1sKq+dTeW1s6m8djaV186m8trZVF47m8prZ1N57Wwqr51N5bWzqbx2NpXXzqby2tlUXjubymtnU3ntbCqvnU3ltbOpvHY2ldfOpvLa2VReO5vKa2dTee1sKq+dTeW1s6m8djaV186m8trZVF47m8prZ1N57Wwqr51N5bWzqbx2NpXXzqby2tlUXjubymtnU3ntbCqvnU3ltbOpvHY2ldfOpvLa2VReO5sqamdTRe1sqqidTRW1s6niKH3qRu1sqqidTRW1s6midjZV1M6mitrZVFE7mypqZ1NF7WyqqJ1NFbWzqaJ2NlXUzqaK2tlUUTubKmpnU0XtbKqonU0VtbOponY2VdTOpora2VRRO5sqamdTRe1sqqidTRW1s6midjZV1M6mitrZVFE7mypqZ1NF7WyqqJ1NFbWzqaJ2NlXUzqaK2tlUUTubKmpnU0XtbKqonU0VtbOponY2VdTOpora2VRRO5sqamdTRe1sqqidTRW1s6midjZV1M6mitrZVFE7mypqZ1NF7WyqqJ1NFbWzqaJ2NlXUzqaK2tlUUTubKmpnU0XtbKqonU0VtbOponY2VdTOpora2VRRO5sqamdTRe1sqqidTRW1s6midjZV1M6mitrZVFE7mypqZ1NF7WyqqJ1NFbWzqaJ2NlXUzqaK2tlUUTubKmpnU0XtbKqonU0VtbOponY2VdTOpora2VRRO5tq186m2rWzqXbtbKpdO5tqH6VP3V07m2rXzqbatbOpdu1sql07m2rXzqbatbOpdu1sql07m2rXzqbatbOpdu1sql07m2rXzqbatbOpdu1sql07m2rXzqbatbOpdu1sql07m2rXzqbatbOpdu1sql07m2rXzqbatbOpdu1sql07m2rXzqbatbOpdu1sql07m2rXzqbatbOpdu1sql07m2rXzqbatbOpdu1sql07m2rXzqbatbOpdu1sql07m2rXzqbatbOpdu1sql07m2rXzqbatbOpdu1sql07m2rXzqbatbOpdu1sql07m2rXzqbatbOpdu1sql07m2rXzqbatbOpdu1sql07m2rXzqbatbOpdu1sql07m2rXzqbatbOpdu1sql07m2rXzqbatbOpdu1sql07m2rXzqbatbOpdu1sql07m2rXzqbatbOpdu1sql07m2rXzqbatbOpdu1sql07m2rXzqbatbOpdu1sql07m2rXzqbapbOp/CidTXWWX/nUPcuvfOqe5Vc+dc/yK5+6Z/mVT92z/Mqn7ll+5VP3LL/yqXuWX/vULZ1NdZZf+9QtnU11ll/71C2dTXWWX/vULZ1NdZZf+9QtnU11ll/71C2dTXWWX/vULZ1NdZZf+9QtnU11ll/71C2dTXWWX/vULZ1NdZZf+9QtnU11ll/71C2dTXWWX/vULZ1NdZZf+9QtnU11ll/71C2dTXWWX/vULZ1NdZZf+9QtnU11ll/71C2dTXWWX/vULZ1NdZZf+9QtnU11ll/71C2dTXWWX/vULZ1NdZZf+9QtnU11ll/71C2dTXWWX/vULZ1NdZZf+9QtnU11ll/71C2dTXWWX/vULZ1NdZZf+9QtnU11ll/71C2dTXWWX/vULZ1NdZZf+9QtnU11ll/71C2dTXWWX/vULZ1NdZZf+9QtnU11ll/71C2dTXWWX/vULZ1NdZZf+9QtnU11ll/71C2dTXWWX/vULZ1NdZZf+9QtnU11ll/71C2dTXWWX/vULZ1NdZZf+9QtnU11ll/71C2dTXWWX/rUldrZVFI7m0pqZ1NJ7WwqOUqfulI7m0pqZ1NJ7WwqqZ1NJbWzqaR2NpXUzqaS2tlUUjubSmpnU0ntbCqpnU0ltbOppHY2ldTOppLa2VRSO5tKamdTSe1sKqmdTSW1s6mkdjaV1M6mktrZVFI7m0pqZ1NJ7WwqqZ1NJbWzqaR2NpXUzqaS2tlUUjubSmpnU0ntbCqpnU0ltbOppHY2ldTOppLa2VRSO5tKamdTSe1sKqmdTSW1s6mkdjaV1M6mktrZVFI7m0pqZ1NJ7WwqqZ1NJbWzqaR2NpXUzqaS2tlUUjubSmpnU0ntbCqpnU0ltbOppHY2ldTOppLa2VRSO5tKamdTSe1sKqmdTSW1s6mkdjaV1M6mktrZVFI7m0pqZ1NJ7WwqqZ1NJbWzqaR2NpXUzqaS2tlUUjubSmpnU0ntbCqpnU0ltbOppHY2ldTOppLa2VRSO5tKamdTSe1sKqmdTSW1s6mkdjaV1M6mGrWzqUbtbKpRO5tq1M6mGkfpU3fUzqYatbOpRu1sqlE7m2rUzqYatbOpRu1sqlE7m2rUzqYatbOpRu1sqlE7m2rUzqYatbOpRu1sqlE7m2rUzqYatbOpRu1sqlE7m2rUzqYatbOpRu1sqlE7m2rUzqYatbOpRu1sqlE7m2rUzqYatbOpRu1sqlE7m2rUzqYatbOpRu1sqlE7m2rUzqYatbOpRu1sqlE7m2rUzqYatbOpRu1sqlE7m2rUzqYatbOpRu1sqlE7m2rUzqYatbOpRu1sqlE7m2rUzqYatbOpRu1sqlE7m2rUzqYatbOpRu1sqlE7m2rUzqYatbOpRu1sqlE7m2rUzqYatbOpRu1sqlE7m2rUzqYa7GyqOdaP8tW/Kx996n4uH33qfi4ffep+Lh996n4uH33qfiyfnU31uXz0qfu5fPSp+7l89Kn7ufzapy47m+pz+bVPXXY21efya5+67Gyqj+WDsqm+KuIcpF8Vcc7Gr4o4x91XRZwT7KsizqH0VRHnnPmqiHN0fFXEOQ2+KuII/H9UNEHJRl8V0TR7gvKHviqiafY8aJo9QcE/XxX9VM22/ZcVfb3Cn39FPP+K/fgrfm62zPevkOdfMZ5/xXz+Fev5V+jzr3h+uuX56Zbnp1uen+7x/HSP56d7PD/d4/npHs9P93h+usfz0z2en+7x/HSP56d7Pj/d8/npns9P93x+uufz0z2fn+75/HTP56d7Pj/d8/npXs9P93p+utfz072en+71/HSv56d7PT/d6/npXs9P93p+uvX56dbnp1ufn259frr1+enW56dbn59ufX669fnp1uen256fbnt+ur9ndY5fvnP81w//9mNfD55PPXg99WB96sH21IP9qQfHUw/eDz34e/bgZzxYnnrwU5PnT02ePzV5/tTk+VOT509Nnv+eybMV45dPnn/8BlOYvh99fBzPPl6effx49vHz2cevZx+vzz7enn28P/v4Z6c2np3a/ezU7mendj87tfvZqd2/Z2rdD/va7v3w7x6vzz7enn28P/v4ePbx+8nHr+N49vHy7OPHs4+fzz5+Pft4ffbx9uzj/dnHx7OPf3RqNTlUSrZ/gQznn7f+ZUX/68fHMv0qY+1fbX1yzO8+vQ/5+vSW//zpr26tVbfeqtto1e3u1G1yftYf3a28qFv3H93G+rbb0arb2arb1arbN+1Sn7t90y71uds37VKfu33TLvW52zftUh+79TftUp+7bbVLeatdylvtUsmJbn90t612KW+1S3mrXcpb7VLeapeKVrtUtNqlotUuFa12qeScvj+621a7VLTapaLVLhWtdqlotUvtVrvUbrVL7Va71H7TLjXsR7f+fberVbdv2qU+d/umXepzt2/apT53+6Zd6nO3b9qlPnVrx5t2qc/dvmmX+tztm3apz9122qXsWK267bRL2dFpl7Kj0y5lR6ddyo5Wu5S02qWk1S4lrXYpabVL/dxka3y3rXYpabVLSatdSlrtUtJqlxqtdqnRapcarXap0WqX+rn/PQL4blvtUqPVLjVa7VLjTbvUjl8+PY/h33b7pl3qY7fzTbvU527ftEt97vZNu9Tnbt+0S33udr2m23ms9aPbbd92+55d6kq37zlvr3T7nvP2QrfrPeftlW7fc95e6fY95+2Vbt9z3l7p9kXnrehXfO8csj98eu34ionU86/px6eH/Pp386LT+af/3bznXuTn/9285xblv/q7+er2RVudyNenp6zvu33RVve5W33RVneh2xdtdRe6fdFWd6HbF211F7pdrbp90572uds3bV6fu33TLvW521a71ItSui90+6KU7ivdttqlXpTSfaXbVrvUi1K6r3Tbapd6UUr3lW5b7VIvSum+0m2rXepFKd1Xum21S70opftKt612qReldF/pttUu9aKU7ivdttqlXpTSfaXbVrvUi1K6r3Tbapd6UUr3HPb13wx4/nF82+2LdqkL3a5W3b5ol7rQ7Yt2qQvdvmiXutDti3apC92+aJf63O2LUrqvdPuiXepCt612qReldF/pdrXqttUu9aKU7ivdttqlXpTSfaXbTruUvyil+0q3nXYpf1FK95VuO+1SfqxW3XbapfxFKd1Xuu20S/mLUrqvdNtql3pRSveVblvtUi9K6b7Sbatd6kUp3Ve6bbVLvSil+0q3rXapF6V0X+m21S71opTuK9222qVelNJ9pdtWu9SLUrqvdNtql3pRSveVblvtUi9K6b7Sbatd6kUp3Ve6bbVLvSil+0q3rXapN6V0X+i21S41W+1Ss9Uu9aYE9gvdttql3pTAfqHbVrvUmxLYL3Tbapd6UwL7hW5b7VJvSkm/0G2rXepNuecXum21S70p9/xCt612qTflnl/ottUu9abc8wvdttql3pR7fqHbVrvU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"}],"outputs":{"structs":{"functions":[{"kind":"struct","path":"AMMMock::constructor_abi","fields":[{"name":"parameters","type":{"kind":"struct","path":"AMMMock::constructor_parameters","fields":[{"name":"admin","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"token0","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"token1","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}}]}}]},{"kind":"struct","path":"AMMMock::add_liquidity_abi","fields":[{"name":"parameters","type":{"kind":"struct","path":"AMMMock::add_liquidity_parameters","fields":[{"name":"token0","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"amount","type":{"kind":"field"}},{"name":"nonce","type":{"kind":"field"}}]}}]},{"kind":"struct","path":"AMMMock::swap_public_abi","fields":[{"name":"parameters","type":{"kind":"struct","path":"AMMMock::swap_public_parameters","fields":[{"name":"amount0","type":{"kind":"field"}},{"name":"amount1","type":{"kind":"field"}},{"name":"nonce0","type":{"kind":"field"}},{"name":"nonce1","type":{"kind":"field"}}]}}]},{"kind":"struct","path":"AMMMock::swap_private_abi","fields":[{"name":"parameters","type":{"kind":"struct","path":"AMMMock::swap_private_parameters","fields":[{"name":"amount0","type":{"kind":"field"}},{"name":"amount1","type":{"kind":"field"}},{"name":"nonce0","type":{"kind":"field"}},{"name":"nonce1","type":{"kind":"field"}},{"name":"secret_hash","type":{"kind":"field"}}]}}]},{"kind":"struct","path":"AMMMock::_initialize_abi","fields":[{"name":"parameters","type":{"kind":"struct","path":"AMMMock::_initialize_parameters","fields":[{"name":"admin","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"token0","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"token1","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}}]}}]}]},"globals":{"storage":[{"kind":"struct","fields":[{"name":"admin","value":{"kind":"struct","fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"1"}},{"name":"typ","value":{"kind":"string","value":"PublicImmutable<AztecAddress>"}}]}},{"name":"token0","value":{"kind":"struct","fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"2"}},{"name":"typ","value":{"kind":"string","value":"SharedImmutable<AztecAddress>"}}]}},{"name":"token1","value":{"kind":"struct","fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"3"}},{"name":"typ","value":{"kind":"string","value":"SharedImmutable<AztecAddress>"}}]}}]}]}},"file_map":{"3":{"source":"struct BoundedVec<T, MaxLen> {\n    storage: [T; MaxLen],\n    len: u64,\n}\n\nimpl<T, MaxLen> BoundedVec<T, MaxLen> {\n    pub fn new() -> Self {\n        let zeroed = crate::unsafe::zeroed();\n        BoundedVec { storage: [zeroed; MaxLen], len: 0 }\n    }\n\n    pub fn get(mut self: Self, index: u64) -> T {\n        assert(index as u64 < self.len);\n        self.storage[index]\n    }\n\n    pub fn get_unchecked(mut self: Self, index: u64) -> T {\n        self.storage[index]\n    }\n\n    pub fn push(&mut self, elem: T) {\n        assert(self.len < MaxLen as u64, \"push out of bounds\");\n\n        self.storage[self.len] = elem;\n        self.len += 1;\n    }\n\n    pub fn len(self) -> u64 {\n        self.len\n    }\n\n    pub fn max_len(_self: BoundedVec<T, MaxLen>) -> u64 {\n        MaxLen\n    }\n\n    // This is a intermediate method, while we don't have an\n    // .extend method\n    pub fn storage(self) -> [T; MaxLen] {\n        self.storage\n    }\n\n    pub fn extend_from_array<Len>(&mut self, array: [T; Len]) {\n        let new_len = self.len + array.len();\n        assert(new_len as u64 <= MaxLen as u64, \"extend_from_array out of bounds\");\n        for i in 0..array.len() {\n            self.storage[self.len + i] = array[i];\n        }\n        self.len = new_len;\n    }\n\n    pub fn extend_from_slice(&mut self, slice: [T]) {\n        let new_len = self.len + slice.len();\n        assert(new_len as u64 <= MaxLen as u64, \"extend_from_slice out of bounds\");\n        for i in 0..slice.len() {\n            self.storage[self.len + i] = slice[i];\n        }\n        self.len = new_len;\n    }\n\n    pub fn extend_from_bounded_vec<Len>(&mut self, vec: BoundedVec<T, Len>) {\n        let append_len = vec.len();\n        let new_len = self.len + append_len;\n        assert(new_len as u64 <= MaxLen as u64, \"extend_from_bounded_vec out of bounds\");\n\n        let mut exceeded_len = false;\n        for i in 0..Len {\n            exceeded_len |= i == append_len;\n            if !exceeded_len {\n                self.storage[self.len + i] = vec.get_unchecked(i);\n            }\n        }\n        self.len = new_len;\n    }\n\n    pub fn pop(&mut self) -> T {\n        assert(self.len as u64 > 0);\n        self.len -= 1;\n\n        let elem = self.storage[self.len];\n        self.storage[self.len] = crate::unsafe::zeroed();\n        elem\n    }\n\n    pub fn any<Env>(self, predicate: fn[Env](T) -> bool) -> bool {\n        let mut ret = false;\n        let mut exceeded_len = false;\n        for i in 0..MaxLen {\n            exceeded_len |= i == self.len;\n            if !exceeded_len {\n                ret |= predicate(self.storage[i]);\n            }\n        }\n        ret\n    }\n}\n","path":"std/collections/bounded_vec.nr"},"19":{"source":"// The low and high decomposition of the field modulus\nglobal PLO: Field = 53438638232309528389504892708671455233;\nglobal PHI: Field = 64323764613183177041862057485226039389;\n\nglobal TWO_POW_128: Field = 0x100000000000000000000000000000000;\n\n/// A hint for decomposing a single field into two 16 byte fields.\nunconstrained fn decompose_unsafe(x: Field) -> (Field, Field) {\n    let x_bytes = x.to_le_bytes(32);\n\n    let mut low: Field = 0;\n    let mut high: Field = 0;\n\n    let mut offset = 1;\n    for i in 0..16 {\n        low += (x_bytes[i] as Field) * offset;\n        high += (x_bytes[i + 16] as Field) * offset;\n        offset *= 256;\n    }\n\n    (low, high)\n}\n\n// Assert that (alo > blo && ahi >= bhi) || (alo <= blo && ahi > bhi)\nfn assert_gt_limbs(a: (Field, Field), b: (Field, Field)) {\n    let (alo, ahi) = a;\n    let (blo, bhi) = b;\n    let borrow = lte_unsafe(alo, blo, 16);\n\n    let rlo = alo - blo - 1 + (borrow as Field) * TWO_POW_128;\n    let rhi = ahi - bhi - (borrow as Field);\n\n    rlo.assert_max_bit_size(128);\n    rhi.assert_max_bit_size(128);\n}\n\n/// Decompose a single field into two 16 byte fields.\npub fn decompose(x: Field) -> (Field, Field) {\n    // Take hints of the decomposition\n    let (xlo, xhi) = decompose_unsafe(x);\n\n    // Range check the limbs\n    xlo.assert_max_bit_size(128);\n    xhi.assert_max_bit_size(128);\n\n    // Check that the decomposition is correct\n    assert_eq(x, xlo + TWO_POW_128 * xhi);\n\n    // Assert that the decomposition of P is greater than the decomposition of x\n    assert_gt_limbs((PLO, PHI), (xlo, xhi));\n    (xlo, xhi)\n}\n\nunconstrained fn lt_unsafe(x: Field, y: Field, num_bytes: u32) -> bool {\n    let x_bytes = x.__to_le_radix(256, num_bytes);\n    let y_bytes = y.__to_le_radix(256, num_bytes);\n    let mut x_is_lt = false;\n    let mut done = false;\n    for i in 0..num_bytes {\n        if (!done) {\n            let x_byte = x_bytes[num_bytes - 1 - i];\n            let y_byte = y_bytes[num_bytes - 1 - i];\n            let bytes_match = x_byte == y_byte;\n            if !bytes_match {\n                x_is_lt = x_byte < y_byte;\n                done = true;\n            }\n        }\n    }\n    x_is_lt\n}\n\nunconstrained fn lte_unsafe(x: Field, y: Field, num_bytes: u32) -> bool {\n    lt_unsafe(x, y, num_bytes) | (x == y)\n}\n\npub fn assert_gt(a: Field, b: Field) {\n    // Decompose a and b\n    let a_limbs = decompose(a);\n    let b_limbs = decompose(b);\n\n    // Assert that a_limbs is greater than b_limbs\n    assert_gt_limbs(a_limbs, b_limbs)\n}\n\npub fn assert_lt(a: Field, b: Field) {\n    assert_gt(b, a);\n}\n\npub fn gt(a: Field, b: Field) -> bool {\n    if a == b {\n        false\n    } else if lt_unsafe(a, b, 32) {\n        assert_gt(b, a);\n        false\n    } else {\n        assert_gt(a, b);\n        true\n    }\n}\n\npub fn lt(a: Field, b: Field) -> bool {\n    gt(b, a)\n}\n\nmod tests {\n    // TODO: Allow imports from \"super\"\n    use crate::field::bn254::{decompose_unsafe, decompose, lt_unsafe, assert_gt, gt, lt, TWO_POW_128, lte_unsafe, PLO, PHI};\n\n    #[test]\n    fn check_decompose_unsafe() {\n        assert_eq(decompose_unsafe(TWO_POW_128), (0, 1));\n        assert_eq(decompose_unsafe(TWO_POW_128 + 0x1234567890), (0x1234567890, 1));\n        assert_eq(decompose_unsafe(0x1234567890), (0x1234567890, 0));\n    }\n\n    #[test]\n    fn check_decompose() {\n        assert_eq(decompose(TWO_POW_128), (0, 1));\n        assert_eq(decompose(TWO_POW_128 + 0x1234567890), (0x1234567890, 1));\n        assert_eq(decompose(0x1234567890), (0x1234567890, 0));\n    }\n\n    #[test]\n    fn check_lt_unsafe() {\n        assert(lt_unsafe(0, 1, 16));\n        assert(lt_unsafe(0, 0x100, 16));\n        assert(lt_unsafe(0x100, TWO_POW_128 - 1, 16));\n        assert(!lt_unsafe(0, TWO_POW_128, 16));\n    }\n\n    #[test]\n    fn check_lte_unsafe() {\n        assert(lte_unsafe(0, 1, 16));\n        assert(lte_unsafe(0, 0x100, 16));\n        assert(lte_unsafe(0x100, TWO_POW_128 - 1, 16));\n        assert(!lte_unsafe(0, TWO_POW_128, 16));\n\n        assert(lte_unsafe(0, 0, 16));\n        assert(lte_unsafe(0x100, 0x100, 16));\n        assert(lte_unsafe(TWO_POW_128 - 1, TWO_POW_128 - 1, 16));\n        assert(lte_unsafe(TWO_POW_128, TWO_POW_128, 16));\n    }\n\n    #[test]\n    fn check_assert_gt() {\n        assert_gt(1, 0);\n        assert_gt(0x100, 0);\n        assert_gt((0 - 1), (0 - 2));\n        assert_gt(TWO_POW_128, 0);\n        assert_gt(0 - 1, 0);\n    }\n\n    #[test]\n    fn check_gt() {\n        assert(gt(1, 0));\n        assert(gt(0x100, 0));\n        assert(gt((0 - 1), (0 - 2)));\n        assert(gt(TWO_POW_128, 0));\n        assert(!gt(0, 0));\n        assert(!gt(0, 0x100));\n        assert(gt(0 - 1, 0 - 2));\n        assert(!gt(0 - 2, 0 - 1));\n    }\n\n    #[test]\n    fn check_plo_phi() {\n        assert_eq(PLO + PHI * TWO_POW_128, 0);\n        let p_bytes = crate::field::modulus_le_bytes();\n        let mut p_low: Field = 0;\n        let mut p_high: Field = 0;\n\n        let mut offset = 1;\n        for i in 0..16 {\n            p_low += (p_bytes[i] as Field) * offset;\n            p_high += (p_bytes[i + 16] as Field) * offset;\n            offset *= 256;\n        }\n        assert_eq(p_low, PLO);\n        assert_eq(p_high, PHI);\n    }\n}\n","path":"std/field/bn254.nr"},"20":{"source":"mod bn254;\nuse bn254::lt as bn254_lt;\n\nimpl Field {\n    pub fn to_le_bits(self: Self, bit_size: u32) -> [u1] {\n        crate::assert_constant(bit_size);\n        self.__to_le_bits(bit_size)\n    }\n\n    pub fn to_be_bits(self: Self, bit_size: u32) -> [u1] {\n        crate::assert_constant(bit_size);\n        self.__to_be_bits(bit_size)\n    }\n\n    #[builtin(to_le_bits)]\n    fn __to_le_bits(self, _bit_size: u32) -> [u1] {}\n\n    #[builtin(to_be_bits)]\n    fn __to_be_bits(self, bit_size: u32) -> [u1] {}\n\n    #[builtin(apply_range_constraint)]\n    fn __assert_max_bit_size(self, bit_size: u32) {}\n\n    pub fn assert_max_bit_size(self: Self, bit_size: u32) {\n        crate::assert_constant(bit_size);\n        assert(bit_size < modulus_num_bits() as u32);\n        self.__assert_max_bit_size(bit_size);\n    }\n\n    pub fn to_le_bytes(self: Self, byte_size: u32) -> [u8] {\n        self.to_le_radix(256, byte_size)\n    }\n\n    pub fn to_be_bytes(self: Self, byte_size: u32) -> [u8] {\n        self.to_be_radix(256, byte_size)\n    }\n\n    pub fn to_le_radix(self: Self, radix: u32, result_len: u32) -> [u8] {\n        crate::assert_constant(radix);\n        crate::assert_constant(result_len);\n        self.__to_le_radix(radix, result_len)\n    }\n\n    pub fn to_be_radix(self: Self, radix: u32, result_len: u32) -> [u8] {\n        crate::assert_constant(radix);\n        crate::assert_constant(result_len);\n        self.__to_be_radix(radix, result_len)\n    }\n\n    // decompose `_self` into a `_result_len` vector over the `_radix` basis\n    // `_radix` must be less than 256\n    #[builtin(to_le_radix)]\n    fn __to_le_radix(self, radix: u32, result_len: u32) -> [u8] {}\n\n    #[builtin(to_be_radix)]\n    fn __to_be_radix(self, radix: u32, result_len: u32) -> [u8] {}\n\n    // Returns self to the power of the given exponent value.\n    // Caution: we assume the exponent fits into 32 bits\n    // using a bigger bit size impacts negatively the performance and should be done only if the exponent does not fit in 32 bits\n    pub fn pow_32(self, exponent: Field) -> Field {\n        let mut r: Field = 1;\n        let b = exponent.to_le_bits(32);\n\n        for i in 1..33 {\n            r *= r;\n            r = (b[32-i] as Field) * (r * self) + (1 - b[32-i] as Field) * r;\n        }\n        r\n    }\n\n    // Parity of (prime) Field element, i.e. sgn0(x mod p) = 0 if x ∈ {0, ..., p-1} is even, otherwise sgn0(x mod p) = 1.\n    pub fn sgn0(self) -> u1 {\n        self as u1\n    }\n\n    pub fn lt(self, another: Field) -> bool {\n        if crate::compat::is_bn254() {\n            bn254_lt(self, another)\n        } else {\n            lt_fallback(self, another)\n        }\n    }\n}\n\n#[builtin(modulus_num_bits)]\npub fn modulus_num_bits() -> u64 {}\n\n#[builtin(modulus_be_bits)]\npub fn modulus_be_bits() -> [u1] {}\n\n#[builtin(modulus_le_bits)]\npub fn modulus_le_bits() -> [u1] {}\n\n#[builtin(modulus_be_bytes)]\npub fn modulus_be_bytes() -> [u8] {}\n\n#[builtin(modulus_le_bytes)]\npub fn modulus_le_bytes() -> [u8] {}\n// Convert a 32 byte array to a field element by modding\npub fn bytes32_to_field(bytes32: [u8; 32]) -> Field {\n    // Convert it to a field element\n    let mut v = 1;\n    let mut high = 0 as Field;\n    let mut low = 0 as Field;\n\n    for i in 0..16 {\n        high = high + (bytes32[15 - i] as Field) * v;\n        low = low + (bytes32[16 + 15 - i] as Field) * v;\n        v = v * 256;\n    }\n    // Abuse that a % p + b % p = (a + b) % p and that low < p\n    low + high * v\n}\n\nfn lt_fallback(x: Field, y: Field) -> bool {\n    let num_bytes = (modulus_num_bits() as u32 + 7) / 8;\n    let x_bytes = x.to_le_bytes(num_bytes);\n    let y_bytes = y.to_le_bytes(num_bytes);\n    let mut x_is_lt = false;\n    let mut done = false;\n    for i in 0..num_bytes {\n        if (!done) {\n            let x_byte = x_bytes[num_bytes - 1 - i] as u8;\n            let y_byte = y_bytes[num_bytes - 1 - i] as u8;\n            let bytes_match = x_byte == y_byte;\n            if !bytes_match {\n                x_is_lt = x_byte < y_byte;\n                done = true;\n            }\n        }\n    }\n    x_is_lt\n}\n\n","path":"std/field.nr"},"30":{"source":"mod poseidon;\nmod mimc;\nmod poseidon2;\nmod pedersen;\n\nuse crate::default::Default;\nuse crate::uint128::U128;\n\n#[foreign(sha256)]\n// docs:start:sha256\npub fn sha256<N>(input: [u8; N]) -> [u8; 32]\n// docs:end:sha256\n{}\n\n#[foreign(sha256)]\n// docs:start:sha256_slice\npub fn sha256_slice(input: [u8]) -> [u8; 32]\n// docs:end:sha256_slice\n{}\n\n#[foreign(blake2s)]\n// docs:start:blake2s\npub fn blake2s<N>(input: [u8; N]) -> [u8; 32]\n// docs:end:blake2s\n{}\n\n#[foreign(blake2s)]\n// docs:start:blake2s_slice\npub fn blake2s_slice(input: [u8]) -> [u8; 32]\n// docs:end:blake2s_slice\n{}\n\n#[foreign(blake3)]\n// docs:start:blake3\npub fn blake3<N>(input: [u8; N]) -> [u8; 32]\n// docs:end:blake3\n{}\n\n#[foreign(blake3)]\n// docs:start:blake3_slice\npub fn blake3_slice(input: [u8]) -> [u8; 32]\n// docs:end:blake3_slice\n{}\n\n// docs:start:pedersen_commitment\nstruct PedersenPoint {\n   x : Field,\n   y : Field,\n}\n\npub fn pedersen_commitment<N>(input: [Field; N]) -> PedersenPoint {\n    // docs:end:pedersen_commitment\n    pedersen_commitment_with_separator(input, 0)\n}\n\n// docs:start:pedersen_commitment_slice\npub fn pedersen_commitment_slice(input: [Field]) -> PedersenPoint {\n    pedersen_commitment_with_separator_slice(input, 0)\n}\n// docs:end:pedersen_commitment_slice\n\n#[foreign(pedersen_commitment)]\npub fn __pedersen_commitment_with_separator<N>(input: [Field; N], separator: u32) -> [Field; 2] {}\n\n#[foreign(pedersen_commitment)]\npub fn __pedersen_commitment_with_separator_slice(input: [Field], separator: u32) -> [Field; 2] {}\n\npub fn pedersen_commitment_with_separator<N>(input: [Field; N], separator: u32) -> PedersenPoint {\n    let values = __pedersen_commitment_with_separator(input, separator);\n    PedersenPoint { x: values[0], y: values[1] }\n}\n\npub fn pedersen_commitment_with_separator_slice(input: [Field], separator: u32) -> PedersenPoint {\n    let values = __pedersen_commitment_with_separator_slice(input, separator);\n    PedersenPoint { x: values[0], y: values[1] }\n}\n\n// docs:start:pedersen_hash\npub fn pedersen_hash<N>(input: [Field; N]) -> Field\n// docs:end:pedersen_hash\n{\n    pedersen_hash_with_separator(input, 0)\n}\n\n// docs:start:pedersen_hash_slice\npub fn pedersen_hash_slice(input: [Field]) -> Field\n// docs:end:pedersen_hash_slice\n{\n    pedersen_hash_with_separator_slice(input, 0)\n}\n\n#[foreign(pedersen_hash)]\npub fn pedersen_hash_with_separator<N>(input: [Field; N], separator: u32) -> Field {}\n\n#[foreign(pedersen_hash)]\npub fn pedersen_hash_with_separator_slice(input: [Field], separator: u32) -> Field {}\n\npub fn hash_to_field(inputs: [Field]) -> Field {\n    let mut inputs_as_bytes = &[];\n\n    for input in inputs {\n        let input_bytes = input.to_le_bytes(32);\n        for i in 0..32 {\n            inputs_as_bytes = inputs_as_bytes.push_back(input_bytes[i]);\n        }\n    }\n\n    let hashed_input = blake2s_slice(inputs_as_bytes);\n    crate::field::bytes32_to_field(hashed_input)\n}\n\n#[foreign(keccak256)]\n// docs:start:keccak256\npub fn keccak256<N>(input: [u8; N], message_size: u32) -> [u8; 32]\n// docs:end:keccak256\n{}\n\n#[foreign(keccak256)]\n// docs:start:keccak256_slice\npub fn keccak256_slice(input: [u8], message_size: u32) -> [u8; 32]\n// docs:end:keccak256_slice\n{}\n\n#[foreign(poseidon2_permutation)]\npub fn poseidon2_permutation<N>(_input: [Field; N], _state_length: u32) -> [Field; N] {}\n\n#[foreign(sha256_compression)]\npub fn sha256_compression(_input: [u32; 16], _state: [u32; 8]) -> [u32; 8] {}\n\n// Generic hashing support. \n// Partially ported and impacted by rust.\n\n// Hash trait shall be implemented per type.\ntrait Hash{\n    fn hash<H>(self, state: &mut H) where H: Hasher;\n}\n\n// Hasher trait shall be implemented by algorithms to provide hash-agnostic means.\n// TODO: consider making the types generic here ([u8], [Field], etc.)\ntrait Hasher{\n    fn finish(self) -> Field;\n    \n    fn write(&mut self, input: [Field]);\n}\n\n// BuildHasher is a factory trait, responsible for production of specific Hasher.\ntrait BuildHasher<H> where H: Hasher{\n    fn build_hasher(self) -> H;\n}\n\nstruct BuildHasherDefault<H>;\n\nimpl<H> BuildHasher<H> for BuildHasherDefault<H>\nwhere \n    H: Hasher + Default\n{\n    fn build_hasher(_self: Self) -> H{\n        H::default()\n    }\n}\n\nimpl<H> Default for BuildHasherDefault<H>\nwhere \n    H: Hasher + Default\n{\n    fn default() -> Self{\n        BuildHasherDefault{}\n    }    \n}\n\nimpl Hash for Field {\n    fn hash<H>(self, state: &mut H) where H: Hasher{\n        H::write(state, &[self]);\n    }\n}\n\nimpl Hash for u8 {\n    fn hash<H>(self, state: &mut H) where H: Hasher{\n        H::write(state, &[self as Field]);\n    }\n}\n\nimpl Hash for u32 {\n    fn hash<H>(self, state: &mut H) where H: Hasher{\n        H::write(state, &[self as Field]);\n    }\n}\n\nimpl Hash for u64 {\n    fn hash<H>(self, state: &mut H) where H: Hasher{\n        H::write(state, &[self as Field]);\n    }\n}\n\nimpl Hash for i8 {\n    fn hash<H>(self, state: &mut H) where H: Hasher{\n        H::write(state, &[self as Field]);\n    }\n}\n\nimpl Hash for i32 {\n    fn hash<H>(self, state: &mut H) where H: Hasher{\n        H::write(state, &[self as Field]);\n    }\n}\n\nimpl Hash for i64 {\n    fn hash<H>(self, state: &mut H) where H: Hasher{\n        H::write(state, &[self as Field]);\n    }\n}\n\nimpl Hash for bool {\n    fn hash<H>(self, state: &mut H) where H: Hasher{\n        H::write(state, &[self as Field]);\n    }\n}\n\nimpl Hash for () {\n    fn hash<H>(_self: Self, _state: &mut H) where H: Hasher {}\n}\n\nimpl Hash for U128 {\n    fn hash<H>(self, state: &mut H) where H: Hasher{\n        H::write(state, &[self.lo as Field, self.hi as Field]);\n    }\n}\n\nimpl<T, N> Hash for [T; N] where T: Hash {\n    fn hash<H>(self, state: &mut H) where H: Hasher{\n        for elem in self {\n            elem.hash(state);\n        }\n    }\n}\n\nimpl<T> Hash for [T] where T: Hash {\n    fn hash<H>(self, state: &mut H) where H: Hasher{\n        self.len().hash(state);\n        for elem in self {\n            elem.hash(state);\n        }\n    }\n}\n\nimpl<A, B> Hash for (A, B) where A: Hash, B: Hash {\n    fn hash<H>(self, state: &mut H) where H: Hasher{\n        self.0.hash(state);\n        self.1.hash(state);\n    }\n}\n\nimpl<A, B, C> Hash for (A, B, C) where A: Hash, B: Hash, C: Hash {\n    fn hash<H>(self, state: &mut H) where H: Hasher{\n        self.0.hash(state);\n        self.1.hash(state);\n        self.2.hash(state);\n    }\n}\n\nimpl<A, B, C, D> Hash for (A, B, C, D) where A: Hash, B: Hash, C: Hash, D: Hash {\n    fn hash<H>(self, state: &mut H) where H: Hasher{\n        self.0.hash(state);\n        self.1.hash(state);\n        self.2.hash(state);\n        self.3.hash(state);\n    }\n}\n\nimpl<A, B, C, D, E> Hash for (A, B, C, D, E) where A: Hash, B: Hash, C: Hash, D: Hash, E: Hash {\n    fn hash<H>(self, state: &mut H) where H: Hasher{\n        self.0.hash(state);\n        self.1.hash(state);\n        self.2.hash(state);\n        self.3.hash(state);\n        self.4.hash(state);\n    }\n}\n","path":"std/hash.nr"},"33":{"source":"// Regular merkle tree means a append-only merkle tree (Explain why this is the only way to have privacy and alternatives if you don't want it)\n// Currently we assume that it is a binary tree, so depth k implies a width of 2^k\n// XXX: In the future we can add an arity parameter\n// Returns the merkle root of the tree from the provided leaf, its hashpath, using a pedersen hash function.\npub fn compute_merkle_root<N>(leaf: Field, index: Field, hash_path: [Field; N]) -> Field {\n    let n = hash_path.len();\n    let index_bits = index.to_le_bits(n as u32);\n    let mut current = leaf;\n    for i in 0..n {\n        let path_bit = index_bits[i] as bool;\n        let (hash_left, hash_right) = if path_bit {\n            (hash_path[i], current)\n        } else {\n            (current, hash_path[i])\n        };\n        current = crate::hash::pedersen_hash([hash_left, hash_right]);\n    }\n    current\n}\n","path":"std/merkle.nr"},"35":{"source":"use crate::hash::{Hash, Hasher};\nuse crate::cmp::{Ordering, Ord, Eq};\nuse crate::default::Default;\n\nstruct Option<T> {\n    _is_some: bool,\n    _value: T,\n}\n\nimpl<T> Option<T> {\n    /// Constructs a None value\n    pub fn none() -> Self {\n        Self { _is_some: false, _value: crate::unsafe::zeroed() }\n    }\n\n    /// Constructs a Some wrapper around the given value\n    pub fn some(_value: T) -> Self {\n        Self { _is_some: true, _value }\n    }\n\n    /// True if this Option is None\n    pub fn is_none(self) -> bool {\n        !self._is_some\n    }\n\n    /// True if this Option is Some\n    pub fn is_some(self) -> bool {\n        self._is_some\n    }\n\n    /// Asserts `self.is_some()` and returns the wrapped value.\n    pub fn unwrap(self) -> T {\n        assert(self._is_some);\n        self._value\n    }\n\n    /// Returns the inner value without asserting `self.is_some()`\n    /// Note that if `self` is `None`, there is no guarantee what value will be returned,\n    /// only that it will be of type `T`.\n    pub fn unwrap_unchecked(self) -> T {\n        self._value\n    }\n\n    /// Returns the wrapped value if `self.is_some()`. Otherwise, returns the given default value.\n    pub fn unwrap_or(self, default: T) -> T {\n        if self._is_some { self._value } else { default }\n    }\n\n    /// Returns the wrapped value if `self.is_some()`. Otherwise, calls the given function to return\n    /// a default value.\n    pub fn unwrap_or_else<Env>(self, default: fn[Env]() -> T) -> T {\n        if self._is_some {\n            self._value\n        } else {\n            default()\n        }\n    }\n\n    /// Asserts `self.is_some()` with a provided custom message and returns the contained `Some` value\n    fn expect<N, MessageTypes>(self, message: fmtstr<N, MessageTypes>) -> T {\n        assert(self.is_some(), message);\n        self._value\n    }\n\n    /// If self is `Some(x)`, this returns `Some(f(x))`. Otherwise, this returns `None`.\n    pub fn map<U, Env>(self, f: fn[Env](T) -> U) -> Option<U> {\n        if self._is_some {\n            Option::some(f(self._value))\n        } else {\n            Option::none()\n        }\n    }\n\n    /// If self is `Some(x)`, this returns `f(x)`. Otherwise, this returns the given default value.\n    pub fn map_or<U, Env>(self, default: U, f: fn[Env](T) -> U) -> U {\n        if self._is_some {\n            f(self._value)\n        } else {\n            default\n        }\n    }\n\n    /// If self is `Some(x)`, this returns `f(x)`. Otherwise, this returns `default()`.\n    pub fn map_or_else<U, Env1, Env2>(self, default: fn[Env1]() -> U, f: fn[Env2](T) -> U) -> U {\n        if self._is_some {\n            f(self._value)\n        } else {\n            default()\n        }\n    }\n\n    /// Returns None if self is None. Otherwise, this returns `other`.\n    pub fn and(self, other: Self) -> Self {\n        if self.is_none() {\n            Option::none()\n        } else {\n            other\n        }\n    }\n\n    /// If self is None, this returns None. Otherwise, this calls the given function\n    /// with the Some value contained within self, and returns the result of that call.\n    ///\n    /// In some languages this function is called `flat_map` or `bind`.\n    pub fn and_then<U, Env>(self, f: fn[Env](T) -> Option<U>) -> Option<U> {\n        if self._is_some {\n            f(self._value)\n        } else {\n            Option::none()\n        }\n    }\n\n    /// If self is Some, return self. Otherwise, return `other`.\n    pub fn or(self, other: Self) -> Self {\n        if self._is_some { self } else { other }\n    }\n\n    /// If self is Some, return self. Otherwise, return `default()`.\n    pub fn or_else<U, Env>(self, default: fn[Env]() -> Self) -> Self {\n        if self._is_some { self } else { default() }\n    }\n\n    // If only one of the two Options is Some, return that option.\n    // Otherwise, if both options are Some or both are None, None is returned.\n    pub fn xor(self, other: Self) -> Self {\n        if self._is_some {\n            if other._is_some { Option::none() } else { self }\n        } else if other._is_some {\n            other\n        } else {\n            Option::none()\n        }\n    }\n\n    /// Returns `Some(x)` if self is `Some(x)` and `predicate(x)` is true.\n    /// Otherwise, this returns `None`\n    pub fn filter<Env>(self, predicate: fn[Env](T) -> bool) -> Self {\n        if self._is_some {\n            if predicate(self._value) {\n                self\n            } else {\n                Option::none()\n            }\n        } else {\n            Option::none()\n        }\n    }\n\n    /// Flattens an Option<Option<T>> into a Option<T>.\n    /// This returns None if the outer Option is None. Otherwise, this returns the inner Option.\n    pub fn flatten(option: Option<Option<T>>) -> Option<T> {\n        if option._is_some {\n            option._value\n        } else {\n            Option::none()\n        }\n    }\n}\n\nimpl<T> Default for Option<T> {\n    fn default() -> Self {\n        Option::none()\n    }\n}\n\nimpl<T> Eq for Option<T> where T: Eq {\n    fn eq(self, other: Self) -> bool {\n        if self._is_some == other._is_some {\n            if self._is_some {\n                self._value == other._value\n            } else {\n                true\n            }\n        } else {\n            false\n        }\n    }\n}\n\nimpl<T> Hash for Option<T> where T: Hash {\n    fn hash<H>(self, state: &mut H) where H: Hasher {\n        self._is_some.hash(state);\n        if self._is_some {\n            self._value.hash(state);\n        }\n    }\n}\n\n// For this impl we're declaring Option::none < Option::some\nimpl<T> Ord for Option<T> where T: Ord {\n    fn cmp(self, other: Self) -> Ordering {\n        if self._is_some {\n            if other._is_some {\n                self._value.cmp(other._value)\n            } else {\n                Ordering::greater()\n            }\n        } else {\n            if other._is_some {\n                Ordering::less()\n            } else {\n                Ordering::equal()\n            }\n        }\n    }\n}\n","path":"std/option.nr"},"47":{"source":"// docs:start:interfaces\nuse dep::aztec::prelude::{FunctionSelector, AztecAddress, EthAddress, PrivateContext};\nuse dep::aztec::context::{PublicContext, gas::GasOpts};\n\nstruct Token {\n  address: AztecAddress,\n}\n\nimpl Token {\n    pub fn at(address: AztecAddress) -> Self {\n        Self { address }\n    }\n\n    pub fn transfer_public(\n        self: Self,\n        context: &mut PublicContext,\n        from: AztecAddress,\n        to: AztecAddress,\n        amount: Field,\n        nonce: Field\n    ) {\n        context.call_public_function(\n            self.address,\n            FunctionSelector::from_signature(\"transfer_public((Field),(Field),Field,Field)\"),\n            [from.to_field(), to.to_field(), amount, nonce],\n            GasOpts::default()\n        ).assert_empty();\n    }\n\n    pub fn shield(\n        self: Self,\n        context: &mut PrivateContext,\n        from: AztecAddress,\n        amount: Field,\n        secret_hash: Field,\n        nonce: Field\n    ) {\n        context.call_public_function(\n            self.address,\n            FunctionSelector::from_signature(\"shield((Field),Field,Field,Field)\"),\n            [from.to_field(), amount, secret_hash, nonce]\n        );\n    }\n    \n    pub fn unshield(\n        self: Self,\n        context: &mut PrivateContext,\n        from: AztecAddress,\n        to: AztecAddress,\n        amount: Field,\n        nonce: Field\n    ) {\n        let _ = context.call_private_function(\n            self.address,\n            FunctionSelector::from_signature(\"unshield((Field),(Field),Field,Field)\"),\n            [from.to_field(), to.to_field(), amount, nonce]\n        );\n    }\n\n    pub fn transfer(\n        self: Self,\n        context: &mut PrivateContext,\n        from: AztecAddress,\n        to: AztecAddress,\n        amount: Field,\n        nonce: Field\n    ) {\n        let _ret = context.call_private_function(\n            self.address,\n            FunctionSelector::from_signature(\"transfer((Field),(Field),Field,Field)\"),\n            [from.to_field(), to.to_field(), amount, nonce]\n        );\n    }\n\n    // pub fn balance_of_public(\n    //     self: Self,\n    //     context: &mut PublicContext,\n    //     owner: AztecAddress\n    // ) -> Field {\n    //     let _ret = context.call_public_function(\n    //         self.address,\n    //         FunctionSelector::from_signature(\"balance_of_public((Field))\"),\n    //         [owner.to_field()],\n    //          GasOpts::default()\n    //     );\n    //     _ret[0]\n    // }\n}\n","path":"/Users/jack-sw/Codes/abstract/dex-build/token-bridge-uniswap/aztec-contracts/mock_amm/src/interfaces.nr"},"48":{"source":"mod interfaces;\n\n// aztec-cli codegen ./target/ -o ../../test/artifacts --ts\n\ncontract AMMMock {\n    use dep::aztec::prelude::{\n        AztecAddress, EthAddress, FunctionSelector, NoteHeader, NoteGetterOptions, NoteViewerOptions,\n        Map, PublicMutable, PublicImmutable, PrivateMutable, SharedImmutable\n    };\n    use dep::aztec::{note::note_getter_options::Comparator, \n        context::{Context, PrivateContext, PublicContext, gas::GasOpts}\n    };\n    use crate::interfaces::Token;\n\n    #[aztec(storage)]\n    struct Storage {\n        admin: PublicImmutable<AztecAddress>, \n        token0: SharedImmutable<AztecAddress>,\n        token1: SharedImmutable<AztecAddress>\n    }\n\n    impl Storage {\n      fn init(context: Context) -> Self {\n        Storage {\n            admin: PublicImmutable::new(context, 1), \n            token0: SharedImmutable::new(context, 2), // eth\n            token1: SharedImmutable::new(context, 3), // dai\n        }\n      }\n    }\n\n    #[aztec(private)]\n    #[aztec(initializer)]\n    fn constructor(admin: AztecAddress, token0: AztecAddress, token1: AztecAddress) {\n        context.call_public_function(\n            context.this_address(),\n            FunctionSelector::from_signature(\"_initialize((Field),(Field),(Field))\"),\n            [admin.to_field(), token0.to_field(), token1.to_field()]\n        );\n    }\n\n    #[aztec(public)]\n    #[aztec(internal)]\n    #[aztec(noinitcheck)]\n    fn _initialize(\n        admin: AztecAddress, \n        token0: AztecAddress, \n        token1: AztecAddress\n    ) {\n        storage.admin.initialize(admin);\n        storage.token0.initialize(token0);\n        storage.token1.initialize(token1);\n    }\n\n    //  #[aztec(private)]\n    //  fn add_liquidity(token0: AztecAddress, amount: Field) {\n    //     assert(token0 == storage.token0.read_private(), \"invalid token0\");\n    //     Token::at(token0).unshield(&mut context, context.msg_sender(), context.this_address(), amount, 0);\n    //  }\n     #[aztec(public)]\n     fn add_liquidity(token0: AztecAddress, amount: Field, nonce: Field) {\n        assert(token0 == storage.token0.read_public(), \"invalid token0\");\n        Token::at(token0).transfer_public(&mut context, context.msg_sender(), context.this_address(), amount, nonce);\n     }\n\n     // mock public swap call\n     // only works for swapping token1(dai) for token0(eth)\n     // exchange rate is decided by caller\n     #[aztec(public)]\n     fn swap_public(\n        amount0: Field, // eth out\n        amount1: Field, // dai in \n        nonce0: Field,\n        nonce1: Field\n    )  {\n        let token0 = storage.token0.read_public();\n        let token1 = storage.token1.read_public();\n\n        // transfer eth out \n        Token::at(token0).transfer_public(\n            &mut context, \n            context.this_address(), \n            context.msg_sender(), \n            amount0, \n            nonce0\n        );\n\n        // transfer dai in\n        Token::at(token1).transfer_public(\n            &mut context, \n            context.msg_sender(), \n            context.this_address(), \n            amount1, \n            nonce1\n        );\n\n    }\n\n     // mock private swap call\n     // only works for swapping token1(dai) for token0(eth)\n     // exchange rate is decided by caller\n     #[aztec(private)]\n     fn swap_private(\n        amount0: Field, // eth out\n        amount1: Field, // dai in \n        nonce0: Field,\n        nonce1: Field,\n        secret_hash: Field\n    )  {\n        let token0 = storage.token0.read_private();\n        let token1 = storage.token1.read_private();\n\n        // optimistically transfer(shield) eth out to batcher pub -> pri\n        Token::at(token0).shield(\n            &mut context, \n            context.this_address(), \n            amount0, \n            secret_hash,\n            nonce0\n        );\n\n        // transfer(unshield) dai from batcher pri -> pub\n        Token::at(token1).unshield(\n            &mut context, \n            context.msg_sender(), \n            context.this_address(), \n            amount1, \n            nonce1\n        );\n    }\n\n    unconstrained fn get_admin() -> pub Field {\n        storage.admin.read().to_field()\n    }\n\n    unconstrained fn get_token0() -> pub Field {\n        storage.token0.read_public().to_field()\n    }\n\n    unconstrained fn get_token1() -> pub Field {\n        storage.token1.read_public().to_field()\n    }\n\n}","path":"/Users/jack-sw/Codes/abstract/dex-build/token-bridge-uniswap/aztec-contracts/mock_amm/src/main.nr"},"66":{"source":"use crate::{\n    context::{\n    inputs::PublicContextInputs, interface::ContextInterface, interface::PublicContextInterface,\n    gas::GasOpts\n},\n    messaging::process_l1_to_l2_message,\n    oracle::{arguments, public_call::call_public_function_internal, returns},\n    hash::{hash_args_array, ArgsHasher}\n};\nuse dep::protocol_types::{\n    abis::{\n    global_variables::GlobalVariables, function_selector::FunctionSelector,\n    private_circuit_public_inputs::PrivateCircuitPublicInputs,\n    public_call_stack_item::PublicCallStackItem,\n    public_circuit_public_inputs::PublicCircuitPublicInputs, read_request::ReadRequest,\n    side_effect::{SideEffect, SideEffectLinkedToNoteHash}\n},\n    hash::silo_nullifier, address::{AztecAddress, EthAddress},\n    constants::{\n    MAX_NEW_NOTE_HASHES_PER_CALL, MAX_NEW_L2_TO_L1_MSGS_PER_CALL, MAX_NEW_NULLIFIERS_PER_CALL,\n    MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL, MAX_PUBLIC_DATA_READS_PER_CALL,\n    MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL, MAX_NOTE_HASH_READ_REQUESTS_PER_CALL,\n    MAX_NULLIFIER_READ_REQUESTS_PER_CALL, MAX_NULLIFIER_NON_EXISTENT_READ_REQUESTS_PER_CALL\n},\n    contrakt::{storage_read::StorageRead, storage_update_request::StorageUpdateRequest}, header::Header,\n    messaging::l2_to_l1_message::L2ToL1Message, utils::reader::Reader, traits::{Deserialize, Empty}\n};\n\nstruct PublicContext {\n    inputs: PublicContextInputs,\n    side_effect_counter: u32,\n\n    args_hash : Field,\n    return_hash : Field,\n\n    nullifier_read_requests: BoundedVec<ReadRequest, MAX_NULLIFIER_READ_REQUESTS_PER_CALL>,\n    nullifier_non_existent_read_requests: BoundedVec<ReadRequest, MAX_NULLIFIER_NON_EXISTENT_READ_REQUESTS_PER_CALL>,\n    contract_storage_update_requests: BoundedVec<StorageUpdateRequest, MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL>,\n    contract_storage_reads: BoundedVec<StorageRead, MAX_PUBLIC_DATA_READS_PER_CALL>,\n    public_call_stack_hashes: BoundedVec<Field, MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL>,\n\n    new_note_hashes: BoundedVec<SideEffect, MAX_NEW_NOTE_HASHES_PER_CALL>,\n    new_nullifiers: BoundedVec<SideEffectLinkedToNoteHash, MAX_NEW_NULLIFIERS_PER_CALL>,\n\n    new_l2_to_l1_msgs: BoundedVec<L2ToL1Message, MAX_NEW_L2_TO_L1_MSGS_PER_CALL>,\n\n    unencrypted_logs_hash: Field,\n    unencrypted_logs_preimages_length: Field,\n\n    // Header of a block whose state is used during public execution. Set by sequencer to be a header of a block\n    // previous to the one in which the tx is included.\n    historical_header: Header,\n    prover_address: AztecAddress,\n}\n\nimpl PublicContext {\n    pub fn new(inputs: PublicContextInputs, args_hash: Field) -> PublicContext {\n        PublicContext {\n            inputs,\n            side_effect_counter: inputs.start_side_effect_counter,\n            args_hash,\n            return_hash: 0,\n            nullifier_read_requests: BoundedVec::new(),\n            nullifier_non_existent_read_requests: BoundedVec::new(),\n            contract_storage_update_requests: BoundedVec::new(),\n            contract_storage_reads: BoundedVec::new(),\n            public_call_stack_hashes: BoundedVec::new(),\n            new_note_hashes: BoundedVec::new(),\n            new_nullifiers: BoundedVec::new(),\n            new_l2_to_l1_msgs: BoundedVec::new(),\n            unencrypted_logs_hash: 0,\n            unencrypted_logs_preimages_length: 0,\n            historical_header: inputs.historical_header,\n            prover_address: AztecAddress::zero() // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n            // encrypted_logs_preimages: Vec::new(),\n            // unencrypted_logs_preimages: Vec::new(),\n        }\n    }\n\n    pub fn call_public_function_no_args<RETURNS_COUNT>(\n        self: &mut Self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector\n    ) -> FunctionReturns<RETURNS_COUNT> {\n        self.call_public_function_with_packed_args(contract_address, function_selector, 0, false, false)\n    }\n\n    pub fn static_call_public_function_no_args<RETURNS_COUNT>(\n        self: &mut Self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector\n    ) -> FunctionReturns<RETURNS_COUNT> {\n        self.call_public_function_with_packed_args(contract_address, function_selector, 0, true, false)\n    }\n\n    pub fn delegate_call_public_function_no_args<RETURNS_COUNT>(\n        self: &mut Self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector\n    ) -> FunctionReturns<RETURNS_COUNT> {\n        self.call_public_function_with_packed_args(contract_address, function_selector, 0, false, true)\n    }\n\n    pub fn call_public_function_with_packed_args<RETURNS_COUNT>(\n        self: &mut Self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args_hash: Field,\n        is_static_call: bool,\n        is_delegate_call: bool\n    ) -> FunctionReturns<RETURNS_COUNT> {\n        let side_effect_counter = self.side_effect_counter;\n        // TODO get next value from output of `call_public_function_internal`\n        self.side_effect_counter += 1;\n\n        let raw_returns = call_public_function_internal(\n            contract_address,\n            function_selector,\n            args_hash,\n            side_effect_counter,\n            is_static_call,\n            is_delegate_call\n        );\n\n        FunctionReturns::new(raw_returns)\n    }\n\n    pub fn set_return_hash(&mut self, returns_hasher: ArgsHasher) {\n        returns::pack_returns(returns_hasher.fields);\n        self.return_hash = returns_hasher.hash();\n    }\n\n    // Keep private or ask the AVM team if you want to change it.\n    fn push_nullifier_read_request(&mut self, nullifier: Field) {\n        let request = ReadRequest { value: nullifier, counter: self.side_effect_counter };\n        self.nullifier_read_requests.push(request);\n        self.side_effect_counter = self.side_effect_counter + 1;\n    }\n\n    // Keep private or ask the AVM team if you want to change it.\n    fn push_nullifier_non_existent_read_request(&mut self, nullifier: Field) {\n        let request = ReadRequest { value: nullifier, counter: self.side_effect_counter };\n        self.nullifier_non_existent_read_requests.push(request);\n        self.side_effect_counter = self.side_effect_counter + 1;\n    }\n\n    pub fn finish(self) -> PublicCircuitPublicInputs {\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n        let unencrypted_logs_hash = 0;\n        let unencrypted_log_preimages_length = 0;\n\n        // Compute the public call stack hashes\n        let pub_circuit_pub_inputs = PublicCircuitPublicInputs {\n            call_context: self.inputs.call_context, // Done\n            args_hash: self.args_hash, // Done\n            nullifier_read_requests: self.nullifier_read_requests.storage,\n            nullifier_non_existent_read_requests: self.nullifier_non_existent_read_requests.storage,\n            contract_storage_update_requests: self.contract_storage_update_requests.storage,\n            contract_storage_reads: self.contract_storage_reads.storage,\n            returns_hash: self.return_hash,\n            new_note_hashes: self.new_note_hashes.storage,\n            new_nullifiers: self.new_nullifiers.storage,\n            public_call_stack_hashes: self.public_call_stack_hashes.storage,\n            new_l2_to_l1_msgs: self.new_l2_to_l1_msgs.storage,\n            start_side_effect_counter: self.inputs.start_side_effect_counter,\n            end_side_effect_counter: self.side_effect_counter,\n            unencrypted_logs_hash,\n            unencrypted_log_preimages_length,\n            historical_header: self.inputs.historical_header,\n            prover_address: self.prover_address,\n            revert_code: 0,\n            gas_left: self.inputs.call_context.gas_left\n        };\n        pub_circuit_pub_inputs\n    }\n}\n\nimpl ContextInterface for PublicContext {\n    fn msg_sender(self) -> AztecAddress {\n        self.inputs.call_context.msg_sender\n    }\n\n    fn this_address(self) -> AztecAddress {\n        self.inputs.call_context.storage_contract_address\n    }\n\n    fn this_portal_address(self) -> EthAddress {\n        self.inputs.call_context.portal_contract_address\n    }\n\n    fn chain_id(self) -> Field {\n        self.inputs.public_global_variables.chain_id\n    }\n\n    fn version(self) -> Field {\n        self.inputs.public_global_variables.version\n    }\n\n    fn selector(self) -> FunctionSelector {\n        self.inputs.call_context.function_selector\n    }\n\n    fn get_args_hash(self) -> Field {\n        self.args_hash\n    }\n\n    fn push_new_note_hash(&mut self, note_hash: Field) {\n        let side_effect = SideEffect { value: note_hash, counter: self.side_effect_counter };\n        self.new_note_hashes.push(side_effect);\n        self.side_effect_counter = self.side_effect_counter + 1;\n    }\n\n    fn push_new_nullifier(&mut self, nullifier: Field, _nullified_commitment: Field) {\n        let side_effect = SideEffectLinkedToNoteHash {\n            value: nullifier,\n            note_hash: 0, // cannot nullify pending notes in public context\n            counter: self.side_effect_counter\n        };\n        self.new_nullifiers.push(side_effect);\n        self.side_effect_counter = self.side_effect_counter + 1;\n    }\n}\n\nimpl PublicContextInterface for PublicContext {\n    fn block_number(self) -> Field {\n        self.inputs.public_global_variables.block_number\n    }\n\n    fn timestamp(self) -> u64 {\n        self.inputs.public_global_variables.timestamp\n    }\n\n    fn coinbase(self) -> EthAddress {\n        self.inputs.public_global_variables.coinbase\n    }\n\n    fn fee_recipient(self) -> AztecAddress {\n        self.inputs.public_global_variables.fee_recipient\n    }\n\n    fn fee_per_da_gas(self) -> Field {\n        self.inputs.public_global_variables.gas_fees.fee_per_da_gas\n    }\n\n    fn fee_per_l1_gas(self) -> Field {\n        self.inputs.public_global_variables.gas_fees.fee_per_l1_gas\n    }\n\n    fn fee_per_l2_gas(self) -> Field {\n        self.inputs.public_global_variables.gas_fees.fee_per_l2_gas\n    }\n\n    fn nullifier_exists(self, unsiloed_nullifier: Field, address: AztecAddress) -> bool {\n        // Current public can only check for settled nullifiers, so we always silo.\n        let siloed_nullifier = silo_nullifier(address, unsiloed_nullifier);\n        nullifier_exists_oracle(siloed_nullifier) == 1\n    }\n\n    fn message_portal(&mut self, recipient: EthAddress, content: Field) {\n        let message = L2ToL1Message { recipient, content };\n        self.new_l2_to_l1_msgs.push(message);\n    }\n\n    // We can consume message with a secret in public context because the message cannot be modified and therefore\n    // there is no front-running risk (e.g. somebody could front run you to claim your tokens to your address).\n    fn consume_l1_to_l2_message(&mut self, content: Field, secret: Field, sender: EthAddress) {\n        let this = (*self).this_address();\n        let nullifier = process_l1_to_l2_message(\n            self.historical_header.state.l1_to_l2_message_tree.root,\n            this,\n            sender,\n            self.chain_id(),\n            self.version(),\n            content,\n            secret\n        );\n\n        // Push nullifier (and the \"commitment\" corresponding to this can be \"empty\")\n        self.push_new_nullifier(nullifier, 0)\n    }\n\n    fn accumulate_encrypted_logs<N>(&mut self, log: [Field; N]) {\n        let _void1 = self;\n        let _void2 = log;\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n    }\n\n    fn accumulate_unencrypted_logs<T>(&mut self, log: T) {\n        let _void1 = self;\n        let _void2 = log;\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n    }\n\n    fn call_public_function<ARGS_COUNT, RETURNS_COUNT>(\n        self: &mut Self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT],\n        _gas: GasOpts\n    ) -> FunctionReturns<RETURNS_COUNT> {\n        let args_hash = hash_args_array(args);\n        assert(args_hash == arguments::pack_arguments(args));\n        self.call_public_function_with_packed_args(contract_address, function_selector, args_hash, false, false)\n    }\n\n    fn static_call_public_function<ARGS_COUNT, RETURNS_COUNT>(\n        self: &mut Self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT],\n        _gas: GasOpts\n    ) -> FunctionReturns<RETURNS_COUNT> {\n        let args_hash = hash_args_array(args);\n        assert(args_hash == arguments::pack_arguments(args));\n        self.call_public_function_with_packed_args(contract_address, function_selector, args_hash, true, false)\n    }\n\n    fn delegate_call_public_function<ARGS_COUNT, RETURNS_COUNT>(\n        self: &mut Self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT]\n    ) -> FunctionReturns<RETURNS_COUNT> {\n        let args_hash = hash_args_array(args);\n        assert(args_hash == arguments::pack_arguments(args));\n        self.call_public_function_with_packed_args(contract_address, function_selector, args_hash, false, true)\n    }\n}\n\nimpl Empty for PublicContext {\n    fn empty() -> Self {\n        PublicContext {\n            inputs: PublicContextInputs::empty(),\n            side_effect_counter: 0 as u32,\n            args_hash : 0,\n            return_hash : 0,\n            nullifier_read_requests: BoundedVec::new(),\n            nullifier_non_existent_read_requests: BoundedVec::new(),\n            contract_storage_update_requests: BoundedVec::new(),\n            contract_storage_reads: BoundedVec::new(),\n            public_call_stack_hashes: BoundedVec::new(),\n            new_note_hashes: BoundedVec::new(),\n            new_nullifiers: BoundedVec::new(),\n            new_l2_to_l1_msgs: BoundedVec::new(),\n            unencrypted_logs_hash: 0,\n            unencrypted_logs_preimages_length: 0,\n            historical_header: Header::empty(),\n            prover_address: AztecAddress::zero(),\n        }\n    }\n}\n\n#[oracle(checkNullifierExists)]\nfn nullifier_exists_oracle(nullifier: Field) -> Field {}\n\nstruct FunctionReturns<N> {\n    values: [Field; N]\n}\n\nimpl<N> FunctionReturns<N> {\n    pub fn new(values: [Field; N]) -> FunctionReturns<N> {\n        FunctionReturns { values }\n    }\n\n    pub fn assert_empty(returns: FunctionReturns<0>) {\n        assert(returns.values.len() == 0);\n    }\n\n    pub fn raw(self) -> [Field; N] {\n        self.values\n    }\n\n    pub fn deserialize_into<T>(self) -> T where T: Deserialize<N> {\n        Deserialize::deserialize(self.raw())\n    }\n}\n","path":"/Users/jack-sw/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.35.1/noir-projects/aztec-nr/aztec/src/context/public_context.nr"},"68":{"source":"use crate::{\n    context::{inputs::PrivateContextInputs, interface::ContextInterface},\n    key::nullifier_key::validate_nullifier_key_against_address, messaging::process_l1_to_l2_message,\n    hash::{hash_args_array, ArgsHasher},\n    oracle::{\n    arguments, returns, call_private_function::call_private_function_internal,\n    enqueue_public_function_call::enqueue_public_function_call_internal, context::get_portal_address,\n    header::get_header_at, nullifier_key::{get_nullifier_key_pair, NullifierKeyPair}\n}\n};\nuse dep::protocol_types::{\n    abis::{\n    gas::Gas, call_context::CallContext, function_data::FunctionData,\n    function_selector::FunctionSelector, max_block_number::MaxBlockNumber,\n    nullifier_key_validation_request::NullifierKeyValidationRequest,\n    private_call_stack_item::PrivateCallStackItem,\n    private_circuit_public_inputs::PrivateCircuitPublicInputs,\n    public_call_stack_item::PublicCallStackItem,\n    public_circuit_public_inputs::PublicCircuitPublicInputs, read_request::ReadRequest,\n    side_effect::{SideEffect, SideEffectLinkedToNoteHash}\n},\n    address::{AztecAddress, EthAddress},\n    constants::{\n    MAX_NEW_NOTE_HASHES_PER_CALL, MAX_NEW_L2_TO_L1_MSGS_PER_CALL, MAX_NEW_NULLIFIERS_PER_CALL,\n    MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL, MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL,\n    MAX_PUBLIC_DATA_READS_PER_CALL, MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL,\n    MAX_NOTE_HASH_READ_REQUESTS_PER_CALL, MAX_NULLIFIER_READ_REQUESTS_PER_CALL,\n    MAX_NULLIFIER_NON_EXISTENT_READ_REQUESTS_PER_CALL, MAX_NULLIFIER_KEY_VALIDATION_REQUESTS_PER_CALL\n},\n    contrakt::{storage_read::StorageRead, storage_update_request::StorageUpdateRequest},\n    grumpkin_private_key::GrumpkinPrivateKey, header::Header,\n    messaging::l2_to_l1_message::L2ToL1Message, utils::reader::Reader,\n    traits::{is_empty, Deserialize, Empty}\n};\n\n// TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n// use dep::std::collections::vec::Vec;\n\n// When finished, one can call .finish() to convert back to the abi\nstruct PrivateContext {\n    // docs:start:private-context\n    inputs: PrivateContextInputs,\n    side_effect_counter: u32,\n\n    min_revertible_side_effect_counter: u32,\n\n    args_hash : Field,\n    return_hash : Field,\n\n    max_block_number: MaxBlockNumber,\n\n    note_hash_read_requests: BoundedVec<SideEffect, MAX_NOTE_HASH_READ_REQUESTS_PER_CALL>,\n    nullifier_read_requests: BoundedVec<ReadRequest, MAX_NULLIFIER_READ_REQUESTS_PER_CALL>,\n    nullifier_key_validation_requests: BoundedVec<NullifierKeyValidationRequest, MAX_NULLIFIER_KEY_VALIDATION_REQUESTS_PER_CALL>,\n\n    new_note_hashes: BoundedVec<SideEffect, MAX_NEW_NOTE_HASHES_PER_CALL>,\n    new_nullifiers: BoundedVec<SideEffectLinkedToNoteHash, MAX_NEW_NULLIFIERS_PER_CALL>,\n\n    private_call_stack_hashes : BoundedVec<Field, MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL>,\n    public_call_stack_hashes : BoundedVec<Field, MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL>,\n    new_l2_to_l1_msgs : BoundedVec<L2ToL1Message, MAX_NEW_L2_TO_L1_MSGS_PER_CALL>,\n    // docs:end:private-context\n\n    // Header of a block whose state is used during private execution (not the block the transaction is included in).\n    historical_header: Header,\n\n    // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n    // encrypted_logs_preimages: Vec<Field>,\n    // unencrypted_logs_preimages: Vec<Field>,\n\n    nullifier_key: Option<NullifierKeyPair>,\n}\n\nimpl ContextInterface for PrivateContext {\n    fn msg_sender(self) -> AztecAddress {\n        self.inputs.call_context.msg_sender\n    }\n\n    fn this_address(self) -> AztecAddress {\n        self.inputs.call_context.storage_contract_address\n    }\n\n    fn this_portal_address(self) -> EthAddress {\n        self.inputs.call_context.portal_contract_address\n    }\n\n    fn chain_id(self) -> Field {\n        self.inputs.private_global_variables.chain_id\n    }\n\n    fn version(self) -> Field {\n        self.inputs.private_global_variables.version\n    }\n\n    fn selector(self) -> FunctionSelector {\n        self.inputs.call_context.function_selector\n    }\n\n    fn get_args_hash(self) -> Field {\n        self.args_hash\n    }\n\n    fn push_new_note_hash(&mut self, note_hash: Field) {\n        let side_effect = SideEffect { value: note_hash, counter: self.side_effect_counter };\n        self.new_note_hashes.push(side_effect);\n        self.side_effect_counter = self.side_effect_counter + 1;\n    }\n\n    fn push_new_nullifier(&mut self, nullifier: Field, nullified_commitment: Field) {\n        let side_effect = SideEffectLinkedToNoteHash { value: nullifier, note_hash: nullified_commitment, counter: self.side_effect_counter };\n        self.new_nullifiers.push(side_effect);\n        self.side_effect_counter = self.side_effect_counter + 1;\n    }\n}\n\nimpl PrivateContext {\n    pub fn new(inputs: PrivateContextInputs, args_hash: Field) -> PrivateContext {\n        let side_effect_counter = inputs.start_side_effect_counter;\n        let mut min_revertible_side_effect_counter = 0;\n        if is_empty(inputs.call_context.msg_sender) {\n            min_revertible_side_effect_counter = side_effect_counter;\n        }\n        PrivateContext {\n            inputs,\n            side_effect_counter,\n            min_revertible_side_effect_counter,\n            args_hash,\n            return_hash: 0,\n            max_block_number: MaxBlockNumber::empty(),\n            note_hash_read_requests: BoundedVec::new(),\n            nullifier_read_requests: BoundedVec::new(),\n            nullifier_key_validation_requests: BoundedVec::new(),\n            new_note_hashes: BoundedVec::new(),\n            new_nullifiers: BoundedVec::new(),\n            historical_header: inputs.historical_header,\n            private_call_stack_hashes: BoundedVec::new(),\n            public_call_stack_hashes: BoundedVec::new(),\n            new_l2_to_l1_msgs: BoundedVec::new(),\n            // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n            // encrypted_logs_preimages: Vec::new(),\n            // unencrypted_logs_preimages: Vec::new(),\n            nullifier_key: Option::none()\n        }\n    }\n\n    // Returns the header of a block whose state is used during private execution (not the block the transaction is\n    // included in).\n    fn get_header(self) -> Header {\n        self.historical_header\n    }\n\n    // Returns the header of an arbitrary block whose block number is less than or equal to the block number\n    // of historical header.\n    pub fn get_header_at(self, block_number: u32) -> Header {\n        get_header_at(block_number, self)\n    }\n\n    pub fn set_return_hash(&mut self, returns_hasher: ArgsHasher) {\n        returns::pack_returns(returns_hasher.fields);\n        self.return_hash = returns_hasher.hash();\n    }\n\n    pub fn finish(self) -> PrivateCircuitPublicInputs {\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n        let encrypted_logs_hash = 0;\n        let unencrypted_logs_hash = 0;\n        let encrypted_log_preimages_length = 0;\n        let unencrypted_log_preimages_length = 0;\n\n        let priv_circuit_pub_inputs = PrivateCircuitPublicInputs {\n            call_context: self.inputs.call_context,\n            args_hash: self.args_hash,\n            returns_hash: self.return_hash,\n            min_revertible_side_effect_counter: self.min_revertible_side_effect_counter,\n            max_block_number: self.max_block_number,\n            note_hash_read_requests: self.note_hash_read_requests.storage,\n            nullifier_read_requests: self.nullifier_read_requests.storage,\n            nullifier_key_validation_requests: self.nullifier_key_validation_requests.storage,\n            new_note_hashes: self.new_note_hashes.storage,\n            new_nullifiers: self.new_nullifiers.storage,\n            private_call_stack_hashes: self.private_call_stack_hashes.storage,\n            public_call_stack_hashes: self.public_call_stack_hashes.storage,\n            new_l2_to_l1_msgs: self.new_l2_to_l1_msgs.storage,\n            start_side_effect_counter: self.inputs.start_side_effect_counter,\n            end_side_effect_counter: self.side_effect_counter,\n            encrypted_logs_hash,\n            unencrypted_logs_hash,\n            encrypted_log_preimages_length,\n            unencrypted_log_preimages_length,\n            historical_header: self.historical_header,\n            chain_id: self.inputs.private_global_variables.chain_id,\n            version: self.inputs.private_global_variables.version\n        };\n\n        priv_circuit_pub_inputs\n    }\n\n    pub fn capture_min_revertible_side_effect_counter(&mut self) {\n        self.min_revertible_side_effect_counter = self.side_effect_counter;\n    }\n\n    // docs:start:max-block-number\n    pub fn set_tx_max_block_number(&mut self, max_block_number: u32) {\n        // docs:end:max-block-number\n        self.max_block_number = MaxBlockNumber::min_with_u32(self.max_block_number, max_block_number);\n    }\n\n    pub fn push_note_hash_read_request(&mut self, note_hash: Field) {\n        let side_effect = SideEffect { value: note_hash, counter: self.side_effect_counter };\n        self.note_hash_read_requests.push(side_effect);\n        self.side_effect_counter = self.side_effect_counter + 1;\n    }\n\n    pub fn push_nullifier_read_request(&mut self, nullifier: Field) {\n        let request = ReadRequest { value: nullifier, counter: self.side_effect_counter };\n        self.nullifier_read_requests.push(request);\n        self.side_effect_counter = self.side_effect_counter + 1;\n    }\n\n    pub fn request_nullifier_secret_key(&mut self, account: AztecAddress) -> GrumpkinPrivateKey {\n        let key_pair = if self.nullifier_key.is_none() {\n            let key_pair = get_nullifier_key_pair(account);\n            validate_nullifier_key_against_address(account, key_pair.public_key);\n            let request = NullifierKeyValidationRequest { public_key: key_pair.public_key, secret_key: key_pair.secret_key };\n            self.nullifier_key_validation_requests.push(request);\n            self.nullifier_key = Option::some(key_pair);\n            key_pair\n        } else {\n            let key_pair = self.nullifier_key.unwrap_unchecked();\n            // If MAX_NULLIFIER_KEY_VALIDATION_REQUESTS_PER_CALL is larger than 1, need to update the way the key pair is cached.\n            assert(MAX_NULLIFIER_KEY_VALIDATION_REQUESTS_PER_CALL == 1);\n            assert(\n                key_pair.account == account, \"Cannot query nullifier key for more than one account per call\"\n            );\n            key_pair\n        };\n        key_pair.secret_key\n    }\n\n    // docs:start:context_message_portal\n    pub fn message_portal(&mut self, recipient: EthAddress, content: Field) {\n        // docs:end:context_message_portal\n        let message = L2ToL1Message { recipient, content };\n        self.new_l2_to_l1_msgs.push(message);\n    }\n\n    // docs:start:context_consume_l1_to_l2_message\n    // docs:start:consume_l1_to_l2_message\n    pub fn consume_l1_to_l2_message(&mut self, content: Field, secret: Field, sender: EthAddress) {\n        // docs:end:context_consume_l1_to_l2_message\n        let nullifier = process_l1_to_l2_message(\n            self.historical_header.state.l1_to_l2_message_tree.root,\n            self.this_address(),\n            sender,\n            self.chain_id(),\n            self.version(),\n            content,\n            secret\n        );\n\n        // Push nullifier (and the \"commitment\" corresponding to this can be \"empty\")\n        self.push_new_nullifier(nullifier, 0)\n    }\n    // docs:end:consume_l1_to_l2_message\n\n    pub fn accumulate_encrypted_logs<N>(&mut self, log: [Field; N]) {\n        let _void1 = self.inputs;\n        let _void2 = log;\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n    }\n\n    pub fn accumulate_unencrypted_logs<T>(&mut self, log: T) {\n        let _void1 = self.inputs;\n        let _void2 = log;\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n    }\n\n    pub fn call_private_function<ARGS_COUNT>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT]\n    ) -> PackedReturns {\n        let args_hash = hash_args_array(args);\n        assert(args_hash == arguments::pack_arguments(args));\n        self.call_private_function_with_packed_args(contract_address, function_selector, args_hash, false, false)\n    }\n\n    pub fn static_call_private_function<ARGS_COUNT>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT]\n    ) -> PackedReturns {\n        let args_hash = hash_args_array(args);\n        assert(args_hash == arguments::pack_arguments(args));\n        self.call_private_function_with_packed_args(contract_address, function_selector, args_hash, true, false)\n    }\n\n    pub fn delegate_call_private_function<ARGS_COUNT>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT]\n    ) -> PackedReturns {\n        let args_hash = hash_args_array(args);\n        assert(args_hash == arguments::pack_arguments(args));\n        self.call_private_function_with_packed_args(contract_address, function_selector, args_hash, false, true)\n    }\n\n    pub fn call_private_function_no_args<RETURNS_COUNT>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector\n    ) -> PackedReturns {\n        self.call_private_function_with_packed_args(contract_address, function_selector, 0, false, false)\n    }\n\n    pub fn static_call_private_function_no_args<RETURNS_COUNT>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector\n    ) -> PackedReturns {\n        self.call_private_function_with_packed_args(contract_address, function_selector, 0, true, false)\n    }\n\n    pub fn delegate_call_private_function_no_args<ARGS_COUNT>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector\n    ) -> PackedReturns {\n        self.call_private_function_with_packed_args(contract_address, function_selector, 0, false, true)\n    }\n\n    pub fn call_private_function_with_packed_args<RETURNS_COUNT>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args_hash: Field,\n        is_static_call: bool,\n        is_delegate_call: bool\n    ) -> PackedReturns {\n        let mut is_static_call = is_static_call | self.inputs.call_context.is_static_call;\n        let item = call_private_function_internal(\n            contract_address,\n            function_selector,\n            args_hash,\n            self.side_effect_counter,\n            is_static_call,\n            is_delegate_call\n        );\n\n        assert_eq(item.public_inputs.call_context.side_effect_counter, self.side_effect_counter);\n        assert_eq(item.public_inputs.start_side_effect_counter, self.side_effect_counter);\n        self.side_effect_counter = item.public_inputs.end_side_effect_counter + 1;\n\n        // TODO (fees) figure out why this crashes the prover and enable it\n        // we need this in order to pay fees inside child call contexts\n        // assert(\n        //     (item.public_inputs.min_revertible_side_effect_counter == 0 as u32)\n        //     | (item.public_inputs.min_revertible_side_effect_counter\n        //         > self.min_revertible_side_effect_counter)\n        // );\n\n        // if item.public_inputs.min_revertible_side_effect_counter\n        //     > self.min_revertible_side_effect_counter {\n        //     self.min_revertible_side_effect_counter = item.public_inputs.min_revertible_side_effect_counter;\n        // }\n\n        assert(contract_address.eq(item.contract_address));\n        assert(function_selector.eq(item.function_data.selector));\n\n        assert(args_hash == item.public_inputs.args_hash);\n\n        // Assert that the call context of the enqueued call generated by the oracle matches our request.\n        assert(item.public_inputs.call_context.is_delegate_call == is_delegate_call);\n        assert(item.public_inputs.call_context.is_static_call == is_static_call);\n\n        if (is_delegate_call) {\n            // For delegate calls, we also constrain the execution context address for the nested call to be equal to our address.\n            assert(\n                item.public_inputs.call_context.storage_contract_address.eq(self.inputs.call_context.storage_contract_address)\n            );\n            assert(item.public_inputs.call_context.msg_sender.eq(self.inputs.call_context.msg_sender));\n        } else {\n            // For non-delegate calls, we also constrain the execution context address for the nested call to be equal to the address we called.\n            assert(item.public_inputs.call_context.storage_contract_address.eq(contract_address));\n            assert(\n                item.public_inputs.call_context.msg_sender.eq(self.inputs.call_context.storage_contract_address)\n            );\n        }\n\n        self.private_call_stack_hashes.push(item.hash());\n\n        PackedReturns::new(item.public_inputs.returns_hash)\n    }\n\n    pub fn call_public_function<ARGS_COUNT>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT]\n    ) {\n        let args_hash = hash_args_array(args);\n        assert(args_hash == arguments::pack_arguments(args));\n        self.call_public_function_with_packed_args(contract_address, function_selector, args_hash, false, false)\n    }\n\n    pub fn static_call_public_function<ARGS_COUNT>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT]\n    ) {\n        let args_hash = hash_args_array(args);\n        assert(args_hash == arguments::pack_arguments(args));\n        self.call_public_function_with_packed_args(contract_address, function_selector, args_hash, true, false)\n    }\n\n    pub fn delegate_call_public_function<ARGS_COUNT>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT]\n    ) {\n        let args_hash = hash_args_array(args);\n        assert(args_hash == arguments::pack_arguments(args));\n        self.call_public_function_with_packed_args(contract_address, function_selector, args_hash, false, true)\n    }\n\n    pub fn call_public_function_no_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector\n    ) {\n        self.call_public_function_with_packed_args(contract_address, function_selector, 0, false, false)\n    }\n\n    pub fn static_call_public_function_no_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector\n    ) {\n        self.call_public_function_with_packed_args(contract_address, function_selector, 0, true, false)\n    }\n\n    pub fn delegate_call_public_function_no_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector\n    ) {\n        self.call_public_function_with_packed_args(contract_address, function_selector, 0, false, true)\n    }\n\n    pub fn call_public_function_with_packed_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args_hash: Field,\n        is_static_call: bool,\n        is_delegate_call: bool\n    ) {\n        let mut is_static_call = is_static_call | self.inputs.call_context.is_static_call;\n        let fields = enqueue_public_function_call_internal(\n            contract_address,\n            function_selector,\n            args_hash,\n            self.side_effect_counter,\n            is_static_call,\n            is_delegate_call\n        );\n\n        let mut reader = Reader::new(fields);\n\n        // Note: Not using PublicCirclePublicInputs::deserialize here, because everything below args_hash is 0 and\n        // there is no more data in fields because there is only ENQUEUE_PUBLIC_FUNCTION_CALL_RETURN_SIZE fields!\n        let item = PublicCallStackItem {\n            contract_address: AztecAddress::from_field(reader.read()),\n            function_data: reader.read_struct(FunctionData::deserialize),\n            public_inputs: PublicCircuitPublicInputs {\n                call_context: reader.read_struct(CallContext::deserialize),\n                args_hash: reader.read(),\n                returns_hash: 0,\n                nullifier_read_requests: [ReadRequest::empty(); MAX_NULLIFIER_READ_REQUESTS_PER_CALL],\n                nullifier_non_existent_read_requests: [ReadRequest::empty(); MAX_NULLIFIER_NON_EXISTENT_READ_REQUESTS_PER_CALL],\n                contract_storage_update_requests: [StorageUpdateRequest::empty(); MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL],\n                contract_storage_reads: [StorageRead::empty(); MAX_PUBLIC_DATA_READS_PER_CALL],\n                public_call_stack_hashes: [0; MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL],\n                new_note_hashes: [SideEffect::empty(); MAX_NEW_NOTE_HASHES_PER_CALL],\n                new_nullifiers: [SideEffectLinkedToNoteHash::empty(); MAX_NEW_NULLIFIERS_PER_CALL],\n                new_l2_to_l1_msgs: [L2ToL1Message::empty(); MAX_NEW_L2_TO_L1_MSGS_PER_CALL],\n                start_side_effect_counter: 0,\n                end_side_effect_counter: 0,\n                unencrypted_logs_hash: 0,\n                unencrypted_log_preimages_length: 0,\n                historical_header: Header::empty(),\n                prover_address: AztecAddress::zero(),\n                revert_code: 0,\n                gas_left: Gas::empty()\n            },\n            is_execution_request: true\n        };\n        reader.finish();\n\n        assert(contract_address.eq(item.contract_address));\n        assert(function_selector.eq(item.function_data.selector));\n\n        assert_eq(item.public_inputs.call_context.side_effect_counter, self.side_effect_counter);\n        // We increment the sideffect counter by one, to account for the call itself being a side effect.\n        self.side_effect_counter = self.side_effect_counter + 1;\n\n        assert(args_hash == item.public_inputs.args_hash);\n\n        // Assert that the call context of the enqueued call generated by the oracle matches our request.\n        assert(item.public_inputs.call_context.is_delegate_call == is_delegate_call);\n        assert(item.public_inputs.call_context.is_static_call == is_static_call);\n\n        if (is_delegate_call) {\n            // For delegate calls, we also constrain the execution context address for the nested call to be equal to our address.\n            assert(\n                item.public_inputs.call_context.storage_contract_address.eq(self.inputs.call_context.storage_contract_address)\n            );\n            assert(item.public_inputs.call_context.msg_sender.eq(self.inputs.call_context.msg_sender));\n        } else {\n            // For non-delegate calls, we also constrain the execution context address for the nested call to be equal to the address we called.\n            assert(item.public_inputs.call_context.storage_contract_address.eq(contract_address));\n            assert(\n                item.public_inputs.call_context.msg_sender.eq(self.inputs.call_context.storage_contract_address)\n            );\n        }\n\n        self.public_call_stack_hashes.push(item.hash());\n    }\n}\n\nimpl Empty for PrivateContext {\n    fn empty() -> Self {\n        PrivateContext {\n            inputs: PrivateContextInputs::empty(),\n            side_effect_counter: 0 as u32,\n            min_revertible_side_effect_counter: 0 as u32,\n            args_hash : 0,\n            return_hash : 0,\n            max_block_number: MaxBlockNumber::empty(),\n            note_hash_read_requests: BoundedVec::new(),\n            nullifier_read_requests: BoundedVec::new(),\n            nullifier_key_validation_requests: BoundedVec::new(),\n            new_note_hashes: BoundedVec::new(),\n            new_nullifiers: BoundedVec::new(),\n            private_call_stack_hashes : BoundedVec::new(),\n            public_call_stack_hashes : BoundedVec::new(),\n            new_l2_to_l1_msgs : BoundedVec::new(),\n            historical_header: Header::empty(),\n            nullifier_key: Option::none(),\n        }\n    }\n}\n\nstruct PackedReturns {\n  packed_returns: Field,\n}\n\nimpl PackedReturns {\n    pub fn new(packed_returns: Field) -> Self {\n        PackedReturns { packed_returns }\n    }\n\n    pub fn assert_empty(self) {\n        assert_eq(self.packed_returns, 0);\n    }\n\n    pub fn raw(self) -> Field {\n        self.packed_returns\n    }\n\n    pub fn unpack<N>(self) -> [Field; N] {\n        let unpacked: [Field; N] = returns::unpack_returns(self.packed_returns);\n        assert_eq(self.packed_returns, hash_args_array(unpacked));\n        unpacked\n    }\n\n    pub fn unpack_into<T, N>(self) -> T where T: Deserialize<N> {\n        let unpacked: [Field; N] = self.unpack();\n        Deserialize::deserialize(unpacked)\n    }\n}\n","path":"/Users/jack-sw/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.35.1/noir-projects/aztec-nr/aztec/src/context/private_context.nr"},"73":{"source":"use dep::protocol_types::{abis::function_selector::FunctionSelector, address::AztecAddress};\n\n#[oracle(callPublicFunction)]\nfn call_public_function_oracle<RETURNS_COUNT>(\n    _contract_address: AztecAddress,\n    _function_selector: FunctionSelector,\n    _args_hash: Field,\n    _side_effect_counter: u32,\n    _is_static_call: bool,\n    _is_delegate_call: bool\n) -> [Field; RETURNS_COUNT] {}\n\nunconstrained pub fn call_public_function_internal<RETURNS_COUNT>(\n    contract_address: AztecAddress,\n    function_selector: FunctionSelector,\n    args_hash: Field,\n    side_effect_counter: u32,\n    is_static_call: bool,\n    is_delegate_call: bool\n) -> [Field; RETURNS_COUNT] {\n    call_public_function_oracle(\n        contract_address,\n        function_selector,\n        args_hash,\n        side_effect_counter,\n        is_static_call,\n        is_delegate_call\n    )\n}\n","path":"/Users/jack-sw/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.35.1/noir-projects/aztec-nr/aztec/src/oracle/public_call.nr"},"75":{"source":"use dep::protocol_types::{\n    abis::{function_selector::FunctionSelector, private_call_stack_item::PrivateCallStackItem},\n    address::AztecAddress, constants::PRIVATE_CALL_STACK_ITEM_LENGTH\n};\n\n#[oracle(callPrivateFunction)]\nfn call_private_function_oracle(\n    _contract_address: AztecAddress,\n    _function_selector: FunctionSelector,\n    _args_hash: Field,\n    _start_side_effect_counter: u32,\n    _is_static_call: bool,\n    _is_delegate_call: bool\n) -> [Field; PRIVATE_CALL_STACK_ITEM_LENGTH] {}\n\nunconstrained pub fn call_private_function_internal(\n    contract_address: AztecAddress,\n    function_selector: FunctionSelector,\n    args_hash: Field,\n    start_side_effect_counter: u32,\n    is_static_call: bool,\n    is_delegate_call: bool\n) -> PrivateCallStackItem {\n    let fields = call_private_function_oracle(\n        contract_address,\n        function_selector,\n        args_hash,\n        start_side_effect_counter,\n        is_static_call,\n        is_delegate_call\n    );\n\n    PrivateCallStackItem::deserialize(fields)\n}\n","path":"/Users/jack-sw/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.35.1/noir-projects/aztec-nr/aztec/src/oracle/call_private_function.nr"},"78":{"source":"use dep::protocol_types::{\n    abis::function_selector::FunctionSelector, address::AztecAddress,\n    constants::ENQUEUE_PUBLIC_FUNCTION_CALL_RETURN_LENGTH\n};\n\n#[oracle(enqueuePublicFunctionCall)]\nfn enqueue_public_function_call_oracle(\n    _contract_address: AztecAddress,\n    _function_selector: FunctionSelector,\n    _args_hash: Field,\n    _side_effect_counter: u32,\n    _is_static_call: bool,\n    _is_delegate_call: bool\n) -> [Field; ENQUEUE_PUBLIC_FUNCTION_CALL_RETURN_LENGTH] {}\n\nunconstrained pub fn enqueue_public_function_call_internal(\n    contract_address: AztecAddress,\n    function_selector: FunctionSelector,\n    args_hash: Field,\n    side_effect_counter: u32,\n    is_static_call: bool,\n    is_delegate_call: bool\n) -> [Field; ENQUEUE_PUBLIC_FUNCTION_CALL_RETURN_LENGTH] {\n    enqueue_public_function_call_oracle(\n        contract_address,\n        function_selector,\n        args_hash,\n        side_effect_counter,\n        is_static_call,\n        is_delegate_call\n    )\n}\n","path":"/Users/jack-sw/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.35.1/noir-projects/aztec-nr/aztec/src/oracle/enqueue_public_function_call.nr"},"79":{"source":"#[oracle(packArguments)]\nfn pack_arguments_oracle<N>(_args: [Field; N]) -> Field {}\n\n/// - Pack arguments will notify the simulator that these arguments will be used later at\n///   some point in the call. \n/// - When the external call is made later, the simulator will know what the values unpack to.\n/// - This oracle will not be required in public vm functions, as the vm will keep track of arguments \n///   itself.\nunconstrained pub fn pack_arguments<N>(args: [Field; N]) -> Field {\n    pack_arguments_oracle(args)\n}\n","path":"/Users/jack-sw/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.35.1/noir-projects/aztec-nr/aztec/src/oracle/arguments.nr"},"81":{"source":"use dep::protocol_types::traits::{Deserialize, Serialize};\n\n#[oracle(storageRead)]\nfn storage_read_oracle<N>(_storage_slot: Field, _number_of_elements: Field) -> [Field; N] {}\n\nunconstrained fn storage_read_oracle_wrapper<N>(_storage_slot: Field) -> [Field; N] {\n    storage_read_oracle(_storage_slot, N)\n}\n\npub fn storage_read<N>(storage_slot: Field) -> [Field; N] {\n    storage_read_oracle_wrapper(storage_slot)\n}\n\n#[oracle(storageWrite)]\nfn storage_write_oracle<N>(_storage_slot: Field, _values: [Field; N]) -> [Field; N] {}\n\nunconstrained pub fn storage_write<N>(storage_slot: Field, fields: [Field; N]) {\n    let _hash = storage_write_oracle(storage_slot, fields);\n}\n","path":"/Users/jack-sw/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.35.1/noir-projects/aztec-nr/aztec/src/oracle/storage.nr"},"86":{"source":"use dep::protocol_types::{\n    constants::PUBLIC_DATA_TREE_HEIGHT, hash::pedersen_hash,\n    public_data_tree_leaf_preimage::PublicDataTreeLeafPreimage, traits::{Hash, Serialize},\n    utils::arr_copy_slice\n};\n\nglobal LEAF_PREIMAGE_LENGTH: u64 = 4;\nglobal PUBLIC_DATA_WITNESS: Field = 45;\n\nstruct PublicDataWitness {\n    index: Field,\n    leaf_preimage: PublicDataTreeLeafPreimage,\n    path: [Field; PUBLIC_DATA_TREE_HEIGHT],\n}\n\n#[oracle(getPublicDataTreeWitness)]\nfn get_public_data_witness_oracle(\n    _block_number: u32,\n    _leaf_slot: Field\n) -> [Field; PUBLIC_DATA_WITNESS] {}\n\nunconstrained pub fn get_public_data_witness(block_number: u32, leaf_slot: Field) -> PublicDataWitness {\n    let fields = get_public_data_witness_oracle(block_number, leaf_slot);\n    PublicDataWitness {\n        index: fields[0],\n        leaf_preimage: PublicDataTreeLeafPreimage { slot: fields[1], value: fields[2], next_index: fields[3] as u64, next_slot: fields[4] },\n        path: arr_copy_slice(fields, [0; PUBLIC_DATA_TREE_HEIGHT], 1 + LEAF_PREIMAGE_LENGTH)\n    }\n}\n","path":"/Users/jack-sw/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.35.1/noir-projects/aztec-nr/aztec/src/oracle/get_public_data_witness.nr"},"88":{"source":"use dep::protocol_types::{\n    address::AztecAddress, contract_instance::ContractInstance, utils::arr_copy_slice,\n    constants::CONTRACT_INSTANCE_LENGTH, utils::reader::Reader\n};\n\n#[oracle(getContractInstance)]\nfn get_contract_instance_oracle(_address: AztecAddress) -> [Field; CONTRACT_INSTANCE_LENGTH] {}\n\n// Returns a ContractInstance plus a boolean indicating whether the instance was found.\n#[oracle(avmOpcodeGetContractInstance)]\nfn get_contract_instance_oracle_avm(_address: AztecAddress) -> [Field; CONTRACT_INSTANCE_LENGTH + 1] {}\n\nunconstrained fn get_contract_instance_internal(address: AztecAddress) -> [Field; CONTRACT_INSTANCE_LENGTH] {\n    get_contract_instance_oracle(address)\n}\n\nunconstrained fn get_contract_instance_internal_avm(address: AztecAddress) -> [Field; CONTRACT_INSTANCE_LENGTH + 1] {\n    get_contract_instance_oracle_avm(address)\n}\n\npub fn get_contract_instance(address: AztecAddress) -> ContractInstance {\n    let instance = ContractInstance::deserialize(get_contract_instance_internal(address));\n    assert(instance.to_address().eq(address));\n    instance\n}\n\npub fn get_contract_instance_avm(address: AztecAddress) -> Option<ContractInstance> {\n    let mut reader = Reader::new(get_contract_instance_internal_avm(address));\n    let found = reader.read();\n    if found == 0 {\n        Option::none()\n    } else {\n        Option::some(reader.read_struct(ContractInstance::deserialize))\n    }\n}\n","path":"/Users/jack-sw/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.35.1/noir-projects/aztec-nr/aztec/src/oracle/get_contract_instance.nr"},"89":{"source":"use dep::protocol_types::{\n    abis::nullifier_leaf_preimage::{NullifierLeafPreimage, NULLIFIER_LEAF_PREIMAGE_LENGTH},\n    constants::NULLIFIER_TREE_HEIGHT, hash::pedersen_hash, utils::arr_copy_slice\n};\n\n// INDEX_LENGTH + NULLIFIER_LEAF_PREIMAGE_LENGTH + NULLIFIER_TREE_HEIGHT\nglobal NULLIFIER_MEMBERSHIP_WITNESS: Field = 24;\n\nstruct NullifierMembershipWitness {\n    index: Field,\n    leaf_preimage: NullifierLeafPreimage,\n    path: [Field; NULLIFIER_TREE_HEIGHT],\n}\n\nimpl NullifierMembershipWitness {\n    pub fn deserialize(fields: [Field; NULLIFIER_MEMBERSHIP_WITNESS]) -> Self {\n        let leaf_preimage_fields = arr_copy_slice(fields, [0; NULLIFIER_LEAF_PREIMAGE_LENGTH], 1);\n        Self {\n            index: fields[0],\n            leaf_preimage: NullifierLeafPreimage::deserialize(leaf_preimage_fields),\n            path: arr_copy_slice(\n                fields,\n                [0; NULLIFIER_TREE_HEIGHT],\n                1 + NULLIFIER_LEAF_PREIMAGE_LENGTH\n            )\n        }\n    }\n}\n\n#[oracle(getLowNullifierMembershipWitness)]\nfn get_low_nullifier_membership_witness_oracle(\n    _block_number: u32,\n    _nullifier: Field\n) -> [Field; NULLIFIER_MEMBERSHIP_WITNESS] {}\n\n// Nullifier here refers to the nullifier we are looking to get non-inclusion proof for (by proving that a lower\n// nullifier's next_value is bigger than the nullifier)\nunconstrained pub fn get_low_nullifier_membership_witness(block_number: u32, nullifier: Field) -> NullifierMembershipWitness {\n    let fields = get_low_nullifier_membership_witness_oracle(block_number, nullifier);\n    NullifierMembershipWitness::deserialize(fields)\n}\n\n#[oracle(getNullifierMembershipWitness)]\nfn get_nullifier_membership_witness_oracle(\n    _block_number: u32,\n    _nullifier: Field\n) -> [Field; NULLIFIER_MEMBERSHIP_WITNESS] {}\n\n// Nullifier here refers to the nullifier we are looking to get non-inclusion proof for (by proving that a lower\n// nullifier's next_value is bigger than the nullifier)\nunconstrained pub fn get_nullifier_membership_witness(block_number: u32, nullifier: Field) -> NullifierMembershipWitness {\n    let fields = get_nullifier_membership_witness_oracle(block_number, nullifier);\n    NullifierMembershipWitness::deserialize(fields)\n}\n","path":"/Users/jack-sw/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.35.1/noir-projects/aztec-nr/aztec/src/oracle/get_nullifier_membership_witness.nr"},"95":{"source":"mod globals;\nmod inputs;\n\nmod private_context;\nmod public_context;\nmod avm_context;\nmod interface;\nmod gas;\n\nuse interface::ContextInterface;\nuse private_context::PrivateContext;\nuse private_context::PackedReturns;\nuse public_context::PublicContext;\nuse public_context::FunctionReturns;\nuse avm_context::AvmContext;\n\nstruct Context {\n    private: Option<&mut PrivateContext>,\n    public: Option<&mut PublicContext>,\n    avm: Option<&mut AvmContext>,\n}\n\nimpl Context {\n    pub fn private(context: &mut PrivateContext) -> Context {\n        Context { private: Option::some(context), public: Option::none(), avm: Option::none() }\n    }\n\n    pub fn public(context: &mut PublicContext) -> Context {\n        Context { public: Option::some(context), private: Option::none(), avm: Option::none() }\n    }\n\n    pub fn avm(context: &mut AvmContext) -> Context {\n        Context { avm: Option::some(context), public: Option::none(), private: Option::none() }\n    }\n\n    pub fn none() -> Context {\n        Context { public: Option::none(), private: Option::none(), avm: Option::none() }\n    }\n}\n","path":"/Users/jack-sw/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.35.1/noir-projects/aztec-nr/aztec/src/context.nr"},"98":{"source":"use dep::protocol_types::{\n    constants::GENERATOR_INDEX__PUBLIC_LEAF_INDEX, hash::pedersen_hash, address::AztecAddress,\n    header::Header, utils::field::full_field_less_than\n};\nuse dep::std::merkle::compute_merkle_root;\n\nuse crate::{context::PrivateContext, oracle::get_public_data_witness::get_public_data_witness};\n\nfn _public_storage_historical_read(storage_slot: Field, contract_address: AztecAddress, header: Header) -> Field {\n    // 1) Compute the leaf slot by siloing the storage slot with the contract address\n    let public_value_leaf_slot = pedersen_hash(\n        [contract_address.to_field(), storage_slot],\n        GENERATOR_INDEX__PUBLIC_LEAF_INDEX\n    );\n\n    // 2) Get the membership witness of the slot\n    let witness = get_public_data_witness(\n        header.global_variables.block_number as u32,\n        public_value_leaf_slot\n    );\n\n    // 3) Extract the value from the witness leaf and check that the storage slot is correct\n    let preimage = witness.leaf_preimage;\n\n    // Here we have two cases. Code based on same checks in `validate_public_data_reads` in `base_rollup_inputs`\n    // 1. The value is the same as the one in the witness\n    // 2. The value was never initialized and is zero\n    let is_less_than_slot = full_field_less_than(preimage.slot, public_value_leaf_slot);\n    let is_next_greater_than = full_field_less_than(public_value_leaf_slot, preimage.next_slot);\n    let is_max = ((preimage.next_index == 0) & (preimage.next_slot == 0));\n    let is_in_range = is_less_than_slot & (is_next_greater_than | is_max);\n\n    let value = if is_in_range {\n        0\n    } else {\n        assert_eq(preimage.slot, public_value_leaf_slot, \"Public data slot doesn't match witness\");\n        preimage.value\n    };\n\n    // 4) Prove that the leaf exists in the public data tree. Note that `hash` returns not just the hash of the value\n    // but also the metadata (slot, next index and next slot).\n    assert(\n        header.state.partial.public_data_tree.root\n        == compute_merkle_root(preimage.hash(), witness.index, witness.path), \"Proving public value inclusion failed\"\n    );\n\n    value\n}\n\npub fn public_storage_historical_read(\n    context: PrivateContext,\n    storage_slot: Field, // The storage slot to read\n    contract_address: AztecAddress // The contract we want to look into\n) -> Field {\n    _public_storage_historical_read(storage_slot, contract_address, context.historical_header)\n}\n\npub fn public_storage_historical_read_at(\n    context: PrivateContext,\n    storage_slot: Field, // The storage slot to read\n    contract_address: AztecAddress, // The contract we want to look into\n    block_number: u32 // The block number at the end of which we'll read the value\n) -> Field {\n    let header = context.get_header_at(block_number);\n\n    _public_storage_historical_read(storage_slot, contract_address, header)\n}\n","path":"/Users/jack-sw/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.35.1/noir-projects/aztec-nr/aztec/src/history/public_storage.nr"},"101":{"source":"use dep::std::merkle::compute_merkle_root;\nuse dep::protocol_types::header::Header;\n\nuse crate::{\n    context::PrivateContext, oracle::get_nullifier_membership_witness::get_nullifier_membership_witness,\n    note::{utils::compute_siloed_nullifier, note_interface::NoteInterface}\n};\n\nfn _nullifier_inclusion(nullifier: Field, header: Header) {\n    // 1) Get the membership witness of the nullifier\n    let witness = get_nullifier_membership_witness(header.global_variables.block_number as u32, nullifier);\n\n    // 2) Check that the witness we obtained matches the nullifier\n    assert(witness.leaf_preimage.nullifier == nullifier, \"Nullifier does not match value in witness\");\n\n    // 3) Compute the nullifier tree leaf\n    let nullifier_leaf = witness.leaf_preimage.hash();\n\n    // 4) Prove that the nullifier is in the nullifier tree\n    assert(\n        header.state.partial.nullifier_tree.root\n        == compute_merkle_root(nullifier_leaf, witness.index, witness.path), \"Proving nullifier inclusion failed\"\n    );\n    // --> Now we have traversed the trees all the way up to archive root and verified that the nullifier\n    //     was included in the nullifier tree.\n}\n\npub fn prove_nullifier_inclusion(nullifier: Field, context: PrivateContext) {\n    _nullifier_inclusion(nullifier, context.get_header());\n}\n\npub fn prove_nullifier_inclusion_at(\n    nullifier: Field,\n    block_number: u32, // The block at which we'll prove that the nullifier exists in the nullifier tree\n    context: PrivateContext\n) {\n    let header = context.get_header_at(block_number);\n\n    _nullifier_inclusion(nullifier, header);\n}\n\npub fn prove_note_is_nullified<Note, N>(\n    note: Note,\n    context: &mut PrivateContext\n) where Note: NoteInterface<N> {\n    let nullifier = compute_siloed_nullifier(note, context);\n\n    _nullifier_inclusion(nullifier, context.historical_header);\n}\n\npub fn prove_note_is_nullified_at<Note, N>(\n    note: Note,\n    block_number: u32,\n    context: &mut PrivateContext\n) where Note: NoteInterface<N> {\n    let nullifier = compute_siloed_nullifier(note, context);\n    let header = context.get_header_at(block_number);\n\n    _nullifier_inclusion(nullifier, header);\n}\n","path":"/Users/jack-sw/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.35.1/noir-projects/aztec-nr/aztec/src/history/nullifier_inclusion.nr"},"102":{"source":"use dep::protocol_types::{\n    address::AztecAddress, hash::{silo_nullifier, pedersen_hash},\n    constants::GENERATOR_INDEX__CONSTRUCTOR, abis::function_selector::FunctionSelector\n};\n\nuse crate::{\n    context::{PrivateContext, PublicContext, AvmContext, ContextInterface},\n    oracle::get_contract_instance::get_contract_instance,\n    oracle::get_contract_instance::get_contract_instance_avm,\n    history::nullifier_inclusion::prove_nullifier_inclusion\n};\n\npub fn mark_as_initialized_public(context: &mut PublicContext) {\n    mark_as_initialized(context);\n}\n\npub fn mark_as_initialized_avm(context: &mut AvmContext) {\n    mark_as_initialized(context);\n}\n\npub fn mark_as_initialized_private(context: &mut PrivateContext) {\n    mark_as_initialized(context);\n}\n\nfn mark_as_initialized<TContext>(context: &mut TContext) where TContext: ContextInterface {\n    let init_nullifier = compute_unsiloed_contract_initialization_nullifier((*context).this_address());\n    ContextInterface::push_new_nullifier(context, init_nullifier, 0);\n}\n\npub fn assert_is_initialized_public(context: &mut PublicContext) {\n    let init_nullifier = compute_unsiloed_contract_initialization_nullifier(context.this_address());\n    assert(context.nullifier_exists(init_nullifier, context.this_address()), \"Not initialized\");\n}\n\npub fn assert_is_initialized_avm(context: &mut AvmContext) {\n    let init_nullifier = compute_unsiloed_contract_initialization_nullifier(context.this_address());\n    assert(context.nullifier_exists(init_nullifier, context.this_address()), \"Not initialized\");\n}\n\npub fn assert_is_initialized_private(context: &mut PrivateContext) {\n    let init_nullifier = compute_contract_initialization_nullifier(context.this_address());\n    prove_nullifier_inclusion(init_nullifier, *context);\n}\n\nfn compute_contract_initialization_nullifier(address: AztecAddress) -> Field {\n    silo_nullifier(\n        address,\n        compute_unsiloed_contract_initialization_nullifier(address)\n    )\n}\n\nfn compute_unsiloed_contract_initialization_nullifier(address: AztecAddress) -> Field {\n    address.to_field()\n}\n\npub fn assert_initialization_matches_address_preimage_public(context: PublicContext) {\n    assert_initialization_matches_address_preimage(context);\n}\n\npub fn assert_initialization_matches_address_preimage_avm(context: AvmContext) {\n    let address = context.this_address();\n    let instance = get_contract_instance_avm(address).unwrap();\n    let expected_init = compute_initialization_hash(context.selector(), context.get_args_hash());\n    assert(instance.initialization_hash == expected_init, \"Initialization hash does not match\");\n    assert(\n        (instance.deployer.is_zero()) | (instance.deployer == context.msg_sender()), \"Initializer address is not the contract deployer\"\n    );\n}\n\npub fn assert_initialization_matches_address_preimage_private(context: PrivateContext) {\n    assert_initialization_matches_address_preimage(context);\n}\n\nfn assert_initialization_matches_address_preimage<TContext>(context: TContext) where TContext: ContextInterface {\n    let address = context.this_address();\n    let instance = get_contract_instance(address);\n    let expected_init = compute_initialization_hash(context.selector(), context.get_args_hash());\n    assert(instance.initialization_hash == expected_init, \"Initialization hash does not match\");\n    assert(\n        (instance.deployer.is_zero()) | (instance.deployer == context.msg_sender()), \"Initializer address is not the contract deployer\"\n    );\n}\n\npub fn compute_initialization_hash(init_selector: FunctionSelector, init_args_hash: Field) -> Field {\n    pedersen_hash(\n        [init_selector.to_field(), init_args_hash],\n        GENERATOR_INDEX__CONSTRUCTOR\n    )\n}\n","path":"/Users/jack-sw/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.35.1/noir-projects/aztec-nr/aztec/src/initializer.nr"},"103":{"source":"use dep::protocol_types::{\n    address::{AztecAddress, EthAddress},\n    constants::{\n    GENERATOR_INDEX__L1_TO_L2_MESSAGE_SECRET, GENERATOR_INDEX__NULLIFIER, ARGS_HASH_CHUNK_COUNT,\n    GENERATOR_INDEX__FUNCTION_ARGS, ARGS_HASH_CHUNK_LENGTH\n},\n    traits::Hash, hash::{pedersen_hash, silo_nullifier}\n};\n\nuse dep::protocol_types::hash::sha256_to_field;\n\npub fn compute_secret_hash(secret: Field) -> Field {\n    // TODO(#1205) This is probably not the right index to use\n    pedersen_hash([secret], GENERATOR_INDEX__L1_TO_L2_MESSAGE_SECRET)\n}\n\npub fn compute_message_hash(\n    sender: EthAddress,\n    chain_id: Field,\n    recipient: AztecAddress,\n    version: Field,\n    content: Field,\n    secret_hash: Field\n) -> Field {\n    let mut hash_bytes = [0 as u8; 192];\n    let sender_bytes = sender.to_field().to_be_bytes(32);\n    let chain_id_bytes = chain_id.to_be_bytes(32);\n    let recipient_bytes = recipient.to_field().to_be_bytes(32);\n    let version_bytes = version.to_be_bytes(32);\n    let content_bytes = content.to_be_bytes(32);\n    let secret_hash_bytes = secret_hash.to_be_bytes(32);\n\n    for i in 0..32 {\n        hash_bytes[i] = sender_bytes[i];\n        hash_bytes[i + 32] = chain_id_bytes[i];\n        hash_bytes[i + 64] = recipient_bytes[i];\n        hash_bytes[i + 96] = version_bytes[i];\n        hash_bytes[i + 128] = content_bytes[i];\n        hash_bytes[i + 160] = secret_hash_bytes[i];\n    }\n\n    sha256_to_field(hash_bytes)\n}\n\n// The nullifier of a l1 to l2 message is the hash of the message salted with the secret and index of the message hash\n// in the L1 to L2 message tree\npub fn compute_message_nullifier(message_hash: Field, secret: Field, leaf_index: Field) -> Field {\n    pedersen_hash(\n        [message_hash, secret, leaf_index],\n        GENERATOR_INDEX__NULLIFIER\n    )\n}\n\npub fn compute_siloed_nullifier(address: AztecAddress, nullifier: Field) -> Field {\n    silo_nullifier(address, nullifier)\n}\n\nstruct ArgsHasher {\n    fields: [Field],\n}\n\nimpl Hash for ArgsHasher {\n    fn hash(self) -> Field {\n        hash_args(self.fields)\n    }\n}\n\nimpl ArgsHasher {\n    pub fn new() -> Self {\n        Self { fields: [] }\n    }\n\n    pub fn add(&mut self, field: Field) {\n        self.fields = self.fields.push_back(field);\n    }\n\n    pub fn add_multiple<N>(&mut self, fields: [Field; N]) {\n        for i in 0..N {\n            self.fields = self.fields.push_back(fields[i]);\n        }\n    }\n}\n\npub fn hash_args_array<N>(args: [Field; N]) -> Field {\n    hash_args(args.as_slice())\n}\n\npub fn hash_args(args: [Field]) -> Field {\n    if args.len() == 0 {\n        0\n    } else {\n        assert(args.len() < ARGS_HASH_CHUNK_COUNT * ARGS_HASH_CHUNK_LENGTH);\n        let mut chunks_hashes = [0; ARGS_HASH_CHUNK_COUNT];\n        let mut current_chunk_values = [0; ARGS_HASH_CHUNK_LENGTH];\n\n        let mut current_chunk_index = 0;\n        let mut index_inside_current_chunk = 0;\n        for i in 0..args.len() {\n            current_chunk_values[index_inside_current_chunk] = args[i];\n            index_inside_current_chunk+=1;\n            if index_inside_current_chunk == ARGS_HASH_CHUNK_LENGTH {\n                chunks_hashes[current_chunk_index] = pedersen_hash(current_chunk_values, GENERATOR_INDEX__FUNCTION_ARGS);\n                current_chunk_values = [0; ARGS_HASH_CHUNK_LENGTH];\n                current_chunk_index+=1;\n                index_inside_current_chunk = 0;\n            }\n        }\n        if index_inside_current_chunk > 0 {\n            chunks_hashes[current_chunk_index] = pedersen_hash(current_chunk_values, GENERATOR_INDEX__FUNCTION_ARGS);\n        }\n        pedersen_hash(chunks_hashes, GENERATOR_INDEX__FUNCTION_ARGS)\n    }\n}\n\n#[test]\nfn compute_var_args_hash() {\n    let mut input = ArgsHasher::new();\n    for i in 0..800 {\n        input.add(i as Field);\n    }\n    let hash = input.hash();\n    assert(hash == 0x05a1023fef839ac88731f49ae983e172c1b600a3c8f3393ad0ac25d819ac0f0f);\n}\n","path":"/Users/jack-sw/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.35.1/noir-projects/aztec-nr/aztec/src/hash.nr"},"108":{"source":"use crate::{\n    context::Context, history::public_storage::public_storage_historical_read,\n    oracle::{storage::{storage_read, storage_write}}, state_vars::storage::Storage\n};\nuse dep::protocol_types::{constants::INITIALIZATION_SLOT_SEPARATOR, traits::{Deserialize, Serialize}};\n\n// Just like PublicImmutable but with the ability to read from private functions.\nstruct SharedImmutable<T>{\n    context: Context,\n    storage_slot: Field,\n}\n\nimpl<T> Storage<T> for SharedImmutable<T> {}\n\nimpl<T> SharedImmutable<T> {\n    pub fn new(\n        // Note: Passing the contexts to new(...) just to have an interface compatible with a Map.\n        context: Context,\n        storage_slot: Field\n    ) -> Self {\n        assert(storage_slot != 0, \"Storage slot 0 not allowed. Storage slots must start from 1.\");\n        Self { context, storage_slot }\n    }\n\n    // Intended to be only called once. \n    pub fn initialize<T_SERIALIZED_LEN>(self, value: T) where T: Serialize<T_SERIALIZED_LEN> {\n        assert(\n            self.context.private.is_none(), \"SharedImmutable can only be initialized from public functions\"\n        );\n        // TODO(#4738): Uncomment the following assert\n        // assert(\n        //     self.context.public.unwrap_unchecked().is_deployment(), \"SharedImmutable can only be initialized during contract deployment\"\n        // );\n\n        // We check that the struct is not yet initialized by checking if the initialization slot is 0\n        let initialization_slot = INITIALIZATION_SLOT_SEPARATOR + self.storage_slot;\n        let fields_read: [Field; 1] = storage_read(initialization_slot);\n        assert(fields_read[0] == 0, \"SharedImmutable already initialized\");\n\n        // We populate the initialization slot with a non-zero value to indicate that the struct is initialized\n        storage_write(initialization_slot, [0xdead]);\n\n        let fields_write = T::serialize(value);\n        storage_write(self.storage_slot, fields_write);\n    }\n\n    pub fn read_public<T_SERIALIZED_LEN>(self) -> T where T: Deserialize<T_SERIALIZED_LEN> {\n        assert(self.context.private.is_none(), \"Public read only supported in public functions\");\n        let fields = storage_read(self.storage_slot);\n        T::deserialize(fields)\n    }\n\n    pub fn read_private<T_SERIALIZED_LEN>(self) -> T  where T: Deserialize<T_SERIALIZED_LEN> {\n        assert(self.context.public.is_none(), \"Private read only supported in private functions\");\n        let private_context = self.context.private.unwrap();\n\n        let mut fields = [0; T_SERIALIZED_LEN];\n\n        for i in 0..fields.len() {\n            fields[i] =\n                public_storage_historical_read(\n                    (*private_context),\n                    self.storage_slot + i as Field,\n                    (*private_context).this_address()\n                );\n        }\n        T::deserialize(fields)\n    }\n}\n","path":"/Users/jack-sw/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.35.1/noir-projects/aztec-nr/aztec/src/state_vars/shared_immutable.nr"},"114":{"source":"use crate::{context::Context, oracle::{storage::{storage_read, storage_write}}, state_vars::storage::Storage};\nuse dep::protocol_types::{constants::INITIALIZATION_SLOT_SEPARATOR, traits::{Deserialize, Serialize}};\n\n// Just like SharedImmutable but without the ability to read from private functions.\n// docs:start:public_immutable_struct\nstruct PublicImmutable<T> {\n    context: Context,\n    storage_slot: Field,\n}\n// docs:end:public_immutable_struct\n\nimpl<T> Storage<T> for PublicImmutable<T> {}\n\nimpl<T> PublicImmutable<T> {\n    // docs:start:public_immutable_struct_new\n    pub fn new(\n        // Note: Passing the contexts to new(...) just to have an interface compatible with a Map.\n        context: Context,\n        storage_slot: Field\n    ) -> Self {\n        assert(storage_slot != 0, \"Storage slot 0 not allowed. Storage slots must start from 1.\");\n        PublicImmutable { context, storage_slot }\n    }\n    // docs:end:public_immutable_struct_new\n\n    // docs:start:public_immutable_struct_write\n    pub fn initialize<T_SERIALIZED_LEN>(self, value: T) where T: Serialize<T_SERIALIZED_LEN> {\n        assert(\n            self.context.private.is_none(), \"PublicImmutable can only be initialized from public functions\"\n        );\n        // TODO(#4738): Uncomment the following assert\n        // assert(\n        //     self.context.public.unwrap_unchecked().is_deployment(), \"PublicImmutable can only be initialized during contract deployment\"\n        // );\n\n        // We check that the struct is not yet initialized by checking if the initialization slot is 0\n        let initialization_slot = INITIALIZATION_SLOT_SEPARATOR + self.storage_slot;\n        let fields_read: [Field; 1] = storage_read(initialization_slot);\n        assert(fields_read[0] == 0, \"PublicImmutable already initialized\");\n\n        // We populate the initialization slot with a non-zero value to indicate that the struct is initialized\n        storage_write(initialization_slot, [0xdead]);\n\n        let fields_write = T::serialize(value);\n        storage_write(self.storage_slot, fields_write);\n    }\n    // docs:end:public_immutable_struct_write\n\n    // docs:start:public_immutable_struct_read\n    pub fn read<T_SERIALIZED_LEN>(self) -> T where T: Deserialize<T_SERIALIZED_LEN> {\n        assert(self.context.private.is_none(), \"PublicImmutable reads only supported in public functions\");\n        let fields = storage_read(self.storage_slot);\n        T::deserialize(fields)\n    }\n    // docs:end:public_immutable_struct_read\n}\n","path":"/Users/jack-sw/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.35.1/noir-projects/aztec-nr/aztec/src/state_vars/public_immutable.nr"},"123":{"source":"use dep::std::cmp::Eq;\nuse crate::{\n    address::AztecAddress,\n    constants::{NULLIFIER_KEY_VALIDATION_REQUEST_CONTEXT_LENGTH, NULLIFIER_KEY_VALIDATION_REQUEST_LENGTH},\n    traits::{Empty, Serialize, Deserialize}, grumpkin_point::GrumpkinPoint,\n    grumpkin_private_key::GrumpkinPrivateKey\n};\n\nstruct NullifierKeyValidationRequest {\n    public_key: GrumpkinPoint,\n    secret_key: GrumpkinPrivateKey,\n}\n\nimpl Eq for NullifierKeyValidationRequest {\n    fn eq(self, request: NullifierKeyValidationRequest) -> bool {\n        (request.public_key.eq(self.public_key))\n            & (request.secret_key.eq(self.secret_key))\n    }\n}\n\nimpl Empty for NullifierKeyValidationRequest {\n    fn empty() -> Self {\n        NullifierKeyValidationRequest {\n            public_key: GrumpkinPoint::zero(),\n            secret_key: GrumpkinPrivateKey::zero(),\n        }\n    }\n}\n\nimpl Serialize<NULLIFIER_KEY_VALIDATION_REQUEST_LENGTH> for NullifierKeyValidationRequest {\n    fn serialize(self) -> [Field; NULLIFIER_KEY_VALIDATION_REQUEST_LENGTH] {\n        [\n            self.public_key.x,\n            self.public_key.y,\n            self.secret_key.high,\n            self.secret_key.low,\n        ]\n    }\n}\n\nimpl Deserialize<NULLIFIER_KEY_VALIDATION_REQUEST_LENGTH> for NullifierKeyValidationRequest {\n    fn deserialize(fields: [Field; NULLIFIER_KEY_VALIDATION_REQUEST_LENGTH]) -> Self {\n        Self {\n            public_key: GrumpkinPoint::new(fields[0], fields[1]),\n            secret_key: GrumpkinPrivateKey::new(fields[2], fields[3]),\n        }\n    }\n}\n\nimpl NullifierKeyValidationRequest {\n    pub fn to_context(self, contract_address: AztecAddress) -> NullifierKeyValidationRequestContext {\n        NullifierKeyValidationRequestContext { public_key: self.public_key, secret_key: self.secret_key, contract_address }\n    }\n}\n\nstruct NullifierKeyValidationRequestContext {\n    public_key: GrumpkinPoint,\n    secret_key: GrumpkinPrivateKey,\n    contract_address: AztecAddress,\n}\n\nimpl Eq for NullifierKeyValidationRequestContext {\n    fn eq(self, request: NullifierKeyValidationRequestContext) -> bool {\n        (request.public_key.eq(self.public_key))\n            & (request.secret_key.eq(self.secret_key))\n            & (request.contract_address.eq(self.contract_address))\n    }\n}\n\nimpl Empty for NullifierKeyValidationRequestContext {\n    fn empty() -> Self {\n        NullifierKeyValidationRequestContext {\n            public_key: GrumpkinPoint::zero(),\n            secret_key: GrumpkinPrivateKey::zero(),\n            contract_address: AztecAddress::zero(),\n        }\n    }\n}\n\nimpl Serialize<NULLIFIER_KEY_VALIDATION_REQUEST_CONTEXT_LENGTH> for NullifierKeyValidationRequestContext {\n    fn serialize(self) -> [Field; NULLIFIER_KEY_VALIDATION_REQUEST_CONTEXT_LENGTH] {\n        [\n            self.public_key.x,\n            self.public_key.y,\n            self.secret_key.high,\n            self.secret_key.low,\n            self.contract_address.to_field(),\n        ]\n    }\n}\n\nimpl Deserialize<NULLIFIER_KEY_VALIDATION_REQUEST_CONTEXT_LENGTH> for NullifierKeyValidationRequestContext {\n    fn deserialize(fields: [Field; NULLIFIER_KEY_VALIDATION_REQUEST_CONTEXT_LENGTH]) -> Self {\n        Self {\n            public_key: GrumpkinPoint::new(fields[0], fields[1]),\n            secret_key: GrumpkinPrivateKey::new(fields[2], fields[3]),\n            contract_address: AztecAddress::from_field(fields[4]),\n        }\n    }\n}\n\n","path":"/Users/jack-sw/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.35.1/noir-projects/noir-protocol-circuits/crates/types/src/abis/nullifier_key_validation_request.nr"},"124":{"source":"use dep::std::cmp::Eq;\nuse crate::{\n    address::{AztecAddress, EthAddress}, abis::gas_fees::GasFees,\n    constants::{GENERATOR_INDEX__GLOBAL_VARIABLES, GLOBAL_VARIABLES_LENGTH},\n    traits::{Deserialize, Empty, Hash, Serialize}, utils::reader::Reader\n};\n\n// docs:start:global-variables\nstruct GlobalVariables {\n    chain_id : Field,\n    version : Field,\n    block_number : Field,\n    timestamp : u64,\n    coinbase : EthAddress,\n    fee_recipient : AztecAddress,\n    gas_fees : GasFees\n}\n// docs:end:global-variables\n\nimpl Serialize<GLOBAL_VARIABLES_LENGTH> for GlobalVariables {\n    fn serialize(self) -> [Field; GLOBAL_VARIABLES_LENGTH] {\n        let mut serialized: BoundedVec<Field, GLOBAL_VARIABLES_LENGTH> = BoundedVec::new();\n\n        serialized.push(self.chain_id);\n        serialized.push(self.version);\n        serialized.push(self.block_number);\n        serialized.push(self.timestamp as Field);\n        serialized.push(self.coinbase.to_field());\n        serialized.push(self.fee_recipient.to_field());\n        serialized.extend_from_array(self.gas_fees.serialize());\n\n        serialized.storage\n    }\n}\n\nimpl Deserialize<GLOBAL_VARIABLES_LENGTH> for GlobalVariables {\n    fn deserialize(serialized: [Field; GLOBAL_VARIABLES_LENGTH]) -> GlobalVariables {\n        let mut reader = Reader::new(serialized);\n        GlobalVariables {\n            chain_id: reader.read(),\n            version: reader.read(),\n            block_number: reader.read(),\n            timestamp: reader.read() as u64,\n            coinbase: EthAddress::from_field(reader.read()),\n            fee_recipient: AztecAddress::from_field(reader.read()),\n            gas_fees: reader.read_struct(GasFees::deserialize)\n        }\n    }\n}\n\nimpl Eq for GlobalVariables {\n    fn eq(self, other : GlobalVariables) -> bool {\n        (self.chain_id == other.chain_id) &\n        (self.version == other.version) &\n        (self.block_number == other.block_number) &\n        (self.timestamp == other.timestamp) &\n        (self.coinbase == other.coinbase) &\n        (self.fee_recipient == other.fee_recipient) &\n        (self.gas_fees == other.gas_fees) \n    }\n}\n\nimpl Empty for GlobalVariables {\n    fn empty() -> Self {\n        Self {\n            chain_id: 0,\n            version: 0,\n            block_number: 0,\n            timestamp: 0,\n            coinbase: EthAddress::empty(),\n            fee_recipient: AztecAddress::empty(),\n            gas_fees: GasFees::empty()\n        }\n    }\n}\n\n#[test]\nfn serialization_of_empty() {\n    let vars = GlobalVariables::empty();\n    let _serialized = vars.serialize();\n    let _deserialized = GlobalVariables::deserialize(_serialized);\n}\n","path":"/Users/jack-sw/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.35.1/noir-projects/noir-protocol-circuits/crates/types/src/abis/global_variables.nr"},"125":{"source":"use crate::{\n    abis::{function_data::FunctionData, private_circuit_public_inputs::PrivateCircuitPublicInputs},\n    address::AztecAddress,\n    constants::{GENERATOR_INDEX__CALL_STACK_ITEM, PRIVATE_CALL_STACK_ITEM_LENGTH}, hash::pedersen_hash,\n    traits::{Deserialize, Hash, Serialize, Empty}, utils::reader::Reader\n};\n\nstruct PrivateCallStackItem {\n    // This is the _actual_ contract address relating to where this function's code resides in the\n    // contract tree. Regardless of whether this is a call or delegatecall, this\n    // `contract_address` _does not change_. Amongst other things, it's used as a lookup for\n    // getting the correct code from the tree. There is a separate `storage_contract_address`\n    // within a CallStackItem which varies depending on whether this is a call or delegatecall.\n    contract_address: AztecAddress,\n    function_data: FunctionData,\n    public_inputs: PrivateCircuitPublicInputs,\n}\n\nimpl Eq for PrivateCallStackItem {\n    fn eq(self, other: Self) -> bool {\n        self.contract_address.eq(other.contract_address) &\n        self.function_data.eq(other.function_data) &\n        self.public_inputs.eq(other.public_inputs)\n    }\n}\n\nimpl Serialize<PRIVATE_CALL_STACK_ITEM_LENGTH> for PrivateCallStackItem {\n    fn serialize(self) -> [Field; PRIVATE_CALL_STACK_ITEM_LENGTH] {\n        let mut fields: BoundedVec<Field, PRIVATE_CALL_STACK_ITEM_LENGTH> = BoundedVec::new();\n\n        fields.push(self.contract_address.to_field());\n        fields.extend_from_array(self.function_data.serialize());\n        fields.extend_from_array(self.public_inputs.serialize());\n\n        assert_eq(fields.len(), PRIVATE_CALL_STACK_ITEM_LENGTH);\n\n        fields.storage\n    }\n}\n\nimpl Deserialize<PRIVATE_CALL_STACK_ITEM_LENGTH> for PrivateCallStackItem {\n    fn deserialize(serialized: [Field; PRIVATE_CALL_STACK_ITEM_LENGTH]) -> Self {\n        // TODO(#4390): This should accept a reader ^ to avoid copying data.\n        let mut reader = Reader::new(serialized);\n\n        let item = Self {\n            contract_address: reader.read_struct(AztecAddress::deserialize),\n            function_data: reader.read_struct(FunctionData::deserialize),\n            public_inputs: reader.read_struct(PrivateCircuitPublicInputs::deserialize),\n        };\n\n        reader.finish();\n        item\n    }\n}\n\nimpl Hash for PrivateCallStackItem {\n    fn hash(self) -> Field {\n        pedersen_hash(self.serialize(), GENERATOR_INDEX__CALL_STACK_ITEM)\n    }\n}\n\nimpl Empty for PrivateCallStackItem {\n    fn empty() -> Self {\n        PrivateCallStackItem {\n            contract_address: AztecAddress::empty(),\n            function_data: FunctionData::empty(),\n            public_inputs: PrivateCircuitPublicInputs::empty(),\n        }\n    }\n}\n\n#[test]\nfn serialization_of_empty() {\n    let item = PrivateCallStackItem::empty();\n    let serialized = item.serialize();\n    let deserialized = PrivateCallStackItem::deserialize(serialized);\n    assert(item.eq(deserialized));\n}\n\n#[test]\nfn empty_hash() {\n    let mut item = PrivateCallStackItem::empty();\n    item.function_data.is_private = true;\n    let hash = item.hash();\n\n    // Value from private_call_stack_item.test.ts \"computes empty item hash\" test\n    let test_data_empty_hash = 0x243b1b69ea529d158803cc7a16b52293c5e5f2a1859337e3f69e4b20f55c6fb6;\n    assert_eq(hash, test_data_empty_hash);\n}\n","path":"/Users/jack-sw/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.35.1/noir-projects/noir-protocol-circuits/crates/types/src/abis/private_call_stack_item.nr"},"127":{"source":"use crate::{\n    abis::function_selector::FunctionSelector, address::{EthAddress, AztecAddress},\n    constants::GAS_LENGTH, hash::pedersen_hash, traits::{Deserialize, Hash, Serialize, Empty},\n    abis::side_effect::Ordered, utils::reader::Reader\n};\n\nstruct Gas {\n    da_gas: u32,\n    l1_gas: u32,\n    l2_gas: u32,\n}\n\nimpl Gas {\n    pub fn new(da_gas: u32, l1_gas: u32, l2_gas: u32) -> Self {\n        Self { da_gas, l1_gas, l2_gas }\n    }\n\n    fn add(self, other: Gas) -> Self {\n        Gas::new(\n            self.da_gas + other.da_gas,\n            self.l1_gas + other.l1_gas,\n            self.l2_gas + other.l2_gas\n        )\n    }\n\n    fn sub(self, other: Gas) -> Self {\n        Gas::new(\n            self.da_gas - other.da_gas,\n            self.l1_gas - other.l1_gas,\n            self.l2_gas - other.l2_gas\n        )\n    }\n}\n\nimpl Serialize<GAS_LENGTH> for Gas {\n    fn serialize(self) -> [Field; GAS_LENGTH] {\n        [self.da_gas as Field, self.l1_gas as Field, self.l2_gas as Field]\n    }\n}\n\nimpl Deserialize<GAS_LENGTH> for Gas {\n    fn deserialize(serialized: [Field; GAS_LENGTH]) -> Gas {\n        Gas::new(serialized[0] as u32, serialized[1] as u32, serialized[2] as u32)\n    }\n}\n\nimpl Eq for Gas {\n    fn eq(self, other : Gas) -> bool {\n        (self.da_gas == other.da_gas) & (self.l1_gas == other.l1_gas) & (self.l2_gas == other.l2_gas)\n    }\n}\n\nimpl Empty for Gas {\n    fn empty() -> Self {\n        Gas::new(0, 0, 0)\n    }\n}\n\n","path":"/Users/jack-sw/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.35.1/noir-projects/noir-protocol-circuits/crates/types/src/abis/gas.nr"},"129":{"source":"use crate::{\n    abis::function_selector::FunctionSelector, address::{EthAddress, AztecAddress}, abis::gas::Gas,\n    constants::{GAS_SETTINGS_LENGTH, DIMENSION_GAS_SETTINGS_LENGTH}, hash::pedersen_hash,\n    traits::{Deserialize, Hash, Serialize, Empty}, abis::side_effect::Ordered, utils::reader::Reader\n};\n\nstruct GasSettings {\n    da: DimensionGasSettings,\n    l1: DimensionGasSettings,\n    l2: DimensionGasSettings,\n    inclusion_fee: Field,\n}\n\nimpl GasSettings {\n    fn new(\n        da: DimensionGasSettings,\n        l1: DimensionGasSettings,\n        l2: DimensionGasSettings,\n        inclusion_fee: Field\n    ) -> Self {\n        Self { da, l1, l2, inclusion_fee }\n    }\n\n    fn get_gas_limits(self) -> Gas {\n        Gas { da_gas: self.da.gas_limit, l1_gas: self.l1.gas_limit, l2_gas: self.l2.gas_limit }\n    }\n}\n\nimpl Eq for GasSettings {\n    fn eq(self, other: Self) -> bool {\n        (self.da == other.da) & (self.l1 == other.l1) & (self.l2 == other.l2) & (self.inclusion_fee == other.inclusion_fee)\n    }\n}\n\nimpl Empty for GasSettings {\n    fn empty() -> Self {\n        GasSettings::new(\n            DimensionGasSettings::empty(),\n            DimensionGasSettings::empty(),\n            DimensionGasSettings::empty(),\n            0,\n        )\n    }\n}\n\nimpl Serialize<GAS_SETTINGS_LENGTH> for GasSettings {\n    fn serialize(self) -> [Field; GAS_SETTINGS_LENGTH] {\n        let mut serialized: BoundedVec<Field, GAS_SETTINGS_LENGTH> = BoundedVec::new();\n\n        serialized.extend_from_array(self.da.serialize());\n        serialized.extend_from_array(self.l1.serialize());\n        serialized.extend_from_array(self.l2.serialize());\n        serialized.push(self.inclusion_fee);\n    \n        serialized.storage\n    }\n}\n\nimpl Deserialize<GAS_SETTINGS_LENGTH> for GasSettings {\n    fn deserialize(serialized: [Field; GAS_SETTINGS_LENGTH]) -> GasSettings {\n        let mut reader = Reader::new(serialized);\n        GasSettings {\n            da: reader.read_struct(DimensionGasSettings::deserialize),\n            l1: reader.read_struct(DimensionGasSettings::deserialize),\n            l2: reader.read_struct(DimensionGasSettings::deserialize),\n            inclusion_fee: reader.read(),\n        }\n    }\n}\n\nstruct DimensionGasSettings {\n    gas_limit: u32,\n    teardown_gas_limit: u32,\n    max_fee_per_gas: Field,\n}\n\nimpl DimensionGasSettings {\n    pub fn new(gas_limit: u32, teardown_gas_limit: u32, max_fee_per_gas: Field) -> Self {\n        Self { gas_limit, teardown_gas_limit, max_fee_per_gas }\n    }\n}\n\nimpl Eq for DimensionGasSettings {\n    fn eq(self, other: Self) -> bool {\n        (self.gas_limit == other.gas_limit) & (self.teardown_gas_limit == other.teardown_gas_limit) & (self.max_fee_per_gas == other.max_fee_per_gas)\n    }\n\n}\n\nimpl Serialize<DIMENSION_GAS_SETTINGS_LENGTH> for DimensionGasSettings {\n    fn serialize(self) -> [Field; DIMENSION_GAS_SETTINGS_LENGTH] {\n        [\n            self.gas_limit as Field,\n            self.teardown_gas_limit as Field,\n            self.max_fee_per_gas,\n        ]\n    }\n}\n\nimpl Deserialize<DIMENSION_GAS_SETTINGS_LENGTH> for DimensionGasSettings {\n    fn deserialize(serialized: [Field; DIMENSION_GAS_SETTINGS_LENGTH]) -> DimensionGasSettings {\n        DimensionGasSettings::new(serialized[0] as u32, serialized[1] as u32, serialized[2])\n    }\n}\n\nimpl Empty for DimensionGasSettings {\n    fn empty() -> Self {\n        DimensionGasSettings::new(0,0,0)\n    }\n}\n","path":"/Users/jack-sw/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.35.1/noir-projects/noir-protocol-circuits/crates/types/src/abis/gas_settings.nr"},"130":{"source":"use crate::{\n    abis::{\n    call_context::CallContext, max_block_number::MaxBlockNumber,\n    nullifier_key_validation_request::NullifierKeyValidationRequest, read_request::ReadRequest,\n    side_effect::{SideEffect, SideEffectLinkedToNoteHash}\n},\n    constants::{\n    MAX_NOTE_HASH_READ_REQUESTS_PER_CALL, MAX_NULLIFIER_READ_REQUESTS_PER_CALL,\n    MAX_NULLIFIER_KEY_VALIDATION_REQUESTS_PER_CALL, MAX_NEW_NOTE_HASHES_PER_CALL,\n    MAX_NEW_NULLIFIERS_PER_CALL, MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL,\n    MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL, MAX_NEW_L2_TO_L1_MSGS_PER_CALL,\n    PRIVATE_CIRCUIT_PUBLIC_INPUTS_LENGTH, GENERATOR_INDEX__PRIVATE_CIRCUIT_PUBLIC_INPUTS\n},\n    header::Header, hash::pedersen_hash, messaging::l2_to_l1_message::L2ToL1Message,\n    traits::{Deserialize, Hash, Serialize, Empty}, utils::reader::Reader\n};\n\nstruct PrivateCircuitPublicInputs {\n    call_context: CallContext,\n\n    args_hash: Field,\n    returns_hash: Field,\n\n    min_revertible_side_effect_counter: u32,\n\n    max_block_number: MaxBlockNumber,\n\n    note_hash_read_requests: [SideEffect; MAX_NOTE_HASH_READ_REQUESTS_PER_CALL],\n    nullifier_read_requests: [ReadRequest; MAX_NULLIFIER_READ_REQUESTS_PER_CALL],\n    nullifier_key_validation_requests: [NullifierKeyValidationRequest; MAX_NULLIFIER_KEY_VALIDATION_REQUESTS_PER_CALL],\n\n    new_note_hashes: [SideEffect; MAX_NEW_NOTE_HASHES_PER_CALL],\n    new_nullifiers: [SideEffectLinkedToNoteHash; MAX_NEW_NULLIFIERS_PER_CALL],\n    private_call_stack_hashes: [Field; MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL],\n    public_call_stack_hashes: [Field; MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL],\n    new_l2_to_l1_msgs: [L2ToL1Message; MAX_NEW_L2_TO_L1_MSGS_PER_CALL],\n\n    start_side_effect_counter : u32,\n    end_side_effect_counter : u32,\n    encrypted_logs_hash: Field,\n    unencrypted_logs_hash: Field,\n\n    // Here so that the gas cost of this request can be measured by circuits, without actually needing to feed in the\n    // variable-length data.\n    encrypted_log_preimages_length: Field,\n    unencrypted_log_preimages_length: Field,\n\n    // Header of a block whose state is used during private execution (not the block the transaction is included in).\n    historical_header: Header,\n\n    // Note: The following 2 values are not redundant to the values in self.historical_header.global_variables because\n    // they can be different in case of a protocol upgrade. In such a situation we could be using header from a block\n    // before the upgrade took place but be using the updated protocol to execute and prove the transaction.\n    chain_id: Field,\n    version: Field,\n}\n\nimpl Eq for PrivateCircuitPublicInputs {\n    fn eq(self, other: Self) -> bool {\n        self.call_context.eq(other.call_context) &\n        self.args_hash.eq(other.args_hash) &\n        (self.returns_hash == other.returns_hash) &\n        (self.max_block_number == other.max_block_number) &\n        (self.note_hash_read_requests == other.note_hash_read_requests) &\n        (self.nullifier_read_requests == other.nullifier_read_requests) &\n        (self.nullifier_key_validation_requests == other.nullifier_key_validation_requests) &\n        (self.new_note_hashes == other.new_note_hashes) &\n        (self.new_nullifiers == other.new_nullifiers) &\n        (self.private_call_stack_hashes == other.private_call_stack_hashes) &\n        (self.public_call_stack_hashes == other.public_call_stack_hashes) &\n        (self.new_l2_to_l1_msgs == other.new_l2_to_l1_msgs) &\n        (self.start_side_effect_counter == other.start_side_effect_counter) &\n        (self.end_side_effect_counter == other.end_side_effect_counter) &\n        (self.encrypted_logs_hash == other.encrypted_logs_hash) &\n        (self.unencrypted_logs_hash == other.unencrypted_logs_hash) &\n        (self.encrypted_log_preimages_length == other.encrypted_log_preimages_length) &\n        (self.unencrypted_log_preimages_length == other.unencrypted_log_preimages_length) &\n        self.historical_header.eq(other.historical_header) &\n        self.chain_id.eq(other.chain_id) &\n        self.version.eq(other.version)\n    }\n}\n\nimpl Serialize<PRIVATE_CIRCUIT_PUBLIC_INPUTS_LENGTH> for PrivateCircuitPublicInputs {\n    fn serialize(self) -> [Field; PRIVATE_CIRCUIT_PUBLIC_INPUTS_LENGTH] {\n        let mut fields: BoundedVec<Field, PRIVATE_CIRCUIT_PUBLIC_INPUTS_LENGTH> = BoundedVec::new();\n        fields.extend_from_array(self.call_context.serialize());\n        fields.push(self.args_hash);\n        fields.push(self.returns_hash);\n\n        fields.push(self.min_revertible_side_effect_counter as Field);\n\n        fields.extend_from_array(self.max_block_number.serialize());\n\n        for i in 0..MAX_NOTE_HASH_READ_REQUESTS_PER_CALL{\n            fields.extend_from_array(self.note_hash_read_requests[i].serialize());\n        }\n        for i in 0..MAX_NULLIFIER_READ_REQUESTS_PER_CALL{\n            fields.extend_from_array(self.nullifier_read_requests[i].serialize());\n        }\n        for i in 0..MAX_NULLIFIER_KEY_VALIDATION_REQUESTS_PER_CALL{\n            fields.extend_from_array(self.nullifier_key_validation_requests[i].serialize());\n        }\n        for i in 0..MAX_NEW_NOTE_HASHES_PER_CALL{\n            fields.extend_from_array(self.new_note_hashes[i].serialize());\n        }\n        for i in 0..MAX_NEW_NULLIFIERS_PER_CALL{\n            fields.extend_from_array(self.new_nullifiers[i].serialize());\n        }\n        fields.extend_from_array(self.private_call_stack_hashes);\n        fields.extend_from_array(self.public_call_stack_hashes);\n        for i in 0..MAX_NEW_L2_TO_L1_MSGS_PER_CALL {\n            fields.extend_from_array(self.new_l2_to_l1_msgs[i].serialize());\n        }\n        fields.push(self.start_side_effect_counter as Field);\n        fields.push(self.end_side_effect_counter as Field);\n        fields.push(self.encrypted_logs_hash);\n        fields.push(self.unencrypted_logs_hash);\n        fields.push(self.encrypted_log_preimages_length);\n        fields.push(self.unencrypted_log_preimages_length);\n        fields.extend_from_array(self.historical_header.serialize());\n        fields.push(self.chain_id);\n        fields.push(self.version);\n\n        assert_eq(fields.len(), PRIVATE_CIRCUIT_PUBLIC_INPUTS_LENGTH);\n\n        fields.storage\n    }\n}\n\nimpl Deserialize<PRIVATE_CIRCUIT_PUBLIC_INPUTS_LENGTH> for PrivateCircuitPublicInputs {\n    fn deserialize(serialized: [Field; PRIVATE_CIRCUIT_PUBLIC_INPUTS_LENGTH]) -> Self {\n        // TODO(#4390): This should accept a reader ^ to avoid copying data.\n        let mut reader = Reader::new(serialized);\n        let inputs = Self {\n            call_context: reader.read_struct(CallContext::deserialize),\n            args_hash: reader.read(),\n            returns_hash: reader.read(),\n            min_revertible_side_effect_counter: reader.read() as u32,\n            max_block_number: reader.read_struct(MaxBlockNumber::deserialize),\n            note_hash_read_requests: reader.read_struct_array(SideEffect::deserialize, [SideEffect::empty(); MAX_NOTE_HASH_READ_REQUESTS_PER_CALL]),\n            nullifier_read_requests: reader.read_struct_array(ReadRequest::deserialize, [ReadRequest::empty(); MAX_NULLIFIER_READ_REQUESTS_PER_CALL]),\n            nullifier_key_validation_requests: reader.read_struct_array(NullifierKeyValidationRequest::deserialize, [NullifierKeyValidationRequest::empty(); MAX_NULLIFIER_KEY_VALIDATION_REQUESTS_PER_CALL]),\n            new_note_hashes: reader.read_struct_array(SideEffect::deserialize, [SideEffect::empty(); MAX_NEW_NOTE_HASHES_PER_CALL]),\n            new_nullifiers: reader.read_struct_array(SideEffectLinkedToNoteHash::deserialize, [SideEffectLinkedToNoteHash::empty(); MAX_NEW_NULLIFIERS_PER_CALL]),\n            private_call_stack_hashes: reader.read_array([0; MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL]),\n            public_call_stack_hashes: reader.read_array([0; MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL]),\n            new_l2_to_l1_msgs: reader.read_struct_array(L2ToL1Message::deserialize, [L2ToL1Message::empty(); MAX_NEW_L2_TO_L1_MSGS_PER_CALL]),\n            start_side_effect_counter: reader.read() as u32,\n            end_side_effect_counter: reader.read() as u32,\n            encrypted_logs_hash: reader.read() as Field,\n            unencrypted_logs_hash: reader.read() as Field,\n            encrypted_log_preimages_length: reader.read(),\n            unencrypted_log_preimages_length: reader.read(),\n            historical_header: reader.read_struct(Header::deserialize),\n            chain_id: reader.read(),\n            version: reader.read(),\n        };\n\n        reader.finish();\n        inputs\n    }\n}\n\nimpl Hash for PrivateCircuitPublicInputs {\n    fn hash(self) -> Field {\n        pedersen_hash(self.serialize(), GENERATOR_INDEX__PRIVATE_CIRCUIT_PUBLIC_INPUTS)\n    }\n}\n\n\nimpl Empty for PrivateCircuitPublicInputs {\n    fn empty() -> Self {\n        PrivateCircuitPublicInputs {\n            call_context: CallContext::empty(),\n            args_hash: 0,\n            returns_hash: 0,\n            min_revertible_side_effect_counter: 0 as u32,\n            max_block_number: MaxBlockNumber::empty(),\n            note_hash_read_requests: [SideEffect::empty(); MAX_NOTE_HASH_READ_REQUESTS_PER_CALL],\n            nullifier_read_requests: [ReadRequest::empty(); MAX_NULLIFIER_READ_REQUESTS_PER_CALL],\n            nullifier_key_validation_requests: [NullifierKeyValidationRequest::empty(); MAX_NULLIFIER_KEY_VALIDATION_REQUESTS_PER_CALL],\n            new_note_hashes: [SideEffect::empty(); MAX_NEW_NOTE_HASHES_PER_CALL],\n            new_nullifiers: [SideEffectLinkedToNoteHash::empty(); MAX_NEW_NULLIFIERS_PER_CALL],\n            private_call_stack_hashes: [0; MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL],\n            public_call_stack_hashes: [0; MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL],\n            new_l2_to_l1_msgs: [L2ToL1Message::empty(); MAX_NEW_L2_TO_L1_MSGS_PER_CALL],\n            start_side_effect_counter : 0 as u32,\n            end_side_effect_counter : 0 as u32,\n            encrypted_logs_hash: 0,\n            unencrypted_logs_hash: 0,\n            encrypted_log_preimages_length: 0,\n            unencrypted_log_preimages_length: 0,\n            historical_header: Header::empty(),\n            chain_id: 0,\n            version: 0,\n        }\n    }\n}\n\n#[test]\nfn serialization_of_empty() {\n    let pcpi = PrivateCircuitPublicInputs::empty();\n    let serialized = pcpi.serialize();\n    let deserialized = PrivateCircuitPublicInputs::deserialize(serialized);\n    assert(pcpi.eq(deserialized));\n}\n\n#[test]\nfn empty_hash() {\n    let inputs = PrivateCircuitPublicInputs::empty();\n    let hash = inputs.hash();\n\n    // Value from private_circuit_public_inputs.test.ts \"computes empty item hash\" test\n    let test_data_empty_hash = 0x02e09d8c4897d560bd4caf05ab45fa22e1d4a251bf5b5e0448310a7f40f7a0b8;\n    assert_eq(hash, test_data_empty_hash);\n}\n","path":"/Users/jack-sw/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.35.1/noir-projects/noir-protocol-circuits/crates/types/src/abis/private_circuit_public_inputs.nr"},"131":{"source":"use crate::{\n    address::AztecAddress, constants::GENERATOR_INDEX__SIDE_EFFECT,\n    traits::{Empty, Hash, Serialize, Deserialize}\n};\nuse dep::std::cmp::Eq;\n\nglobal SIDE_EFFECT_SERIALIZED_LEN = 2;\n\ntrait Ordered {\n    fn counter(self) -> u32;\n}\n\ntrait OrderedValue<T> where T: Eq {\n    fn value(self) -> T;\n    fn counter(self) -> u32;\n}\n\ntrait ContractScopedOrderedValue<T> where T: Eq {\n    fn value(self) -> T;\n    fn counter(self) -> u32;\n    fn contract_address(self) -> AztecAddress;\n}\n\nstruct SideEffect {\n    value: Field,\n    counter: u32,\n}\n\nimpl Ordered for SideEffect {\n    fn counter(self) -> u32 {\n        self.counter\n    }\n}\n\nimpl OrderedValue<Field> for SideEffect {\n    fn value(self) -> Field {\n        self.value\n    }\n    fn counter(self) -> u32 {\n        self.counter\n    }\n}\n\nimpl Eq for SideEffect {\n    fn eq(self, side_effect: SideEffect) -> bool {\n        (self.value == side_effect.value)\n        & (self.counter == side_effect.counter)\n    }\n}\n\nimpl Empty for SideEffect {\n    fn empty() -> Self {\n        SideEffect {\n            value: 0,\n            counter: 0,\n        }\n    }\n}\n\nimpl Hash for SideEffect {\n    fn hash(self) -> Field {\n        dep::std::hash::pedersen_hash_with_separator(\n            self.serialize() , GENERATOR_INDEX__SIDE_EFFECT)\n    }\n}\n\nimpl Serialize<SIDE_EFFECT_SERIALIZED_LEN> for SideEffect {\n    fn serialize(self) -> [Field; SIDE_EFFECT_SERIALIZED_LEN] {\n        [self.value, self.counter as Field]\n    }\n}\n\nimpl Deserialize<SIDE_EFFECT_SERIALIZED_LEN> for SideEffect {\n    fn deserialize(values: [Field; SIDE_EFFECT_SERIALIZED_LEN]) -> Self {\n        Self {\n            value: values[0],\n            counter: values[1] as u32,\n        }\n    }\n}\n\nstruct SideEffectLinkedToNoteHash{\n    value: Field,\n    note_hash: Field,\n    counter: u32,\n}\n\nimpl Ordered for SideEffectLinkedToNoteHash {\n    fn counter(self) -> u32 {\n        self.counter\n    }\n}\n\nimpl OrderedValue<Field> for SideEffectLinkedToNoteHash {\n    fn value(self) -> Field {\n        self.value\n    }\n    fn counter(self) -> u32 {\n        self.counter\n    }\n}\n\nimpl Eq for SideEffectLinkedToNoteHash {\n    fn eq(self, side_effect: SideEffectLinkedToNoteHash) -> bool {\n        (self.value == side_effect.value)\n            & (self.note_hash == side_effect.note_hash) \n            & (self.counter == side_effect.counter)\n    }\n}\n\nimpl Empty for SideEffectLinkedToNoteHash {\n    fn empty() -> Self {\n        SideEffectLinkedToNoteHash {\n            value: 0,\n            note_hash: 0,\n            counter: 0,\n        }\n    }\n}\n\nimpl Hash for SideEffectLinkedToNoteHash {\n    fn hash(self) -> Field {\n        dep::std::hash::pedersen_hash_with_separator(\n            self.serialize(),\n        GENERATOR_INDEX__SIDE_EFFECT)\n    }\n}\n\nimpl Serialize<3> for SideEffectLinkedToNoteHash {\n    fn serialize(self) -> [Field; 3] {\n        [self.value, self.note_hash, self.counter as Field]\n    }\n}\n\nimpl Deserialize<3> for SideEffectLinkedToNoteHash {\n    fn deserialize(values: [Field; 3]) -> Self {\n        Self {\n            value: values[0],\n            note_hash: values[1],\n            counter: values[2] as u32,\n        }\n    }\n}\n","path":"/Users/jack-sw/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.35.1/noir-projects/noir-protocol-circuits/crates/types/src/abis/side_effect.nr"},"132":{"source":"use crate::{\n    abis::function_selector::FunctionSelector, address::{EthAddress, AztecAddress},\n    constants::{CALL_CONTEXT_LENGTH, GENERATOR_INDEX__CALL_CONTEXT}, hash::pedersen_hash,\n    traits::{Deserialize, Hash, Serialize, Empty}, abis::side_effect::Ordered,\n    abis::{gas_settings::GasSettings, gas::Gas}, utils::reader::Reader\n};\n\n// docs:start:call-context\nstruct CallContext {\n    msg_sender : AztecAddress,\n    storage_contract_address : AztecAddress,\n    portal_contract_address : EthAddress,\n    function_selector : FunctionSelector,\n    gas_left: Gas,\n\n    is_delegate_call : bool,\n    is_static_call : bool,\n\n    side_effect_counter : u32,\n\n    gas_settings: GasSettings,\n    transaction_fee: Field,\n}\n// docs:end:call-context\n\nimpl CallContext {\n    fn assert_is_zero(self) {\n        let serialized: [Field; CALL_CONTEXT_LENGTH] = self.serialize();\n\n        for i in 0..CALL_CONTEXT_LENGTH {\n            assert(serialized[i] == 0);\n        }\n    }\n}\n\nimpl Eq for CallContext {\n    fn eq(self, other: CallContext) -> bool {\n        self.serialize() == other.serialize()\n    }\n}\n\nimpl Hash for CallContext {\n    fn hash(self) -> Field {\n        pedersen_hash(self.serialize(), GENERATOR_INDEX__CALL_CONTEXT)\n    }\n}\n\nimpl Serialize<CALL_CONTEXT_LENGTH> for CallContext {\n    fn serialize(self) -> [Field; CALL_CONTEXT_LENGTH] {\n        let mut serialized: BoundedVec<Field, CALL_CONTEXT_LENGTH> = BoundedVec::new();\n\n        serialized.push(self.msg_sender.to_field());\n        serialized.push(self.storage_contract_address.to_field());\n        serialized.push(self.portal_contract_address.to_field());\n        serialized.push(self.function_selector.to_field());\n        serialized.extend_from_array(self.gas_left.serialize());\n        serialized.push(self.is_delegate_call as Field);\n        serialized.push(self.is_static_call as Field);\n        serialized.push(self.side_effect_counter as Field);\n        serialized.extend_from_array(self.gas_settings.serialize());\n        serialized.push(self.transaction_fee);\n    \n        serialized.storage\n    }\n}\n\nimpl Deserialize<CALL_CONTEXT_LENGTH> for CallContext {\n    fn deserialize(serialized: [Field; CALL_CONTEXT_LENGTH]) -> CallContext {\n        let mut reader = Reader::new(serialized);\n        CallContext {\n            msg_sender: AztecAddress::from_field(reader.read()),\n            storage_contract_address: AztecAddress::from_field(reader.read()),\n            portal_contract_address: EthAddress::from_field(reader.read()),\n            function_selector: FunctionSelector::from_field(reader.read()),\n            gas_left: reader.read_struct(Gas::deserialize),\n            is_delegate_call: reader.read() as bool,\n            is_static_call: reader.read() as bool,\n            side_effect_counter: reader.read() as u32,\n            gas_settings: reader.read_struct(GasSettings::deserialize),\n            transaction_fee: reader.read(),\n        }\n    }\n}\n\nimpl Empty for CallContext {\n    fn empty() -> Self {\n        CallContext {\n            msg_sender: AztecAddress::empty(),\n            storage_contract_address: AztecAddress::empty(),\n            portal_contract_address: EthAddress::empty(),\n            function_selector: FunctionSelector::empty(),\n            gas_left: Gas::empty(),\n            is_delegate_call: false,\n            is_static_call: false,\n            side_effect_counter: 0,\n            gas_settings: GasSettings::empty(),\n            transaction_fee: 0,\n        }\n    }\n}\n\n#[test]\nfn serialize_deserialize_of_empty() {\n    let context = CallContext::empty();\n    let serialized = context.serialize();\n    let deserialized = CallContext::deserialize(serialized);\n    assert(context.eq(deserialized));\n}\n\n#[test]\nfn assert_is_zero() {\n    let context = CallContext::empty();\n    context.assert_is_zero();\n}\n\n#[test(should_fail)]\nfn not_zero_assert_is_zero() {\n    let mut context = CallContext::empty();\n    context.is_delegate_call = true;\n    context.assert_is_zero();\n}\n\n#[test]\nfn test_eq() {\n    let mut context1 = CallContext::empty();\n    let mut context2 = CallContext::empty();\n\n    context1.is_delegate_call = true;\n    context2.is_delegate_call = true;\n\n    let address: AztecAddress = AztecAddress::from_field(69420);\n    context1.msg_sender = address;\n    context2.msg_sender = address;\n\n    assert(context1.eq(context2));\n}\n\n#[test(should_fail)]\nfn not_eq_test_eq() {\n    let mut context1 = CallContext::empty();\n    let mut context2 = CallContext::empty();\n\n    context1.is_delegate_call = true;\n    context2.is_delegate_call = false;\n\n    let address1: AztecAddress = AztecAddress::from_field(69420);\n    let address2: AztecAddress = AztecAddress::from_field(42069);\n\n    context1.msg_sender = address1;\n    context2.msg_sender = address2;\n\n    assert(context1.eq(context2));\n}\n\n#[test]\nfn hash_smoke() {\n    let context = CallContext::empty();\n    let _hashed = context.hash();\n}\n","path":"/Users/jack-sw/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.35.1/noir-projects/noir-protocol-circuits/crates/types/src/abis/call_context.nr"},"133":{"source":"use crate::{\n    abis::{\n    call_context::CallContext, read_request::ReadRequest,\n    side_effect::{SideEffect, SideEffectLinkedToNoteHash}, gas::Gas\n},\n    address::AztecAddress,\n    constants::{\n    MAX_NEW_L2_TO_L1_MSGS_PER_CALL, MAX_NEW_NULLIFIERS_PER_CALL, MAX_NEW_NOTE_HASHES_PER_CALL,\n    MAX_NULLIFIER_READ_REQUESTS_PER_CALL, MAX_NULLIFIER_NON_EXISTENT_READ_REQUESTS_PER_CALL,\n    MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL, MAX_PUBLIC_DATA_READS_PER_CALL,\n    MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL, GENERATOR_INDEX__PUBLIC_CIRCUIT_PUBLIC_INPUTS,\n    PUBLIC_CIRCUIT_PUBLIC_INPUTS_LENGTH\n},\n    contrakt::{storage_read::StorageRead, storage_update_request::StorageUpdateRequest},\n    hash::pedersen_hash, header::Header, messaging::l2_to_l1_message::L2ToL1Message,\n    traits::{Hash, Serialize, Deserialize, Empty}, utils::reader::Reader\n};\n\nstruct PublicCircuitPublicInputs{\n    call_context: CallContext,\n\n    args_hash: Field,\n    returns_hash: Field,\n\n    nullifier_read_requests: [ReadRequest; MAX_NULLIFIER_READ_REQUESTS_PER_CALL],\n    nullifier_non_existent_read_requests: [ReadRequest; MAX_NULLIFIER_NON_EXISTENT_READ_REQUESTS_PER_CALL],\n    contract_storage_update_requests: [StorageUpdateRequest; MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL],\n    contract_storage_reads: [StorageRead; MAX_PUBLIC_DATA_READS_PER_CALL],\n\n    // todo: add sideeffect ranges for the input to these hashes\n    public_call_stack_hashes: [Field; MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL],\n    new_note_hashes: [SideEffect; MAX_NEW_NOTE_HASHES_PER_CALL],\n    new_nullifiers: [SideEffectLinkedToNoteHash; MAX_NEW_NULLIFIERS_PER_CALL],\n    new_l2_to_l1_msgs: [L2ToL1Message; MAX_NEW_L2_TO_L1_MSGS_PER_CALL],\n\n    start_side_effect_counter: u32,\n    end_side_effect_counter: u32,\n\n    unencrypted_logs_hash: Field,\n\n    // Here so that the gas cost of this request can be measured by circuits, without actually needing to feed in the\n    // variable-length data.\n    unencrypted_log_preimages_length: Field,\n\n    // Header of a block whose state is used during public execution. Set by sequencer to be a header of a block\n    // previous to the one in which the tx is included.\n    historical_header: Header,\n\n    prover_address: AztecAddress,\n\n    revert_code: u8,\n    \n    // gas left after execution is completed\n    gas_left: Gas,\n}\n\nimpl Eq for PublicCircuitPublicInputs {\n    fn eq(self, other: Self) -> bool {\n        self.serialize() == other.serialize()\n    }\n}\n\nimpl Serialize<PUBLIC_CIRCUIT_PUBLIC_INPUTS_LENGTH> for PublicCircuitPublicInputs {\n    fn serialize(self) -> [Field; PUBLIC_CIRCUIT_PUBLIC_INPUTS_LENGTH] {\n        let mut fields: BoundedVec<Field, PUBLIC_CIRCUIT_PUBLIC_INPUTS_LENGTH> = BoundedVec::new();\n        fields.extend_from_array(self.call_context.serialize());\n        fields.push(self.args_hash);\n        fields.push(self.returns_hash);\n        for i in 0..MAX_NULLIFIER_READ_REQUESTS_PER_CALL {\n            fields.extend_from_array(self.nullifier_read_requests[i].serialize());\n        }\n        for i in 0..MAX_NULLIFIER_NON_EXISTENT_READ_REQUESTS_PER_CALL {\n            fields.extend_from_array(self.nullifier_non_existent_read_requests[i].serialize());\n        }\n        for i in 0..MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL {\n            fields.extend_from_array(self.contract_storage_update_requests[i].serialize());\n        }\n        for i in 0..MAX_PUBLIC_DATA_READS_PER_CALL {\n            fields.extend_from_array(self.contract_storage_reads[i].serialize());\n        }\n        fields.extend_from_array(self.public_call_stack_hashes);\n\n        for i in 0..MAX_NEW_NOTE_HASHES_PER_CALL {\n            fields.extend_from_array(self.new_note_hashes[i].serialize());\n        }\n        for i in 0..MAX_NEW_NULLIFIERS_PER_CALL {\n            fields.extend_from_array(self.new_nullifiers[i].serialize());\n        }\n        for i in 0..MAX_NEW_L2_TO_L1_MSGS_PER_CALL {\n            fields.extend_from_array(self.new_l2_to_l1_msgs[i].serialize());\n        }\n\n        fields.push(self.start_side_effect_counter as Field);\n        fields.push(self.end_side_effect_counter as Field);\n\n        fields.push(self.unencrypted_logs_hash);\n        fields.push(self.unencrypted_log_preimages_length);\n        fields.extend_from_array(self.historical_header.serialize());\n        fields.push(self.prover_address.to_field());\n        fields.push(self.revert_code as Field);\n        fields.extend_from_array(self.gas_left.serialize());\n        fields.storage\n    }\n}\n\nimpl Deserialize<PUBLIC_CIRCUIT_PUBLIC_INPUTS_LENGTH> for PublicCircuitPublicInputs {\n    fn deserialize(serialized: [Field; PUBLIC_CIRCUIT_PUBLIC_INPUTS_LENGTH]) -> Self {\n        // TODO(#4390): This should accept a reader ^ to avoid copying data.\n        let mut reader = Reader::new(serialized);\n        let inputs = PublicCircuitPublicInputs {\n            call_context: reader.read_struct(CallContext::deserialize),\n            args_hash: reader.read(),\n            returns_hash: reader.read(),\n            nullifier_read_requests: reader.read_struct_array(ReadRequest::deserialize, [ReadRequest::empty(); MAX_NULLIFIER_READ_REQUESTS_PER_CALL]),\n            nullifier_non_existent_read_requests: reader.read_struct_array(ReadRequest::deserialize, [ReadRequest::empty(); MAX_NULLIFIER_NON_EXISTENT_READ_REQUESTS_PER_CALL]),\n            contract_storage_update_requests: reader.read_struct_array(StorageUpdateRequest::deserialize, [StorageUpdateRequest::empty(); MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL]),\n            contract_storage_reads: reader.read_struct_array(StorageRead::deserialize, [StorageRead::empty(); MAX_PUBLIC_DATA_READS_PER_CALL]),\n            public_call_stack_hashes: reader.read_array([0; MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL]),\n            new_note_hashes: reader.read_struct_array(SideEffect::deserialize, [SideEffect::empty(); MAX_NEW_NOTE_HASHES_PER_CALL]),\n            new_nullifiers: reader.read_struct_array(SideEffectLinkedToNoteHash::deserialize, [SideEffectLinkedToNoteHash::empty(); MAX_NEW_NULLIFIERS_PER_CALL]),\n            new_l2_to_l1_msgs: reader.read_struct_array(L2ToL1Message::deserialize, [L2ToL1Message::empty(); MAX_NEW_L2_TO_L1_MSGS_PER_CALL]),\n            start_side_effect_counter: reader.read() as u32,\n            end_side_effect_counter: reader.read() as u32,\n            unencrypted_logs_hash: reader.read() as Field,\n            unencrypted_log_preimages_length: reader.read(),\n            historical_header: reader.read_struct(Header::deserialize),\n            prover_address: reader.read_struct(AztecAddress::deserialize),\n            revert_code: reader.read() as u8,\n            gas_left: reader.read_struct(Gas::deserialize),\n        };\n\n        reader.finish();\n        inputs\n    }\n}\n\nimpl Hash for PublicCircuitPublicInputs {\n    fn hash(self) -> Field {\n        pedersen_hash(self.serialize(), GENERATOR_INDEX__PUBLIC_CIRCUIT_PUBLIC_INPUTS)\n    }\n}\n\nimpl Empty for PublicCircuitPublicInputs {\n    fn empty() -> Self {\n        PublicCircuitPublicInputs {\n            call_context: CallContext::empty(),\n            args_hash: 0,\n            returns_hash: 0,\n            nullifier_read_requests: [ReadRequest::empty(); MAX_NULLIFIER_READ_REQUESTS_PER_CALL],\n            nullifier_non_existent_read_requests: [ReadRequest::empty(); MAX_NULLIFIER_NON_EXISTENT_READ_REQUESTS_PER_CALL],\n            contract_storage_update_requests: [StorageUpdateRequest::empty(); MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL],\n            contract_storage_reads: [StorageRead::empty(); MAX_PUBLIC_DATA_READS_PER_CALL],\n            public_call_stack_hashes: [0; MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL],\n            new_note_hashes: [SideEffect::empty(); MAX_NEW_NOTE_HASHES_PER_CALL],\n            new_nullifiers: [SideEffectLinkedToNoteHash::empty(); MAX_NEW_NULLIFIERS_PER_CALL],\n            new_l2_to_l1_msgs: [L2ToL1Message::empty(); MAX_NEW_L2_TO_L1_MSGS_PER_CALL],\n            start_side_effect_counter: 0 as u32,\n            end_side_effect_counter: 0 as u32,\n            unencrypted_logs_hash: 0,\n            unencrypted_log_preimages_length: 0,\n            historical_header: Header::empty(),\n            prover_address: AztecAddress::zero(),\n            revert_code: 0 as u8,\n            gas_left: Gas::empty(),\n        }\n    }\n}\n\n#[test]\nfn serialization_of_empty() {\n    let pcpi = PublicCircuitPublicInputs::empty();\n    let serialized = pcpi.serialize();\n    let deserialized = PublicCircuitPublicInputs::deserialize(serialized);\n    assert(pcpi.eq(deserialized));\n}\n\n#[test]\nfn empty_hash() {\n    let inputs = PublicCircuitPublicInputs::empty();\n    let hash = inputs.hash();\n\n    // Value from public_circuit_public_inputs.test.ts \"computes empty item hash\" test\n    let test_data_empty_hash = 0x00147d3d2cde08ee1046bf73cb6664c2bdf11b43c5dca0e72f4137f354bdad25;\n    assert_eq(hash, test_data_empty_hash);\n}\n","path":"/Users/jack-sw/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.35.1/noir-projects/noir-protocol-circuits/crates/types/src/abis/public_circuit_public_inputs.nr"},"140":{"source":"global NULLIFIER_LEAF_PREIMAGE_LENGTH: u64 = 3;\n\nuse crate::{merkle_tree::leaf_preimage::{LeafPreimage, IndexedTreeLeafPreimage}, traits::{Empty, Hash}};\n\nstruct NullifierLeafPreimage {\n    nullifier : Field,\n    next_nullifier :Field,\n    next_index : u64,\n}\n\nimpl Empty for NullifierLeafPreimage {\n    fn empty() -> Self {\n        Self {\n            nullifier : 0,\n            next_nullifier : 0,\n            next_index : 0,\n        }\n    }\n}\n\nimpl Hash for NullifierLeafPreimage {\n    fn hash(self) -> Field {\n        if self.is_empty() {\n            0\n        } else {\n            dep::std::hash::pedersen_hash(self.serialize())\n        }\n    }\n}\n\nimpl LeafPreimage for NullifierLeafPreimage {\n    fn get_key(self) -> Field {\n        self.nullifier\n    }\n\n    fn as_leaf(self) -> Field {\n        self.hash()\n    }\n}\n\nimpl IndexedTreeLeafPreimage for NullifierLeafPreimage {\n    fn get_key(self) -> Field {\n        self.nullifier\n    }\n\n    fn get_next_key(self) -> Field {\n        self.next_nullifier\n    }\n\n    fn as_leaf(self) -> Field {\n        self.hash()\n    }\n}\n\nimpl NullifierLeafPreimage {\n    pub fn is_empty(self) -> bool {\n        (self.nullifier == 0) & (self.next_nullifier == 0) & (self.next_index == 0)\n    }\n\n    pub fn serialize(self) -> [Field; NULLIFIER_LEAF_PREIMAGE_LENGTH] {\n        [self.nullifier, self.next_nullifier, self.next_index as Field]\n    }\n\n    pub fn deserialize(fields: [Field; NULLIFIER_LEAF_PREIMAGE_LENGTH]) -> Self {\n        Self { nullifier: fields[0], next_nullifier: fields[1], next_index: fields[2] as u64 }\n    }\n}\n","path":"/Users/jack-sw/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.35.1/noir-projects/noir-protocol-circuits/crates/types/src/abis/nullifier_leaf_preimage.nr"},"141":{"source":"use crate::abis::{function_data::FunctionData, public_circuit_public_inputs::PublicCircuitPublicInputs};\nuse crate::address::AztecAddress;\nuse crate::constants::GENERATOR_INDEX__CALL_STACK_ITEM;\nuse crate::traits::Hash;\n\nstruct PublicCallStackItem {\n    contract_address: AztecAddress,\n    public_inputs: PublicCircuitPublicInputs,\n    function_data: FunctionData,\n    // True if this call stack item represents a request to execute a function rather than a\n    // fulfilled execution. Used when enqueuing calls from private to public functions.\n    is_execution_request: bool,\n}\n\nimpl Hash for PublicCallStackItem {\n    fn hash(self) -> Field {\n        let item = if self.is_execution_request {\n            self.as_execution_request()\n        } else {\n            self\n        };\n\n        dep::std::hash::pedersen_hash_with_separator([\n            item.contract_address.to_field(),\n            item.function_data.hash(),\n            item.public_inputs.hash(),\n        ], GENERATOR_INDEX__CALL_STACK_ITEM)\n    }\n}\n\nimpl PublicCallStackItem {\n    fn as_execution_request(self) -> Self {\n        let public_inputs = self.public_inputs;\n        let mut request_public_inputs = PublicCircuitPublicInputs::empty();\n        request_public_inputs.call_context = public_inputs.call_context;\n        request_public_inputs.args_hash = public_inputs.args_hash;\n\n        let call_stack_item = PublicCallStackItem {\n            contract_address: self.contract_address,\n            function_data: self.function_data,\n            is_execution_request: true,\n            public_inputs: request_public_inputs\n        };\n        call_stack_item\n    }\n}\n\nmod tests {\n    use crate::{\n        abis::{\n        function_data::FunctionData, function_selector::FunctionSelector,\n        public_circuit_public_inputs::PublicCircuitPublicInputs,\n        public_call_stack_item::PublicCallStackItem, side_effect::SideEffect\n    },\n        address::AztecAddress, constants::GENERATOR_INDEX__CALL_STACK_ITEM, traits::Hash\n    };\n\n    #[test]\n    fn compute_call_stack_item_request_hash() {\n        let contract_address = AztecAddress::from_field(1);\n        let function_data = FunctionData { selector: FunctionSelector::from_u32(2), is_private: false };\n\n        let mut public_inputs = PublicCircuitPublicInputs::empty();\n        public_inputs.new_note_hashes[0] = SideEffect{\n            value: 1,\n            counter: 0,\n        };\n\n        let call_stack_item = PublicCallStackItem { contract_address, public_inputs, is_execution_request: true, function_data };\n\n        // Value from public_call_stack_item.test.ts \"Computes a callstack item request hash\" test\n        let test_data_call_stack_item_request_hash = 0x12c634ebadf4209e2def6cac0753f151422faf11237dc4f136bc17a84c8c2d76;\n        assert_eq(call_stack_item.hash(), test_data_call_stack_item_request_hash);\n    }\n\n    #[test]\n    fn compute_call_stack_item_hash() {\n        let contract_address = AztecAddress::from_field(1);\n        let function_data = FunctionData { selector: FunctionSelector::from_u32(2), is_private: false };\n\n        let mut public_inputs = PublicCircuitPublicInputs::empty();\n        public_inputs.new_note_hashes[0] = SideEffect{\n            value: 1,\n            counter: 0,\n        };\n\n        let call_stack_item = PublicCallStackItem { contract_address, public_inputs, is_execution_request: false, function_data };\n\n        // Value from public_call_stack_item.test.ts \"Computes a callstack item hash\" test\n        let test_data_call_stack_item_hash = 0x0864975afc9bec7eb7ec5b5608bbef648ec9afead1bbe986d0af148e3c944b9b;\n        assert_eq(call_stack_item.hash(), test_data_call_stack_item_hash);\n    }\n}\n","path":"/Users/jack-sw/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.35.1/noir-projects/noir-protocol-circuits/crates/types/src/abis/public_call_stack_item.nr"},"148":{"source":"use crate::{\n    abis::function_selector::FunctionSelector,\n    constants::{GENERATOR_INDEX__FUNCTION_DATA, FUNCTION_DATA_LENGTH}, hash::pedersen_hash,\n    traits::{Serialize, Hash, Deserialize, Empty}\n};\n\nstruct FunctionData {\n    selector : FunctionSelector,\n    is_private : bool,\n}\n\nimpl Eq for FunctionData {\n    fn eq(self, other: Self) -> bool {\n        self.selector.eq(other.selector) &\n        self.is_private == other.is_private\n    }\n}\n\nimpl Serialize<FUNCTION_DATA_LENGTH> for FunctionData {\n    // A field is ~256 bits\n    // TODO(https://github.com/AztecProtocol/aztec-packages/issues/3057): Since, function data can fit into a Field,\n    // This method will simply return a bit packed Field instead of hashing\n    fn serialize(self) -> [Field; FUNCTION_DATA_LENGTH] {\n        [\n            self.selector.to_field(),\n            self.is_private as Field,\n        ]\n    }\n}\n\nimpl Deserialize<FUNCTION_DATA_LENGTH> for FunctionData {\n    fn deserialize(serialized: [Field; FUNCTION_DATA_LENGTH]) -> Self {\n        Self {\n            selector: FunctionSelector::from_field(serialized[0]),\n            is_private: serialized[1] as bool,\n        }\n    }\n}\n\nimpl Hash for FunctionData {\n    fn hash(self) -> Field {\n        pedersen_hash(self.serialize(), GENERATOR_INDEX__FUNCTION_DATA)\n    }\n}\n\nimpl Empty for FunctionData {\n    fn empty() -> Self {\n        FunctionData {\n            selector: FunctionSelector::empty(),\n            is_private: false,\n        }\n    }\n}\n\n#[test]\nfn serialization_of_empty() {\n    let data = FunctionData::empty();\n    let serialized = data.serialize();\n    let deserialized = FunctionData::deserialize(serialized);\n    assert(data.eq(deserialized));\n}\n\n#[test]\nfn empty_hash() {\n    let data = FunctionData::empty();\n    let hash = data.hash();\n\n    // Value from function_data.test.ts \"computes empty item hash\" test\n    let test_data_empty_hash = 0x27b1d0839a5b23baf12a8d195b18ac288fcf401afb2f70b8a4b529ede5fa9fed;\n    assert_eq(hash, test_data_empty_hash);\n}\n","path":"/Users/jack-sw/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.35.1/noir-projects/noir-protocol-circuits/crates/types/src/abis/function_data.nr"},"153":{"source":"use crate::utils::field::field_from_bytes;\nuse dep::std::cmp::Eq;\nuse crate::traits::{Serialize, Deserialize, FromField, ToField, Empty};\n\nglobal SELECTOR_SIZE = 4;\n\nstruct FunctionSelector {\n    // 1st 4-bytes of abi-encoding of function.\n    inner: u32,\n}\n\nimpl Eq for FunctionSelector {\n    fn eq(self, function_selector: FunctionSelector) -> bool {\n        function_selector.inner == self.inner\n    }\n}\n\nimpl Serialize<1> for FunctionSelector {\n    fn serialize(self: Self) -> [Field; 1] {\n        [self.inner as Field]\n    }\n}\n\nimpl Deserialize<1> for FunctionSelector {\n    fn deserialize(fields: [Field; 1]) -> Self {\n        Self {\n            inner: fields[0] as u32\n        }\n    }\n}\n\nimpl FromField for FunctionSelector {\n    fn from_field(field: Field) -> Self {\n        Self { inner: field as u32 }\n    }\n}\n\nimpl ToField for FunctionSelector {\n    fn to_field(self) -> Field {\n        self.inner as Field\n    }\n}\n\nimpl Empty for FunctionSelector {\n    fn empty() -> Self {\n        Self { inner: 0 as u32 }\n    }\n}\n\nimpl FunctionSelector {\n    pub fn from_u32(value: u32) -> Self {\n        Self { inner: value }\n    }\n\n    pub fn from_signature<N>(signature: str<N>) -> Self {\n        let bytes = signature.as_bytes();\n        let hash = dep::std::hash::keccak256(bytes, bytes.len() as u32);\n\n        let mut selector_be_bytes = [0; SELECTOR_SIZE];\n        for i in 0..SELECTOR_SIZE {\n            selector_be_bytes[i] = hash[i];\n        }\n\n        FunctionSelector::from_field(field_from_bytes(selector_be_bytes, true))\n    }\n\n    pub fn zero() -> Self {\n        Self { inner: 0 }\n    }\n}\n","path":"/Users/jack-sw/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.35.1/noir-projects/noir-protocol-circuits/crates/types/src/abis/function_selector.nr"},"155":{"source":"use dep::std::cmp::Eq;\n\nstruct AppendOnlyTreeSnapshot {\n    root : Field,\n    // TODO(Alvaro) change this to a u64\n    next_available_leaf_index : u32\n}\n\nglobal APPEND_ONLY_TREE_SNAPSHOT_LENGTH: u64 = 2;\n\nimpl AppendOnlyTreeSnapshot {\n    pub fn serialize(self) -> [Field; APPEND_ONLY_TREE_SNAPSHOT_LENGTH] {\n        [self.root, self.next_available_leaf_index as Field]\n    }\n\n    pub fn deserialize(serialized: [Field; APPEND_ONLY_TREE_SNAPSHOT_LENGTH]) -> AppendOnlyTreeSnapshot {\n        AppendOnlyTreeSnapshot { root: serialized[0], next_available_leaf_index: serialized[1] as u32 }\n    }\n\n    pub fn zero() -> Self {\n        Self { root: 0, next_available_leaf_index: 0 }\n    }\n}\n\nimpl Eq for AppendOnlyTreeSnapshot {\n    fn eq(self, other : AppendOnlyTreeSnapshot) -> bool {\n        (self.root == other.root) & (self.next_available_leaf_index == other.next_available_leaf_index)\n    }\n}","path":"/Users/jack-sw/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.35.1/noir-projects/noir-protocol-circuits/crates/types/src/abis/append_only_tree_snapshot.nr"},"157":{"source":"use crate::{\n    abis::side_effect::{OrderedValue, ContractScopedOrderedValue},\n    traits::{Empty, Serialize, Deserialize}, address::AztecAddress\n};\nuse dep::std::cmp::Eq;\n\nglobal READ_REQUEST_SERIALIZED_LEN = 2;\nglobal READ_REQUEST_CONTEXT_SERIALIZED_LEN = 3;\n\nstruct ReadRequest {\n    value: Field,\n    counter: u32,\n}\n\nimpl OrderedValue<Field> for ReadRequest {\n    fn value(self) -> Field {\n        self.value\n    }\n    fn counter(self) -> u32 {\n        self.counter\n    }\n}\n\nimpl Eq for ReadRequest {\n    fn eq(self, read_request: ReadRequest) -> bool {\n        (self.value == read_request.value)\n        & (self.counter == read_request.counter)\n    }\n}\n\nimpl Empty for ReadRequest {\n    fn empty() -> Self {\n        ReadRequest {\n            value: 0,\n            counter: 0,\n        }\n    }\n}\n\nimpl Serialize<READ_REQUEST_SERIALIZED_LEN> for ReadRequest {\n    fn serialize(self) -> [Field; READ_REQUEST_SERIALIZED_LEN] {\n        [self.value, self.counter as Field]\n    }\n}\n\nimpl Deserialize<READ_REQUEST_SERIALIZED_LEN> for ReadRequest {\n    fn deserialize(values: [Field; READ_REQUEST_SERIALIZED_LEN]) -> Self {\n        Self {\n            value: values[0],\n            counter: values[1] as u32,\n        }\n    }\n}\n\nimpl ReadRequest {\n    pub fn to_context(self, contract_address: AztecAddress) -> ReadRequestContext {\n        ReadRequestContext { value: self.value, counter: self.counter, contract_address }\n    }\n}\n\nstruct ReadRequestContext {\n    value: Field,\n    counter: u32,\n    contract_address: AztecAddress,\n}\n\nimpl OrderedValue<Field> for ReadRequestContext {\n    fn value(self) -> Field {\n        self.value\n    }\n    fn counter(self) -> u32 {\n        self.counter\n    }\n}\n\nimpl ContractScopedOrderedValue<Field> for ReadRequestContext {\n    fn value(self) -> Field {\n        self.value\n    }\n    fn counter(self) -> u32 {\n        self.counter\n    }\n    fn contract_address(self) -> AztecAddress {\n        self.contract_address\n    }\n}\n\nimpl Eq for ReadRequestContext {\n    fn eq(self, read_request: ReadRequestContext) -> bool {\n        (self.value == read_request.value)\n        & (self.counter == read_request.counter)\n        & (self.contract_address.eq(read_request.contract_address))\n    }\n}\n\nimpl Empty for ReadRequestContext {\n    fn empty() -> Self {\n        ReadRequestContext {\n            value: 0,\n            counter: 0,\n            contract_address: AztecAddress::empty(),\n        }\n    }\n}\n\nimpl Serialize<READ_REQUEST_CONTEXT_SERIALIZED_LEN> for ReadRequestContext {\n    fn serialize(self) -> [Field; READ_REQUEST_CONTEXT_SERIALIZED_LEN] {\n        [self.value, self.counter as Field, self.contract_address.to_field()]\n    }\n}\n\nimpl Deserialize<READ_REQUEST_CONTEXT_SERIALIZED_LEN> for ReadRequestContext {\n    fn deserialize(values: [Field; READ_REQUEST_CONTEXT_SERIALIZED_LEN]) -> Self {\n        Self {\n            value: values[0],\n            counter: values[1] as u32,\n            contract_address: AztecAddress::from_field(values[2]),\n        }\n    }\n}\n\n","path":"/Users/jack-sw/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.35.1/noir-projects/noir-protocol-circuits/crates/types/src/abis/read_request.nr"},"160":{"source":"use crate::{\n    abis::function_selector::FunctionSelector, address::{EthAddress, AztecAddress},\n    constants::GAS_FEES_LENGTH, hash::pedersen_hash, traits::{Deserialize, Hash, Serialize, Empty},\n    abis::side_effect::Ordered, utils::reader::Reader\n};\n\nstruct GasFees {\n    fee_per_da_gas: Field,\n    fee_per_l1_gas: Field,\n    fee_per_l2_gas: Field,\n}\n\nimpl GasFees {\n    fn new(fee_per_da_gas: Field, fee_per_l1_gas: Field, fee_per_l2_gas: Field) -> Self {\n        Self { fee_per_da_gas, fee_per_l1_gas, fee_per_l2_gas }\n    }\n}\n\nimpl Serialize<GAS_FEES_LENGTH> for GasFees {\n    fn serialize(self) -> [Field; GAS_FEES_LENGTH] {\n        [self.fee_per_da_gas, self.fee_per_l1_gas, self.fee_per_l2_gas]\n    }\n}\n\nimpl Deserialize<GAS_FEES_LENGTH> for GasFees {\n    fn deserialize(serialized: [Field; GAS_FEES_LENGTH]) -> GasFees {\n        GasFees::new(serialized[0], serialized[1], serialized[2])\n    }\n}\n\nimpl Eq for GasFees {\n    fn eq(self, other : GasFees) -> bool {\n        (self.fee_per_da_gas == other.fee_per_da_gas) & (self.fee_per_l1_gas == other.fee_per_l1_gas) & (self.fee_per_l2_gas == other.fee_per_l2_gas)\n    }\n}\n\nimpl Empty for GasFees {\n    fn empty() -> Self {\n        GasFees::new(0, 0, 0)\n    }\n}\n","path":"/Users/jack-sw/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.35.1/noir-projects/noir-protocol-circuits/crates/types/src/abis/gas_fees.nr"},"162":{"source":"use crate::{constants::MAX_BLOCK_NUMBER_LENGTH, traits::{Deserialize, Serialize, Empty}};\n\nstruct MaxBlockNumber {\n    _opt: Option<u32>\n}\n\nimpl Empty for MaxBlockNumber {\n    fn empty() -> Self {\n        Self { _opt: Option::none() }\n    }\n}\n\nimpl Eq for MaxBlockNumber {\n    fn eq(self, other: Self) -> bool {\n        self._opt == other._opt\n    }\n}\n\nimpl Serialize<MAX_BLOCK_NUMBER_LENGTH> for MaxBlockNumber {\n    fn serialize(self) -> [Field; MAX_BLOCK_NUMBER_LENGTH] {\n        [self._opt._is_some as Field, self._opt._value as Field]\n    }\n}\n\nimpl Deserialize<MAX_BLOCK_NUMBER_LENGTH> for MaxBlockNumber {\n    fn deserialize(serialized: [Field; MAX_BLOCK_NUMBER_LENGTH]) -> MaxBlockNumber {\n        MaxBlockNumber {\n            _opt: Option {\n                _is_some: serialized[0] as bool,\n                _value: serialized[1] as u32,\n            }\n        }\n    }\n}\n\nimpl MaxBlockNumber {\n    pub fn new(max_block_number: u32) -> Self {\n        Self { _opt: Option::some(max_block_number) }\n    }\n\n    pub fn is_none(self) -> bool {\n        self._opt.is_none()\n    }\n\n    pub fn is_some(self) -> bool {\n        self._opt.is_some()\n    }\n\n    pub fn unwrap(self) -> u32 {\n        self._opt.unwrap()\n    }\n\n    pub fn unwrap_unchecked(self) -> u32 {\n        self._opt.unwrap_unchecked()\n    }\n\n    pub fn min(lhs: MaxBlockNumber, rhs: MaxBlockNumber) -> MaxBlockNumber {\n        if rhs.is_none() {\n            lhs // lhs might also be none, but in that case both would be\n        } else {\n            MaxBlockNumber::min_with_u32(lhs, rhs.unwrap_unchecked())\n        }\n    }\n\n    pub fn min_with_u32(lhs: MaxBlockNumber, rhs: u32) -> MaxBlockNumber {\n        if lhs._opt.is_none() {\n            MaxBlockNumber::new(rhs)\n        } else {\n            let lhs_value = lhs._opt.unwrap_unchecked();\n\n            MaxBlockNumber::new(if lhs_value < rhs { lhs_value } else { rhs })\n        }\n    }\n}\n\n#[test]\nfn zeroed_is_none() {\n    // Large parts of the kernel rely on zeroed to initialize structs. This conveniently matches what `default` does,\n    // and though we should eventually move everything to use `default`, it's good to check for now that both are\n    // equivalent.\n    let a = MaxBlockNumber::empty();\n    assert(a.is_none());\n}\n\n#[test]\nfn serde_default() {\n    let a = MaxBlockNumber::empty();\n    let b = MaxBlockNumber::deserialize(a.serialize());\n    assert(b.is_none());\n}\n\n#[test]\nfn serde_some() {\n    let a = MaxBlockNumber::new(13);\n    let b = MaxBlockNumber::deserialize(a.serialize());\n    assert_eq(b.unwrap(), 13);\n}\n\n#[test(should_fail)]\nfn default_unwrap_panics() {\n    let a = MaxBlockNumber::empty();\n    let _ = a.unwrap();\n}\n\n#[test]\nfn min_default_default() {\n    let a = MaxBlockNumber::empty();\n    let b = MaxBlockNumber::empty();\n\n    assert(MaxBlockNumber::min(a, b).is_none());\n}\n\n#[test]\nfn min_default_some() {\n    let a = MaxBlockNumber::empty();\n    let b = MaxBlockNumber::new(13);\n\n    assert_eq(MaxBlockNumber::min(a, b).unwrap(), 13);\n    assert_eq(MaxBlockNumber::min(b, a).unwrap(), 13);\n}\n\n#[test]\nfn min_some_some() {\n    let a = MaxBlockNumber::new(13);\n    let b = MaxBlockNumber::new(42);\n\n    assert_eq(MaxBlockNumber::min(a, b).unwrap(), 13);\n    assert_eq(MaxBlockNumber::min(b, a).unwrap(), 13);\n}\n\n#[test]\nfn min_with_u32_default() {\n    let a = MaxBlockNumber::empty();\n    let b = 42;\n\n    assert_eq(MaxBlockNumber::min_with_u32(a, b).unwrap(), 42);\n}\n\n#[test]\nfn min_with_u32_some() {\n    let a = MaxBlockNumber::new(13);\n    let b = 42;\n    let c = 8;\n\n    assert_eq(MaxBlockNumber::min_with_u32(a, b).unwrap(), 13);\n    assert_eq(MaxBlockNumber::min_with_u32(a, c).unwrap(), 8);\n}\n","path":"/Users/jack-sw/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.35.1/noir-projects/noir-protocol-circuits/crates/types/src/abis/max_block_number.nr"},"167":{"source":"use crate::{\n    abis::{\n    append_only_tree_snapshot::{AppendOnlyTreeSnapshot, APPEND_ONLY_TREE_SNAPSHOT_LENGTH},\n    global_variables::{GlobalVariables, GLOBAL_VARIABLES_LENGTH}\n},\n    constants::{GENERATOR_INDEX__BLOCK_HASH, HEADER_LENGTH, STATE_REFERENCE_LENGTH, CONTENT_COMMITMENT_LENGTH},\n    hash::pedersen_hash, state_reference::StateReference, traits::{Deserialize, Empty, Hash, Serialize},\n    utils::arr_copy_slice, content_commitment::ContentCommitment\n};\n\n// docs:start:header\nstruct Header {\n    last_archive: AppendOnlyTreeSnapshot,\n    content_commitment: ContentCommitment,\n    state: StateReference,\n    global_variables: GlobalVariables,\n}\n// docs:end:header\n\nimpl Eq for Header {\n    fn eq(self, other: Self) -> bool {\n        self.last_archive.eq(other.last_archive) &\n        self.content_commitment.eq(other.content_commitment) &\n        self.state.eq(other.state) &\n        self.global_variables.eq(other.global_variables)\n    }\n}\n\nimpl Serialize<HEADER_LENGTH> for Header {\n    fn serialize(self) -> [Field; HEADER_LENGTH] {\n        let mut fields: BoundedVec<Field, HEADER_LENGTH> = BoundedVec::new();\n\n        fields.extend_from_array(self.last_archive.serialize());\n        fields.extend_from_array(self.content_commitment.serialize());\n        fields.extend_from_array(self.state.serialize());\n        fields.extend_from_array(self.global_variables.serialize());\n\n        fields.storage\n    }\n}\n\nimpl Deserialize<HEADER_LENGTH> for Header {\n    fn deserialize(serialized: [Field; HEADER_LENGTH]) -> Self {\n        let mut offset = 0;\n\n        let last_archive_fields = arr_copy_slice(serialized, [0; APPEND_ONLY_TREE_SNAPSHOT_LENGTH], offset);\n        offset = offset + APPEND_ONLY_TREE_SNAPSHOT_LENGTH;\n\n        let content_commitment_fields = arr_copy_slice(serialized, [0; CONTENT_COMMITMENT_LENGTH], offset);\n        offset = offset + CONTENT_COMMITMENT_LENGTH;\n\n        let state_fields = arr_copy_slice(serialized, [0; STATE_REFERENCE_LENGTH], offset);\n        offset = offset + STATE_REFERENCE_LENGTH;\n\n        let global_variables_fields = arr_copy_slice(serialized, [0; GLOBAL_VARIABLES_LENGTH], offset);\n\n        Header {\n            last_archive: AppendOnlyTreeSnapshot::deserialize(last_archive_fields),\n            content_commitment: ContentCommitment::deserialize(content_commitment_fields),\n            state: StateReference::deserialize(state_fields),\n            global_variables: GlobalVariables::deserialize(global_variables_fields),\n        }\n    }\n}\n\nimpl Empty for Header {\n    fn empty() -> Self {\n        Self {\n            last_archive: AppendOnlyTreeSnapshot::zero(),\n            content_commitment: ContentCommitment::empty(),\n            state: StateReference::empty(),\n            global_variables: GlobalVariables::empty(),\n        }\n    }\n}\n\nimpl Hash for Header {\n    fn hash(self) -> Field {\n        pedersen_hash(self.serialize(), GENERATOR_INDEX__BLOCK_HASH)\n    }\n}\n\n#[test]\nfn serialization_of_empty() {\n    let header = Header::empty();\n    let serialized = header.serialize();\n    let deserialized = Header::deserialize(serialized);\n    assert(header.eq(deserialized));\n}\n\n#[test]\nfn hash_smoke() {\n    let header = Header::empty();\n    let _hashed = header.hash();\n}\n\n#[test]\nfn empty_hash_is_zero() {\n    let header = Header::empty();\n    let hash = header.hash();\n\n    // Value from new_contract_data.test.ts \"computes empty hash\" test\n    let test_data_empty_hash = 0x124e8c40a6eca2e3ad10c04050b01a3fad00df3cea47b13592c7571b6914c7a7;\n    assert_eq(hash, test_data_empty_hash);\n}\n","path":"/Users/jack-sw/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.35.1/noir-projects/noir-protocol-circuits/crates/types/src/header.nr"},"194":{"source":"pub fn field_from_bytes<N>(bytes: [u8; N], big_endian: bool) -> Field {\n    assert(bytes.len() < 32, \"field_from_bytes: N must be less than 32\");\n    let mut as_field = 0;\n    let mut offset = 1;\n    for i in 0..N {\n        let mut index = i;\n        if big_endian {\n            index = N - i - 1;\n        }\n        as_field += (bytes[index] as Field) * offset;\n        offset *= 256;\n    }\n\n    as_field\n}\n\n// Convert a 32 byte array to a field element by truncating the final byte\npub fn field_from_bytes_32_trunc(bytes32: [u8; 32]) -> Field {\n    // Convert it to a field element\n    let mut v = 1;\n    let mut high = 0 as Field;\n    let mut low = 0 as Field;\n\n    for i in 0..15 {\n        // covers bytes 16..30 (31 is truncated and ignored)\n        low = low + (bytes32[15 + 15 - i] as Field) * v;\n        v = v * 256;\n        // covers bytes 0..14\n        high = high + (bytes32[14 - i] as Field) * v;\n    }\n    // covers byte 15\n    low = low + (bytes32[15] as Field) * v;\n\n    low + high * v\n}\n\n// TODO to radix returns u8, so we cannot use bigger radixes. It'd be ideal to use a radix of the maximum range-constrained integer noir supports\npub fn full_field_less_than(lhs: Field, rhs: Field) -> bool {\n    lhs.lt(rhs)\n}\n\npub fn full_field_greater_than(lhs: Field, rhs: Field) -> bool {\n    rhs.lt(lhs)\n}\n\n#[test]\nunconstrained fn bytes_field_test() {\n    // Tests correctness of field_from_bytes_32_trunc against existing methods\n    // Bytes representing 0x543e0a6642ffeb8039296861765a53407bba62bd1c97ca43374de950bbe0a7\n    let inputs = [\n        84, 62, 10, 102, 66, 255, 235, 128, 57, 41, 104, 97, 118, 90, 83, 64, 123, 186, 98, 189, 28, 151, 202, 67, 55, 77, 233, 80, 187, 224, 167\n    ];\n    let field = field_from_bytes(inputs, true);\n    let return_bytes = field.to_be_bytes(31);\n    for i in 0..31 {\n        assert_eq(inputs[i], return_bytes[i]);\n    }\n    // 32 bytes - we remove the final byte, and check it matches the field\n    let inputs2 = [\n        84, 62, 10, 102, 66, 255, 235, 128, 57, 41, 104, 97, 118, 90, 83, 64, 123, 186, 98, 189, 28, 151, 202, 67, 55, 77, 233, 80, 187, 224, 167, 158\n    ];\n    let field2 = field_from_bytes_32_trunc(inputs2);\n    let return_bytes2 = field.to_be_bytes(31);\n\n    for i in 0..31 {\n        assert_eq(return_bytes2[i], return_bytes[i]);\n    }\n    assert_eq(field2, field);\n}\n","path":"/Users/jack-sw/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.35.1/noir-projects/noir-protocol-circuits/crates/types/src/utils/field.nr"},"196":{"source":"struct Reader<N> {\n    data: [Field; N],\n    offset: u64,\n}\n\nimpl<N> Reader<N> {\n    pub fn new(data: [Field; N]) -> Self {\n        Self { data, offset: 0 }\n    }\n\n    pub fn read(&mut self) -> Field {\n        let result = self.data[self.offset];\n        self.offset += 1;\n        result\n    }\n\n    pub fn read_array<K>(&mut self, mut result: [Field; K]) -> [Field; K] {\n        for i in 0..K {\n            result[i] = self.data[self.offset + i];\n        }\n        self.offset += K;\n        result\n    }\n\n    // TODO(#4394)\n    pub fn read_struct<T, K>(&mut self, deserialise: fn([Field; K]) -> T) -> T {\n        let result = deserialise(self.read_array([0; K]));\n        result\n    }\n\n    pub fn read_struct_array<T, K, C>(&mut self, deserialise: fn([Field; K]) -> T, mut result: [T; C]) -> [T; C] {\n        for i in 0..C {\n            result[i] = self.read_struct(deserialise);\n        }\n        result\n    }\n\n    pub fn finish(self) {\n        assert(self.offset == self.data.len(), \"Reader did not read all data\");\n    }\n}\n","path":"/Users/jack-sw/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.35.1/noir-projects/noir-protocol-circuits/crates/types/src/utils/reader.nr"},"198":{"source":"use crate::traits::{Empty, Hash};\n\nstruct PublicDataTreeLeafPreimage {\n    slot : Field,\n    value: Field,\n    next_slot :Field,\n    next_index : u64,\n}\n\nimpl Empty for PublicDataTreeLeafPreimage {\n    fn empty() -> Self {\n        Self {\n            slot: 0,\n            value: 0,\n            next_slot: 0,\n            next_index: 0,\n        }\n    }\n}\n\nimpl Hash for PublicDataTreeLeafPreimage {\n    fn hash(self) -> Field {\n        if self.is_empty() {\n            0\n        } else {\n            dep::std::hash::pedersen_hash([self.slot, self.value, (self.next_index as Field), self.next_slot])\n        }\n    }\n}\n\nimpl PublicDataTreeLeafPreimage {\n    pub fn is_empty(self) -> bool {\n        (self.slot == 0) & (self.value == 0) & (self.next_slot == 0) & (self.next_index == 0)\n    }\n}\n","path":"/Users/jack-sw/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.35.1/noir-projects/noir-protocol-circuits/crates/types/src/public_data_tree_leaf_preimage.nr"},"200":{"source":"use dep::std::cmp::Eq;\n\n// Trait: is_empty\n//\n// The general is_empty trait checks if a data type is is empty,\n// and it defines empty for the basic data types as 0.\n//\n// If a Field is equal to zero, then it is regarded as zero.\n// We will go with this definition for now, however it can be problematic \n// if a value can actually be zero. In a future refactor, we can \n// use the optional type for safety. Doing it now would lead to a worse devex\n// and would make it harder to sync up with the cpp code.\n// Preferred over Default trait to convey intent, as default doesn't necessarily mean empty.\ntrait Empty {\n    fn empty() -> Self;\n}\n\nimpl Empty for Field { fn empty() -> Self {0} }\n\nimpl Empty for u1 { fn empty() -> Self {0} }\nimpl Empty for u8 { fn empty() -> Self {0} }\nimpl Empty for u32 { fn empty() -> Self {0} }\nimpl Empty for u64 { fn empty() -> Self {0} }\nimpl Empty for U128 { fn empty() -> Self {U128::from_integer(0)} }\n\npub fn is_empty<T>(item: T) -> bool where T: Empty + Eq {\n    item.eq(T::empty())\n}\n\npub fn is_empty_array<T, N>(array: [T; N]) -> bool where T: Empty + Eq {\n    array.all(|elem| is_empty(elem))\n}\n\ntrait Hash {\n    fn hash(self) -> Field;\n}\n\ntrait ToField {\n    fn to_field(self) -> Field;\n}\n\nimpl ToField for Field {\n    fn to_field(self) -> Field {\n        self\n    }\n}\n\nimpl ToField for bool { fn to_field(self) -> Field { self as Field } }\nimpl ToField for u1 { fn to_field(self) -> Field { self as Field } }\nimpl ToField for u8 { fn to_field(self) -> Field { self as Field } }\nimpl ToField for u32 { fn to_field(self) -> Field { self as Field } }\nimpl ToField for u64 { fn to_field(self) -> Field { self as Field } }\nimpl ToField for U128 {\n    fn to_field(self) -> Field {\n        self.to_integer()\n    }\n}\n\ntrait FromField {\n    fn from_field(value: Field) -> Self;\n}\n\nimpl FromField for Field {\n    fn from_field(value: Field) -> Self {\n        value\n    }\n}\n\nimpl FromField for bool { fn from_field(value: Field) -> Self { value as bool } }\nimpl FromField for u1 { fn from_field(value: Field) -> Self { value as u1 } }\nimpl FromField for u8 { fn from_field(value: Field) -> Self { value as u8 } }\nimpl FromField for u32 { fn from_field(value: Field) -> Self { value as u32 } }\nimpl FromField for u64 { fn from_field(value: Field) -> Self { value as u64 } }\nimpl FromField for U128 {\n    fn from_field(value: Field) -> Self {\n        U128::from_integer(value)\n    }\n}\n\n// docs:start:serialize\ntrait Serialize<N> {\n    fn serialize(self) -> [Field; N];\n}\n// docs:end:serialize\n\n// docs:start:deserialize\ntrait Deserialize<N> {\n    fn deserialize(fields: [Field; N]) -> Self;\n}\n// docs:end:deserialize\n","path":"/Users/jack-sw/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.35.1/noir-projects/noir-protocol-circuits/crates/types/src/traits.nr"},"202":{"source":"use crate::{\n    abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot, constants::PARTIAL_STATE_REFERENCE_LENGTH,\n    traits::{Deserialize, Empty, Hash, Serialize}\n};\n\nstruct PartialStateReference {\n    note_hash_tree: AppendOnlyTreeSnapshot,\n    nullifier_tree: AppendOnlyTreeSnapshot,\n    public_data_tree: AppendOnlyTreeSnapshot,\n}\n\nimpl Eq for PartialStateReference {\n    fn eq(self, other: PartialStateReference) -> bool {\n        self.note_hash_tree.eq(other.note_hash_tree) &\n        self.nullifier_tree.eq(other.nullifier_tree) &\n        self.public_data_tree.eq(other.public_data_tree)\n    }\n}\n\nimpl Serialize<PARTIAL_STATE_REFERENCE_LENGTH> for PartialStateReference {\n    fn serialize(self) -> [Field; PARTIAL_STATE_REFERENCE_LENGTH] {\n        let serialized_note_hash_tree = self.note_hash_tree.serialize();\n        let serialized_nullifier_tree = self.nullifier_tree.serialize();\n        let serialized_public_data_tree = self.public_data_tree.serialize();\n\n        [\n            serialized_note_hash_tree[0], \n            serialized_note_hash_tree[1],\n            serialized_nullifier_tree[0],\n            serialized_nullifier_tree[1],\n            serialized_public_data_tree[0],\n            serialized_public_data_tree[1],\n        ]\n    }\n}\n\nimpl Deserialize<PARTIAL_STATE_REFERENCE_LENGTH> for PartialStateReference {\n    fn deserialize(serialized: [Field; PARTIAL_STATE_REFERENCE_LENGTH]) -> PartialStateReference {\n        PartialStateReference {\n            note_hash_tree: AppendOnlyTreeSnapshot::deserialize(\n                [serialized[0], serialized[1]]\n            ),\n            nullifier_tree: AppendOnlyTreeSnapshot::deserialize(\n                [serialized[2], serialized[3]]\n            ),\n            public_data_tree: AppendOnlyTreeSnapshot::deserialize(\n                [serialized[4], serialized[5]]\n            ),\n        }\n    }\n}\n\nimpl Empty for PartialStateReference {\n    fn empty() -> Self {\n        Self {\n            note_hash_tree: AppendOnlyTreeSnapshot::zero(),\n            nullifier_tree: AppendOnlyTreeSnapshot::zero(),\n            public_data_tree: AppendOnlyTreeSnapshot::zero(),\n        }\n    }\n}\n\n#[test]\nfn serialization_of_empty() {\n    let partial = PartialStateReference::empty();\n    let _serialized = partial.serialize();\n    let _deserialized = PartialStateReference::deserialize(_serialized);\n}\n","path":"/Users/jack-sw/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.35.1/noir-projects/noir-protocol-circuits/crates/types/src/partial_state_reference.nr"},"204":{"source":"use crate::{\n    constants::CONTENT_COMMITMENT_LENGTH, traits::{Deserialize, Empty, Hash, Serialize},\n    utils::arr_copy_slice\n};\n\nstruct ContentCommitment {\n  tx_tree_height: Field,\n  txs_effects_hash: Field,\n  in_hash: Field,\n  out_hash: Field,\n}\n\nimpl Serialize<CONTENT_COMMITMENT_LENGTH> for ContentCommitment {\n  fn serialize(self) -> [Field; CONTENT_COMMITMENT_LENGTH] {\n    let mut fields: BoundedVec<Field, CONTENT_COMMITMENT_LENGTH> = BoundedVec::new();\n\n    fields.push(self.tx_tree_height);\n    fields.push(self.txs_effects_hash);\n    fields.push(self.in_hash);\n    fields.push(self.out_hash);\n\n    fields.storage\n  }\n}\n\nimpl Deserialize<CONTENT_COMMITMENT_LENGTH> for ContentCommitment {\n  fn deserialize(serialized: [Field; CONTENT_COMMITMENT_LENGTH]) -> Self {\n    let tx_tree_height = serialized[0];\n\n    let txs_effects_hash = serialized[1];\n\n    let in_hash = serialized[2];\n\n    let out_hash = serialized[3];\n\n    Self {\n      tx_tree_height,\n      txs_effects_hash,\n      in_hash,\n      out_hash,\n    }\n  }\n}\n\nimpl Empty for ContentCommitment {\n  fn empty() -> Self {\n    Self {\n      tx_tree_height: 0,\n      txs_effects_hash: 0,\n      in_hash: 0,\n      out_hash: 0,\n    }\n  }\n}\n\nimpl Eq for ContentCommitment {\n  fn eq(self, other: Self) -> bool {\n    (self.tx_tree_height == other.tx_tree_height)\n      & (self.txs_effects_hash == other.txs_effects_hash)\n      & (self.in_hash == other.in_hash)\n      & (self.out_hash == other.out_hash)\n  }\n}\n\n#[test]\nfn serialization_of_empty() {\n    let empty = ContentCommitment::empty();\n    let serialized = empty.serialize();\n    let deserialized = ContentCommitment::deserialize(serialized);\n\n    assert(empty.eq(deserialized));\n}\n","path":"/Users/jack-sw/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.35.1/noir-projects/noir-protocol-circuits/crates/types/src/content_commitment.nr"},"205":{"source":"use crate::{\n    address::{\n    aztec_address::AztecAddress, eth_address::EthAddress, partial_address::PartialAddress,\n    public_keys_hash::PublicKeysHash\n},\n    contract_class_id::ContractClassId,\n    constants::{GENERATOR_INDEX__CONTRACT_DEPLOYMENT_DATA, CONTRACT_INSTANCE_LENGTH},\n    traits::{Deserialize, Hash, Serialize}\n};\n\nstruct ContractInstance {\n    salt : Field,\n    deployer: AztecAddress,\n    contract_class_id : ContractClassId,\n    initialization_hash : Field,\n    portal_contract_address : EthAddress,\n    public_keys_hash : PublicKeysHash,\n}\n\nimpl Eq for ContractInstance {\n    fn eq(self, other: Self) -> bool {\n        self.public_keys_hash.eq(other.public_keys_hash) &\n        self.initialization_hash.eq(other.initialization_hash) &\n        self.contract_class_id.eq(other.contract_class_id) &\n        self.salt.eq(other.salt) &\n        self.portal_contract_address.eq(other.portal_contract_address)\n    }\n}\n\nimpl Serialize<CONTRACT_INSTANCE_LENGTH> for ContractInstance {\n    fn serialize(self) -> [Field; CONTRACT_INSTANCE_LENGTH] {\n        [\n            self.salt,\n            self.deployer.to_field(),\n            self.contract_class_id.to_field(),\n            self.initialization_hash,\n            self.portal_contract_address.to_field(),\n            self.public_keys_hash.to_field()\n        ]\n    }\n}\n\nimpl Deserialize<CONTRACT_INSTANCE_LENGTH> for ContractInstance {\n    fn deserialize(serialized: [Field; CONTRACT_INSTANCE_LENGTH]) -> Self {\n        Self {\n            salt: serialized[0],\n            deployer: AztecAddress::from_field(serialized[1]),\n            contract_class_id: ContractClassId::from_field(serialized[2]),\n            initialization_hash: serialized[3],\n            portal_contract_address: EthAddress::from_field(serialized[4]),\n            public_keys_hash: PublicKeysHash::from_field(serialized[5]),\n        }\n    }\n}\n\nimpl Hash for ContractInstance {\n    fn hash(self) -> Field {\n        self.to_address().to_field()\n    }\n}\n\nimpl ContractInstance {\n    fn to_address(self) -> AztecAddress {\n        AztecAddress::compute(\n            self.public_keys_hash,\n            PartialAddress::compute(\n                self.contract_class_id,\n                self.salt,\n                self.initialization_hash,\n                self.portal_contract_address,\n                self.deployer\n            )\n        )\n    }\n}\n","path":"/Users/jack-sw/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.35.1/noir-projects/noir-protocol-circuits/crates/types/src/contract_instance.nr"},"206":{"source":"// general util packages/modules are usually bad practice\n// because there is no criteria for what we should not put in here.\n// Reducing the size of this package would be welcome.\n\nmod arrays;\nmod field;\nmod reader;\nmod uint256;\n\n// if predicate == true then return lhs, else return rhs\npub fn conditional_assign(predicate: bool, lhs: Field, rhs: Field) -> Field {\n    if predicate { lhs } else { rhs }\n}\n\npub fn arr_copy_slice<T, N, M>(src: [T; N], mut dst: [T; M], offset: u64) -> [T; M] {\n    for i in 0..dst.len() {\n        dst[i] = src[i + offset];\n    }\n    dst\n}\n","path":"/Users/jack-sw/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.35.1/noir-projects/noir-protocol-circuits/crates/types/src/utils.nr"},"207":{"source":"use crate::{\n    crate::address::{eth_address::EthAddress, partial_address::PartialAddress, public_keys_hash::PublicKeysHash},\n    constants::{AZTEC_ADDRESS_LENGTH, GENERATOR_INDEX__CONTRACT_ADDRESS},\n    contract_class_id::ContractClassId, hash::pedersen_hash, grumpkin_point::GrumpkinPoint,\n    traits::{Empty, FromField, ToField, Serialize, Deserialize}, utils\n};\n\n// Aztec address\nstruct AztecAddress {\n    inner : Field\n}\n\nimpl Eq for AztecAddress {\n    fn eq(self, other : Self) -> bool {\n        self.to_field() == other.to_field()\n    }\n}\n\nimpl Empty for AztecAddress {\n    fn empty() -> Self {\n        Self {\n            inner : 0\n        }\n    }\n}\n\nimpl ToField for AztecAddress {\n    fn to_field(self) -> Field {\n        self.inner\n    }\n}\n\nimpl FromField for AztecAddress {\n    fn from_field(value: Field) -> AztecAddress {\n        AztecAddress { inner: value }\n    }\n}\n\nimpl Serialize<AZTEC_ADDRESS_LENGTH> for AztecAddress {\n    fn serialize(self: Self) -> [Field; AZTEC_ADDRESS_LENGTH] {\n        [self.to_field()]\n    }\n}\n\nimpl Deserialize<AZTEC_ADDRESS_LENGTH> for AztecAddress {\n    fn deserialize(fields: [Field; AZTEC_ADDRESS_LENGTH]) -> Self {\n        FromField::from_field(fields[0])\n    }\n}\n\nimpl AztecAddress {\n    pub fn zero() -> Self {\n        Self { inner: 0 }\n    }\n\n    pub fn compute_from_public_key(\n        pub_key: GrumpkinPoint,\n        contract_class_id: ContractClassId,\n        salt: Field,\n        initialization_hash: Field,\n        portal_contract_address: EthAddress,\n        deployer: AztecAddress\n    ) -> AztecAddress {\n        AztecAddress::compute(\n            PublicKeysHash::compute(pub_key),\n            PartialAddress::compute(\n                contract_class_id,\n                salt,\n                initialization_hash,\n                portal_contract_address,\n                deployer\n            )\n        )\n    }\n\n    pub fn compute(pub_keys_hash: PublicKeysHash, partial_address: PartialAddress) -> AztecAddress {\n        AztecAddress::from_field(\n            pedersen_hash(\n                [pub_keys_hash.to_field(), partial_address.to_field()],\n                GENERATOR_INDEX__CONTRACT_ADDRESS\n            )\n        )\n    }\n\n    pub fn is_zero(self) -> bool {\n        self.inner == 0\n    }\n\n    pub fn assert_is_zero(self) {\n        assert(self.to_field() == 0);\n    }\n\n    pub fn conditional_assign(predicate: bool, lhs: Self, rhs: Self) -> Self {\n        let result = utils::conditional_assign(predicate, rhs.to_field(), lhs.to_field());\n        Self { inner: result }\n    }\n}\n\n#[test]\nfn compute_address() {\n    let point = GrumpkinPoint { x: 1, y: 2 };\n    let contract_address_salt = 3;\n    let contract_class_id = ContractClassId::from_field(4);\n    let initialization_hash = 5;\n    let portal_contract_address = EthAddress::from_field(6);\n    let deployer = AztecAddress::from_field(7);\n\n    let address = AztecAddress::compute_from_public_key(\n        point,\n        contract_class_id,\n        contract_address_salt,\n        initialization_hash,\n        portal_contract_address,\n        deployer\n    );\n\n    let expected_computed_address_from_preimage = 0x027ea2b41ced2ec9a98305984e96dd28518536a4628883ccdc06e38aa8997220;\n    assert(address.to_field() == expected_computed_address_from_preimage);\n}\n\n#[test]\nfn compute_address_from_partial_and_pubkey() {\n    let point = GrumpkinPoint { x: 1, y: 2 };\n    let partial_address = PartialAddress::from_field(3);\n\n    let address = AztecAddress::compute(PublicKeysHash::compute(point), partial_address);\n    let expected_computed_address_from_partial_and_pubkey = 0x0447f893197175723deb223696e2e96dbba1e707ee8507766373558877e74197;\n    assert(address.to_field() == expected_computed_address_from_partial_and_pubkey);\n}\n\n#[test]\nfn from_field_to_field() {\n    let address = AztecAddress { inner: 37 };\n    assert_eq(FromField::from_field(address.to_field()), address);\n}\n\n#[test]\nfn serde() {\n    let address = AztecAddress { inner: 37 };\n    assert_eq(Deserialize::deserialize(address.serialize()), address);\n}\n","path":"/Users/jack-sw/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.35.1/noir-projects/noir-protocol-circuits/crates/types/src/address/aztec_address.nr"},"209":{"source":"use crate::{\n    address::{eth_address::EthAddress, aztec_address::AztecAddress},\n    constants::GENERATOR_INDEX__PARTIAL_ADDRESS, hash::pedersen_hash, traits::ToField\n};\n\n// Salted initialization hash. Used in the computation of a partial address.\nstruct SaltedInitializationHash {\n    inner: Field\n}\n\nimpl ToField for SaltedInitializationHash {\n    fn to_field(self) -> Field {\n        self.inner\n    }\n}\n\nimpl SaltedInitializationHash {\n    pub fn from_field(field: Field) -> Self {\n        Self { inner: field }\n    }\n\n    pub fn compute(\n        salt: Field,\n        initialization_hash: Field,\n        portal_contract_address: EthAddress,\n        deployer: AztecAddress\n    ) -> Self {\n        SaltedInitializationHash::from_field(\n            pedersen_hash(\n                [\n            salt,\n            initialization_hash,\n            deployer.to_field(),\n            portal_contract_address.to_field()\n        ],\n                GENERATOR_INDEX__PARTIAL_ADDRESS\n            )\n        )\n    }\n\n    pub fn assert_is_zero(self) {\n        assert(self.to_field() == 0);\n    }\n}\n","path":"/Users/jack-sw/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.35.1/noir-projects/noir-protocol-circuits/crates/types/src/address/salted_initialization_hash.nr"},"210":{"source":"use crate::{\n    address::{\n    eth_address::EthAddress, salted_initialization_hash::SaltedInitializationHash,\n    aztec_address::AztecAddress\n},\n    constants::GENERATOR_INDEX__PARTIAL_ADDRESS, contract_class_id::ContractClassId,\n    hash::pedersen_hash, traits::ToField\n};\n\n// Partial address\nstruct PartialAddress {\n    inner : Field\n}\n\nimpl ToField for PartialAddress {\n    fn to_field(self) -> Field {\n        self.inner\n    }\n}\n\nimpl PartialAddress {\n    pub fn from_field(field: Field) -> Self {\n        Self { inner: field }\n    }\n\n    pub fn compute(\n        contract_class_id: ContractClassId,\n        salt: Field,\n        initialization_hash: Field,\n        portal_contract_address: EthAddress,\n        deployer: AztecAddress\n    ) -> Self {\n        PartialAddress::compute_from_salted_initialization_hash(\n            contract_class_id,\n            SaltedInitializationHash::compute(salt, initialization_hash, portal_contract_address, deployer)\n        )\n    }\n\n    pub fn compute_from_salted_initialization_hash(\n        contract_class_id: ContractClassId,\n        salted_initialization_hash: SaltedInitializationHash\n    ) -> Self {\n        PartialAddress::from_field(\n            pedersen_hash(\n                [\n            contract_class_id.to_field(),\n            salted_initialization_hash.to_field()\n        ],\n                GENERATOR_INDEX__PARTIAL_ADDRESS\n            )\n        )\n    }\n\n    pub fn to_field(self) -> Field {\n        self.inner\n    }\n\n    pub fn assert_is_zero(self) {\n        assert(self.to_field() == 0);\n    }\n}\n","path":"/Users/jack-sw/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.35.1/noir-projects/noir-protocol-circuits/crates/types/src/address/partial_address.nr"},"211":{"source":"use crate::{\n    constants::ETH_ADDRESS_LENGTH, hash::pedersen_hash,\n    traits::{Empty, ToField, Serialize, Deserialize}, utils\n};\n\nstruct EthAddress{\n    inner : Field\n}\n\nimpl Eq for EthAddress {\n    fn eq(self, other : Self) -> bool {\n        self.to_field() == other.to_field()\n    }\n}\n\nimpl Empty for EthAddress {\n    fn empty() -> Self {\n        Self {\n            inner : 0\n        }\n    }\n}\n\nimpl ToField for EthAddress {\n    fn to_field(self) -> Field {\n        self.inner\n    }\n}\n\nimpl Serialize<ETH_ADDRESS_LENGTH> for EthAddress {\n    fn serialize(self: Self) -> [Field; ETH_ADDRESS_LENGTH] {\n        [self.inner]\n    }\n}\n\nimpl Deserialize<ETH_ADDRESS_LENGTH> for EthAddress {\n    fn deserialize(fields: [Field; ETH_ADDRESS_LENGTH]) -> Self {\n        EthAddress::from_field(fields[0])\n    }\n}\n\nimpl EthAddress {\n    pub fn zero() -> Self {\n        Self { inner: 0 }\n    }\n\n    pub fn from_field(field: Field) -> Self {\n        field.assert_max_bit_size(160);\n        Self { inner: field }\n    }\n\n    pub fn is_zero(self) -> bool {\n        self.inner == 0\n    }\n\n    pub fn assert_is_zero(self) {\n        assert(self.to_field() == 0);\n    }\n\n    pub fn conditional_assign(predicate: bool, lhs: Self, rhs: Self) -> Self {\n        let result = utils::conditional_assign(predicate, rhs.to_field(), lhs.to_field());\n        Self { inner: result }\n    }\n}\n","path":"/Users/jack-sw/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.35.1/noir-projects/noir-protocol-circuits/crates/types/src/address/eth_address.nr"},"213":{"source":"use crate::address::{AztecAddress, EthAddress};\nuse crate::mocked::VerificationKey;\nuse crate::abis::function_selector::FunctionSelector;\nuse crate::abis::contract_class_function_leaf_preimage::ContractClassFunctionLeafPreimage;\nuse crate::contract_class_id::ContractClassId;\nuse crate::utils::{uint256::U256, field::field_from_bytes_32_trunc};\nuse crate::constants::{\n    FUNCTION_TREE_HEIGHT, GENERATOR_INDEX__SILOED_NOTE_HASH, GENERATOR_INDEX__OUTER_NULLIFIER,\n    GENERATOR_INDEX__VK, GENERATOR_INDEX__CONSTRUCTOR, GENERATOR_INDEX__PARTIAL_ADDRESS,\n    GENERATOR_INDEX__CONTRACT_ADDRESS, GENERATOR_INDEX__NOTE_HASH_NONCE,\n    GENERATOR_INDEX__UNIQUE_NOTE_HASH\n};\nuse crate::traits::Hash;\nuse crate::messaging::l2_to_l1_message::L2ToL1Message;\nuse crate::merkle_tree::root::root_from_sibling_path;\nuse dep::std::hash::{pedersen_hash_with_separator, sha256};\n\npub fn sha256_to_field<N>(bytes_to_hash: [u8; N]) -> Field {\n    let sha256_hashed = sha256(bytes_to_hash);\n    let hash_in_a_field = field_from_bytes_32_trunc(sha256_hashed);\n\n    hash_in_a_field\n}\n\npub fn private_functions_root_from_siblings(\n    selector: FunctionSelector,\n    vk_hash: Field,\n    function_leaf_index: Field,\n    function_leaf_sibling_path: [Field; FUNCTION_TREE_HEIGHT]\n) -> Field {\n    let function_leaf_preimage = ContractClassFunctionLeafPreimage { selector, vk_hash };\n    let function_leaf = function_leaf_preimage.hash();\n    root_from_sibling_path(function_leaf, function_leaf_index, function_leaf_sibling_path)\n}\n\npub fn silo_note_hash(address: AztecAddress, inner_commitment: Field) -> Field {\n    pedersen_hash(\n        [\n        address.to_field(),\n        inner_commitment\n    ],\n        GENERATOR_INDEX__SILOED_NOTE_HASH\n    )\n}\n\npub fn silo_nullifier(address: AztecAddress, nullifier: Field) -> Field {\n    pedersen_hash(\n        [\n        address.to_field(),\n        nullifier\n    ],\n        GENERATOR_INDEX__OUTER_NULLIFIER\n    )\n}\n\npub fn merkle_hash(left: Field, right: Field) -> Field {\n    pedersen_hash([left, right], 0)\n}\n\npub fn stdlib_recursion_verification_key_compress_native_vk(_vk: VerificationKey) -> Field {\n    // Original cpp code\n    // stdlib::recursion::verification_key<CT::bn254>::compress_native(private_call.vk, GeneratorIndex::VK);\n    // The above cpp method is only ever called on verification key, so it has been special cased here\n    let _hash_index = GENERATOR_INDEX__VK;\n    0\n}\n\npub fn compute_l2_to_l1_hash(\n    contract_address: AztecAddress,\n    rollup_version_id: Field,\n    chain_id: Field,\n    message: L2ToL1Message\n) -> Field {\n    let mut bytes: BoundedVec<u8, 160> = BoundedVec::new();\n\n    let inputs = [\n        contract_address.to_field(), rollup_version_id, message.recipient.to_field(), chain_id, message.content\n    ];\n    for i in 0..inputs.len() {\n        // TODO are bytes be in fr.to_buffer() ?\n        let item_bytes = inputs[i].to_be_bytes(32);\n        for j in 0..32 {\n            bytes.push(item_bytes[j]);\n        }\n    }\n\n    sha256_to_field(bytes.storage)\n}\n\n// Computes sha256 hash of 2 input hashes.\n//\n// NB: This method now takes in two 31 byte fields - it assumes that any input\n// is the result of a sha_to_field hash and => is truncated\n//\n// TODO(Jan and David): This is used for the encrypted_log hashes.\n// Can we check to see if we can just use hash_to_field or pedersen_compress here?\n//\npub fn accumulate_sha256(input: [Field; 2]) -> Field {\n    // This is a note about the cpp code, since it takes an array of Fields\n    // instead of a U128.\n    // 4 Field elements when converted to bytes will usually \n    // occupy 4 * 32 = 128 bytes.\n    // However, this function is making the assumption that each Field \n    // only occupies 128 bits.\n    //\n    // TODO(David): This does not seem to be getting guaranteed anywhere in the code?\n\n    // Concatentate two fields into 32x2 = 64 bytes\n    // accumulate_sha256 assumes that the inputs are pre-truncated 31 byte numbers\n    let mut hash_input_flattened = [0; 64];\n    for offset in 0..input.len() {\n        let input_as_bytes = input[offset].to_be_bytes(32);\n        for byte_index in 0..32 {\n            hash_input_flattened[offset * 32 + byte_index] = input_as_bytes[byte_index];\n        }\n    }\n\n    sha256_to_field(hash_input_flattened)\n}\n\npub fn compute_logs_hash(previous_log_hash: Field, current_log_hash: Field) -> Field {\n    accumulate_sha256(\n        [\n        previous_log_hash,\n        current_log_hash\n    ]\n    )\n}\n\npub fn compute_note_hash_nonce(first_nullifier: Field, commitment_index: u64) -> Field {\n    pedersen_hash(\n        [\n        first_nullifier,\n        commitment_index as Field\n    ],\n        GENERATOR_INDEX__NOTE_HASH_NONCE\n    )\n}\n\npub fn compute_unique_siloed_note_hash(nonce: Field, siloed_note_hash: Field) -> Field {\n    pedersen_hash(\n        [\n        nonce,\n        siloed_note_hash\n    ],\n        GENERATOR_INDEX__UNIQUE_NOTE_HASH\n    )\n}\n\npub fn pedersen_hash<N>(inputs: [Field; N], hash_index: u32) -> Field {\n    dep::std::hash::pedersen_hash_with_separator(inputs, hash_index)\n}\n\n#[test]\nfn smoke_sha256_to_field() {\n    let full_buffer = [\n        0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19,\n        20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39,\n        40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59,\n        60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79,\n        80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99,\n        100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119,\n        120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139,\n        140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159\n    ];\n    let result = sha256_to_field(full_buffer);\n\n    assert(result == 0x448ebbc9e1a31220a2f3830c18eef61b9bd070e5084b7fa2a359fe729184c7);\n\n    // to show correctness of the current ver (truncate one byte) vs old ver (mod full bytes):\n    let result_bytes = sha256(full_buffer);\n    let truncated_field = crate::utils::field::field_from_bytes_32_trunc(result_bytes);\n    assert(truncated_field == result);\n    let mod_res = result + (result_bytes[31] as Field);\n    assert(mod_res == 0x448ebbc9e1a31220a2f3830c18eef61b9bd070e5084b7fa2a359fe729184e0);\n}\n\n#[test]\nfn compute_l2_l1_hash() {\n    // All zeroes\n    let hash_result = compute_l2_to_l1_hash(AztecAddress::from_field(0), 0, 0, L2ToL1Message::empty());\n    assert(hash_result == 0xb393978842a0fa3d3e1470196f098f473f9678e72463cb65ec4ab5581856c2);\n\n    // Non-zero case\n    let message = L2ToL1Message { recipient: EthAddress::from_field(3), content: 5 };\n    let hash_result = compute_l2_to_l1_hash(AztecAddress::from_field(1), 2, 4, message);\n    assert(hash_result == 0x3f88c1044a05e5340ed20466276500f6d45ca5603913b9091e957161734e16);\n}\n","path":"/Users/jack-sw/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.35.1/noir-projects/noir-protocol-circuits/crates/types/src/hash.nr"},"217":{"source":"use crate::{address::EthAddress, constants::L2_TO_L1_MESSAGE_LENGTH, traits::{Deserialize, Empty, Serialize}};\n\n// Note: Not to be confused with L2ToL1Msg in Solidity\nstruct L2ToL1Message {\n    recipient: EthAddress,\n    content: Field,\n}\n\nimpl Empty for L2ToL1Message {\n    fn empty() -> Self {\n        Self {\n            recipient: EthAddress::empty(),\n            content: 0,\n        }\n    }\n}\n\nimpl Eq for L2ToL1Message {\n    fn eq(self, other: Self) -> bool {\n        (self.recipient == other.recipient) & (self.content == other.content)\n    }\n}\n\nimpl Serialize<L2_TO_L1_MESSAGE_LENGTH> for L2ToL1Message {\n    fn serialize(self) -> [Field; L2_TO_L1_MESSAGE_LENGTH] {\n        [self.recipient.to_field(), self.content]\n    }\n}\n\nimpl Deserialize<L2_TO_L1_MESSAGE_LENGTH> for L2ToL1Message {\n    fn deserialize(values: [Field; L2_TO_L1_MESSAGE_LENGTH]) -> Self {\n        Self {\n            recipient: EthAddress::from_field(values[0]),\n            content: values[1],\n        }\n    }\n}\n","path":"/Users/jack-sw/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.35.1/noir-projects/noir-protocol-circuits/crates/types/src/messaging/l2_to_l1_message.nr"},"219":{"source":"use crate::{\n    abis::append_only_tree_snapshot::{AppendOnlyTreeSnapshot, APPEND_ONLY_TREE_SNAPSHOT_LENGTH},\n    constants::{PARTIAL_STATE_REFERENCE_LENGTH, STATE_REFERENCE_LENGTH},\n    partial_state_reference::PartialStateReference, traits::{Deserialize, Empty, Hash, Serialize},\n    utils::arr_copy_slice\n};\n\nstruct StateReference {\n    l1_to_l2_message_tree: AppendOnlyTreeSnapshot,\n    partial: PartialStateReference,\n}\n\nimpl Eq for StateReference {\n    fn eq(self, other: StateReference) -> bool {\n        self.l1_to_l2_message_tree.eq(other.l1_to_l2_message_tree) &\n        self.partial.eq(other.partial)\n    }\n}\n\nimpl Serialize<STATE_REFERENCE_LENGTH> for StateReference {\n    fn serialize(self) -> [Field; STATE_REFERENCE_LENGTH] {\n        let mut fields: BoundedVec<Field, STATE_REFERENCE_LENGTH> = BoundedVec::new();\n\n        fields.extend_from_array(self.l1_to_l2_message_tree.serialize());\n        fields.extend_from_array(self.partial.serialize());\n\n        fields.storage\n    }\n}\n\nimpl Deserialize<STATE_REFERENCE_LENGTH> for StateReference {\n    fn deserialize(serialized: [Field; STATE_REFERENCE_LENGTH]) -> StateReference {\n        let mut offset = 0;\n\n        let l1_to_l2_message_tree_fields = arr_copy_slice(serialized, [0; APPEND_ONLY_TREE_SNAPSHOT_LENGTH], offset);\n        offset = offset + APPEND_ONLY_TREE_SNAPSHOT_LENGTH;\n\n        let partial_fields = arr_copy_slice(serialized, [0; PARTIAL_STATE_REFERENCE_LENGTH], offset);\n\n        StateReference {\n            l1_to_l2_message_tree: AppendOnlyTreeSnapshot::deserialize(l1_to_l2_message_tree_fields),\n            partial: PartialStateReference::deserialize(partial_fields),\n        }\n    }\n}\n\nimpl Empty for StateReference {\n    fn empty() -> Self {\n        Self {\n            l1_to_l2_message_tree: AppendOnlyTreeSnapshot::zero(),\n            partial: PartialStateReference::empty(),\n        }\n    }\n}\n\n#[test]\nfn serialization_of_empty() {\n    let state = StateReference::empty();\n    let _serialized = state.serialize();\n    let _deserialized = StateReference::deserialize(_serialized);\n}\n","path":"/Users/jack-sw/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.35.1/noir-projects/noir-protocol-circuits/crates/types/src/state_reference.nr"}}}