{"noir_version":"0.27.0+783feebcc2543497cc9a23db958af64902afa589","name":"BatcherVault","functions":[{"name":"replace_relayer_and_slash_stake","is_unconstrained":true,"custom_attributes":["aztec(public)","aztec(internal)"],"abi":{"parameters":[{"name":"inputs","type":{"kind":"struct","path":"aztec::context::inputs::public_context_inputs::PublicContextInputs","fields":[{"name":"call_context","type":{"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"storage_contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"portal_contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"gas_left","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l1_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}},{"name":"side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"gas_settings","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::GasSettings","fields":[{"name":"da","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::DimensionGasSettings","fields":[{"name":"gas_limit","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"teardown_gas_limit","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"max_fee_per_gas","type":{"kind":"field"}}]}},{"name":"l1","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::DimensionGasSettings","fields":[{"name":"gas_limit","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"teardown_gas_limit","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"max_fee_per_gas","type":{"kind":"field"}}]}},{"name":"l2","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::DimensionGasSettings","fields":[{"name":"gas_limit","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"teardown_gas_limit","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"max_fee_per_gas","type":{"kind":"field"}}]}},{"name":"inclusion_fee","type":{"kind":"field"}}]}},{"name":"transaction_fee","type":{"kind":"field"}}]}},{"name":"historical_header","type":{"kind":"struct","path":"aztec::protocol_types::header::Header","fields":[{"name":"last_archive","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"content_commitment","type":{"kind":"struct","path":"aztec::protocol_types::content_commitment::ContentCommitment","fields":[{"name":"tx_tree_height","type":{"kind":"field"}},{"name":"txs_effects_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}]}},{"name":"state","type":{"kind":"struct","path":"aztec::protocol_types::state_reference::StateReference","fields":[{"name":"l1_to_l2_message_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"partial","type":{"kind":"struct","path":"aztec::protocol_types::partial_state_reference::PartialStateReference","fields":[{"name":"note_hash_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"nullifier_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"public_data_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}}]}},{"name":"global_variables","type":{"kind":"struct","path":"aztec::protocol_types::abis::global_variables::GlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"fee_recipient","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"gas_fees","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l1_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}}]}}]}},{"name":"public_global_variables","type":{"kind":"struct","path":"aztec::protocol_types::abis::global_variables::GlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"fee_recipient","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"gas_fees","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l1_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}}]}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}]},"visibility":"private"},{"name":"sk_hash","type":{"kind":"field"},"visibility":"private"},{"name":"new_he_pub_key","type":{"kind":"field"},"visibility":"private"},{"name":"new_relayer","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]},"visibility":"private"},{"name":"secret_hash","type":{"kind":"field"},"visibility":"private"},{"name":"nonce","type":{"kind":"field"},"visibility":"private"}],"param_witnesses":{"inputs":[{"start":0,"end":54}],"new_he_pub_key":[{"start":55,"end":56}],"new_relayer":[{"start":56,"end":57}],"nonce":[{"start":58,"end":59}],"secret_hash":[{"start":57,"end":58}],"sk_hash":[{"start":54,"end":55}]},"return_type":{"abi_type":{"kind":"struct","path":"aztec::protocol_types::abis::public_circuit_public_inputs::PublicCircuitPublicInputs","fields":[{"name":"call_context","type":{"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"storage_contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"portal_contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"gas_left","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l1_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}},{"name":"side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"gas_settings","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::GasSettings","fields":[{"name":"da","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::DimensionGasSettings","fields":[{"name":"gas_limit","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"teardown_gas_limit","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"max_fee_per_gas","type":{"kind":"field"}}]}},{"name":"l1","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::DimensionGasSettings","fields":[{"name":"gas_limit","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"teardown_gas_limit","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"max_fee_per_gas","type":{"kind":"field"}}]}},{"name":"l2","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::DimensionGasSettings","fields":[{"name":"gas_limit","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"teardown_gas_limit","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"max_fee_per_gas","type":{"kind":"field"}}]}},{"name":"inclusion_fee","type":{"kind":"field"}}]}},{"name":"transaction_fee","type":{"kind":"field"}}]}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"nullifier_read_requests","type":{"kind":"array","length":2,"type":{"kind":"struct","path":"aztec::protocol_types::abis::read_request::ReadRequest","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"nullifier_non_existent_read_requests","type":{"kind":"array","length":2,"type":{"kind":"struct","path":"aztec::protocol_types::abis::read_request::ReadRequest","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"contract_storage_update_requests","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::contrakt::storage_update_request::StorageUpdateRequest","fields":[{"name":"storage_slot","type":{"kind":"field"}},{"name":"new_value","type":{"kind":"field"}}]}}},{"name":"contract_storage_reads","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::contrakt::storage_read::StorageRead","fields":[{"name":"storage_slot","type":{"kind":"field"}},{"name":"current_value","type":{"kind":"field"}}]}}},{"name":"public_call_stack_hashes","type":{"kind":"array","length":4,"type":{"kind":"field"}}},{"name":"new_note_hashes","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::abis::side_effect::SideEffect","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"new_nullifiers","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::abis::side_effect::SideEffectLinkedToNoteHash","fields":[{"name":"value","type":{"kind":"field"}},{"name":"note_hash","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"new_l2_to_l1_msgs","type":{"kind":"array","length":2,"type":{"kind":"struct","path":"aztec::protocol_types::messaging::l2_to_l1_message::L2ToL1Message","fields":[{"name":"recipient","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"content","type":{"kind":"field"}}]}}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"unencrypted_logs_hash","type":{"kind":"field"}},{"name":"unencrypted_log_preimages_length","type":{"kind":"field"}},{"name":"historical_header","type":{"kind":"struct","path":"aztec::protocol_types::header::Header","fields":[{"name":"last_archive","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"content_commitment","type":{"kind":"struct","path":"aztec::protocol_types::content_commitment::ContentCommitment","fields":[{"name":"tx_tree_height","type":{"kind":"field"}},{"name":"txs_effects_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}]}},{"name":"state","type":{"kind":"struct","path":"aztec::protocol_types::state_reference::StateReference","fields":[{"name":"l1_to_l2_message_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"partial","type":{"kind":"struct","path":"aztec::protocol_types::partial_state_reference::PartialStateReference","fields":[{"name":"note_hash_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"nullifier_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"public_data_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}}]}},{"name":"global_variables","type":{"kind":"struct","path":"aztec::protocol_types::abis::global_variables::GlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"fee_recipient","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"gas_fees","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l1_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}}]}}]}},{"name":"prover_address","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"revert_code","type":{"kind":"integer","sign":"unsigned","width":8}},{"name":"gas_left","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l1_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]},"visibility":"public"},"return_witnesses":[59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273]},"bytecode":"","debug_symbols":""},{"name":"get_round","is_unconstrained":true,"custom_attributes":[],"abi":{"parameters":[],"param_witnesses":{},"return_type":{"abi_type":{"kind":"field"},"visibility":"public"},"return_witnesses":[0]},"bytecode":"H4sIAAAAAAAA/72UTU7DMBCFnd+mREWwRLAIexaOBHtzBW4QlIDYNFLaSnD5CIw89JPjXU2fFM14PPY8P4+TqCMSZ7NATPDgbIWYcZ+FPgWPui3tJrkKYvXzFc6vkZe62DViCXjK/ByLp9ZPl2qpUQXtTLxarX8HBn4GPfy8GvMpYqm31up6j/kisKYM1BOfdyJXVwbWUqcCZzHO16fhVyfWMhhLvQ14lGfgw1Y2GBeovYpfW1fq+EZjn2mNMxjwl3o5cu6cvVJLcC/hyZ602EArya0DOrKvc+TzTUZ8/63dtwTvWPvybNRJeToJ/ruHL5y2Frv9OHXvw8vQ9Qmo5R5NWlKfMU4Rp58FYjMsfydS18akXULtwF+R315rtZQ36lvJVBhJwGfs1tkbZ5+nqftqPrb98NmMh30zvjWv42Hb7/5WfAM0U4cnygcAAA==","debug_symbols":"zZfBqsIwEEX/ZdblkUkySdpfebiIWqFQqtgqSOm/22qtCwWxqNxdhtzLHLI4kJbK7So2xbaqKWtJ/Qll/y3Vu1gNc93EfUOZViwhobxaX87BdQltijKnTHSXPMSZWcY0s72Hmf2TtPF6DFs2UzZIt0h6HgfG48F4AhhPCsbDCg2I0YA0GpBBA7JoQGiWZjRNM5qnGU3UjGZqjWZq/W1TX7fon2z5jFPFTVt8ePG4nNopnYpMaa1u72sBmQSQyQEyeUCmAMiU4jGZ5y5wfmwZZR9caOyMjszouBkdP6MT3uv0wzHui7gs8+GjPNwdqtXt39yPzWl3venO"},{"name":"constructor","is_unconstrained":false,"custom_attributes":["aztec(private)","aztec(initializer)"],"abi":{"parameters":[{"name":"inputs","type":{"kind":"struct","path":"aztec::context::inputs::private_context_inputs::PrivateContextInputs","fields":[{"name":"call_context","type":{"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"storage_contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"portal_contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"gas_left","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l1_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}},{"name":"side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"gas_settings","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::GasSettings","fields":[{"name":"da","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::DimensionGasSettings","fields":[{"name":"gas_limit","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"teardown_gas_limit","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"max_fee_per_gas","type":{"kind":"field"}}]}},{"name":"l1","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::DimensionGasSettings","fields":[{"name":"gas_limit","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"teardown_gas_limit","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"max_fee_per_gas","type":{"kind":"field"}}]}},{"name":"l2","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::DimensionGasSettings","fields":[{"name":"gas_limit","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"teardown_gas_limit","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"max_fee_per_gas","type":{"kind":"field"}}]}},{"name":"inclusion_fee","type":{"kind":"field"}}]}},{"name":"transaction_fee","type":{"kind":"field"}}]}},{"name":"historical_header","type":{"kind":"struct","path":"aztec::protocol_types::header::Header","fields":[{"name":"last_archive","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"content_commitment","type":{"kind":"struct","path":"aztec::protocol_types::content_commitment::ContentCommitment","fields":[{"name":"tx_tree_height","type":{"kind":"field"}},{"name":"txs_effects_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}]}},{"name":"state","type":{"kind":"struct","path":"aztec::protocol_types::state_reference::StateReference","fields":[{"name":"l1_to_l2_message_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"partial","type":{"kind":"struct","path":"aztec::protocol_types::partial_state_reference::PartialStateReference","fields":[{"name":"note_hash_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"nullifier_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"public_data_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}}]}},{"name":"global_variables","type":{"kind":"struct","path":"aztec::protocol_types::abis::global_variables::GlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"fee_recipient","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"gas_fees","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l1_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}}]}}]}},{"name":"private_global_variables","type":{"kind":"struct","path":"aztec::context::globals::private_global_variables::PrivateGlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}}]}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}]},"visibility":"private"},{"name":"admin","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]},"visibility":"private"},{"name":"target","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]},"visibility":"private"},{"name":"token_in","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]},"visibility":"private"},{"name":"token_out","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]},"visibility":"private"},{"name":"relayer","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]},"visibility":"private"},{"name":"bonding_token","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]},"visibility":"private"},{"name":"bonding_amount","type":{"kind":"field"},"visibility":"private"},{"name":"he_pub_key","type":{"kind":"field"},"visibility":"private"},{"name":"sk_hash","type":{"kind":"field"},"visibility":"private"},{"name":"interval","type":{"kind":"field"},"visibility":"private"},{"name":"he_secret_key","type":{"kind":"field"},"visibility":"private"}],"param_witnesses":{"admin":[{"start":47,"end":48}],"bonding_amount":[{"start":53,"end":54}],"bonding_token":[{"start":52,"end":53}],"he_pub_key":[{"start":54,"end":55}],"he_secret_key":[{"start":57,"end":58}],"inputs":[{"start":0,"end":47}],"interval":[{"start":56,"end":57}],"relayer":[{"start":51,"end":52}],"sk_hash":[{"start":55,"end":56}],"target":[{"start":48,"end":49}],"token_in":[{"start":49,"end":50}],"token_out":[{"start":50,"end":51}]},"return_type":{"abi_type":{"kind":"struct","path":"aztec::protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs","fields":[{"name":"call_context","type":{"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"storage_contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"portal_contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"gas_left","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l1_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}},{"name":"side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"gas_settings","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::GasSettings","fields":[{"name":"da","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::DimensionGasSettings","fields":[{"name":"gas_limit","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"teardown_gas_limit","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"max_fee_per_gas","type":{"kind":"field"}}]}},{"name":"l1","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::DimensionGasSettings","fields":[{"name":"gas_limit","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"teardown_gas_limit","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"max_fee_per_gas","type":{"kind":"field"}}]}},{"name":"l2","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::DimensionGasSettings","fields":[{"name":"gas_limit","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"teardown_gas_limit","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"max_fee_per_gas","type":{"kind":"field"}}]}},{"name":"inclusion_fee","type":{"kind":"field"}}]}},{"name":"transaction_fee","type":{"kind":"field"}}]}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"min_revertible_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"max_block_number","type":{"kind":"struct","path":"aztec::protocol_types::abis::max_block_number::MaxBlockNumber","fields":[{"name":"_opt","type":{"kind":"struct","path":"std::option::Option","fields":[{"name":"_is_some","type":{"kind":"boolean"}},{"name":"_value","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}},{"name":"note_hash_read_requests","type":{"kind":"array","length":32,"type":{"kind":"struct","path":"aztec::protocol_types::abis::side_effect::SideEffect","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"nullifier_read_requests","type":{"kind":"array","length":2,"type":{"kind":"struct","path":"aztec::protocol_types::abis::read_request::ReadRequest","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"nullifier_key_validation_requests","type":{"kind":"array","length":1,"type":{"kind":"struct","path":"aztec::protocol_types::abis::nullifier_key_validation_request::NullifierKeyValidationRequest","fields":[{"name":"public_key","type":{"kind":"struct","path":"aztec::protocol_types::grumpkin_point::GrumpkinPoint","fields":[{"name":"x","type":{"kind":"field"}},{"name":"y","type":{"kind":"field"}}]}},{"name":"secret_key","type":{"kind":"struct","path":"aztec::protocol_types::grumpkin_private_key::GrumpkinPrivateKey","fields":[{"name":"high","type":{"kind":"field"}},{"name":"low","type":{"kind":"field"}}]}}]}}},{"name":"new_note_hashes","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::abis::side_effect::SideEffect","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"new_nullifiers","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::abis::side_effect::SideEffectLinkedToNoteHash","fields":[{"name":"value","type":{"kind":"field"}},{"name":"note_hash","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"private_call_stack_hashes","type":{"kind":"array","length":4,"type":{"kind":"field"}}},{"name":"public_call_stack_hashes","type":{"kind":"array","length":4,"type":{"kind":"field"}}},{"name":"new_l2_to_l1_msgs","type":{"kind":"array","length":2,"type":{"kind":"struct","path":"aztec::protocol_types::messaging::l2_to_l1_message::L2ToL1Message","fields":[{"name":"recipient","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"content","type":{"kind":"field"}}]}}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"encrypted_logs_hash","type":{"kind":"field"}},{"name":"unencrypted_logs_hash","type":{"kind":"field"}},{"name":"encrypted_log_preimages_length","type":{"kind":"field"}},{"name":"unencrypted_log_preimages_length","type":{"kind":"field"}},{"name":"historical_header","type":{"kind":"struct","path":"aztec::protocol_types::header::Header","fields":[{"name":"last_archive","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"content_commitment","type":{"kind":"struct","path":"aztec::protocol_types::content_commitment::ContentCommitment","fields":[{"name":"tx_tree_height","type":{"kind":"field"}},{"name":"txs_effects_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}]}},{"name":"state","type":{"kind":"struct","path":"aztec::protocol_types::state_reference::StateReference","fields":[{"name":"l1_to_l2_message_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"partial","type":{"kind":"struct","path":"aztec::protocol_types::partial_state_reference::PartialStateReference","fields":[{"name":"note_hash_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"nullifier_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"public_data_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}}]}},{"name":"global_variables","type":{"kind":"struct","path":"aztec::protocol_types::abis::global_variables::GlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"fee_recipient","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"gas_fees","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l1_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}}]}}]}},{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}}]},"visibility":"public"},"return_witnesses":[204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,376,377,378,379,380,381,382,383,384,385,386,387,388,389,390,391,392,393,394,395,396,397,398,399,400,401,402,403,404,405,406,407,408,409,410,411,412,413,414,415,416,417,418,419,420,421,422,423,424]},"bytecode":"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","debug_symbols":"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"},{"name":"execute_batch","is_unconstrained":false,"custom_attributes":["aztec(private)"],"abi":{"parameters":[{"name":"inputs","type":{"kind":"struct","path":"aztec::context::inputs::private_context_inputs::PrivateContextInputs","fields":[{"name":"call_context","type":{"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"storage_contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"portal_contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"gas_left","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l1_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}},{"name":"side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"gas_settings","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::GasSettings","fields":[{"name":"da","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::DimensionGasSettings","fields":[{"name":"gas_limit","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"teardown_gas_limit","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"max_fee_per_gas","type":{"kind":"field"}}]}},{"name":"l1","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::DimensionGasSettings","fields":[{"name":"gas_limit","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"teardown_gas_limit","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"max_fee_per_gas","type":{"kind":"field"}}]}},{"name":"l2","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::DimensionGasSettings","fields":[{"name":"gas_limit","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"teardown_gas_limit","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"max_fee_per_gas","type":{"kind":"field"}}]}},{"name":"inclusion_fee","type":{"kind":"field"}}]}},{"name":"transaction_fee","type":{"kind":"field"}}]}},{"name":"historical_header","type":{"kind":"struct","path":"aztec::protocol_types::header::Header","fields":[{"name":"last_archive","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"content_commitment","type":{"kind":"struct","path":"aztec::protocol_types::content_commitment::ContentCommitment","fields":[{"name":"tx_tree_height","type":{"kind":"field"}},{"name":"txs_effects_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}]}},{"name":"state","type":{"kind":"struct","path":"aztec::protocol_types::state_reference::StateReference","fields":[{"name":"l1_to_l2_message_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"partial","type":{"kind":"struct","path":"aztec::protocol_types::partial_state_reference::PartialStateReference","fields":[{"name":"note_hash_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"nullifier_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"public_data_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}}]}},{"name":"global_variables","type":{"kind":"struct","path":"aztec::protocol_types::abis::global_variables::GlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"fee_recipient","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"gas_fees","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l1_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}}]}}]}},{"name":"private_global_variables","type":{"kind":"struct","path":"aztec::context::globals::private_global_variables::PrivateGlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}}]}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}]},"visibility":"private"},{"name":"encrypted_amount","type":{"kind":"array","length":2,"type":{"kind":"field"}},"visibility":"private"},{"name":"secret_key","type":{"kind":"field"},"visibility":"private"},{"name":"token_out_amount_cancelled","type":{"kind":"field"},"visibility":"private"},{"name":"tokne_in","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]},"visibility":"private"},{"name":"token_out","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]},"visibility":"private"},{"name":"nonce_for_transfer_approval","type":{"kind":"field"},"visibility":"private"},{"name":"nonce_for_swap_approval","type":{"kind":"field"},"visibility":"private"}],"param_witnesses":{"encrypted_amount":[{"start":47,"end":49}],"inputs":[{"start":0,"end":47}],"nonce_for_swap_approval":[{"start":54,"end":55}],"nonce_for_transfer_approval":[{"start":53,"end":54}],"secret_key":[{"start":49,"end":50}],"token_out":[{"start":52,"end":53}],"token_out_amount_cancelled":[{"start":50,"end":51}],"tokne_in":[{"start":51,"end":52}]},"return_type":{"abi_type":{"kind":"struct","path":"aztec::protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs","fields":[{"name":"call_context","type":{"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"storage_contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"portal_contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"gas_left","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l1_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}},{"name":"side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"gas_settings","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::GasSettings","fields":[{"name":"da","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::DimensionGasSettings","fields":[{"name":"gas_limit","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"teardown_gas_limit","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"max_fee_per_gas","type":{"kind":"field"}}]}},{"name":"l1","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::DimensionGasSettings","fields":[{"name":"gas_limit","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"teardown_gas_limit","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"max_fee_per_gas","type":{"kind":"field"}}]}},{"name":"l2","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::DimensionGasSettings","fields":[{"name":"gas_limit","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"teardown_gas_limit","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"max_fee_per_gas","type":{"kind":"field"}}]}},{"name":"inclusion_fee","type":{"kind":"field"}}]}},{"name":"transaction_fee","type":{"kind":"field"}}]}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"min_revertible_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"max_block_number","type":{"kind":"struct","path":"aztec::protocol_types::abis::max_block_number::MaxBlockNumber","fields":[{"name":"_opt","type":{"kind":"struct","path":"std::option::Option","fields":[{"name":"_is_some","type":{"kind":"boolean"}},{"name":"_value","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}},{"name":"note_hash_read_requests","type":{"kind":"array","length":32,"type":{"kind":"struct","path":"aztec::protocol_types::abis::side_effect::SideEffect","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"nullifier_read_requests","type":{"kind":"array","length":2,"type":{"kind":"struct","path":"aztec::protocol_types::abis::read_request::ReadRequest","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"nullifier_key_validation_requests","type":{"kind":"array","length":1,"type":{"kind":"struct","path":"aztec::protocol_types::abis::nullifier_key_validation_request::NullifierKeyValidationRequest","fields":[{"name":"public_key","type":{"kind":"struct","path":"aztec::protocol_types::grumpkin_point::GrumpkinPoint","fields":[{"name":"x","type":{"kind":"field"}},{"name":"y","type":{"kind":"field"}}]}},{"name":"secret_key","type":{"kind":"struct","path":"aztec::protocol_types::grumpkin_private_key::GrumpkinPrivateKey","fields":[{"name":"high","type":{"kind":"field"}},{"name":"low","type":{"kind":"field"}}]}}]}}},{"name":"new_note_hashes","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::abis::side_effect::SideEffect","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"new_nullifiers","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::abis::side_effect::SideEffectLinkedToNoteHash","fields":[{"name":"value","type":{"kind":"field"}},{"name":"note_hash","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"private_call_stack_hashes","type":{"kind":"array","length":4,"type":{"kind":"field"}}},{"name":"public_call_stack_hashes","type":{"kind":"array","length":4,"type":{"kind":"field"}}},{"name":"new_l2_to_l1_msgs","type":{"kind":"array","length":2,"type":{"kind":"struct","path":"aztec::protocol_types::messaging::l2_to_l1_message::L2ToL1Message","fields":[{"name":"recipient","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"content","type":{"kind":"field"}}]}}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"encrypted_logs_hash","type":{"kind":"field"}},{"name":"unencrypted_logs_hash","type":{"kind":"field"}},{"name":"encrypted_log_preimages_length","type":{"kind":"field"}},{"name":"unencrypted_log_preimages_length","type":{"kind":"field"}},{"name":"historical_header","type":{"kind":"struct","path":"aztec::protocol_types::header::Header","fields":[{"name":"last_archive","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"content_commitment","type":{"kind":"struct","path":"aztec::protocol_types::content_commitment::ContentCommitment","fields":[{"name":"tx_tree_height","type":{"kind":"field"}},{"name":"txs_effects_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}]}},{"name":"state","type":{"kind":"struct","path":"aztec::protocol_types::state_reference::StateReference","fields":[{"name":"l1_to_l2_message_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"partial","type":{"kind":"struct","path":"aztec::protocol_types::partial_state_reference::PartialStateReference","fields":[{"name":"note_hash_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"nullifier_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"public_data_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}}]}},{"name":"global_variables","type":{"kind":"struct","path":"aztec::protocol_types::abis::global_variables::GlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"fee_recipient","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"gas_fees","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l1_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}}]}}]}},{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}}]},"visibility":"public"},"return_witnesses":[363,364,365,366,367,368,369,370,371,372,373,374,375,376,377,378,379,380,381,382,383,384,385,386,387,388,389,390,391,392,393,394,395,396,397,398,399,400,401,402,403,404,405,406,407,408,409,410,411,412,413,414,415,416,417,418,419,420,421,422,423,424,425,426,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,465,466,467,468,469,470,471,472,473,474,475,476,477,478,479,480,481,482,483,484,485,486,487,488,489,490,491,492,493,494,495,496,497,498,499,500,501,502,503,504,505,506,507,508,509,510,511,512,513,514,515,516,517,518,519,520,521,522,523,524,525,526,527,528,529,530,531,532,533,534,535,536,537,538,539,540,541,542,543,544,545,546,547,548,549,550,551,552,553,554,555,556,557,558,559,560,561,562,563,564,565,566,567,568,569,570,571,572,573,574,575,576,577,578,579,580,581,582,583]},"bytecode":"","debug_symbols":"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"},{"name":"_add_token_out_amount","is_unconstrained":true,"custom_attributes":["aztec(public)","aztec(internal)"],"abi":{"parameters":[{"name":"inputs","type":{"kind":"struct","path":"aztec::context::inputs::public_context_inputs::PublicContextInputs","fields":[{"name":"call_context","type":{"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"storage_contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"portal_contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"gas_left","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l1_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}},{"name":"side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"gas_settings","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::GasSettings","fields":[{"name":"da","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::DimensionGasSettings","fields":[{"name":"gas_limit","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"teardown_gas_limit","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"max_fee_per_gas","type":{"kind":"field"}}]}},{"name":"l1","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::DimensionGasSettings","fields":[{"name":"gas_limit","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"teardown_gas_limit","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"max_fee_per_gas","type":{"kind":"field"}}]}},{"name":"l2","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::DimensionGasSettings","fields":[{"name":"gas_limit","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"teardown_gas_limit","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"max_fee_per_gas","type":{"kind":"field"}}]}},{"name":"inclusion_fee","type":{"kind":"field"}}]}},{"name":"transaction_fee","type":{"kind":"field"}}]}},{"name":"historical_header","type":{"kind":"struct","path":"aztec::protocol_types::header::Header","fields":[{"name":"last_archive","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"content_commitment","type":{"kind":"struct","path":"aztec::protocol_types::content_commitment::ContentCommitment","fields":[{"name":"tx_tree_height","type":{"kind":"field"}},{"name":"txs_effects_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}]}},{"name":"state","type":{"kind":"struct","path":"aztec::protocol_types::state_reference::StateReference","fields":[{"name":"l1_to_l2_message_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"partial","type":{"kind":"struct","path":"aztec::protocol_types::partial_state_reference::PartialStateReference","fields":[{"name":"note_hash_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"nullifier_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"public_data_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}}]}},{"name":"global_variables","type":{"kind":"struct","path":"aztec::protocol_types::abis::global_variables::GlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"fee_recipient","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"gas_fees","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l1_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}}]}}]}},{"name":"public_global_variables","type":{"kind":"struct","path":"aztec::protocol_types::abis::global_variables::GlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"fee_recipient","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"gas_fees","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l1_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}}]}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}]},"visibility":"private"},{"name":"enc_c1","type":{"kind":"field"},"visibility":"private"},{"name":"enc_c2","type":{"kind":"field"},"visibility":"private"}],"param_witnesses":{"enc_c1":[{"start":54,"end":55}],"enc_c2":[{"start":55,"end":56}],"inputs":[{"start":0,"end":54}]},"return_type":{"abi_type":{"kind":"struct","path":"aztec::protocol_types::abis::public_circuit_public_inputs::PublicCircuitPublicInputs","fields":[{"name":"call_context","type":{"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"storage_contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"portal_contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"gas_left","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l1_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}},{"name":"side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"gas_settings","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::GasSettings","fields":[{"name":"da","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::DimensionGasSettings","fields":[{"name":"gas_limit","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"teardown_gas_limit","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"max_fee_per_gas","type":{"kind":"field"}}]}},{"name":"l1","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::DimensionGasSettings","fields":[{"name":"gas_limit","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"teardown_gas_limit","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"max_fee_per_gas","type":{"kind":"field"}}]}},{"name":"l2","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::DimensionGasSettings","fields":[{"name":"gas_limit","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"teardown_gas_limit","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"max_fee_per_gas","type":{"kind":"field"}}]}},{"name":"inclusion_fee","type":{"kind":"field"}}]}},{"name":"transaction_fee","type":{"kind":"field"}}]}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"nullifier_read_requests","type":{"kind":"array","length":2,"type":{"kind":"struct","path":"aztec::protocol_types::abis::read_request::ReadRequest","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"nullifier_non_existent_read_requests","type":{"kind":"array","length":2,"type":{"kind":"struct","path":"aztec::protocol_types::abis::read_request::ReadRequest","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"contract_storage_update_requests","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::contrakt::storage_update_request::StorageUpdateRequest","fields":[{"name":"storage_slot","type":{"kind":"field"}},{"name":"new_value","type":{"kind":"field"}}]}}},{"name":"contract_storage_reads","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::contrakt::storage_read::StorageRead","fields":[{"name":"storage_slot","type":{"kind":"field"}},{"name":"current_value","type":{"kind":"field"}}]}}},{"name":"public_call_stack_hashes","type":{"kind":"array","length":4,"type":{"kind":"field"}}},{"name":"new_note_hashes","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::abis::side_effect::SideEffect","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"new_nullifiers","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::abis::side_effect::SideEffectLinkedToNoteHash","fields":[{"name":"value","type":{"kind":"field"}},{"name":"note_hash","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"new_l2_to_l1_msgs","type":{"kind":"array","length":2,"type":{"kind":"struct","path":"aztec::protocol_types::messaging::l2_to_l1_message::L2ToL1Message","fields":[{"name":"recipient","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"content","type":{"kind":"field"}}]}}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"unencrypted_logs_hash","type":{"kind":"field"}},{"name":"unencrypted_log_preimages_length","type":{"kind":"field"}},{"name":"historical_header","type":{"kind":"struct","path":"aztec::protocol_types::header::Header","fields":[{"name":"last_archive","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"content_commitment","type":{"kind":"struct","path":"aztec::protocol_types::content_commitment::ContentCommitment","fields":[{"name":"tx_tree_height","type":{"kind":"field"}},{"name":"txs_effects_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}]}},{"name":"state","type":{"kind":"struct","path":"aztec::protocol_types::state_reference::StateReference","fields":[{"name":"l1_to_l2_message_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"partial","type":{"kind":"struct","path":"aztec::protocol_types::partial_state_reference::PartialStateReference","fields":[{"name":"note_hash_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"nullifier_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"public_data_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}}]}},{"name":"global_variables","type":{"kind":"struct","path":"aztec::protocol_types::abis::global_variables::GlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"fee_recipient","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"gas_fees","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l1_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}}]}}]}},{"name":"prover_address","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"revert_code","type":{"kind":"integer","sign":"unsigned","width":8}},{"name":"gas_left","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l1_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]},"visibility":"public"},"return_witnesses":[56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270]},"bytecode":"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","debug_symbols":""},{"name":"validate_execute_batch","is_unconstrained":true,"custom_attributes":["aztec(public)","aztec(internal)"],"abi":{"parameters":[{"name":"inputs","type":{"kind":"struct","path":"aztec::context::inputs::public_context_inputs::PublicContextInputs","fields":[{"name":"call_context","type":{"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"storage_contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"portal_contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"gas_left","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l1_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}},{"name":"side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"gas_settings","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::GasSettings","fields":[{"name":"da","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::DimensionGasSettings","fields":[{"name":"gas_limit","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"teardown_gas_limit","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"max_fee_per_gas","type":{"kind":"field"}}]}},{"name":"l1","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::DimensionGasSettings","fields":[{"name":"gas_limit","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"teardown_gas_limit","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"max_fee_per_gas","type":{"kind":"field"}}]}},{"name":"l2","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::DimensionGasSettings","fields":[{"name":"gas_limit","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"teardown_gas_limit","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"max_fee_per_gas","type":{"kind":"field"}}]}},{"name":"inclusion_fee","type":{"kind":"field"}}]}},{"name":"transaction_fee","type":{"kind":"field"}}]}},{"name":"historical_header","type":{"kind":"struct","path":"aztec::protocol_types::header::Header","fields":[{"name":"last_archive","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"content_commitment","type":{"kind":"struct","path":"aztec::protocol_types::content_commitment::ContentCommitment","fields":[{"name":"tx_tree_height","type":{"kind":"field"}},{"name":"txs_effects_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}]}},{"name":"state","type":{"kind":"struct","path":"aztec::protocol_types::state_reference::StateReference","fields":[{"name":"l1_to_l2_message_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"partial","type":{"kind":"struct","path":"aztec::protocol_types::partial_state_reference::PartialStateReference","fields":[{"name":"note_hash_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"nullifier_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"public_data_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}}]}},{"name":"global_variables","type":{"kind":"struct","path":"aztec::protocol_types::abis::global_variables::GlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"fee_recipient","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"gas_fees","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l1_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}}]}}]}},{"name":"public_global_variables","type":{"kind":"struct","path":"aztec::protocol_types::abis::global_variables::GlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"fee_recipient","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"gas_fees","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l1_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}}]}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}]},"visibility":"private"},{"name":"sender","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]},"visibility":"private"},{"name":"c1","type":{"kind":"field"},"visibility":"private"},{"name":"c2","type":{"kind":"field"},"visibility":"private"},{"name":"amount_out","type":{"kind":"field"},"visibility":"private"},{"name":"amount_out_sub_cancelled","type":{"kind":"field"},"visibility":"private"}],"param_witnesses":{"amount_out":[{"start":57,"end":58}],"amount_out_sub_cancelled":[{"start":58,"end":59}],"c1":[{"start":55,"end":56}],"c2":[{"start":56,"end":57}],"inputs":[{"start":0,"end":54}],"sender":[{"start":54,"end":55}]},"return_type":{"abi_type":{"kind":"struct","path":"aztec::protocol_types::abis::public_circuit_public_inputs::PublicCircuitPublicInputs","fields":[{"name":"call_context","type":{"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"storage_contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"portal_contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"gas_left","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l1_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}},{"name":"side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"gas_settings","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::GasSettings","fields":[{"name":"da","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::DimensionGasSettings","fields":[{"name":"gas_limit","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"teardown_gas_limit","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"max_fee_per_gas","type":{"kind":"field"}}]}},{"name":"l1","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::DimensionGasSettings","fields":[{"name":"gas_limit","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"teardown_gas_limit","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"max_fee_per_gas","type":{"kind":"field"}}]}},{"name":"l2","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::DimensionGasSettings","fields":[{"name":"gas_limit","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"teardown_gas_limit","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"max_fee_per_gas","type":{"kind":"field"}}]}},{"name":"inclusion_fee","type":{"kind":"field"}}]}},{"name":"transaction_fee","type":{"kind":"field"}}]}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"nullifier_read_requests","type":{"kind":"array","length":2,"type":{"kind":"struct","path":"aztec::protocol_types::abis::read_request::ReadRequest","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"nullifier_non_existent_read_requests","type":{"kind":"array","length":2,"type":{"kind":"struct","path":"aztec::protocol_types::abis::read_request::ReadRequest","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"contract_storage_update_requests","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::contrakt::storage_update_request::StorageUpdateRequest","fields":[{"name":"storage_slot","type":{"kind":"field"}},{"name":"new_value","type":{"kind":"field"}}]}}},{"name":"contract_storage_reads","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::contrakt::storage_read::StorageRead","fields":[{"name":"storage_slot","type":{"kind":"field"}},{"name":"current_value","type":{"kind":"field"}}]}}},{"name":"public_call_stack_hashes","type":{"kind":"array","length":4,"type":{"kind":"field"}}},{"name":"new_note_hashes","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::abis::side_effect::SideEffect","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"new_nullifiers","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::abis::side_effect::SideEffectLinkedToNoteHash","fields":[{"name":"value","type":{"kind":"field"}},{"name":"note_hash","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"new_l2_to_l1_msgs","type":{"kind":"array","length":2,"type":{"kind":"struct","path":"aztec::protocol_types::messaging::l2_to_l1_message::L2ToL1Message","fields":[{"name":"recipient","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"content","type":{"kind":"field"}}]}}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"unencrypted_logs_hash","type":{"kind":"field"}},{"name":"unencrypted_log_preimages_length","type":{"kind":"field"}},{"name":"historical_header","type":{"kind":"struct","path":"aztec::protocol_types::header::Header","fields":[{"name":"last_archive","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"content_commitment","type":{"kind":"struct","path":"aztec::protocol_types::content_commitment::ContentCommitment","fields":[{"name":"tx_tree_height","type":{"kind":"field"}},{"name":"txs_effects_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}]}},{"name":"state","type":{"kind":"struct","path":"aztec::protocol_types::state_reference::StateReference","fields":[{"name":"l1_to_l2_message_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"partial","type":{"kind":"struct","path":"aztec::protocol_types::partial_state_reference::PartialStateReference","fields":[{"name":"note_hash_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"nullifier_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"public_data_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}}]}},{"name":"global_variables","type":{"kind":"struct","path":"aztec::protocol_types::abis::global_variables::GlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"fee_recipient","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"gas_fees","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l1_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}}]}}]}},{"name":"prover_address","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"revert_code","type":{"kind":"integer","sign":"unsigned","width":8}},{"name":"gas_left","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l1_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]},"visibility":"public"},"return_witnesses":[59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273]},"bytecode":"","debug_symbols":""},{"name":"dipute_relayer","is_unconstrained":false,"custom_attributes":["aztec(private)"],"abi":{"parameters":[{"name":"inputs","type":{"kind":"struct","path":"aztec::context::inputs::private_context_inputs::PrivateContextInputs","fields":[{"name":"call_context","type":{"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"storage_contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"portal_contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"gas_left","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l1_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}},{"name":"side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"gas_settings","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::GasSettings","fields":[{"name":"da","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::DimensionGasSettings","fields":[{"name":"gas_limit","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"teardown_gas_limit","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"max_fee_per_gas","type":{"kind":"field"}}]}},{"name":"l1","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::DimensionGasSettings","fields":[{"name":"gas_limit","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"teardown_gas_limit","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"max_fee_per_gas","type":{"kind":"field"}}]}},{"name":"l2","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::DimensionGasSettings","fields":[{"name":"gas_limit","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"teardown_gas_limit","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"max_fee_per_gas","type":{"kind":"field"}}]}},{"name":"inclusion_fee","type":{"kind":"field"}}]}},{"name":"transaction_fee","type":{"kind":"field"}}]}},{"name":"historical_header","type":{"kind":"struct","path":"aztec::protocol_types::header::Header","fields":[{"name":"last_archive","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"content_commitment","type":{"kind":"struct","path":"aztec::protocol_types::content_commitment::ContentCommitment","fields":[{"name":"tx_tree_height","type":{"kind":"field"}},{"name":"txs_effects_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}]}},{"name":"state","type":{"kind":"struct","path":"aztec::protocol_types::state_reference::StateReference","fields":[{"name":"l1_to_l2_message_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"partial","type":{"kind":"struct","path":"aztec::protocol_types::partial_state_reference::PartialStateReference","fields":[{"name":"note_hash_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"nullifier_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"public_data_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}}]}},{"name":"global_variables","type":{"kind":"struct","path":"aztec::protocol_types::abis::global_variables::GlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"fee_recipient","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"gas_fees","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l1_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}}]}}]}},{"name":"private_global_variables","type":{"kind":"struct","path":"aztec::context::globals::private_global_variables::PrivateGlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}}]}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}]},"visibility":"private"},{"name":"he_secret_key","type":{"kind":"field"},"visibility":"private"},{"name":"new_sk_hash","type":{"kind":"field"},"visibility":"private"},{"name":"new_he_pub_key","type":{"kind":"field"},"visibility":"private"},{"name":"new_he_secret_key","type":{"kind":"field"},"visibility":"private"},{"name":"new_relayer","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]},"visibility":"private"},{"name":"secret_hash","type":{"kind":"field"},"visibility":"private"},{"name":"nonce","type":{"kind":"field"},"visibility":"private"}],"param_witnesses":{"he_secret_key":[{"start":47,"end":48}],"inputs":[{"start":0,"end":47}],"new_he_pub_key":[{"start":49,"end":50}],"new_he_secret_key":[{"start":50,"end":51}],"new_relayer":[{"start":51,"end":52}],"new_sk_hash":[{"start":48,"end":49}],"nonce":[{"start":53,"end":54}],"secret_hash":[{"start":52,"end":53}]},"return_type":{"abi_type":{"kind":"struct","path":"aztec::protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs","fields":[{"name":"call_context","type":{"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"storage_contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"portal_contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"gas_left","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l1_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}},{"name":"side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"gas_settings","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::GasSettings","fields":[{"name":"da","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::DimensionGasSettings","fields":[{"name":"gas_limit","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"teardown_gas_limit","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"max_fee_per_gas","type":{"kind":"field"}}]}},{"name":"l1","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::DimensionGasSettings","fields":[{"name":"gas_limit","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"teardown_gas_limit","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"max_fee_per_gas","type":{"kind":"field"}}]}},{"name":"l2","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::DimensionGasSettings","fields":[{"name":"gas_limit","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"teardown_gas_limit","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"max_fee_per_gas","type":{"kind":"field"}}]}},{"name":"inclusion_fee","type":{"kind":"field"}}]}},{"name":"transaction_fee","type":{"kind":"field"}}]}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"min_revertible_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"max_block_number","type":{"kind":"struct","path":"aztec::protocol_types::abis::max_block_number::MaxBlockNumber","fields":[{"name":"_opt","type":{"kind":"struct","path":"std::option::Option","fields":[{"name":"_is_some","type":{"kind":"boolean"}},{"name":"_value","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}},{"name":"note_hash_read_requests","type":{"kind":"array","length":32,"type":{"kind":"struct","path":"aztec::protocol_types::abis::side_effect::SideEffect","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"nullifier_read_requests","type":{"kind":"array","length":2,"type":{"kind":"struct","path":"aztec::protocol_types::abis::read_request::ReadRequest","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"nullifier_key_validation_requests","type":{"kind":"array","length":1,"type":{"kind":"struct","path":"aztec::protocol_types::abis::nullifier_key_validation_request::NullifierKeyValidationRequest","fields":[{"name":"public_key","type":{"kind":"struct","path":"aztec::protocol_types::grumpkin_point::GrumpkinPoint","fields":[{"name":"x","type":{"kind":"field"}},{"name":"y","type":{"kind":"field"}}]}},{"name":"secret_key","type":{"kind":"struct","path":"aztec::protocol_types::grumpkin_private_key::GrumpkinPrivateKey","fields":[{"name":"high","type":{"kind":"field"}},{"name":"low","type":{"kind":"field"}}]}}]}}},{"name":"new_note_hashes","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::abis::side_effect::SideEffect","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"new_nullifiers","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::abis::side_effect::SideEffectLinkedToNoteHash","fields":[{"name":"value","type":{"kind":"field"}},{"name":"note_hash","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"private_call_stack_hashes","type":{"kind":"array","length":4,"type":{"kind":"field"}}},{"name":"public_call_stack_hashes","type":{"kind":"array","length":4,"type":{"kind":"field"}}},{"name":"new_l2_to_l1_msgs","type":{"kind":"array","length":2,"type":{"kind":"struct","path":"aztec::protocol_types::messaging::l2_to_l1_message::L2ToL1Message","fields":[{"name":"recipient","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"content","type":{"kind":"field"}}]}}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"encrypted_logs_hash","type":{"kind":"field"}},{"name":"unencrypted_logs_hash","type":{"kind":"field"}},{"name":"encrypted_log_preimages_length","type":{"kind":"field"}},{"name":"unencrypted_log_preimages_length","type":{"kind":"field"}},{"name":"historical_header","type":{"kind":"struct","path":"aztec::protocol_types::header::Header","fields":[{"name":"last_archive","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"content_commitment","type":{"kind":"struct","path":"aztec::protocol_types::content_commitment::ContentCommitment","fields":[{"name":"tx_tree_height","type":{"kind":"field"}},{"name":"txs_effects_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}]}},{"name":"state","type":{"kind":"struct","path":"aztec::protocol_types::state_reference::StateReference","fields":[{"name":"l1_to_l2_message_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"partial","type":{"kind":"struct","path":"aztec::protocol_types::partial_state_reference::PartialStateReference","fields":[{"name":"note_hash_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"nullifier_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"public_data_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}}]}},{"name":"global_variables","type":{"kind":"struct","path":"aztec::protocol_types::abis::global_variables::GlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"fee_recipient","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"gas_fees","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l1_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}}]}}]}},{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}}]},"visibility":"public"},"return_witnesses":[605,606,607,608,609,610,611,612,613,614,615,616,617,618,619,620,621,622,623,624,625,626,627,628,629,630,631,632,633,634,635,636,637,638,639,640,641,642,643,644,645,646,647,648,649,650,651,652,653,654,655,656,657,658,659,660,661,662,663,664,665,666,667,668,669,670,671,672,673,674,675,676,677,678,679,680,681,682,683,684,685,686,687,688,689,690,691,692,693,694,695,696,697,698,699,700,701,702,703,704,705,706,707,708,709,710,711,712,713,714,715,716,717,718,719,720,721,722,723,724,725,726,727,728,729,730,731,732,733,734,735,736,737,738,739,740,741,742,743,744,745,746,747,748,749,750,751,752,753,754,755,756,757,758,759,760,761,762,763,764,765,766,767,768,769,770,771,772,773,774,775,776,777,778,779,780,781,782,783,784,785,786,787,788,789,790,791,792,793,794,795,796,797,798,799,800,801,802,803,804,805,806,807,808,809,810,811,812,813,814,815,816,817,818,819,820,821,822,823,824,825]},"bytecode":"","debug_symbols":""},{"name":"_sub_token_out_amount","is_unconstrained":true,"custom_attributes":["aztec(public)","aztec(internal)"],"abi":{"parameters":[{"name":"inputs","type":{"kind":"struct","path":"aztec::context::inputs::public_context_inputs::PublicContextInputs","fields":[{"name":"call_context","type":{"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"storage_contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"portal_contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"gas_left","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l1_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}},{"name":"side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"gas_settings","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::GasSettings","fields":[{"name":"da","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::DimensionGasSettings","fields":[{"name":"gas_limit","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"teardown_gas_limit","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"max_fee_per_gas","type":{"kind":"field"}}]}},{"name":"l1","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::DimensionGasSettings","fields":[{"name":"gas_limit","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"teardown_gas_limit","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"max_fee_per_gas","type":{"kind":"field"}}]}},{"name":"l2","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::DimensionGasSettings","fields":[{"name":"gas_limit","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"teardown_gas_limit","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"max_fee_per_gas","type":{"kind":"field"}}]}},{"name":"inclusion_fee","type":{"kind":"field"}}]}},{"name":"transaction_fee","type":{"kind":"field"}}]}},{"name":"historical_header","type":{"kind":"struct","path":"aztec::protocol_types::header::Header","fields":[{"name":"last_archive","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"content_commitment","type":{"kind":"struct","path":"aztec::protocol_types::content_commitment::ContentCommitment","fields":[{"name":"tx_tree_height","type":{"kind":"field"}},{"name":"txs_effects_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}]}},{"name":"state","type":{"kind":"struct","path":"aztec::protocol_types::state_reference::StateReference","fields":[{"name":"l1_to_l2_message_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"partial","type":{"kind":"struct","path":"aztec::protocol_types::partial_state_reference::PartialStateReference","fields":[{"name":"note_hash_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"nullifier_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"public_data_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}}]}},{"name":"global_variables","type":{"kind":"struct","path":"aztec::protocol_types::abis::global_variables::GlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"fee_recipient","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"gas_fees","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l1_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}}]}}]}},{"name":"public_global_variables","type":{"kind":"struct","path":"aztec::protocol_types::abis::global_variables::GlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"fee_recipient","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"gas_fees","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l1_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}}]}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}]},"visibility":"private"},{"name":"amount","type":{"kind":"field"},"visibility":"private"},{"name":"_round","type":{"kind":"field"},"visibility":"private"}],"param_witnesses":{"_round":[{"start":55,"end":56}],"amount":[{"start":54,"end":55}],"inputs":[{"start":0,"end":54}]},"return_type":{"abi_type":{"kind":"struct","path":"aztec::protocol_types::abis::public_circuit_public_inputs::PublicCircuitPublicInputs","fields":[{"name":"call_context","type":{"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"storage_contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"portal_contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"gas_left","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l1_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}},{"name":"side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"gas_settings","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::GasSettings","fields":[{"name":"da","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::DimensionGasSettings","fields":[{"name":"gas_limit","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"teardown_gas_limit","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"max_fee_per_gas","type":{"kind":"field"}}]}},{"name":"l1","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::DimensionGasSettings","fields":[{"name":"gas_limit","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"teardown_gas_limit","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"max_fee_per_gas","type":{"kind":"field"}}]}},{"name":"l2","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::DimensionGasSettings","fields":[{"name":"gas_limit","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"teardown_gas_limit","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"max_fee_per_gas","type":{"kind":"field"}}]}},{"name":"inclusion_fee","type":{"kind":"field"}}]}},{"name":"transaction_fee","type":{"kind":"field"}}]}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"nullifier_read_requests","type":{"kind":"array","length":2,"type":{"kind":"struct","path":"aztec::protocol_types::abis::read_request::ReadRequest","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"nullifier_non_existent_read_requests","type":{"kind":"array","length":2,"type":{"kind":"struct","path":"aztec::protocol_types::abis::read_request::ReadRequest","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"contract_storage_update_requests","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::contrakt::storage_update_request::StorageUpdateRequest","fields":[{"name":"storage_slot","type":{"kind":"field"}},{"name":"new_value","type":{"kind":"field"}}]}}},{"name":"contract_storage_reads","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::contrakt::storage_read::StorageRead","fields":[{"name":"storage_slot","type":{"kind":"field"}},{"name":"current_value","type":{"kind":"field"}}]}}},{"name":"public_call_stack_hashes","type":{"kind":"array","length":4,"type":{"kind":"field"}}},{"name":"new_note_hashes","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::abis::side_effect::SideEffect","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"new_nullifiers","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::abis::side_effect::SideEffectLinkedToNoteHash","fields":[{"name":"value","type":{"kind":"field"}},{"name":"note_hash","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"new_l2_to_l1_msgs","type":{"kind":"array","length":2,"type":{"kind":"struct","path":"aztec::protocol_types::messaging::l2_to_l1_message::L2ToL1Message","fields":[{"name":"recipient","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"content","type":{"kind":"field"}}]}}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"unencrypted_logs_hash","type":{"kind":"field"}},{"name":"unencrypted_log_preimages_length","type":{"kind":"field"}},{"name":"historical_header","type":{"kind":"struct","path":"aztec::protocol_types::header::Header","fields":[{"name":"last_archive","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"content_commitment","type":{"kind":"struct","path":"aztec::protocol_types::content_commitment::ContentCommitment","fields":[{"name":"tx_tree_height","type":{"kind":"field"}},{"name":"txs_effects_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}]}},{"name":"state","type":{"kind":"struct","path":"aztec::protocol_types::state_reference::StateReference","fields":[{"name":"l1_to_l2_message_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"partial","type":{"kind":"struct","path":"aztec::protocol_types::partial_state_reference::PartialStateReference","fields":[{"name":"note_hash_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"nullifier_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"public_data_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}}]}},{"name":"global_variables","type":{"kind":"struct","path":"aztec::protocol_types::abis::global_variables::GlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"fee_recipient","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"gas_fees","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l1_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}}]}}]}},{"name":"prover_address","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"revert_code","type":{"kind":"integer","sign":"unsigned","width":8}},{"name":"gas_left","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l1_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]},"visibility":"public"},"return_witnesses":[56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270]},"bytecode":"","debug_symbols":""},{"name":"get_admin","is_unconstrained":true,"custom_attributes":[],"abi":{"parameters":[],"param_witnesses":{},"return_type":{"abi_type":{"kind":"field"},"visibility":"public"},"return_witnesses":[0]},"bytecode":"H4sIAAAAAAAA/72UTU7DMBCFnT83JSqCJYJF2LNwJQ5grsANghIQm0ZKWwkuH4GRh35yvKvhSdGMx2PP8/M4mToh87aIxAQP3taIWf85mHPwaLbabVKqKFbfX+X9Bnm5j10jloGnzM+peBqzvVRLjWpoZxPWCu/Awi+gR5jXYD5HLA/WOl3vMV9F1uhIPfF5J3J1OrKWOlU4i/W+OQ8/OrGWxVjqbcBD/wMftrLFuELtVfraplanN5r6TGucwYK/1CuRc+ftlVqCewlP9qTDBlpJbhPRkX1dIp9vMuX7d/tq8E61L89GnVSgk+Cve/jCa+uwP4xT9zY8D12fgVoZ0KQl9RnjHHH6RSQ2w/J3InVdTNol1g78FYXttVZLeZO+lULFkUV8xm69vfH2aZq6z/Z91w8f7Xg8tONr+zIed/3+d8UXdqw6UsoHAAA=","debug_symbols":"zZfRisIwEEX/ZZ7LkplJmqS/suxD1u1CoVSx3QUp/XdbrfqgCBaV+9aQe2cOfTiQnur1KnXVummp6Ml8OCo+e2o3qZnObZe2HRUcvWpGZfNz+HY6ZPRb1SUVTobsKi4a4pwWK+YcZg430uplDlu+DA5u+MpGnhyMx4PxBDCeCMbDBg2I0YAEDUjRgCwaEJqlGU3TjOZpRhM1o5la0Ewtrzb1cYu8ZctTnGrVnLdMibs/lzna02wxl9HCPDNZQCYHyJQDMnlApgDIFPGY9KYLJPdzS429cqHaBR23oJMv6PgFnfBYZzz8p22VvutyeihPd3/N6vRuHo/dbnO8GfY="},{"name":"deposit_to_batch","is_unconstrained":false,"custom_attributes":["aztec(private)"],"abi":{"parameters":[{"name":"inputs","type":{"kind":"struct","path":"aztec::context::inputs::private_context_inputs::PrivateContextInputs","fields":[{"name":"call_context","type":{"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"storage_contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"portal_contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"gas_left","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l1_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}},{"name":"side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"gas_settings","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::GasSettings","fields":[{"name":"da","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::DimensionGasSettings","fields":[{"name":"gas_limit","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"teardown_gas_limit","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"max_fee_per_gas","type":{"kind":"field"}}]}},{"name":"l1","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::DimensionGasSettings","fields":[{"name":"gas_limit","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"teardown_gas_limit","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"max_fee_per_gas","type":{"kind":"field"}}]}},{"name":"l2","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::DimensionGasSettings","fields":[{"name":"gas_limit","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"teardown_gas_limit","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"max_fee_per_gas","type":{"kind":"field"}}]}},{"name":"inclusion_fee","type":{"kind":"field"}}]}},{"name":"transaction_fee","type":{"kind":"field"}}]}},{"name":"historical_header","type":{"kind":"struct","path":"aztec::protocol_types::header::Header","fields":[{"name":"last_archive","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"content_commitment","type":{"kind":"struct","path":"aztec::protocol_types::content_commitment::ContentCommitment","fields":[{"name":"tx_tree_height","type":{"kind":"field"}},{"name":"txs_effects_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}]}},{"name":"state","type":{"kind":"struct","path":"aztec::protocol_types::state_reference::StateReference","fields":[{"name":"l1_to_l2_message_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"partial","type":{"kind":"struct","path":"aztec::protocol_types::partial_state_reference::PartialStateReference","fields":[{"name":"note_hash_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"nullifier_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"public_data_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}}]}},{"name":"global_variables","type":{"kind":"struct","path":"aztec::protocol_types::abis::global_variables::GlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"fee_recipient","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"gas_fees","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l1_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}}]}}]}},{"name":"private_global_variables","type":{"kind":"struct","path":"aztec::context::globals::private_global_variables::PrivateGlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}}]}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}]},"visibility":"private"},{"name":"current_round","type":{"kind":"field"},"visibility":"private"},{"name":"amount_out","type":{"kind":"field"},"visibility":"private"},{"name":"relayer_he_pubkey","type":{"kind":"field"},"visibility":"private"},{"name":"he_add_rand","type":{"kind":"field"},"visibility":"private"},{"name":"nonce","type":{"kind":"field"},"visibility":"private"}],"param_witnesses":{"amount_out":[{"start":48,"end":49}],"current_round":[{"start":47,"end":48}],"he_add_rand":[{"start":50,"end":51}],"inputs":[{"start":0,"end":47}],"nonce":[{"start":51,"end":52}],"relayer_he_pubkey":[{"start":49,"end":50}]},"return_type":{"abi_type":{"kind":"struct","path":"aztec::protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs","fields":[{"name":"call_context","type":{"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"storage_contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"portal_contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"gas_left","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l1_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}},{"name":"side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"gas_settings","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::GasSettings","fields":[{"name":"da","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::DimensionGasSettings","fields":[{"name":"gas_limit","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"teardown_gas_limit","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"max_fee_per_gas","type":{"kind":"field"}}]}},{"name":"l1","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::DimensionGasSettings","fields":[{"name":"gas_limit","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"teardown_gas_limit","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"max_fee_per_gas","type":{"kind":"field"}}]}},{"name":"l2","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::DimensionGasSettings","fields":[{"name":"gas_limit","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"teardown_gas_limit","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"max_fee_per_gas","type":{"kind":"field"}}]}},{"name":"inclusion_fee","type":{"kind":"field"}}]}},{"name":"transaction_fee","type":{"kind":"field"}}]}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"min_revertible_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"max_block_number","type":{"kind":"struct","path":"aztec::protocol_types::abis::max_block_number::MaxBlockNumber","fields":[{"name":"_opt","type":{"kind":"struct","path":"std::option::Option","fields":[{"name":"_is_some","type":{"kind":"boolean"}},{"name":"_value","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}},{"name":"note_hash_read_requests","type":{"kind":"array","length":32,"type":{"kind":"struct","path":"aztec::protocol_types::abis::side_effect::SideEffect","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"nullifier_read_requests","type":{"kind":"array","length":2,"type":{"kind":"struct","path":"aztec::protocol_types::abis::read_request::ReadRequest","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"nullifier_key_validation_requests","type":{"kind":"array","length":1,"type":{"kind":"struct","path":"aztec::protocol_types::abis::nullifier_key_validation_request::NullifierKeyValidationRequest","fields":[{"name":"public_key","type":{"kind":"struct","path":"aztec::protocol_types::grumpkin_point::GrumpkinPoint","fields":[{"name":"x","type":{"kind":"field"}},{"name":"y","type":{"kind":"field"}}]}},{"name":"secret_key","type":{"kind":"struct","path":"aztec::protocol_types::grumpkin_private_key::GrumpkinPrivateKey","fields":[{"name":"high","type":{"kind":"field"}},{"name":"low","type":{"kind":"field"}}]}}]}}},{"name":"new_note_hashes","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::abis::side_effect::SideEffect","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"new_nullifiers","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::abis::side_effect::SideEffectLinkedToNoteHash","fields":[{"name":"value","type":{"kind":"field"}},{"name":"note_hash","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"private_call_stack_hashes","type":{"kind":"array","length":4,"type":{"kind":"field"}}},{"name":"public_call_stack_hashes","type":{"kind":"array","length":4,"type":{"kind":"field"}}},{"name":"new_l2_to_l1_msgs","type":{"kind":"array","length":2,"type":{"kind":"struct","path":"aztec::protocol_types::messaging::l2_to_l1_message::L2ToL1Message","fields":[{"name":"recipient","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"content","type":{"kind":"field"}}]}}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"encrypted_logs_hash","type":{"kind":"field"}},{"name":"unencrypted_logs_hash","type":{"kind":"field"}},{"name":"encrypted_log_preimages_length","type":{"kind":"field"}},{"name":"unencrypted_log_preimages_length","type":{"kind":"field"}},{"name":"historical_header","type":{"kind":"struct","path":"aztec::protocol_types::header::Header","fields":[{"name":"last_archive","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"content_commitment","type":{"kind":"struct","path":"aztec::protocol_types::content_commitment::ContentCommitment","fields":[{"name":"tx_tree_height","type":{"kind":"field"}},{"name":"txs_effects_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}]}},{"name":"state","type":{"kind":"struct","path":"aztec::protocol_types::state_reference::StateReference","fields":[{"name":"l1_to_l2_message_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"partial","type":{"kind":"struct","path":"aztec::protocol_types::partial_state_reference::PartialStateReference","fields":[{"name":"note_hash_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"nullifier_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"public_data_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}}]}},{"name":"global_variables","type":{"kind":"struct","path":"aztec::protocol_types::abis::global_variables::GlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"fee_recipient","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"gas_fees","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l1_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}}]}}]}},{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}}]},"visibility":"public"},"return_witnesses":[1264,1265,1266,1267,1268,1269,1270,1271,1272,1273,1274,1275,1276,1277,1278,1279,1280,1281,1282,1283,1284,1285,1286,1287,1288,1289,1290,1291,1292,1293,1294,1295,1296,1297,1298,1299,1300,1301,1302,1303,1304,1305,1306,1307,1308,1309,1310,1311,1312,1313,1314,1315,1316,1317,1318,1319,1320,1321,1322,1323,1324,1325,1326,1327,1328,1329,1330,1331,1332,1333,1334,1335,1336,1337,1338,1339,1340,1341,1342,1343,1344,1345,1346,1347,1348,1349,1350,1351,1352,1353,1354,1355,1356,1357,1358,1359,1360,1361,1362,1363,1364,1365,1366,1367,1368,1369,1370,1371,1372,1373,1374,1375,1376,1377,1378,1379,1380,1381,1382,1383,1384,1385,1386,1387,1388,1389,1390,1391,1392,1393,1394,1395,1396,1397,1398,1399,1400,1401,1402,1403,1404,1405,1406,1407,1408,1409,1410,1411,1412,1413,1414,1415,1416,1417,1418,1419,1420,1421,1422,1423,1424,1425,1426,1427,1428,1429,1430,1431,1432,1433,1434,1435,1436,1437,1438,1439,1440,1441,1442,1443,1444,1445,1446,1447,1448,1449,1450,1451,1452,1453,1454,1455,1456,1457,1458,1459,1460,1461,1462,1463,1464,1465,1466,1467,1468,1469,1470,1471,1472,1473,1474,1475,1476,1477,1478,1479,1480,1481,1482,1483,1484]},"bytecode":"","debug_symbols":""},{"name":"check_sk_hash","is_unconstrained":true,"custom_attributes":["aztec(public)"],"abi":{"parameters":[{"name":"inputs","type":{"kind":"struct","path":"aztec::context::inputs::public_context_inputs::PublicContextInputs","fields":[{"name":"call_context","type":{"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"storage_contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"portal_contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"gas_left","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l1_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}},{"name":"side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"gas_settings","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::GasSettings","fields":[{"name":"da","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::DimensionGasSettings","fields":[{"name":"gas_limit","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"teardown_gas_limit","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"max_fee_per_gas","type":{"kind":"field"}}]}},{"name":"l1","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::DimensionGasSettings","fields":[{"name":"gas_limit","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"teardown_gas_limit","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"max_fee_per_gas","type":{"kind":"field"}}]}},{"name":"l2","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::DimensionGasSettings","fields":[{"name":"gas_limit","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"teardown_gas_limit","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"max_fee_per_gas","type":{"kind":"field"}}]}},{"name":"inclusion_fee","type":{"kind":"field"}}]}},{"name":"transaction_fee","type":{"kind":"field"}}]}},{"name":"historical_header","type":{"kind":"struct","path":"aztec::protocol_types::header::Header","fields":[{"name":"last_archive","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"content_commitment","type":{"kind":"struct","path":"aztec::protocol_types::content_commitment::ContentCommitment","fields":[{"name":"tx_tree_height","type":{"kind":"field"}},{"name":"txs_effects_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}]}},{"name":"state","type":{"kind":"struct","path":"aztec::protocol_types::state_reference::StateReference","fields":[{"name":"l1_to_l2_message_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"partial","type":{"kind":"struct","path":"aztec::protocol_types::partial_state_reference::PartialStateReference","fields":[{"name":"note_hash_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"nullifier_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"public_data_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}}]}},{"name":"global_variables","type":{"kind":"struct","path":"aztec::protocol_types::abis::global_variables::GlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"fee_recipient","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"gas_fees","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l1_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}}]}}]}},{"name":"public_global_variables","type":{"kind":"struct","path":"aztec::protocol_types::abis::global_variables::GlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"fee_recipient","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"gas_fees","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l1_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}}]}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}]},"visibility":"private"},{"name":"sk_hash","type":{"kind":"field"},"visibility":"private"}],"param_witnesses":{"inputs":[{"start":0,"end":54}],"sk_hash":[{"start":54,"end":55}]},"return_type":{"abi_type":{"kind":"struct","path":"aztec::protocol_types::abis::public_circuit_public_inputs::PublicCircuitPublicInputs","fields":[{"name":"call_context","type":{"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"storage_contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"portal_contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"gas_left","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l1_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}},{"name":"side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"gas_settings","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::GasSettings","fields":[{"name":"da","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::DimensionGasSettings","fields":[{"name":"gas_limit","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"teardown_gas_limit","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"max_fee_per_gas","type":{"kind":"field"}}]}},{"name":"l1","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::DimensionGasSettings","fields":[{"name":"gas_limit","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"teardown_gas_limit","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"max_fee_per_gas","type":{"kind":"field"}}]}},{"name":"l2","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::DimensionGasSettings","fields":[{"name":"gas_limit","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"teardown_gas_limit","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"max_fee_per_gas","type":{"kind":"field"}}]}},{"name":"inclusion_fee","type":{"kind":"field"}}]}},{"name":"transaction_fee","type":{"kind":"field"}}]}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"nullifier_read_requests","type":{"kind":"array","length":2,"type":{"kind":"struct","path":"aztec::protocol_types::abis::read_request::ReadRequest","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"nullifier_non_existent_read_requests","type":{"kind":"array","length":2,"type":{"kind":"struct","path":"aztec::protocol_types::abis::read_request::ReadRequest","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"contract_storage_update_requests","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::contrakt::storage_update_request::StorageUpdateRequest","fields":[{"name":"storage_slot","type":{"kind":"field"}},{"name":"new_value","type":{"kind":"field"}}]}}},{"name":"contract_storage_reads","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::contrakt::storage_read::StorageRead","fields":[{"name":"storage_slot","type":{"kind":"field"}},{"name":"current_value","type":{"kind":"field"}}]}}},{"name":"public_call_stack_hashes","type":{"kind":"array","length":4,"type":{"kind":"field"}}},{"name":"new_note_hashes","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::abis::side_effect::SideEffect","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"new_nullifiers","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::abis::side_effect::SideEffectLinkedToNoteHash","fields":[{"name":"value","type":{"kind":"field"}},{"name":"note_hash","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"new_l2_to_l1_msgs","type":{"kind":"array","length":2,"type":{"kind":"struct","path":"aztec::protocol_types::messaging::l2_to_l1_message::L2ToL1Message","fields":[{"name":"recipient","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"content","type":{"kind":"field"}}]}}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"unencrypted_logs_hash","type":{"kind":"field"}},{"name":"unencrypted_log_preimages_length","type":{"kind":"field"}},{"name":"historical_header","type":{"kind":"struct","path":"aztec::protocol_types::header::Header","fields":[{"name":"last_archive","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"content_commitment","type":{"kind":"struct","path":"aztec::protocol_types::content_commitment::ContentCommitment","fields":[{"name":"tx_tree_height","type":{"kind":"field"}},{"name":"txs_effects_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}]}},{"name":"state","type":{"kind":"struct","path":"aztec::protocol_types::state_reference::StateReference","fields":[{"name":"l1_to_l2_message_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"partial","type":{"kind":"struct","path":"aztec::protocol_types::partial_state_reference::PartialStateReference","fields":[{"name":"note_hash_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"nullifier_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"public_data_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}}]}},{"name":"global_variables","type":{"kind":"struct","path":"aztec::protocol_types::abis::global_variables::GlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"fee_recipient","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"gas_fees","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l1_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}}]}}]}},{"name":"prover_address","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"revert_code","type":{"kind":"integer","sign":"unsigned","width":8}},{"name":"gas_left","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l1_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]},"visibility":"public"},"return_witnesses":[55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269]},"bytecode":"","debug_symbols":"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8FrL4bWWw2sth9daDq+1HF5rObzWcnit5fBay+G1lsNrLS+vtby81vLyWsvLay3vg6P35bWWl9daXl5reXmt5eW1lpfXWl5ea3l5reXltZaX11peXmt5ea3l5bWWl9daXl5reXmt5eW1lpfXWl5ea3l5reXltZaX11peXmt5ea3l5bWWl9daXl5reXmt5eW1lpfXWl5ea3l5reXltZaX11peXmt5ea3l5bWWl9daXl5reXmt5eW1lpfXWl5ea3l5reXltZaX11peXmt5ea3l5bWWl9daXl5reXmt5eW1lpfXWl5ea3l5reXltZaX11peXmt5ea3l5bWWl9daXl5reXmt5eW1lpfXWl5ea3l5reXltZaX11peXmt5ea3l5bWWl9daXl5reXmt5eW1lpfXWl5ea3l5reXltZaX11peXmt5ea3l5bWWl9daXl5reXmt5eW1lpfXWl5ea3l5reXltZaX11peXGtpD661fI1Eo/drJBq9XyPR6P0aiUbv10g0er9GotH7NRKN3q+RaPR+jcSjN661fI3EozeutXyNxKM3rrV8jcSjN661fI3EozeutXyNxKM3rrV8jcSjN661fI3EozeutXyNxKM3rrV8jcSjN661fI3EozeutXyNxKM3rrV8jcSjN661fI3EozeutXyNxKM3rrV8jcSjN661fI3EozeutXyNxKM3rrV8jcSjN661fI3EozeutXyNxKM3rrV8jcSjN661fI3EozeutXyNxKM3rrV8jcSjN661fI3EozeutXyNxKM3rrV8jcSjN661fI3EozeutXyNxKM3rrV8jcSjN661fI3EozeutXyNxKM3rrV8jcSjN661fI3EozeutXyNxKM3rrV8jcSjN661fI3EozeutXyNxKM3rrV8jcSjN661fI3EozeutXyNxKM3rrV8jcSjN661fI3EozeutXyNxKM3rrV8jYSj9+G1lofXWh5ea3l4reV5cPQ+vNby8FrLw2stD6+1PLzW8vBay8NrLc+nt5Zv73HRe34ezma9v6fnR/5HfM6dt0+/bojvn455HyqJQxVxqCYONcShLnCon6mQ/JmHOp881Nt7TPQeF70nRO9J0XtK9J4WvWdE77ma9/gjeo+IBy7igYt44CIeuIgHLuKBi3jgIh64iAch4kGIeBAiHoSIByHiQYh4ECIehIgHIeJBiHiQIh6kiAcp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"},{"name":"spend_public_authwit","is_unconstrained":true,"custom_attributes":["aztec(public)"],"abi":{"parameters":[{"name":"inputs","type":{"kind":"struct","path":"aztec::context::inputs::public_context_inputs::PublicContextInputs","fields":[{"name":"call_context","type":{"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"storage_contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"portal_contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"gas_left","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l1_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}},{"name":"side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"gas_settings","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::GasSettings","fields":[{"name":"da","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::DimensionGasSettings","fields":[{"name":"gas_limit","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"teardown_gas_limit","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"max_fee_per_gas","type":{"kind":"field"}}]}},{"name":"l1","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::DimensionGasSettings","fields":[{"name":"gas_limit","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"teardown_gas_limit","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"max_fee_per_gas","type":{"kind":"field"}}]}},{"name":"l2","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::DimensionGasSettings","fields":[{"name":"gas_limit","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"teardown_gas_limit","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"max_fee_per_gas","type":{"kind":"field"}}]}},{"name":"inclusion_fee","type":{"kind":"field"}}]}},{"name":"transaction_fee","type":{"kind":"field"}}]}},{"name":"historical_header","type":{"kind":"struct","path":"aztec::protocol_types::header::Header","fields":[{"name":"last_archive","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"content_commitment","type":{"kind":"struct","path":"aztec::protocol_types::content_commitment::ContentCommitment","fields":[{"name":"tx_tree_height","type":{"kind":"field"}},{"name":"txs_effects_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}]}},{"name":"state","type":{"kind":"struct","path":"aztec::protocol_types::state_reference::StateReference","fields":[{"name":"l1_to_l2_message_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"partial","type":{"kind":"struct","path":"aztec::protocol_types::partial_state_reference::PartialStateReference","fields":[{"name":"note_hash_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"nullifier_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"public_data_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}}]}},{"name":"global_variables","type":{"kind":"struct","path":"aztec::protocol_types::abis::global_variables::GlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"fee_recipient","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"gas_fees","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l1_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}}]}}]}},{"name":"public_global_variables","type":{"kind":"struct","path":"aztec::protocol_types::abis::global_variables::GlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"fee_recipient","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"gas_fees","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l1_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}}]}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}]},"visibility":"private"},{"name":"inner_hash","type":{"kind":"field"},"visibility":"private"}],"param_witnesses":{"inner_hash":[{"start":54,"end":55}],"inputs":[{"start":0,"end":54}]},"return_type":{"abi_type":{"kind":"struct","path":"aztec::protocol_types::abis::public_circuit_public_inputs::PublicCircuitPublicInputs","fields":[{"name":"call_context","type":{"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"storage_contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"portal_contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"gas_left","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l1_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}},{"name":"side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"gas_settings","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::GasSettings","fields":[{"name":"da","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::DimensionGasSettings","fields":[{"name":"gas_limit","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"teardown_gas_limit","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"max_fee_per_gas","type":{"kind":"field"}}]}},{"name":"l1","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::DimensionGasSettings","fields":[{"name":"gas_limit","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"teardown_gas_limit","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"max_fee_per_gas","type":{"kind":"field"}}]}},{"name":"l2","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::DimensionGasSettings","fields":[{"name":"gas_limit","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"teardown_gas_limit","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"max_fee_per_gas","type":{"kind":"field"}}]}},{"name":"inclusion_fee","type":{"kind":"field"}}]}},{"name":"transaction_fee","type":{"kind":"field"}}]}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"nullifier_read_requests","type":{"kind":"array","length":2,"type":{"kind":"struct","path":"aztec::protocol_types::abis::read_request::ReadRequest","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"nullifier_non_existent_read_requests","type":{"kind":"array","length":2,"type":{"kind":"struct","path":"aztec::protocol_types::abis::read_request::ReadRequest","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"contract_storage_update_requests","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::contrakt::storage_update_request::StorageUpdateRequest","fields":[{"name":"storage_slot","type":{"kind":"field"}},{"name":"new_value","type":{"kind":"field"}}]}}},{"name":"contract_storage_reads","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::contrakt::storage_read::StorageRead","fields":[{"name":"storage_slot","type":{"kind":"field"}},{"name":"current_value","type":{"kind":"field"}}]}}},{"name":"public_call_stack_hashes","type":{"kind":"array","length":4,"type":{"kind":"field"}}},{"name":"new_note_hashes","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::abis::side_effect::SideEffect","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"new_nullifiers","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::abis::side_effect::SideEffectLinkedToNoteHash","fields":[{"name":"value","type":{"kind":"field"}},{"name":"note_hash","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"new_l2_to_l1_msgs","type":{"kind":"array","length":2,"type":{"kind":"struct","path":"aztec::protocol_types::messaging::l2_to_l1_message::L2ToL1Message","fields":[{"name":"recipient","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"content","type":{"kind":"field"}}]}}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"unencrypted_logs_hash","type":{"kind":"field"}},{"name":"unencrypted_log_preimages_length","type":{"kind":"field"}},{"name":"historical_header","type":{"kind":"struct","path":"aztec::protocol_types::header::Header","fields":[{"name":"last_archive","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"content_commitment","type":{"kind":"struct","path":"aztec::protocol_types::content_commitment::ContentCommitment","fields":[{"name":"tx_tree_height","type":{"kind":"field"}},{"name":"txs_effects_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}]}},{"name":"state","type":{"kind":"struct","path":"aztec::protocol_types::state_reference::StateReference","fields":[{"name":"l1_to_l2_message_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"partial","type":{"kind":"struct","path":"aztec::protocol_types::partial_state_reference::PartialStateReference","fields":[{"name":"note_hash_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"nullifier_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"public_data_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}}]}},{"name":"global_variables","type":{"kind":"struct","path":"aztec::protocol_types::abis::global_variables::GlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"fee_recipient","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"gas_fees","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l1_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}}]}}]}},{"name":"prover_address","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"revert_code","type":{"kind":"integer","sign":"unsigned","width":8}},{"name":"gas_left","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l1_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]},"visibility":"public"},"return_witnesses":[55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269]},"bytecode":"","debug_symbols":""},{"name":"get_token_in","is_unconstrained":true,"custom_attributes":[],"abi":{"parameters":[],"param_witnesses":{},"return_type":{"abi_type":{"kind":"field"},"visibility":"public"},"return_witnesses":[0]},"bytecode":"H4sIAAAAAAAA/72UTU7DMBCFnT83JSqCJYJF2LNIJA5grsANghIQm0ZKWwkuH1EjD/3keFfTJ0UzHo89z8/jJOqExNksEBM8OVsiZtxn0ZyD56bVdpNcBbE6foXzK+SlLnaLWAKeMj/H4nlkeq2WGpXQzsSr1fp3YOBn0MPPqzCfIpZ6a62uj5gvAmt0oJ74vBO5Oh1YS50KnMU4vzkPvzqxlsFY6m3AQ1+AD1vZYFyg9ip+7aZUpzca+0xrnMGAv9TLkfPg7I1agnsJT/akxQZaSW4V0JF9nSOfbzLi+2/tvhq8Y+3Ls1En5ekk+O8evnLaWuz249R9DK9D1yeglns0aUl9xjhFnH4WiM2w/J1IXRuTdgm1A39Ffnut1VLeqG8lU2EkAZ+xe2fvnH2Zpu67/tz2w1c9Hvb1+F6/jYdtv/tb8QPEr1DXygcAAA==","debug_symbols":"zZfBasMwEET/Zc+maFaSZflXSg9q6oLBOCF2C8X432s3TnJIoMQkYW5eNKN9+PBAgzTbTerrbdtJOYh58VK+DtLtUjvPXZ/2vZSI0dlMqvbj7zvYMZPPuqmk9DpmF3FFcEta1fhTGLiWtkGXsMP54sKPb9nEk5PxBDKegownkvHAsAGBDUjZgCwbkGMDYrM02DQNNk+DTdRgM7WymVofberDFn3Klrs4VeFPW2z45+cC8cgENeerFViYHCGTJ2TKCZkCIVNByBT5mOxVF2gelpY17sKF1q3o+BWdfEUnrOgUt3Wm4Tvt6/TeVPNDeT77ajfHd/M09j+7w8n4Cw=="},{"name":"compute_note_hash_and_nullifier","is_unconstrained":true,"custom_attributes":[],"abi":{"parameters":[{"name":"contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]},"visibility":"private"},{"name":"nonce","type":{"kind":"field"},"visibility":"private"},{"name":"storage_slot","type":{"kind":"field"},"visibility":"private"},{"name":"note_type_id","type":{"kind":"field"},"visibility":"private"},{"name":"serialized_note","type":{"kind":"array","length":20,"type":{"kind":"field"}},"visibility":"private"}],"param_witnesses":{"contract_address":[{"start":0,"end":1}],"nonce":[{"start":1,"end":2}],"note_type_id":[{"start":3,"end":4}],"serialized_note":[{"start":4,"end":24}],"storage_slot":[{"start":2,"end":3}]},"return_type":{"abi_type":{"kind":"array","length":4,"type":{"kind":"field"}},"visibility":"public"},"return_witnesses":[24,25,26,27]},"bytecode":"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","debug_symbols":"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"},{"name":"cancel_batch_and_claim","is_unconstrained":false,"custom_attributes":["aztec(private)"],"abi":{"parameters":[{"name":"inputs","type":{"kind":"struct","path":"aztec::context::inputs::private_context_inputs::PrivateContextInputs","fields":[{"name":"call_context","type":{"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"storage_contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"portal_contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"gas_left","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l1_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}},{"name":"side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"gas_settings","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::GasSettings","fields":[{"name":"da","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::DimensionGasSettings","fields":[{"name":"gas_limit","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"teardown_gas_limit","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"max_fee_per_gas","type":{"kind":"field"}}]}},{"name":"l1","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::DimensionGasSettings","fields":[{"name":"gas_limit","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"teardown_gas_limit","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"max_fee_per_gas","type":{"kind":"field"}}]}},{"name":"l2","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::DimensionGasSettings","fields":[{"name":"gas_limit","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"teardown_gas_limit","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"max_fee_per_gas","type":{"kind":"field"}}]}},{"name":"inclusion_fee","type":{"kind":"field"}}]}},{"name":"transaction_fee","type":{"kind":"field"}}]}},{"name":"historical_header","type":{"kind":"struct","path":"aztec::protocol_types::header::Header","fields":[{"name":"last_archive","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"content_commitment","type":{"kind":"struct","path":"aztec::protocol_types::content_commitment::ContentCommitment","fields":[{"name":"tx_tree_height","type":{"kind":"field"}},{"name":"txs_effects_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}]}},{"name":"state","type":{"kind":"struct","path":"aztec::protocol_types::state_reference::StateReference","fields":[{"name":"l1_to_l2_message_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"partial","type":{"kind":"struct","path":"aztec::protocol_types::partial_state_reference::PartialStateReference","fields":[{"name":"note_hash_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"nullifier_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"public_data_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}}]}},{"name":"global_variables","type":{"kind":"struct","path":"aztec::protocol_types::abis::global_variables::GlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"fee_recipient","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"gas_fees","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l1_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}}]}}]}},{"name":"private_global_variables","type":{"kind":"struct","path":"aztec::context::globals::private_global_variables::PrivateGlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}}]}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}]},"visibility":"private"},{"name":"current_round","type":{"kind":"field"},"visibility":"private"},{"name":"secret_hash","type":{"kind":"field"},"visibility":"private"}],"param_witnesses":{"current_round":[{"start":47,"end":48}],"inputs":[{"start":0,"end":47}],"secret_hash":[{"start":48,"end":49}]},"return_type":{"abi_type":{"kind":"struct","path":"aztec::protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs","fields":[{"name":"call_context","type":{"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"storage_contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"portal_contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"gas_left","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l1_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}},{"name":"side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"gas_settings","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::GasSettings","fields":[{"name":"da","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::DimensionGasSettings","fields":[{"name":"gas_limit","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"teardown_gas_limit","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"max_fee_per_gas","type":{"kind":"field"}}]}},{"name":"l1","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::DimensionGasSettings","fields":[{"name":"gas_limit","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"teardown_gas_limit","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"max_fee_per_gas","type":{"kind":"field"}}]}},{"name":"l2","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::DimensionGasSettings","fields":[{"name":"gas_limit","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"teardown_gas_limit","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"max_fee_per_gas","type":{"kind":"field"}}]}},{"name":"inclusion_fee","type":{"kind":"field"}}]}},{"name":"transaction_fee","type":{"kind":"field"}}]}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"min_revertible_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"max_block_number","type":{"kind":"struct","path":"aztec::protocol_types::abis::max_block_number::MaxBlockNumber","fields":[{"name":"_opt","type":{"kind":"struct","path":"std::option::Option","fields":[{"name":"_is_some","type":{"kind":"boolean"}},{"name":"_value","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}},{"name":"note_hash_read_requests","type":{"kind":"array","length":32,"type":{"kind":"struct","path":"aztec::protocol_types::abis::side_effect::SideEffect","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"nullifier_read_requests","type":{"kind":"array","length":2,"type":{"kind":"struct","path":"aztec::protocol_types::abis::read_request::ReadRequest","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"nullifier_key_validation_requests","type":{"kind":"array","length":1,"type":{"kind":"struct","path":"aztec::protocol_types::abis::nullifier_key_validation_request::NullifierKeyValidationRequest","fields":[{"name":"public_key","type":{"kind":"struct","path":"aztec::protocol_types::grumpkin_point::GrumpkinPoint","fields":[{"name":"x","type":{"kind":"field"}},{"name":"y","type":{"kind":"field"}}]}},{"name":"secret_key","type":{"kind":"struct","path":"aztec::protocol_types::grumpkin_private_key::GrumpkinPrivateKey","fields":[{"name":"high","type":{"kind":"field"}},{"name":"low","type":{"kind":"field"}}]}}]}}},{"name":"new_note_hashes","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::abis::side_effect::SideEffect","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"new_nullifiers","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::abis::side_effect::SideEffectLinkedToNoteHash","fields":[{"name":"value","type":{"kind":"field"}},{"name":"note_hash","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"private_call_stack_hashes","type":{"kind":"array","length":4,"type":{"kind":"field"}}},{"name":"public_call_stack_hashes","type":{"kind":"array","length":4,"type":{"kind":"field"}}},{"name":"new_l2_to_l1_msgs","type":{"kind":"array","length":2,"type":{"kind":"struct","path":"aztec::protocol_types::messaging::l2_to_l1_message::L2ToL1Message","fields":[{"name":"recipient","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"content","type":{"kind":"field"}}]}}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"encrypted_logs_hash","type":{"kind":"field"}},{"name":"unencrypted_logs_hash","type":{"kind":"field"}},{"name":"encrypted_log_preimages_length","type":{"kind":"field"}},{"name":"unencrypted_log_preimages_length","type":{"kind":"field"}},{"name":"historical_header","type":{"kind":"struct","path":"aztec::protocol_types::header::Header","fields":[{"name":"last_archive","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"content_commitment","type":{"kind":"struct","path":"aztec::protocol_types::content_commitment::ContentCommitment","fields":[{"name":"tx_tree_height","type":{"kind":"field"}},{"name":"txs_effects_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}]}},{"name":"state","type":{"kind":"struct","path":"aztec::protocol_types::state_reference::StateReference","fields":[{"name":"l1_to_l2_message_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"partial","type":{"kind":"struct","path":"aztec::protocol_types::partial_state_reference::PartialStateReference","fields":[{"name":"note_hash_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"nullifier_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"public_data_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}}]}},{"name":"global_variables","type":{"kind":"struct","path":"aztec::protocol_types::abis::global_variables::GlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"fee_recipient","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"gas_fees","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l1_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}}]}}]}},{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}}]},"visibility":"public"},"return_witnesses":[1047,1048,1049,1050,1051,1052,1053,1054,1055,1056,1057,1058,1059,1060,1061,1062,1063,1064,1065,1066,1067,1068,1069,1070,1071,1072,1073,1074,1075,1076,1077,1078,1079,1080,1081,1082,1083,1084,1085,1086,1087,1088,1089,1090,1091,1092,1093,1094,1095,1096,1097,1098,1099,1100,1101,1102,1103,1104,1105,1106,1107,1108,1109,1110,1111,1112,1113,1114,1115,1116,1117,1118,1119,1120,1121,1122,1123,1124,1125,1126,1127,1128,1129,1130,1131,1132,1133,1134,1135,1136,1137,1138,1139,1140,1141,1142,1143,1144,1145,1146,1147,1148,1149,1150,1151,1152,1153,1154,1155,1156,1157,1158,1159,1160,1161,1162,1163,1164,1165,1166,1167,1168,1169,1170,1171,1172,1173,1174,1175,1176,1177,1178,1179,1180,1181,1182,1183,1184,1185,1186,1187,1188,1189,1190,1191,1192,1193,1194,1195,1196,1197,1198,1199,1200,1201,1202,1203,1204,1205,1206,1207,1208,1209,1210,1211,1212,1213,1214,1215,1216,1217,1218,1219,1220,1221,1222,1223,1224,1225,1226,1227,1228,1229,1230,1231,1232,1233,1234,1235,1236,1237,1238,1239,1240,1241,1242,1243,1244,1245,1246,1247,1248,1249,1250,1251,1252,1253,1254,1255,1256,1257,1258,1259,1260,1261,1262,1263,1264,1265,1266,1267]},"bytecode":"","debug_symbols":""},{"name":"get_encrypted_sum","is_unconstrained":true,"custom_attributes":[],"abi":{"parameters":[{"name":"current_round","type":{"kind":"field"},"visibility":"private"}],"param_witnesses":{"current_round":[{"start":0,"end":1}]},"return_type":{"abi_type":{"kind":"array","length":2,"type":{"kind":"field"}},"visibility":"public"},"return_witnesses":[1,2]},"bytecode":"H4sIAAAAAAAA/81ayW7bMBClJK9R7MRO99Xd91a2HLvbQf2F/kFaO0UvMZAFaI/tqf2I3vuVQUOG0zwzStAgb9AQEERR1OObx5mRTSoy+yXeOyJfT6CORdoKf85OV/pErCwCjnFQ/+2vG2BLwRp7mOU1C1KZ10hKCnykT33vWAFOFT6nvsWtsnGzbNDw/Mm4bv5kfqoetw7XolXTHOhMGruPY0f+aMKYMnVS70Jf6Sd6yFwL99beUfP15jHPVYLn2tCnVmJ/Ybj21wM+9YBzFdo61gZPOAZuGv5m4ycx8yWMsQLq6Cv0uMrU4iqzuDLPuzzccdncJoFWbeiDvqYQ587XqgEfuZbxTso5PgOc0S96husXDb5NgyWzH9sJ8DdH2LXg60S/zIwpzy0LMO6irxNzvXvPpB6rYuZz8SK0S5914GOgXlD4rOYNc5DPeLjjocWK6bijdYuV8PkOMF8T+c7layLuGPM1EXcVcxgPdzCXR4jzluNvEqIOHzHvsP035eswxHzFnrcWHTd3uG0lvkv8eZtarGUlf+go+UNXSd8Vvg4uT57j47o4Pq+Ee0HJHy7y/cG9Ly7x+br3xWU+rvPfK3z/dXF8VSkurtFx93+fXef7g9P3hpL/3uTzdb/Peny+Lu/c4uO6eLvNx3XxdkfJf+/y58357z2+Di7/3lfy3wd8HVy8PVTS95GSPzzm6zuxWE/4Ori4eKqk7zMlf3iuNG8vlHTIlHTo8/3M5fUBn697D+VKOgyV/GGVr+/IYo2U9B3z+bq8/pKP6/LZK6V5e03HzV1cvOHzncp/Y1ve+nMb2nBNSWsPCUsB9WYJn+gM8ElN+X5tM9AM93Dx3i+4L2s0MbSJvUkJdgvaZD2qXfIs6tQCWwpfz05XnE44VgHXLThHAcf/zadewkdr70fmR7Dluq6rRY5raUTckbVJ8oXstQt/Ga8Cfb77M+YYKVHQXpjDPo7zhWt4CrYNcT2PiOs06waaCf8OaCZ9fgb2hpp1j9BsCTSTZ3Edscu3bYA5CDmagKMp4aORu5XsdHt/ncCmNLCpDX0wvhV8ql/mB3LdgXk4CeflM8A5hbYUznIf379xYAt+74H9G9BO3Ice4T4eUaeRtUP2M6UcF1O4l6jwfUl/wRzMxdb2bHPt0/T9dG2Cn81VAip4D6nvQp8Y2rGelLTtwjkFDBnXtoWffKGL1KBN8PEzpUOfLBb+nJ2uOJ9PQIywxHAvDq6lfPNnWat/t7m59rX3eWMy/dKb7Wz3Zuu9D7OdjckWPvTjXx/6+8Qf84AeVc8pAAA=","debug_symbols":"1ZzNjhJBFIXfpdfE1K2q+8erGBc4YkJCmMmAJobw7oJ24xgG0ck4OWdH0+dWfbA4Hyyq98P6/m6xW91vtsN8P5R3ksP8/X7YPiw2pze2u8XjbpjX0nudDcvNpx+vvR9mw+fVejnMtR5mF/GUNobT7BwVac9ke0YZw3rc5Zyu4ocPsyNRLXBEAkdU4YgaHFGHI1I4IoMjcjiigCOC6+wG19kNrrMbXGc3uM5ucJ3d4Dq7vUZnS+kypqVk3GCS8OkDSBb789LmNmYt25OFJ3znxg9u/KTG74UbX7jxKzd+48bv3PjKjc9t3c5t3c5t3c5tXeW2rnJbV7mtq9zWVW7rKrd1ldu6ym1d5bauclvXuK1r3NY1busat3WN27rGbV3jtq5xW9e4rWvc1nVu6zq3dZ3bus5tXee2rnNb17mt69zWdW7rOrd1g9u6wW3d4LZucFs3uK0b3NYNbusGt3WD27rBbd3ktm5yWze5rZvc1k1u6ya3dZPbuslt3eS2bnJbVwq3dqVwe1fK34g35Aa/iE5E0u23bS7Tzaelu/xCCp2IGhxRhyNSOCKDI3I4ooAjSjQiKXBEAkcE19kC19kC19kC19kC19kC19kC19kC19kVrrMrXGdXuM6u/7uzx23622zzOu2qdt7G48b36zYx+dM/eGUiMjgihyMKOKJEI2oFjkjgiOqbE4VM4aj6DFGDI+pwRApHZHBEDkcUaERXTpaZj0Ot9MufP1fOc90YyhcMXTm7dGNIXjJU/23oePF18bhafFwvT09APN37srmbHoh4vNx9e/h55/Ad"},{"name":"_validate_round","is_unconstrained":true,"custom_attributes":["aztec(public)","aztec(internal)"],"abi":{"parameters":[{"name":"inputs","type":{"kind":"struct","path":"aztec::context::inputs::public_context_inputs::PublicContextInputs","fields":[{"name":"call_context","type":{"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"storage_contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"portal_contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"gas_left","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l1_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}},{"name":"side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"gas_settings","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::GasSettings","fields":[{"name":"da","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::DimensionGasSettings","fields":[{"name":"gas_limit","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"teardown_gas_limit","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"max_fee_per_gas","type":{"kind":"field"}}]}},{"name":"l1","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::DimensionGasSettings","fields":[{"name":"gas_limit","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"teardown_gas_limit","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"max_fee_per_gas","type":{"kind":"field"}}]}},{"name":"l2","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::DimensionGasSettings","fields":[{"name":"gas_limit","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"teardown_gas_limit","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"max_fee_per_gas","type":{"kind":"field"}}]}},{"name":"inclusion_fee","type":{"kind":"field"}}]}},{"name":"transaction_fee","type":{"kind":"field"}}]}},{"name":"historical_header","type":{"kind":"struct","path":"aztec::protocol_types::header::Header","fields":[{"name":"last_archive","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"content_commitment","type":{"kind":"struct","path":"aztec::protocol_types::content_commitment::ContentCommitment","fields":[{"name":"tx_tree_height","type":{"kind":"field"}},{"name":"txs_effects_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}]}},{"name":"state","type":{"kind":"struct","path":"aztec::protocol_types::state_reference::StateReference","fields":[{"name":"l1_to_l2_message_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"partial","type":{"kind":"struct","path":"aztec::protocol_types::partial_state_reference::PartialStateReference","fields":[{"name":"note_hash_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"nullifier_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"public_data_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}}]}},{"name":"global_variables","type":{"kind":"struct","path":"aztec::protocol_types::abis::global_variables::GlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"fee_recipient","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"gas_fees","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l1_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}}]}}]}},{"name":"public_global_variables","type":{"kind":"struct","path":"aztec::protocol_types::abis::global_variables::GlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"fee_recipient","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"gas_fees","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l1_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}}]}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}]},"visibility":"private"},{"name":"round","type":{"kind":"field"},"visibility":"private"}],"param_witnesses":{"inputs":[{"start":0,"end":54}],"round":[{"start":54,"end":55}]},"return_type":{"abi_type":{"kind":"struct","path":"aztec::protocol_types::abis::public_circuit_public_inputs::PublicCircuitPublicInputs","fields":[{"name":"call_context","type":{"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"storage_contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"portal_contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"gas_left","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l1_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}},{"name":"side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"gas_settings","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::GasSettings","fields":[{"name":"da","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::DimensionGasSettings","fields":[{"name":"gas_limit","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"teardown_gas_limit","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"max_fee_per_gas","type":{"kind":"field"}}]}},{"name":"l1","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::DimensionGasSettings","fields":[{"name":"gas_limit","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"teardown_gas_limit","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"max_fee_per_gas","type":{"kind":"field"}}]}},{"name":"l2","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::DimensionGasSettings","fields":[{"name":"gas_limit","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"teardown_gas_limit","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"max_fee_per_gas","type":{"kind":"field"}}]}},{"name":"inclusion_fee","type":{"kind":"field"}}]}},{"name":"transaction_fee","type":{"kind":"field"}}]}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"nullifier_read_requests","type":{"kind":"array","length":2,"type":{"kind":"struct","path":"aztec::protocol_types::abis::read_request::ReadRequest","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"nullifier_non_existent_read_requests","type":{"kind":"array","length":2,"type":{"kind":"struct","path":"aztec::protocol_types::abis::read_request::ReadRequest","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"contract_storage_update_requests","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::contrakt::storage_update_request::StorageUpdateRequest","fields":[{"name":"storage_slot","type":{"kind":"field"}},{"name":"new_value","type":{"kind":"field"}}]}}},{"name":"contract_storage_reads","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::contrakt::storage_read::StorageRead","fields":[{"name":"storage_slot","type":{"kind":"field"}},{"name":"current_value","type":{"kind":"field"}}]}}},{"name":"public_call_stack_hashes","type":{"kind":"array","length":4,"type":{"kind":"field"}}},{"name":"new_note_hashes","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::abis::side_effect::SideEffect","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"new_nullifiers","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::abis::side_effect::SideEffectLinkedToNoteHash","fields":[{"name":"value","type":{"kind":"field"}},{"name":"note_hash","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"new_l2_to_l1_msgs","type":{"kind":"array","length":2,"type":{"kind":"struct","path":"aztec::protocol_types::messaging::l2_to_l1_message::L2ToL1Message","fields":[{"name":"recipient","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"content","type":{"kind":"field"}}]}}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"unencrypted_logs_hash","type":{"kind":"field"}},{"name":"unencrypted_log_preimages_length","type":{"kind":"field"}},{"name":"historical_header","type":{"kind":"struct","path":"aztec::protocol_types::header::Header","fields":[{"name":"last_archive","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"content_commitment","type":{"kind":"struct","path":"aztec::protocol_types::content_commitment::ContentCommitment","fields":[{"name":"tx_tree_height","type":{"kind":"field"}},{"name":"txs_effects_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}]}},{"name":"state","type":{"kind":"struct","path":"aztec::protocol_types::state_reference::StateReference","fields":[{"name":"l1_to_l2_message_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"partial","type":{"kind":"struct","path":"aztec::protocol_types::partial_state_reference::PartialStateReference","fields":[{"name":"note_hash_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"nullifier_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"public_data_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}}]}},{"name":"global_variables","type":{"kind":"struct","path":"aztec::protocol_types::abis::global_variables::GlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"fee_recipient","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"gas_fees","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l1_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}}]}}]}},{"name":"prover_address","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"revert_code","type":{"kind":"integer","sign":"unsigned","width":8}},{"name":"gas_left","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l1_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]},"visibility":"public"},"return_witnesses":[55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269]},"bytecode":"","debug_symbols":""},{"name":"_validate_claim_params","is_unconstrained":true,"custom_attributes":["aztec(public)","aztec(internal)"],"abi":{"parameters":[{"name":"inputs","type":{"kind":"struct","path":"aztec::context::inputs::public_context_inputs::PublicContextInputs","fields":[{"name":"call_context","type":{"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"storage_contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"portal_contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"gas_left","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l1_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}},{"name":"side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"gas_settings","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::GasSettings","fields":[{"name":"da","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::DimensionGasSettings","fields":[{"name":"gas_limit","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"teardown_gas_limit","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"max_fee_per_gas","type":{"kind":"field"}}]}},{"name":"l1","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::DimensionGasSettings","fields":[{"name":"gas_limit","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"teardown_gas_limit","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"max_fee_per_gas","type":{"kind":"field"}}]}},{"name":"l2","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::DimensionGasSettings","fields":[{"name":"gas_limit","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"teardown_gas_limit","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"max_fee_per_gas","type":{"kind":"field"}}]}},{"name":"inclusion_fee","type":{"kind":"field"}}]}},{"name":"transaction_fee","type":{"kind":"field"}}]}},{"name":"historical_header","type":{"kind":"struct","path":"aztec::protocol_types::header::Header","fields":[{"name":"last_archive","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"content_commitment","type":{"kind":"struct","path":"aztec::protocol_types::content_commitment::ContentCommitment","fields":[{"name":"tx_tree_height","type":{"kind":"field"}},{"name":"txs_effects_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}]}},{"name":"state","type":{"kind":"struct","path":"aztec::protocol_types::state_reference::StateReference","fields":[{"name":"l1_to_l2_message_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"partial","type":{"kind":"struct","path":"aztec::protocol_types::partial_state_reference::PartialStateReference","fields":[{"name":"note_hash_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"nullifier_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"public_data_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}}]}},{"name":"global_variables","type":{"kind":"struct","path":"aztec::protocol_types::abis::global_variables::GlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"fee_recipient","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"gas_fees","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l1_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}}]}}]}},{"name":"public_global_variables","type":{"kind":"struct","path":"aztec::protocol_types::abis::global_variables::GlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"fee_recipient","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"gas_fees","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l1_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}}]}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}]},"visibility":"private"},{"name":"_round","type":{"kind":"field"},"visibility":"private"},{"name":"_total_token_in","type":{"kind":"field"},"visibility":"private"},{"name":"_total_token_out","type":{"kind":"field"},"visibility":"private"}],"param_witnesses":{"_round":[{"start":54,"end":55}],"_total_token_in":[{"start":55,"end":56}],"_total_token_out":[{"start":56,"end":57}],"inputs":[{"start":0,"end":54}]},"return_type":{"abi_type":{"kind":"struct","path":"aztec::protocol_types::abis::public_circuit_public_inputs::PublicCircuitPublicInputs","fields":[{"name":"call_context","type":{"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"storage_contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"portal_contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"gas_left","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l1_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}},{"name":"side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"gas_settings","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::GasSettings","fields":[{"name":"da","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::DimensionGasSettings","fields":[{"name":"gas_limit","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"teardown_gas_limit","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"max_fee_per_gas","type":{"kind":"field"}}]}},{"name":"l1","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::DimensionGasSettings","fields":[{"name":"gas_limit","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"teardown_gas_limit","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"max_fee_per_gas","type":{"kind":"field"}}]}},{"name":"l2","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::DimensionGasSettings","fields":[{"name":"gas_limit","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"teardown_gas_limit","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"max_fee_per_gas","type":{"kind":"field"}}]}},{"name":"inclusion_fee","type":{"kind":"field"}}]}},{"name":"transaction_fee","type":{"kind":"field"}}]}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"nullifier_read_requests","type":{"kind":"array","length":2,"type":{"kind":"struct","path":"aztec::protocol_types::abis::read_request::ReadRequest","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"nullifier_non_existent_read_requests","type":{"kind":"array","length":2,"type":{"kind":"struct","path":"aztec::protocol_types::abis::read_request::ReadRequest","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"contract_storage_update_requests","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::contrakt::storage_update_request::StorageUpdateRequest","fields":[{"name":"storage_slot","type":{"kind":"field"}},{"name":"new_value","type":{"kind":"field"}}]}}},{"name":"contract_storage_reads","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::contrakt::storage_read::StorageRead","fields":[{"name":"storage_slot","type":{"kind":"field"}},{"name":"current_value","type":{"kind":"field"}}]}}},{"name":"public_call_stack_hashes","type":{"kind":"array","length":4,"type":{"kind":"field"}}},{"name":"new_note_hashes","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::abis::side_effect::SideEffect","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"new_nullifiers","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::abis::side_effect::SideEffectLinkedToNoteHash","fields":[{"name":"value","type":{"kind":"field"}},{"name":"note_hash","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"new_l2_to_l1_msgs","type":{"kind":"array","length":2,"type":{"kind":"struct","path":"aztec::protocol_types::messaging::l2_to_l1_message::L2ToL1Message","fields":[{"name":"recipient","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"content","type":{"kind":"field"}}]}}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"unencrypted_logs_hash","type":{"kind":"field"}},{"name":"unencrypted_log_preimages_length","type":{"kind":"field"}},{"name":"historical_header","type":{"kind":"struct","path":"aztec::protocol_types::header::Header","fields":[{"name":"last_archive","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"content_commitment","type":{"kind":"struct","path":"aztec::protocol_types::content_commitment::ContentCommitment","fields":[{"name":"tx_tree_height","type":{"kind":"field"}},{"name":"txs_effects_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}]}},{"name":"state","type":{"kind":"struct","path":"aztec::protocol_types::state_reference::StateReference","fields":[{"name":"l1_to_l2_message_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"partial","type":{"kind":"struct","path":"aztec::protocol_types::partial_state_reference::PartialStateReference","fields":[{"name":"note_hash_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"nullifier_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"public_data_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}}]}},{"name":"global_variables","type":{"kind":"struct","path":"aztec::protocol_types::abis::global_variables::GlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"fee_recipient","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"gas_fees","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l1_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}}]}}]}},{"name":"prover_address","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"revert_code","type":{"kind":"integer","sign":"unsigned","width":8}},{"name":"gas_left","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l1_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]},"visibility":"public"},"return_witnesses":[57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271]},"bytecode":"","debug_symbols":""},{"name":"stake","is_unconstrained":true,"custom_attributes":["aztec(public)"],"abi":{"parameters":[{"name":"inputs","type":{"kind":"struct","path":"aztec::context::inputs::public_context_inputs::PublicContextInputs","fields":[{"name":"call_context","type":{"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"storage_contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"portal_contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"gas_left","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l1_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}},{"name":"side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"gas_settings","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::GasSettings","fields":[{"name":"da","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::DimensionGasSettings","fields":[{"name":"gas_limit","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"teardown_gas_limit","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"max_fee_per_gas","type":{"kind":"field"}}]}},{"name":"l1","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::DimensionGasSettings","fields":[{"name":"gas_limit","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"teardown_gas_limit","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"max_fee_per_gas","type":{"kind":"field"}}]}},{"name":"l2","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::DimensionGasSettings","fields":[{"name":"gas_limit","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"teardown_gas_limit","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"max_fee_per_gas","type":{"kind":"field"}}]}},{"name":"inclusion_fee","type":{"kind":"field"}}]}},{"name":"transaction_fee","type":{"kind":"field"}}]}},{"name":"historical_header","type":{"kind":"struct","path":"aztec::protocol_types::header::Header","fields":[{"name":"last_archive","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"content_commitment","type":{"kind":"struct","path":"aztec::protocol_types::content_commitment::ContentCommitment","fields":[{"name":"tx_tree_height","type":{"kind":"field"}},{"name":"txs_effects_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}]}},{"name":"state","type":{"kind":"struct","path":"aztec::protocol_types::state_reference::StateReference","fields":[{"name":"l1_to_l2_message_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"partial","type":{"kind":"struct","path":"aztec::protocol_types::partial_state_reference::PartialStateReference","fields":[{"name":"note_hash_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"nullifier_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"public_data_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}}]}},{"name":"global_variables","type":{"kind":"struct","path":"aztec::protocol_types::abis::global_variables::GlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"fee_recipient","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"gas_fees","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l1_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}}]}}]}},{"name":"public_global_variables","type":{"kind":"struct","path":"aztec::protocol_types::abis::global_variables::GlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"fee_recipient","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"gas_fees","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l1_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}}]}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}]},"visibility":"private"},{"name":"relayer","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]},"visibility":"private"},{"name":"token","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]},"visibility":"private"},{"name":"amount","type":{"kind":"field"},"visibility":"private"},{"name":"nonce","type":{"kind":"field"},"visibility":"private"}],"param_witnesses":{"amount":[{"start":56,"end":57}],"inputs":[{"start":0,"end":54}],"nonce":[{"start":57,"end":58}],"relayer":[{"start":54,"end":55}],"token":[{"start":55,"end":56}]},"return_type":{"abi_type":{"kind":"struct","path":"aztec::protocol_types::abis::public_circuit_public_inputs::PublicCircuitPublicInputs","fields":[{"name":"call_context","type":{"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"storage_contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"portal_contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"gas_left","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l1_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}},{"name":"side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"gas_settings","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::GasSettings","fields":[{"name":"da","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::DimensionGasSettings","fields":[{"name":"gas_limit","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"teardown_gas_limit","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"max_fee_per_gas","type":{"kind":"field"}}]}},{"name":"l1","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::DimensionGasSettings","fields":[{"name":"gas_limit","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"teardown_gas_limit","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"max_fee_per_gas","type":{"kind":"field"}}]}},{"name":"l2","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::DimensionGasSettings","fields":[{"name":"gas_limit","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"teardown_gas_limit","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"max_fee_per_gas","type":{"kind":"field"}}]}},{"name":"inclusion_fee","type":{"kind":"field"}}]}},{"name":"transaction_fee","type":{"kind":"field"}}]}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"nullifier_read_requests","type":{"kind":"array","length":2,"type":{"kind":"struct","path":"aztec::protocol_types::abis::read_request::ReadRequest","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"nullifier_non_existent_read_requests","type":{"kind":"array","length":2,"type":{"kind":"struct","path":"aztec::protocol_types::abis::read_request::ReadRequest","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"contract_storage_update_requests","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::contrakt::storage_update_request::StorageUpdateRequest","fields":[{"name":"storage_slot","type":{"kind":"field"}},{"name":"new_value","type":{"kind":"field"}}]}}},{"name":"contract_storage_reads","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::contrakt::storage_read::StorageRead","fields":[{"name":"storage_slot","type":{"kind":"field"}},{"name":"current_value","type":{"kind":"field"}}]}}},{"name":"public_call_stack_hashes","type":{"kind":"array","length":4,"type":{"kind":"field"}}},{"name":"new_note_hashes","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::abis::side_effect::SideEffect","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"new_nullifiers","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::abis::side_effect::SideEffectLinkedToNoteHash","fields":[{"name":"value","type":{"kind":"field"}},{"name":"note_hash","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"new_l2_to_l1_msgs","type":{"kind":"array","length":2,"type":{"kind":"struct","path":"aztec::protocol_types::messaging::l2_to_l1_message::L2ToL1Message","fields":[{"name":"recipient","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"content","type":{"kind":"field"}}]}}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"unencrypted_logs_hash","type":{"kind":"field"}},{"name":"unencrypted_log_preimages_length","type":{"kind":"field"}},{"name":"historical_header","type":{"kind":"struct","path":"aztec::protocol_types::header::Header","fields":[{"name":"last_archive","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"content_commitment","type":{"kind":"struct","path":"aztec::protocol_types::content_commitment::ContentCommitment","fields":[{"name":"tx_tree_height","type":{"kind":"field"}},{"name":"txs_effects_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}]}},{"name":"state","type":{"kind":"struct","path":"aztec::protocol_types::state_reference::StateReference","fields":[{"name":"l1_to_l2_message_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"partial","type":{"kind":"struct","path":"aztec::protocol_types::partial_state_reference::PartialStateReference","fields":[{"name":"note_hash_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"nullifier_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"public_data_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}}]}},{"name":"global_variables","type":{"kind":"struct","path":"aztec::protocol_types::abis::global_variables::GlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"fee_recipient","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"gas_fees","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l1_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}}]}}]}},{"name":"prover_address","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"revert_code","type":{"kind":"integer","sign":"unsigned","width":8}},{"name":"gas_left","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l1_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]},"visibility":"public"},"return_witnesses":[58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272]},"bytecode":"","debug_symbols":""},{"name":"get_target_address","is_unconstrained":true,"custom_attributes":[],"abi":{"parameters":[],"param_witnesses":{},"return_type":{"abi_type":{"kind":"field"},"visibility":"public"},"return_witnesses":[0]},"bytecode":"H4sIAAAAAAAA/72UTU7DMBCFnd+mREWwRLAIexYO4gDmCtwgKAGxaaS0leDyERh56CfHu5o+KZrxeOx5fh4nUUckzmaBmODB2Qox4z4LfQqedFvaTXIVxOrnK5xfIy91sWvEEvCU+TkWT60fL9VSowramXi1Wv8ODPwMevh5NeZTxFJvrdX1HvNFYE0ZqCc+70SurgyspU4FzmKcr0/Dr06sZTCWehvwKM/Ah61sMC5QexW/tq7U8Y3GPtMaZzDgL/Vy5Nw5e6WW4F7Ckz1psYFWklsHdGRf58jnm4z4/lu7bwnesfbl2aiT8nQS/HcPXzhtLXb7cereh5eh6xNQyz2atKQ+Y5wiTj8LxGZY/k6kro1Ju4Tagb8iv73Wailv1LeSqTCSgM/YrbM3zj5PU/fVfGz74bMZD/tmfGtex8O23/2t+AYnrzOYygcAAA==","debug_symbols":"zZfNqsIwEIXfZdblkpn8tq9ycRG1QqFUsVWQ0ne31VYXCmJRObsMOYf5yOKDtFRuV7EptlVNWUvqz1L231K9i9Uw103cN5RxGrRPKK/Wl7OzXUKboswps9IlD3Fhb8a0iLqHmZ+ltZcxbFjfssF2i6TncWA8HowngPGkYDys0IAYDUjQgDQakEEDQrM0o2ma0TzNaKJmNFMLmqnl26a+bpGfbPmIU4XtbYv2Lx6XOZ2YWNT9eYV5ZDKATBaQyQEyeUCmAMiU4jHppy4QNxFpZR5cqM2Mjp3RcTM6fkYnvNfph2PcF3FZ5sNHebg7VKvp39yPzWl3venO"},{"name":"_initialize","is_unconstrained":true,"custom_attributes":["aztec(public)","aztec(internal)","aztec(noinitcheck)"],"abi":{"parameters":[{"name":"inputs","type":{"kind":"struct","path":"aztec::context::inputs::public_context_inputs::PublicContextInputs","fields":[{"name":"call_context","type":{"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"storage_contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"portal_contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"gas_left","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l1_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}},{"name":"side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"gas_settings","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::GasSettings","fields":[{"name":"da","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::DimensionGasSettings","fields":[{"name":"gas_limit","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"teardown_gas_limit","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"max_fee_per_gas","type":{"kind":"field"}}]}},{"name":"l1","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::DimensionGasSettings","fields":[{"name":"gas_limit","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"teardown_gas_limit","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"max_fee_per_gas","type":{"kind":"field"}}]}},{"name":"l2","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::DimensionGasSettings","fields":[{"name":"gas_limit","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"teardown_gas_limit","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"max_fee_per_gas","type":{"kind":"field"}}]}},{"name":"inclusion_fee","type":{"kind":"field"}}]}},{"name":"transaction_fee","type":{"kind":"field"}}]}},{"name":"historical_header","type":{"kind":"struct","path":"aztec::protocol_types::header::Header","fields":[{"name":"last_archive","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"content_commitment","type":{"kind":"struct","path":"aztec::protocol_types::content_commitment::ContentCommitment","fields":[{"name":"tx_tree_height","type":{"kind":"field"}},{"name":"txs_effects_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}]}},{"name":"state","type":{"kind":"struct","path":"aztec::protocol_types::state_reference::StateReference","fields":[{"name":"l1_to_l2_message_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"partial","type":{"kind":"struct","path":"aztec::protocol_types::partial_state_reference::PartialStateReference","fields":[{"name":"note_hash_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"nullifier_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"public_data_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}}]}},{"name":"global_variables","type":{"kind":"struct","path":"aztec::protocol_types::abis::global_variables::GlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"fee_recipient","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"gas_fees","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l1_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}}]}}]}},{"name":"public_global_variables","type":{"kind":"struct","path":"aztec::protocol_types::abis::global_variables::GlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"fee_recipient","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"gas_fees","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l1_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}}]}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}]},"visibility":"private"},{"name":"admin","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]},"visibility":"private"},{"name":"target","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]},"visibility":"private"},{"name":"token_in","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]},"visibility":"private"},{"name":"token_out","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]},"visibility":"private"},{"name":"relayer","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]},"visibility":"private"},{"name":"bonding_token","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]},"visibility":"private"},{"name":"bonding_amount","type":{"kind":"field"},"visibility":"private"},{"name":"he_pub_key","type":{"kind":"field"},"visibility":"private"},{"name":"sk_hash","type":{"kind":"field"},"visibility":"private"},{"name":"interval","type":{"kind":"field"},"visibility":"private"}],"param_witnesses":{"admin":[{"start":54,"end":55}],"bonding_amount":[{"start":60,"end":61}],"bonding_token":[{"start":59,"end":60}],"he_pub_key":[{"start":61,"end":62}],"inputs":[{"start":0,"end":54}],"interval":[{"start":63,"end":64}],"relayer":[{"start":58,"end":59}],"sk_hash":[{"start":62,"end":63}],"target":[{"start":55,"end":56}],"token_in":[{"start":56,"end":57}],"token_out":[{"start":57,"end":58}]},"return_type":{"abi_type":{"kind":"struct","path":"aztec::protocol_types::abis::public_circuit_public_inputs::PublicCircuitPublicInputs","fields":[{"name":"call_context","type":{"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"storage_contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"portal_contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"gas_left","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l1_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}},{"name":"side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"gas_settings","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::GasSettings","fields":[{"name":"da","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::DimensionGasSettings","fields":[{"name":"gas_limit","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"teardown_gas_limit","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"max_fee_per_gas","type":{"kind":"field"}}]}},{"name":"l1","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::DimensionGasSettings","fields":[{"name":"gas_limit","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"teardown_gas_limit","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"max_fee_per_gas","type":{"kind":"field"}}]}},{"name":"l2","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::DimensionGasSettings","fields":[{"name":"gas_limit","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"teardown_gas_limit","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"max_fee_per_gas","type":{"kind":"field"}}]}},{"name":"inclusion_fee","type":{"kind":"field"}}]}},{"name":"transaction_fee","type":{"kind":"field"}}]}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"nullifier_read_requests","type":{"kind":"array","length":2,"type":{"kind":"struct","path":"aztec::protocol_types::abis::read_request::ReadRequest","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"nullifier_non_existent_read_requests","type":{"kind":"array","length":2,"type":{"kind":"struct","path":"aztec::protocol_types::abis::read_request::ReadRequest","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"contract_storage_update_requests","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::contrakt::storage_update_request::StorageUpdateRequest","fields":[{"name":"storage_slot","type":{"kind":"field"}},{"name":"new_value","type":{"kind":"field"}}]}}},{"name":"contract_storage_reads","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::contrakt::storage_read::StorageRead","fields":[{"name":"storage_slot","type":{"kind":"field"}},{"name":"current_value","type":{"kind":"field"}}]}}},{"name":"public_call_stack_hashes","type":{"kind":"array","length":4,"type":{"kind":"field"}}},{"name":"new_note_hashes","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::abis::side_effect::SideEffect","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"new_nullifiers","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::abis::side_effect::SideEffectLinkedToNoteHash","fields":[{"name":"value","type":{"kind":"field"}},{"name":"note_hash","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"new_l2_to_l1_msgs","type":{"kind":"array","length":2,"type":{"kind":"struct","path":"aztec::protocol_types::messaging::l2_to_l1_message::L2ToL1Message","fields":[{"name":"recipient","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"content","type":{"kind":"field"}}]}}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"unencrypted_logs_hash","type":{"kind":"field"}},{"name":"unencrypted_log_preimages_length","type":{"kind":"field"}},{"name":"historical_header","type":{"kind":"struct","path":"aztec::protocol_types::header::Header","fields":[{"name":"last_archive","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"content_commitment","type":{"kind":"struct","path":"aztec::protocol_types::content_commitment::ContentCommitment","fields":[{"name":"tx_tree_height","type":{"kind":"field"}},{"name":"txs_effects_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}]}},{"name":"state","type":{"kind":"struct","path":"aztec::protocol_types::state_reference::StateReference","fields":[{"name":"l1_to_l2_message_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"partial","type":{"kind":"struct","path":"aztec::protocol_types::partial_state_reference::PartialStateReference","fields":[{"name":"note_hash_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"nullifier_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"public_data_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}}]}},{"name":"global_variables","type":{"kind":"struct","path":"aztec::protocol_types::abis::global_variables::GlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"fee_recipient","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"gas_fees","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l1_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}}]}}]}},{"name":"prover_address","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"revert_code","type":{"kind":"integer","sign":"unsigned","width":8}},{"name":"gas_left","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l1_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]},"visibility":"public"},"return_witnesses":[64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278]},"bytecode":"","debug_symbols":""},{"name":"finalize_execute","is_unconstrained":true,"custom_attributes":["aztec(public)"],"abi":{"parameters":[{"name":"inputs","type":{"kind":"struct","path":"aztec::context::inputs::public_context_inputs::PublicContextInputs","fields":[{"name":"call_context","type":{"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"storage_contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"portal_contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"gas_left","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l1_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}},{"name":"side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"gas_settings","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::GasSettings","fields":[{"name":"da","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::DimensionGasSettings","fields":[{"name":"gas_limit","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"teardown_gas_limit","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"max_fee_per_gas","type":{"kind":"field"}}]}},{"name":"l1","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::DimensionGasSettings","fields":[{"name":"gas_limit","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"teardown_gas_limit","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"max_fee_per_gas","type":{"kind":"field"}}]}},{"name":"l2","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::DimensionGasSettings","fields":[{"name":"gas_limit","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"teardown_gas_limit","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"max_fee_per_gas","type":{"kind":"field"}}]}},{"name":"inclusion_fee","type":{"kind":"field"}}]}},{"name":"transaction_fee","type":{"kind":"field"}}]}},{"name":"historical_header","type":{"kind":"struct","path":"aztec::protocol_types::header::Header","fields":[{"name":"last_archive","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"content_commitment","type":{"kind":"struct","path":"aztec::protocol_types::content_commitment::ContentCommitment","fields":[{"name":"tx_tree_height","type":{"kind":"field"}},{"name":"txs_effects_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}]}},{"name":"state","type":{"kind":"struct","path":"aztec::protocol_types::state_reference::StateReference","fields":[{"name":"l1_to_l2_message_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"partial","type":{"kind":"struct","path":"aztec::protocol_types::partial_state_reference::PartialStateReference","fields":[{"name":"note_hash_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"nullifier_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"public_data_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}}]}},{"name":"global_variables","type":{"kind":"struct","path":"aztec::protocol_types::abis::global_variables::GlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"fee_recipient","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"gas_fees","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l1_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}}]}}]}},{"name":"public_global_variables","type":{"kind":"struct","path":"aztec::protocol_types::abis::global_variables::GlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"fee_recipient","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"gas_fees","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l1_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}}]}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}]},"visibility":"private"},{"name":"secret_hash_for_redeeming_minted_notes","type":{"kind":"field"},"visibility":"private"},{"name":"amount","type":{"kind":"field"},"visibility":"private"},{"name":"secret_for_L1_to_L2_message_consumption","type":{"kind":"field"},"visibility":"private"}],"param_witnesses":{"amount":[{"start":55,"end":56}],"inputs":[{"start":0,"end":54}],"secret_for_L1_to_L2_message_consumption":[{"start":56,"end":57}],"secret_hash_for_redeeming_minted_notes":[{"start":54,"end":55}]},"return_type":{"abi_type":{"kind":"struct","path":"aztec::protocol_types::abis::public_circuit_public_inputs::PublicCircuitPublicInputs","fields":[{"name":"call_context","type":{"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"storage_contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"portal_contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"gas_left","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l1_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}},{"name":"side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"gas_settings","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::GasSettings","fields":[{"name":"da","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::DimensionGasSettings","fields":[{"name":"gas_limit","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"teardown_gas_limit","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"max_fee_per_gas","type":{"kind":"field"}}]}},{"name":"l1","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::DimensionGasSettings","fields":[{"name":"gas_limit","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"teardown_gas_limit","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"max_fee_per_gas","type":{"kind":"field"}}]}},{"name":"l2","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::DimensionGasSettings","fields":[{"name":"gas_limit","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"teardown_gas_limit","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"max_fee_per_gas","type":{"kind":"field"}}]}},{"name":"inclusion_fee","type":{"kind":"field"}}]}},{"name":"transaction_fee","type":{"kind":"field"}}]}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"nullifier_read_requests","type":{"kind":"array","length":2,"type":{"kind":"struct","path":"aztec::protocol_types::abis::read_request::ReadRequest","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"nullifier_non_existent_read_requests","type":{"kind":"array","length":2,"type":{"kind":"struct","path":"aztec::protocol_types::abis::read_request::ReadRequest","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"contract_storage_update_requests","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::contrakt::storage_update_request::StorageUpdateRequest","fields":[{"name":"storage_slot","type":{"kind":"field"}},{"name":"new_value","type":{"kind":"field"}}]}}},{"name":"contract_storage_reads","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::contrakt::storage_read::StorageRead","fields":[{"name":"storage_slot","type":{"kind":"field"}},{"name":"current_value","type":{"kind":"field"}}]}}},{"name":"public_call_stack_hashes","type":{"kind":"array","length":4,"type":{"kind":"field"}}},{"name":"new_note_hashes","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::abis::side_effect::SideEffect","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"new_nullifiers","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::abis::side_effect::SideEffectLinkedToNoteHash","fields":[{"name":"value","type":{"kind":"field"}},{"name":"note_hash","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"new_l2_to_l1_msgs","type":{"kind":"array","length":2,"type":{"kind":"struct","path":"aztec::protocol_types::messaging::l2_to_l1_message::L2ToL1Message","fields":[{"name":"recipient","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"content","type":{"kind":"field"}}]}}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"unencrypted_logs_hash","type":{"kind":"field"}},{"name":"unencrypted_log_preimages_length","type":{"kind":"field"}},{"name":"historical_header","type":{"kind":"struct","path":"aztec::protocol_types::header::Header","fields":[{"name":"last_archive","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"content_commitment","type":{"kind":"struct","path":"aztec::protocol_types::content_commitment::ContentCommitment","fields":[{"name":"tx_tree_height","type":{"kind":"field"}},{"name":"txs_effects_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}]}},{"name":"state","type":{"kind":"struct","path":"aztec::protocol_types::state_reference::StateReference","fields":[{"name":"l1_to_l2_message_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"partial","type":{"kind":"struct","path":"aztec::protocol_types::partial_state_reference::PartialStateReference","fields":[{"name":"note_hash_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"nullifier_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"public_data_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}}]}},{"name":"global_variables","type":{"kind":"struct","path":"aztec::protocol_types::abis::global_variables::GlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"fee_recipient","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"gas_fees","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l1_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}}]}}]}},{"name":"prover_address","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"revert_code","type":{"kind":"integer","sign":"unsigned","width":8}},{"name":"gas_left","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l1_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]},"visibility":"public"},"return_witnesses":[57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271]},"bytecode":"","debug_symbols":""},{"name":"get_batch_relayer","is_unconstrained":true,"custom_attributes":[],"abi":{"parameters":[],"param_witnesses":{},"return_type":{"abi_type":{"kind":"struct","path":"relayer::BatchRelayer","fields":[{"name":"relayer","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"bonding_token","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"bonding_amount","type":{"kind":"field"}},{"name":"he_pub_key","type":{"kind":"field"}},{"name":"sk_hash","type":{"kind":"field"}},{"name":"last_timestamp","type":{"kind":"field"}},{"name":"interval","type":{"kind":"field"}}]},"visibility":"public"},"return_witnesses":[0,1,2,3,4,5,6]},"bytecode":"H4sIAAAAAAAA/72YzW/TQBDF159x4sSpk5S2nAInOOFCSU4gI8EJTtw5BCV8XBopbSX45yPYdl/9PLGbyvV2pMjT8ezMm1/WyrqOurHw/8cxvqcK66hdQ54r8n1zDajmL+NHtD43H23ZQ+wsm4fcWJjWHhs/pjyXYo5fnkHHXL88j455fnk2HfP9Yk7EAr/ojVjolxmkVLxDfKBr2xafLJslqjCHemHevL1ep44qW04+85V5Md3n70buL83qG90PKtaEFf3gl74744cVa5lTQLPkxs8eZtecuFdOf6PfgHSEj6CHH6Fc7T7Lunen/d5ZpIrnosW6cz1Tl2bIVflZU2ZG5Dw31wO1a1wLOnlPahsQqy71sTDbqa7Zs8QsFsygv0fMkPNyD7O4hllEzMAqpnsWZnut6/YtMRsIZtDfJ2bIyfYwG9Qw6xGzmHwwszDbG103scRsKJhBf0LMkDPfw2xYw6xPnMBqSMwszHYWkc4W614zSwWzRHDxKee9uCeZpTXMEmIGVikxszDbW113ZInZWDCD/hExQ86nPczGNcwOiBlYjYmZhdlmuu7EErNDwQz6J8QMOV8EA8nssIbZiJiBFXJjoQEx9OffjCfk43pEtRE7Nv6QYifGTyn21PhjirkV+jDHhGI4M7Em6D+iGM5zxxTDOeKEYvidhKauKp/dW3xPmEekK2+xLnOB3fWeYPus21PFXrm4XG8WP1dfV4ulQ9IgtyPkOqosfUs5LsXZ9ypiW7ryduDXTdTl7e8KRLwNkd9Vu3hbfU/wVLXx/wkcI9YzQwVGtASq7Zm5Yt9/2GwWf6e/z5erP9P11eV0/WP6fX11vrzgRS+aLHrVZNGsyaJ3TRZ9bLLo830X3a74B/wQn2zwEQAA","debug_symbols":"zdrLSsNQFIXhdznjImfvc++riINYKxRKWtooSMm721iTCimIQc0/y2XtnI8Q1iDJyWx3q6rZ7OqjWZ6MvRMxy/uTOe6rujtwbKpDY5ZqNYaFWddPH9vFtQvzvNmuzTJouxjFRaRPi/g4hEXSjbRL+hn2cr1wDu3DogMpDeRoIE8DBRoo0kCJBso0UIGB1NJAtKZWWlMrramV1tRKa2qlNbX+dVNfVsn/ssrvdGqIwyopf3NzxWrq09ZdTT5fSM7ySMIjKY/keCTPIwUeKc5AKjKkrR2TEo+UeaSCI3nLIwmPpDzSDO0t7kryN0ieRwo8UuSREo+UeaSCI4UZ2lvil3QYk4RHUh7J8UieRwo8UuSR5mjvkvu02jQmZR6p4EjR8kjCIymP5HikGdpb3fCaQv34NUUMPFLkkRKPlHmkgiMlyyPN0N6a7EBKZUxSHsnxSJ5HCjxS5JESjlRuP96xbw5n/TDTfyItfsJMmDATJ8ykCTP5ZzPnndfqsKket+vuJ7ru3Eu96v+pO+82b/vLmfYd"},{"name":"get_sk_hash","is_unconstrained":true,"custom_attributes":[],"abi":{"parameters":[{"name":"he_secret_key","type":{"kind":"field"},"visibility":"private"}],"param_witnesses":{"he_secret_key":[{"start":0,"end":1}]},"return_type":{"abi_type":{"kind":"field"},"visibility":"public"},"return_witnesses":[1]},"bytecode":"H4sIAAAAAAAA/7VU0QrDIAw0tY0dg4097H2f4MY+wP//qumawDUtfWkMSOMZLnepSGEJktUiQo6hWJFvPhdvR65MRudT8hnw4tXvmz/cSMb1XDSudQ26kZpUF8M5Ca51D8AItE/e2uvcW/9oNFsPBfIJ9Iwd9HTy+b8TbDxF4+kGNQP45A4+Cfoqt+4Zeiv28uudG2/q4OleOS4w12Tmi3d+3sFw5kG4Nm9PcfwBKvTogds7Cz/RdEw2KgUAAA==","debug_symbols":"vdTBCsMgDAbgd8lZhrG1s77K2MF1DgSxpbrBEN99utGdem1u+ckP3ynJ4OfJJDeHCDoDPw2gLxniYkLLMZk1gRZ86CUDG+7fecTC4OG8BS1FYTt1xbc2ovqXO16urBpnAkMRGCOBgZwCQQpEUCAdBdJTIJICoTh3PPrea3iZ1Zmbt+2Ltd0zTNtTqzG9l9+mfAA="},{"name":"get_token_out","is_unconstrained":true,"custom_attributes":[],"abi":{"parameters":[],"param_witnesses":{},"return_type":{"abi_type":{"kind":"field"},"visibility":"public"},"return_witnesses":[0]},"bytecode":"H4sIAAAAAAAA/72UTU7DMBCFnd+mREWwRLAIexaO4ADmCtwgKAGxaaS0leDyERh56CfHu5o+KZrxeOx5fh4nUUckzmaBmODB2Qox4z4LfQqedFvaTXIVxOrnK5xfIy91sWvEEvCU+TkWT60fL9VSowramXi1Wv8ODPwMevh5NeZTxFJvrdX1HvNFYE0ZqCc+70SurgyspU4FzmKcr0/Dr06sZTCWehvwKM/Ah61sMC5QexW/tq7U8Y3GPtMaZzDgL/Vy5Nw5e6WW4F7Ckz1psYFWklsHdGRf58jnm4z4/lu7bwnesfbl2aiT8nQS/HcPXzhtLXb7cereh5eh6xNQyz2atKQ+Y5wiTj8LxGZY/k6kro1Ju4Tagb8iv73Wailv1LeSqTCSgM/YrbM3zj5PU/fVfGz74bMZD/tmfGtex8O23/2t+AbXU+RoygcAAA==","debug_symbols":"zZdBCsIwEEXvMusimUnSpL2KuIhaoVCq2CpI6d1t1eqiBbGo/F2GzJ95ZPEgDRX7TajzfVlR2pBaWEqXDVWHUPZ1VYdjTakoZSWirNzezl63Ee3yIqPUShuN29mZoVuUfTYzT3VrN4w2/BrsbbuKOp4YjMeB8XgwngSMhxUaEKMBCRqQRgMyaEBolmY0TTOapxlN1IxmakEztfza1Pct8pctX3GqsH1u0e7N4zInAxOLeo0W5geTAWSygEwxIJMDZPKATAkek552QeweKa3MyIXazMjYGZl4RsbNyPjPMl1xDsc8rIus/yj3d6dyM/ybu7K+HO437RU="},{"name":"claim_token_in","is_unconstrained":false,"custom_attributes":["aztec(private)"],"abi":{"parameters":[{"name":"inputs","type":{"kind":"struct","path":"aztec::context::inputs::private_context_inputs::PrivateContextInputs","fields":[{"name":"call_context","type":{"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"storage_contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"portal_contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"gas_left","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l1_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}},{"name":"side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"gas_settings","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::GasSettings","fields":[{"name":"da","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::DimensionGasSettings","fields":[{"name":"gas_limit","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"teardown_gas_limit","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"max_fee_per_gas","type":{"kind":"field"}}]}},{"name":"l1","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::DimensionGasSettings","fields":[{"name":"gas_limit","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"teardown_gas_limit","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"max_fee_per_gas","type":{"kind":"field"}}]}},{"name":"l2","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::DimensionGasSettings","fields":[{"name":"gas_limit","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"teardown_gas_limit","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"max_fee_per_gas","type":{"kind":"field"}}]}},{"name":"inclusion_fee","type":{"kind":"field"}}]}},{"name":"transaction_fee","type":{"kind":"field"}}]}},{"name":"historical_header","type":{"kind":"struct","path":"aztec::protocol_types::header::Header","fields":[{"name":"last_archive","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"content_commitment","type":{"kind":"struct","path":"aztec::protocol_types::content_commitment::ContentCommitment","fields":[{"name":"tx_tree_height","type":{"kind":"field"}},{"name":"txs_effects_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}]}},{"name":"state","type":{"kind":"struct","path":"aztec::protocol_types::state_reference::StateReference","fields":[{"name":"l1_to_l2_message_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"partial","type":{"kind":"struct","path":"aztec::protocol_types::partial_state_reference::PartialStateReference","fields":[{"name":"note_hash_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"nullifier_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"public_data_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}}]}},{"name":"global_variables","type":{"kind":"struct","path":"aztec::protocol_types::abis::global_variables::GlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"fee_recipient","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"gas_fees","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l1_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}}]}}]}},{"name":"private_global_variables","type":{"kind":"struct","path":"aztec::context::globals::private_global_variables::PrivateGlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}}]}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}]},"visibility":"private"},{"name":"round","type":{"kind":"field"},"visibility":"private"},{"name":"total_token_in","type":{"kind":"field"},"visibility":"private"},{"name":"total_token_out","type":{"kind":"field"},"visibility":"private"}],"param_witnesses":{"inputs":[{"start":0,"end":47}],"round":[{"start":47,"end":48}],"total_token_in":[{"start":48,"end":49}],"total_token_out":[{"start":49,"end":50}]},"return_type":{"abi_type":{"kind":"struct","path":"aztec::protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs","fields":[{"name":"call_context","type":{"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"storage_contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"portal_contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"gas_left","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l1_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}},{"name":"side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"gas_settings","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::GasSettings","fields":[{"name":"da","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::DimensionGasSettings","fields":[{"name":"gas_limit","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"teardown_gas_limit","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"max_fee_per_gas","type":{"kind":"field"}}]}},{"name":"l1","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::DimensionGasSettings","fields":[{"name":"gas_limit","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"teardown_gas_limit","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"max_fee_per_gas","type":{"kind":"field"}}]}},{"name":"l2","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::DimensionGasSettings","fields":[{"name":"gas_limit","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"teardown_gas_limit","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"max_fee_per_gas","type":{"kind":"field"}}]}},{"name":"inclusion_fee","type":{"kind":"field"}}]}},{"name":"transaction_fee","type":{"kind":"field"}}]}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"min_revertible_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"max_block_number","type":{"kind":"struct","path":"aztec::protocol_types::abis::max_block_number::MaxBlockNumber","fields":[{"name":"_opt","type":{"kind":"struct","path":"std::option::Option","fields":[{"name":"_is_some","type":{"kind":"boolean"}},{"name":"_value","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}},{"name":"note_hash_read_requests","type":{"kind":"array","length":32,"type":{"kind":"struct","path":"aztec::protocol_types::abis::side_effect::SideEffect","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"nullifier_read_requests","type":{"kind":"array","length":2,"type":{"kind":"struct","path":"aztec::protocol_types::abis::read_request::ReadRequest","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"nullifier_key_validation_requests","type":{"kind":"array","length":1,"type":{"kind":"struct","path":"aztec::protocol_types::abis::nullifier_key_validation_request::NullifierKeyValidationRequest","fields":[{"name":"public_key","type":{"kind":"struct","path":"aztec::protocol_types::grumpkin_point::GrumpkinPoint","fields":[{"name":"x","type":{"kind":"field"}},{"name":"y","type":{"kind":"field"}}]}},{"name":"secret_key","type":{"kind":"struct","path":"aztec::protocol_types::grumpkin_private_key::GrumpkinPrivateKey","fields":[{"name":"high","type":{"kind":"field"}},{"name":"low","type":{"kind":"field"}}]}}]}}},{"name":"new_note_hashes","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::abis::side_effect::SideEffect","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"new_nullifiers","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::abis::side_effect::SideEffectLinkedToNoteHash","fields":[{"name":"value","type":{"kind":"field"}},{"name":"note_hash","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"private_call_stack_hashes","type":{"kind":"array","length":4,"type":{"kind":"field"}}},{"name":"public_call_stack_hashes","type":{"kind":"array","length":4,"type":{"kind":"field"}}},{"name":"new_l2_to_l1_msgs","type":{"kind":"array","length":2,"type":{"kind":"struct","path":"aztec::protocol_types::messaging::l2_to_l1_message::L2ToL1Message","fields":[{"name":"recipient","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"content","type":{"kind":"field"}}]}}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"encrypted_logs_hash","type":{"kind":"field"}},{"name":"unencrypted_logs_hash","type":{"kind":"field"}},{"name":"encrypted_log_preimages_length","type":{"kind":"field"}},{"name":"unencrypted_log_preimages_length","type":{"kind":"field"}},{"name":"historical_header","type":{"kind":"struct","path":"aztec::protocol_types::header::Header","fields":[{"name":"last_archive","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"content_commitment","type":{"kind":"struct","path":"aztec::protocol_types::content_commitment::ContentCommitment","fields":[{"name":"tx_tree_height","type":{"kind":"field"}},{"name":"txs_effects_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}]}},{"name":"state","type":{"kind":"struct","path":"aztec::protocol_types::state_reference::StateReference","fields":[{"name":"l1_to_l2_message_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"partial","type":{"kind":"struct","path":"aztec::protocol_types::partial_state_reference::PartialStateReference","fields":[{"name":"note_hash_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"nullifier_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"public_data_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}}]}},{"name":"global_variables","type":{"kind":"struct","path":"aztec::protocol_types::abis::global_variables::GlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"fee_recipient","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"gas_fees","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l1_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}}]}}]}},{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}}]},"visibility":"public"},"return_witnesses":[990,991,992,993,994,995,996,997,998,999,1000,1001,1002,1003,1004,1005,1006,1007,1008,1009,1010,1011,1012,1013,1014,1015,1016,1017,1018,1019,1020,1021,1022,1023,1024,1025,1026,1027,1028,1029,1030,1031,1032,1033,1034,1035,1036,1037,1038,1039,1040,1041,1042,1043,1044,1045,1046,1047,1048,1049,1050,1051,1052,1053,1054,1055,1056,1057,1058,1059,1060,1061,1062,1063,1064,1065,1066,1067,1068,1069,1070,1071,1072,1073,1074,1075,1076,1077,1078,1079,1080,1081,1082,1083,1084,1085,1086,1087,1088,1089,1090,1091,1092,1093,1094,1095,1096,1097,1098,1099,1100,1101,1102,1103,1104,1105,1106,1107,1108,1109,1110,1111,1112,1113,1114,1115,1116,1117,1118,1119,1120,1121,1122,1123,1124,1125,1126,1127,1128,1129,1130,1131,1132,1133,1134,1135,1136,1137,1138,1139,1140,1141,1142,1143,1144,1145,1146,1147,1148,1149,1150,1151,1152,1153,1154,1155,1156,1157,1158,1159,1160,1161,1162,1163,1164,1165,1166,1167,1168,1169,1170,1171,1172,1173,1174,1175,1176,1177,1178,1179,1180,1181,1182,1183,1184,1185,1186,1187,1188,1189,1190,1191,1192,1193,1194,1195,1196,1197,1198,1199,1200,1201,1202,1203,1204,1205,1206,1207,1208,1209,1210]},"bytecode":"H4sIAAAAAAAA/+xdB5wURdbvGWaXsOwSxawLRhBhejawCOhgQDECCigmFlgERVCCZzjD6eXg5Tsv56AXvZxz8LzwXc4553zeed5xX9duPec/b6sn7L43dDPVv19tdddWV/3fq1fvvUo9mWDo2jI2CN7VMnSfiUI2CmOi0AnPOfbcwp5b2fNYe0/P49jzeJZ/AntuY8/t7LmDPU9mz1PY8wz2fBh7PoI9d7LnWez52CgU4Xme/T9eGRsXbdyV7+3uHlhQGAi7wv58YeGGvp58d8+G3r6wL+zp69lU6OvqGujr7luwcMPCBfmFYXfXQLi5Z2HX5vzQVYCy8qO8MrZNqLz5UdhryrVxaOOCj5sinhuFrmBIZlEuujx/ml4uuoMhe0D6DC+u4/Kju0LBsvKItycYsknmanXgp8vIftbe7xXEElgemqsF6qO6cvD/VsCSkccSIr2udp3i4M+wti8KgtEQoh6FcnsDOWOuRXevfBs96ixkQRj2Qmw61gIrTNlg+CVN5zGBbMfk1yjLDukGedFn44VBqYOjInLxDZUD5yXeZ4PytuH/d6W1OeqZ4khT6/jkORvG/DAoedKGQZ2szjHCdaMAjbAjF2xHDvsCOaWwMNAR7Kww/yRpPslR1ob8xk094YbeTQvCgf6evo0bF3aFYaG/t793Q6Fv88CGnrCvpy8qc2N/oS+qrtC/MRzI9/cONMpLOSmQVa50LQq8l2Kv/d9LMUK0SKHcxUGyvRRD92L5NnJilVDIixXK/WBOR9FLGUrCKSlLSwI5GZLkHzkeBt/MoHFerJaxl8a5QBAnGpWTbXwKw7vU0jDdPp8ahdOicHoUzojCsiicGYWzorA8CmdH4ZwonBuF86JwfhQuiMKKKKyMwqooXBiFi6Kw2uS1DBoHWIpSNHaH/YOG0brsXI6y8D+KO4Mhb/zRvDbdpFF/ztg04xwcHJT+n2X1DL5j08ZAWi5XVvRgWot9oDYZF5R4Ugyk+JHvNWWOly43H3aPC0qjGLlyh/TBxKDEmyLUMx541U5tI1d3iHXTcgnVQ+k5uD8I8lI+4gc5aITd/H8C3Me9N4691wF5JjjoLway9LcxPIjfXC1wb5xA6gMHATZxOY7GPG1BuVNO/AsY3gBwUDxWHE8+NG1xuC3rqoHd5+/Ztm3r5q0DO88buHbDwM5dW7Zet3br7u0Du3ahd0wEHMQIyATlxOyFPKjE8H6MI60T3tdpiCEhGQt1FuEZmS6vdPKFtqDccBDvAoaHLlQYCsqqqw3qqAVPG+CZII8n1FLKplxSepIjXpcCHM94hQpwIvBvXylAj7kxmDuCUl9HrNiHkoCR0tA4a/TBQUcS+GAuY4yXQL0KOqUrA/wnhyzHaM5BngMzpbxLgV+oi4kGV1tOlKehYltOBIwTABvh0bKhExgelB+KtXW5XLlhH+qYlhge5yDPeTaeHAy/anWox8E98UxBfgb7QEcNtFGeC6vQ1sFoG++gDXWMIm2DPsMkJZ5NZjwj/JOAZ5RnXRWeTY7hGfbfDlaGEm0FU+4UJZ5NZTwj/FOAZ5Snn9HLeTY1hmeTgGf0LuXNQr7J8K5JJx1F/98blPb/BUG5/dEcA6DuJFoDRmvAsOq0Wdhd7xhgCuCZKo5nqD8ryOag3Zhmy5IeA0xnvBrPeNUBeaYB/6Yr8C8TlK9uFeGZ6vOYPWaP2WP2mD1mj9lj9pg9Zo/ZY/aYR4/Z4OHzDG2Qb0JCMFLaVMDYAveBff4M4FWYd+02eCdBfUXAgXOTlOeHkPdBe98O/8c5cNfahsKcTsX5+fGAcSJgIzwa66i4EYTKnujgD5+zR561QxrR0AFpJD+TIY1kaRKkUZ9E2rMOLLjhiGJap8F+RLIxBdJobh1lmdb0p0EZaZYTBTzdLjwtDA/qk1aWh97NQZ5f29g1p6szZzi0dkPtzNc3pgJGyvP7ChixLMLpWrsheqfp0taNNpDrR6SN8vy1Am06NmdoM53GXLCh/QCg0ZQ70UE75fkn8Olhe4/9G+3MuMzw/9OVYc9FuJ8OvDxQnubB+eSDAGcR6sG6DwasQnWHWDft6aJ6KD0H92MzpbyUj/hBvCbsps/MsPeInb/Xxt7rgDwzHPQXA1n6D2R4DmSYTZv8B+7HwYbgaUqYZsTwqAV4RHlwfUZh7dDpWxAOqq+SzUCf7lEfwvLQpbPQn0bfIKn+9DTAyGlGfzrNe0oahSfH8OC+ilaWB30RyjOzglwZOjrE6RjyRfh4BveoEUbKc0wFjFgW4XT5IkTvJKBtsjhtQ+v7UxhtxP/JQBvlOaEK/zX2ICjRHuJ+BPJFJjhopzx52EdWAF+D2gj3pC11/J+uSr4I6noF3ZdH/4vae7qj7hmAVajuMt+PfBGqB31Cui+CL8LtJfGasJv+QnoasfP3JrH30M5Oc9BfDGTp53Nf0xlm0yY9uF8RfBF53TaEaVoMj3LAI8rj2guLcwOuPYNa4+64/Yo4tzEB7gljpT2rvG+KAjaTJEuD8g4fBMOP44/2ZKXgCb3wFLmy8o06ji95QhHxrgn8cXx7hUjvfnkc3wjRGoVy1wZyHV2L7rXybdSwzl8MdDr/xYHv/Pba/zu/KedihXIvCZLd+U05l8i3UcM6/9JAp/ObowC+8w9e+3/nN0K0TqHcS4Nkd35D96XybaSC1XgolwTyH+K5LJBVIKYTUsc0nhV1RBMvtbG5LrexND2mPS9TKPcKwbYkJRbE8CA/uis8Wa6sPM3XXBmF9cHQeacNUdgYhU1RGIjC5ihcFYUtUdgahaujcE0UtkXh2ihsj8KOKFwXheujsDMYUuQ0RXBlUJofy9p68LmfPW9gzxvZ8yb2PMCeN7Pnq9jzFva8lT1fzZ6vYc/b2PO17Hk7e97Bnq9jz9ez553BcAMj/YVIlKHR9p0rBcv6cIM+HDZSnAObh671cmVt6hfk30fSwb+FG+TKCjcK8u+jqeDfQLhJrKyN4YAg/z6WCv71hZvFysqHVwny7+Np4N9APtwiVdbGfLhVkH+fSAP/+vLh1VJlRbb8GkH+fTIF/BuIaN4mVNbGqKxrBfn3qRTwry+iebtQWRHMcIcg/z6dfP4NGJqvkylroynrekH+fSb5/OszNO8M5MYyOGYYLf8+m/APF9srFPTzw48K8u+BlPBP0E8NPy7Iv8+lhH+Cflb4SUH+PZgS/gn6CeGnBfn3+ZTwT9DOhZ8V5N8XUsI/QT0dfk6Qf19MCf8E9Uz4eUH+fSkl/BPsJ6GgzIRa/Msy/iVpzn2XYLuaMqTXu8xa4hWB/Jrf7kC2raXpPjUorZ1J0v2TXLLpNvK4W4HunyZ8bEw49wjyUrCtw58mXG5Mf9mlIDe/SDjdVyr1l1+mpL/cIMhLwbYOJflHe2/IjzA6wuy1uSEo7bl5TFB+Sfsc6wXLujFIts9hfpBpfSDfp36TcF1iZOhGBbp/mxJdcpMgLwXbOvxtwuXmNCW5+UPC6V4fDOldabr/mJL+crMgLwXbOvyjou01OsLY3JuDku29JSi/pG2v5B6xxwbJtr2nB6U9oZI8/EvCdYmRoccq0P3XlOiSWwV5KdjW4V8TLjenK8nNPxJOt9ERtyjQ/VBK+sttgrwUbOvwIUXba3SEsbm3BSXbe3tQfknb3g2CZd0RJNv2nhGUzl9I8vDhhOsSI0N3KND975TokscJ8lKwrcN/J1xuzlCSm/8mnG6jI25XoHtvSvrLnYK8FGzrcK+i7TU6wtjcO4OS7b0rKL+kba/k2Z7HB8m2vcuC0llHSR5mWpKtS4wMPV6B7mxLOnTJEwR5KdjWYTbhcrNMSW5aEk630RF3KdDdmpL+8kRBXgq2dSjJP257jY4wNveJQcn2Pikov6Rt7ybBsp4cJNv2nhmUvisgycPxCdclRoaerED3hJTokqcI8lKwrcMJCZebM5Xkpj3hdBsd8SQFujtS0l+eKshLwbYOOxRtr9ERxuY+NSjZ3qcF5Ze07ZX8JsPTg2Tb3rOC0jd8JHk4JeG6xMjQ0xXonpoSXfIMQV4KtnU4NeFyc5aS3ByQcLqNjniaAt0zUtJf7hbkpWBbhzMUba/REcbm3h2UbO8zg/JL2vZuFizrWUGybe/yoPS9PEkeHpxwXWJk6FkKdB+SEl3ybEFeCrZ1eEjC5Wa5ktwcnnC6jY54pgLdR6SkvzxHkJeCbR0eoWh7jY4wNvc5Qcn2Pjcov6Rtr+S39J4XJNv2nh2Uvk0rycOZCdclRoaep0D3rJTokucL8lKwrcNZCZebs5Xk5piE0210xHMV6D42Jf3lBYK8FGzr8FhF22t0hLG5LwhKtveFQfklbXu3CJZ1T5Bs23tOUPoOvCQPZydclxgZukeB7jkp0SUvEuSlYFuHcxIuN+coyc2JCafb6IgXKtA9LyX95cWCvBRs63Ceou01OsLY3BcHJdv7kqD8kra9kt9Af2mQbNt7blD6zRVJHoYJ1yVGhl6qQHchJbrkZYK8FGzrsJBwuTlXSW56Ek630REvUaC7NyX95eWCvBRs67BX0fYaHWFs7suDku19RVB+SdveqwXLemWQbNt7XlD6fTNJHi5MuC4xMvRKBbpPSokueZUgLwXbOjwp4XJznpLcLEk43UZHvEKB7pNT0l9eLchLwbYOT1a0vUZHGJv76qBke18TlF/Stlfyt6teGyTb9p4flH5LVJKHSxOuS4wMvVaB7lNTokteJ8hLwbYOT0243JyvJDdnJJxuoyNeo0D3spT0l9cL8lKwrcNlirbX6Ahjc18flGzvG4LyS9r2bhMs641Bsm3vBUHpd7slebg84brEyNAbFeg+OyW65F5BXgq2dXh2wuXmAiW5OS/hdBsd8QYFus9PSX+5T5CXgm0dnq9oe42OMDb3vqBke98UlF/StlfyN4ffHCTb9q6IyrhWoU+tTLguMTL0ZgW6V6VEl7xFkJeCbR2uSrjcrFCSm9UJp9voiDcp0L0mJf3lrYK8FGzrcI2i7TU6wtjctwYl2/u2oPyStr3bBct6e5Bs27syKmO7Qp+6JOG6xMjQ2xXoXpcSXXK/IC8F2zpcl3C5WakkN5cnnG6jI96mQPcVKekv7xDkpWBbh1co2l6jI4zNfUdQsr3vDMovadu7Q7CsdwXJtr2rojJ2KPSp/oTrEiND71Kge0NKdMm7BXkp2NbhhoTLzSoluRlION1GR7xTge7NKekv7xHkpWBbh5sVba/REcbmvico2d73BuWXtO29TrCs9wXJtr0XRmVcp9CntiZclxgZep8C3VenRJe8X5CXgm0dXp1wublQSW6uTTjdRke8V4Hu7SnpLx8Q5KVgW4fbFW2v0RHG5n4gKNneDwbll7TtvV6wrA8Fyba9F0VlXK/Qp65PuC4xMvQhBbp3pkSXfFiQl4JtHe5MuNxcpCQ3exJOt9ERH1Sg+4aU9JePCPJSsK3DGxRtr9ERxuZ+JCjZ3o8G5Ze07d0pWNbHgmTb3tVRGTsD+T51U8J1iZGhjynQfXNKdMnHBXkp2NbhzQmXm9VKcnNrwuk2OuKjCnTflpL+8glBXgq2dXibou01OsLY3E8EJdv7yaD84rY3P7orPFKwzT4Z6MiWdB/4lBzOPt6Gn4K2o/jTwVD/yATDL2m98elAVj7p+kwUxtr7Vgd+upAXewNZeSAd0wL1UV05+H8rYMnIYwmRXle7TnHwZ1jbFwXBaAjRZxTK/Wwg14m16P6sfBtVVGb50V1lPM2P8kqjkhoLOB+w8eds/KCNP2/jL9j4izb+UhQelxu6HxeUt7sIvu5836AyypXzka62oKTAKI+hZyL8P2PTs/iOTRsDaWNyZcUMpuXsQwuktdi0VkhrhbopbSzjyxTAQvnGAYZxgVybjgN8RcFyB3kSlF+8TYpwj4akRR5PqEXnuKDUbtL8aw1q5984iMcq8U+DTlPmBCX+jQtq598E4N94Jf5p0GnKnajEvwlB7fybCPxrU+KfBp2m3A4l/k0MaudfB/CvXYl/GnSacicr8a8jqJ1/k4F/k5T4p0GnKXeqEv8mB7Xzbyrwb4oS/zToNOVOV+Lf1KB2/k0H/k1T4p8GnabcGUr8mx7Uzr8ZwL8DlPinQSeW2ymM90D5cgfxHgS8lsR7qDx/+4wcHRzULkeHAm2HyOPRonOwXQ4D+qTKNWUdznh1MONVB+Q5DPh3uAL/MlAvlU3PhzvqlpzYNHUfUQMvjnDgOaLBvKD6PGaP2WNOF+bDEoDZ1H2keN3hgjZWN/EnYHjoOlKZFzp0DtmKzsDNY6qvA/KgnHYq0JmBeqlseu6Eduj0mD1mj9lj9pg9Zo/ZY/aYPWaP2WP2mD1mj1kFs6l7pnzdXW2sbuJPwPDQNVOZF0p0Ds61zArcPKb6OiAPtvksBTozUC+VTc+zoB08Zn3MuAckC3gU5DCspW8hnkwC8LQF7r2uMxnPTBrxFPeyHmXvcS/r0fYe97IeY+9xL+ux9h73sh4XlHhCacfb+/GQNtveT4C0OXBP8Qn2HvfpzrX37ZB2or3vgLR59n4SpM2395MhjTaNT4E0OnkwFdIK9n4apHXZ++mQ1m3vD4C0Hns/A9J67f2BkLbA3h8EaX32/mBIW2jvD4G0k+z9oZC2yN4fAWmL7f2RkLbE3ndCGskOyhrJzixII9k5CtJIdo6GNJKdYyCNZOdYSCPZOQ7SSHaOhzSSndmQRrKDskSycwKkkezMhTSSnRMhjWRnHqSR7MyHNJKdPKSR7ISQRrJTgDSSnS5II9nphjSSnR5II9nphTSSnQWQRrLTB2kkOwshjWTnJEij9axFkEa2YTGkkYyRLJm23Z4p/Z/eR51E9aBOWuKob7EDF92jHqZ3ioGsHsa6ivBM9bUDjpMSgifrwLNQHs/g3pU++XIHD/yRDLfYcgk/1ZeDPMfbBuD7HolPC+C5GJTkbCHwjPi3AHimQNugL92rxLMexjPC3ws8ozzzq/CsJ4ZnfcAz4lUP8EyBtoIpt1uJZ12MZ4S/G3hGeXqr8Kwrhme9wDPiVRfwTIG2LlNuQYlnIeMZ4S8AzyjPkio8C2N41g08I16FwDMF2rpNuXklns1nPCP8eeAZ5Tm9Cs/mx/CsADwjXs0HninQ1mPKnafEsxMZzwj/POAZ5TmnCs9OjOFZHnhGvDoReKZAW68pd64Sz05gPCP8c4FnlGdVFZ6dEMOzecAz4tUJwDMF2haYcuco8Ww24xnhnwM8ozyXVOHZ7Bie4diVeDUbeLYEyijK0DboLy4GGswz+TlLIJ3yXFmBNvTjcXxB7+LYhOjCcQ3xEsdENKbD8RSN/XAsRmNEHMeRj4tjBRpL4NiExqg4VqQxKo4VaYyK40wao+J4lMaohGl8oDZPVsD5HLoqzQ3h3Bm9h3MH9H+cLz5KHnfomm+k56MAI6UdAni05hsPYXgOcfCMrmwD8AQMT1ABz8EJw9OI9qoHz4yE4ZmcMDxTEoZnQsLwtCUMTy5heFoShmdmwvAcmTA8jVi/qwfPEQnDc1DC8ExPGJ4DEoanI2F4JiUMz7iE4RmfMDxjEoanM2F4Dk0YnsMShufAhOGZmjA80xKGZ2LC8LQnDE9rwvCMTRieTALwxO3vov9nIY3m1HAvBe2/wf1dtP8G93fRPCbu76L5TtzfdTzwhNJoThX3d9GcKu7vwnlbimk+HPd30Zwv7u+itQbc30Xzxbi/i9ZxcH8XzTXj/i5aI8P9XTRPjfu7aP0R93fRHDfu76K1XdzfRfPjuL+L1s1xfxftP8B9W7Rn4zBIo7ZG2aC2xr1X1Na494raGvdeUVvj3qtKc904J05tjfPp1NY4n05tjW1PbY17r6itcb6f2hr3XlFb41oBtTXuvaK2xnUGamvce0VtjWsU1Na494raGtc3qK1x7xW1Na6NUFvj3iuay8W9VzSfSm1v2uKGXOn/9D72eaoH+/xJjvoWOnDRPeo5jb0uGVZXEZ5xH0mGYdzXeMYmDE9rwvC0JwzPxIThmZYwPFMThufAhOE5LGF4Dk0Yns6E4RmTMDzjE4ZnXMLwTEoYno6E4TkgYXimJwzPQQnDc0TC8ByeMDxHJgzPzIThaUkYnlzC8LQlDM+EhOGZkjA8kxOGZ0bC8BySMDwHJwxPtoF4aD6MyubnypTOMA2elesRLzdcYGii+Up+honqy0Ge2yyz4/avdzP+0JwinmEiXlHeLNSF7ZaFPPT/vTadl2Hy6/Bo6Mxdl3i5Q7ynOWXiPT/flYM8T67C+wI8F4MS76nM9mD4WStjK8nf6gUsT7d1ackz9u2cLZfjwDOaL82WsD0rW6Jnlv3/TKDnaJZmaDhGnoZBfUB1Udn0TPUZjLTGcjTgmamEh2wF6ctDHPyh+1kOnuF6UNbx7hhGy/ig/IwsyTG1peu87SugLRfAb5gpyFkPYssGbjnT6d9DMo46tAj1uM7UvtHyxbxH609jgnK7R+9hf6ey6Z0jIb3AynbpDiW9WcgEw8+0Uj1o1wl3axCvAynPW6rQEYrT4dbT/Ewp8vr+EeppKhPPRhdUaRvSGRwPp83koTXSVpYHZZDyvK9KG80Xp2OojWi9l5+RnQ8YKc+HqrTRPHguBqU2wjOy/DxpFu7zUFYW3qP/kx+TZ+VmAreMEL97HBgrtQnl+XSVNlE4p1rAvREB4A4YbXTNAzwnyuPpwv0gteDBc7zyMjvkVyrQmccztNK/g3IC49U8xqsOyDMX+HeCAv8ywfBz2fw8scfcGMwGD/V13HdD+boSgpHS8LsGGn3Q0N5py8LvEPwUxlUKPleX4QOO44qAA31RynMy/P7wL2FcRf/H/U0FltZIn4SeqT78Fgr6SAp+fIh+PJXt+g6LwjdF8ko8HpSTuG+KoE9Lef5axV/i3xQh+UF/iXiFfU9DfpT8mS7UMcQzwu/6psjDVXh2YgzPUMYb9E2RAvoMguV2oS2r5ZsiNMFQ6zdFiGfVvimiMLcQ4p5exBgwjHThfIOGDcT9xLXgUf7mSoh7t2vBg36MwrdaQtw3XgueOYBnthKeOXXgwe+9HK+EZ3YdeHBP/3FKeI6vAw9hMH4et88mjfrGfEgj+US/mmSkG9KonRZAGvEqC2mEF78LRWk4jzqHpWn1wUxQLmNFeMZvChEtc3Tx9CEePh+L/V9rzYHam+ZMe1ndaIvmWltk3iPZGhPDQ9dcL72D87E9rOy4+Ric5y3K0B8qjTkG25TOgrQw/iBPKE9YhfZjFTBqrQ0a2o8BGk25sx20U57eMSU+9dl7tJPHAx/PdPyfrkp68FjgpcL3mcq+u0/tfZSj7kWAVajusm9D0Vwp1UPpObhfBn2Y8hE/iNeE3ehBWtdC7Py9E9h7HZDnaAf9xUCW/qMYnqMYZtMmi0DOSI607LRrHZR4NAd4RHlQt/Hv3fHvvJk81E6tLA+9m4M85+8D3YI6gPoDYTsWMFKeVVUwKqxV9ynRXtb23O4h7ZRnLcjlJaDfqE1xrLjF8X+6Kum/Y4CXs+RpzqNOoPae5ah7MWAVqjvEukn/UT2UnoP7q0D/UT7iB/GasONeBcTO35vD3uuAPEc56C8GOvqfyp7FMJs2uQzkbAvoP41xk0sncx3VAXm6gLd8fZzyo/6j/tTK8uD6OOXZUUW3KMw7OPUfYUN/m/Ls2kf6T2vdgeu/4x20U54bQS5vBv3Gx1/m/09x/J8ur/9q039PrqD/uB6rVf/NZu8lUf/dCnL2lAb4f0fF8AjnXyjPfODt8ew9194Taie+z4HezUGeZ1XRLQrr+E79dzyjFfXf8/aR/tPYw1DJ/0PaKc+LQC5fAvqN2hS/pX2f4/90ef1Xm/67t4L+43qsVv3Xxd5Lov57OcjZfaD/NNYVXPqP6yjUfycCb/kaIOWv5P8dz8pB/+/+KrpFYR3Dqf8IG47RKc+795H+01jDcek/1/wE5fkAyOWHQL9Rm+LvyXze8X+6vP6rTf89WEH/cT1Wq/47nr2XRP33UZCzz+8D/4/rKNR/3cBbvjZF+VH/UTu1sjz4+xqU56v7QLegDuDrH7g2QHm+WQXj0QoYlWgva3vu/yHtlOd7IJc/AP1GbYrrH793/J+uSvpPeQ4+jzqB2ts1/6/9myyk/6ge/K0Wuv8d6D/KR/wgXuNv/5EuQez8vRPZex2QZ5aD/mKgo/+pbP6bNKZNfgxy9nvQf1r7A2fF8AjXPygPnn05jr1Xz/oHvYvrH3+rolsWyNPv1H/HMVpR//1zH+k/Bdqd+q/LQTvl+Q/I5V7H+gbuL2zPDf8/XV7/1ab/JuZKeavpsVr13xz2XhL1Xwb2dbfDGUut9Y9ZMTzCPVmUJxuUeMvXPyg/6j9qp1aWB9c/KM90S2sjdQvqAL7+gWNDynNQFYwKezb6lGgva3u+/oG0U57DQS6PBP1GbYrrH/Mc/6erkv5THoPlUSdQe7vGfycDVqG6Q6yb9B/Vg7/JR/cngv6jfMQP4jVhx98xRuz8vePYex2QZ5GD/mKgo/+p7MUMs2mTWSBn80D/KZz1cepkrqNwj1Ae0mbae/xuMr2De0O19DbXv655S0pD30T53H7Zt1+obH5uH/dctrI86HtRnsUV9G6b4138DkbcmaiQpWmus/DfOua/0YtnotB+8vc67T2eOaYyWlke11mgM6vYL/nzKUPnu+s5e3NOBYxYFuE8idHbwLM3g2dk5jLaOh20UZ6VVfivcY5HifbQtSe7x0E75VkDev1i8A+o3fDs41WO/9NVyX/AfegKawZ5HNPz/YJY93GAVajuEOsm/4HqwfV0ut8M/gOfqyBeE3bTZ7jf73ovZO91BMP9P825ar7ndDbDbNrkUpCzqxrgP8yJ4VEn8Ijy4PlJrT3t/Dwn4cDvT1D7c5uB6/6UZ0cFnYU+Bv7uAre3SrotRFqobH4uBM8P4W9NdDKa+Rlv+hZ3ZyBnC025R4jzIVxg6DksKL8q6Un8XcbDxfHkwwlB6VvUVw3sPn/H7oFdGcBFWA9kWDNBOe69kAflLwv3Y+DdXDCcB62OtHGOtAmOtImOtA5H2mRH2lRH2vRg+DUD7g+E+4Pg/lAo42CWF+vea+NxwXBejmNYJP63V6FMif+Zq5PF4+C5kpyZvkT9A3+Lh8YYh0MayeERkEbySPnHB8P7oqgCNCC+5Kgky+rqyvd2dw8sKAyEXWF/vrBwQ19PvrtnQ29f2Bf29PVsKvR1dQ30dfctWLhh4YL8wrC7ayDc3LOwa7OtTNKZ+bxcWXlNmj8tSPMXBWkmJUbC9kAwJMSfs/GDQalz/l9QUnrEn0/b//8f5PuyLW+YsEJaUYgXXwhkeUHXV4LSj/i0OvDThbyQ/NBSEJTapAXqo7py8H/8Mb6MPJaycZOrXac4+KOmqLBwqTKNEH1FodyvBnIKRIvur8q3kaoi/ZJgWV8LZA1orYr060G8Iv065PuGI1/G/v8bNjaK4JtB+SXNc0k5/tY+4vm3K/D825DvOxV4/h3g+Xcd+b5g//9dGxtc34MygkBWt3zNUe5o2+f7gawekKbb0PwtBbp/kHC6TR//vgLdj2tJNt2m//xAge47W3Ts3RhhnD8U5KVgW4da/OO2Kz+6K5wn2BY/CmRtl6HVlNkZlGxJLbbsx0G8Lfsx5PtJneX+tEK5P4V8PwvibeTPgpKN/Hmd9f+iQv2/gHy/rFD/L6H+XwXxNvpXQclG/xrKMFfRxvnRXeH3gQdY7mjl8AkJ19k/sDyVpvuJKdHZvxHkpWBbh5L8a9QEz4NyZeVxIuW3Nv6djX9v4z/Y+I9B+S/6BECXCJ7ufO/gxA2sruKFs8KUx0xITYD/0w7PLL5j0/BXvcfkyooZ+qV3WN2ktBabRhNKU4LyXaTEixZpXkTcwBlvuiqtPCGenDyewZWnabYss/K0Z9u2rZu3Duw8Z+CmFf1bd+I8F8HOMdiuxQGex1xZR9reQI3VIV/gKsIzsrVVvu7BjxmPlS+3m8w80VAE/FRfDvLQYlnc5iDe5flcazvjFcUKtA1+tG+8Es8mMJ4R/vHAM8pzeBWeTYjh2VjgGfFqAvBMgbbBjxm3KfFsIuMZ4W8DnlGeo6vwbGIMz8YDz4hXE4FnCrQNbvBqV+JZB+NZG9BHPKM8J1ThWUcMz7BM4lUH/I/u0Vy2Ay5Kox+bHgdphAXNL617TIS0rKPeMYCL0kjfToI0wjAZ0tAUm0t1ETgI5P03M1//k0B+LPCUhI+BzDzlbxTofmpKxkB/EuSlYFuHkvzjcxuGZuO4/cHGfwxKcxZ/DuqbC/lLED8X8hfI91cba/TbvyrI79/kMA6OQYk3eEnz4s9BsnWNaau/Af1SWNHQ/D0oGVil8XAXjod5u7rGw2hcMzBGHovvsPKmQBrRh2O97Tt2b918Ew33Npkdh8gG1/htb1AOF+/HONL2Qox2P+cglf6nbvcDRphU2X8PdOyV9DoBzu2PVsf9QxAXrROYMjuD+mzIQ0G8DXkI8v3Tlsd3vWrIg+BGuLwDbp1l9/Rs7u5fsLl3Ybhh86ZNPd0DXfmNGzb2bujuwYkdLV48oMALaYyfSwFGyTniQLG9/xno2OZ/BaVBo5JtXoC2me+Er9U2q8zVdg9N9mhMlOIAvAXoGltOatmAfizEODHQ6vBDWh1+CA30h/yQ03YO9O8e7oVQJXGzy1iRuVxHG1C5tTKCqDyKXTPZY9izIXIcw4eCQf9LrSfzryAdngx6H6P1ZB4O5D0ZU2ZnUPJMqHzyZPI2Dm1c8HFTxOac3b+D4XLxb8+fppeLR4LyowfeOx/CmE8BxjDQ8Xr/E5SWVJS83m70erm84ahasM48ju7FyrXeLDl4hBsdNPRgcUlzjMNzHePwXKktruvfeM3SnVftuXZg++5dtcydYaemSsawvJU80MTNoWWFy34kkPPo/iOHa3D+nY8FsdGk6Bc8MCowZzT82tjbPzCwcGOfJg8eUeKBNM6HU4JzXJBsmaILFSCd2P9vMKQA/2f/kYlCNgpjopCLQksUWqMwNgrjojA+ChOi0BaFiVFoj0JHFCZFYXIUpkRhahSmRWF6FA7IlP+KI9IkQld3uLnSfJLRnzRnRHGnTSfLM4al037GHFgmk07zNi2QXut8VZnFhDQyKGMg7dEpFMc8UQusTdGXAJTmwnp15sLChUqb2x5dQw+C4ZvQcIMdeSSCtiDEusnBGA91DrYn3OPXMygf8YPkCTe7kUyMr/AenzfsgDytDvqLgSz9YxkevgHQtAHNLeOc5cGAbYI4tnAhTicGwL+A4aVLeUPh4H5gonlg+/V7BvYMrNizYdvWjcv2bN+4e+uO7af1b9uGyprAH8zAuzxZyoOKMAv3OPTAOVrc0I7vur5csNfGnTHPiM8wHxka2DTaAIDDA8KJO+P4jjxVz7tRu0D2Bon2GEK6QV7MsEw4MFMShjgh42k5By/xPhu4t65nKqS1OeqZ4khTExZyCwxjfsjqGCNcFwrMCIdtBTtsCw3eUZb16BDwwEw6FjIkaT7IUdaG/MZNPeGG3k0LwoH+nr6NGxd2hWGhv7e/d0Ohb/PAhp6wr6cvKnNjf6Evqq7QvzEcyPf3DjTq6NNBgu2EeA/O+G/b2Gv//7aNESLT4NLlHiLYObXoPiQj3kZOrBIK+ZCMfLnPaNBe8fwIL8IpKUuHyinN8BnCe8WNgjP4ZloeNsJr/V+gIwOBLM4C8uIwy4TDvdc6eD3qtRrG/DcoTW4dnhleqbQXiwI00s45sHnoOkywox+eEi9WkuYjoKywr6tQWNBl8vVtyofdmzYW+gqFTRu68xvz/RsLAwu7w4WbuwvdXRs3bdwQldkfbs5v7t+4cHPfEK5GebFHKHmxR3ovlq7934s1QnSkghfbmXAv1tDdmRIv9nCLVbrcmcIKxHRQU2Y2KBlSs3r2yqBxXtkYJeMlJCfOucRZlglHea9siEkkPLPsXCI9GwZ1sjqlvbIxo1dcj84tzhJUgkelxCuTpPnoFM4tHq3klR3jvTK69n+vzAjRMQpe2bEJ98oM3cemxCs7ymKVLveZKZlblJSl4wTnFp+pMLd4XIPnFnMp9GKPt0yY7b3YISaR8BzPvNjZDfBic4Je7PGCHX12SrxYSZrnpNCLnaPkxZ7gvVi69n8v1gjRCQpe7NyEe7GG7rkp8WJnW6zS5T47JV6spCydKOjFPlvBiz2xwV5sSwq92HmWCfO9FzvEJBKeecyLnd8AL7ZF0IudJ9jR56fEi5WkOZ9CLzav5MWG3oula//3Yk3LhwpebCHhXqyhu5ASL3a+xSpd7nNT4sVKylKXoBf7XAUvtqvBXmxrCr3YbsuEHu/FDjGJhKebebE9DfBiWwW92G7Bjt6TEi9WkubeFHqxvUpe7ALvxdK1/3uxRogWKHixfQn3Yg3dfSnxYnssVulyn58SL1ZSlhYKerHPV/BiFzbYix2bbC+WrrLTSidZJizyXuzg9agXaxjzX1aHtNc6VqAz0umkkwQ79qKUeK2SNC+GstJyOmmxkte6xHutdO3/XqsRoiUKXuvJCfdaDd0np8RrXWSxSpd7irACMR3UlGniRnld41LodRUtE5Z6r2vwetTrKmbKz4gvzQyvVNoLGyfohRUFld7SlHhhkjSfmkIv7FQlL+w074XRtf97YUaITlPwwk5PuBdm6D49JV7YUotVutwzFLywMxrshY1PthfmXMFdZplwpvfChphEwmMYgyu4hkGdrE5pL2z86BXVoyu4ywSV3pkp8cIkaT4rk74V3LOUvLDl3guja//3wowQLVfwws5OuBdm6D47JV7YmRardLkvTMkKrqQsnSOnNMMXKqzgGnwzg8Z5sRNS6MWea5lwnvdih5hEwnMu82LPa4AXO0HQiz1XsKOflxIvVpLm81PoxZ6v5MVe4L1YuvZ/L9YI0QUKXuyKhHuxhu4VKfFiz7NYpct9UUq8WElZWinoxb5IwYtd2WAvti2FXuwqy4QLvRc7xCQSnlXMi72wAV5sm6AXu0qwo1+YEi9WkuaLUujFXqTkxa72Xixd+78Xa4RotYIXuybhXqyhe01KvNgLLVbpcl+SEi9WUpbWCnqxL1HwYtc22IttT6EXe7FlwiXeix1iEgnPxcyLvaQBXmy7oBd7sWBHvyQlXqwkzetS6MWuU/JiL/VeLF37vxdrhOhSBS/2soR7sYbuy1LixV5isUqX+7KUeLGSsnS5oBf7MgUv9vIGe7EdKfRir7BMuNJ7sUNMIuG5gnmxVzbAi+0Q9GKvEOzoV6bEi5WkeX0Kvdj1Sl5sv/di6dr/vVgjRP0KXuyGhHuxhu4NKfFir7RYpct9RUq8WElZ2ijoxb5CwYvd2GAvdnIKvdhNlgkD3osdYhIJzybmxQ40wIudLOjFbhLs6AMp8WIlad6cQi92s5IXe5X3Yuna/71YI0RXKXixWxLuxRq6t6TEix2wWKXLfVVKvFhJWdoq6MW+SsGL3dpgL3ZKCr3Yqy0TrvFe7BCTSHiuZl7sNQ3wYqcIerFXC3b0a1LixUrSvC2FXuw2JS/2Wu/F0rX/e7FGiK5V8GK3J9yLNXRvT4kXe43FKl3ua1LixUrK0g5BL/Y1Cl7sDuvF4iVtODOCMvTfQEeGpPv7gQIyVFjYE4a9XQsrtc1o+fmwIM1p+djUw4L8uy4j208Mrdc5BgPSPHhEkAcHZNLRJxv1wwCj5ec4QZqXpoTmjCDNmSakOWhQHxwtzdcL4NzY2z8wsHDj4I824aDQlG0GY4fbeEIUdlo/1uT7FtC0F+KszX+UjWfbeL6Ne2xcsPnH2fhhG59n/3+hjSfa+BIbX2njSTYesPE1Np5q42k2nm7jR4Lyen3sYx/72MfNGZ8QhV1gz2jeg+zYTms3dpFdicLujHsiMQjk/etQrqyyCeI9foKYrv1/gtgUuscxUZrESV1T6OcCeSf5hpQ484+Rw9nFnXlSao+xyuzAKNyYadxy+8KgMW2QH90V3igoK6hcb7JAb7bxLTZ+rI1vtYboeJv/tujh9ijcEYXHReHOKNwVhcdH4QlReGIUnhSFJ0fhKVF4ahSeFoWnR+EZUbg7Cs+MwrOi8OwoPCcKz43C86Lw/Ci8IAovjMI9UXhRFF4chZdE4aVReFkUXh6FV0ThlVF4VRReHYXXROG1UXhdpvSB6HFAY1GqHboLmwd5Z/cscPnMwv8o7gyGtiM8mtemm7RHDbtNM8bvkKD0/yyrZ/AdmzYG0nK5sqIH01rsQwuktdo0NF7jA2ke5ReYcidIl5sv9JlyJ4qXO+SEtAclfhWhngnAqw57LzqJBXVnbKB6KD0H9wdDXspH/CDnaSK8T1thOiq8N5691wF52hz0FwNZ+icyPIjDXC1wbxwf6hcnArax4tgKm9qCckeQ+BcwvHSNBTyt4njyoZHFg2xZVw3sXrFnw7atG0/v391/0c6BgbVbd28f2LULnUHCfiLDngnK6dgLeVCn4f0YR1onvK/TBkPygfaqCM/I73HydedV9GMkV4Ym0iukbwg/1ZeDPMfaeHIw/MKyCGcL8MVc7cAr1GfytOVDU26bEs8mMp4R/jbgGeU5sQrPJsbwbDzwjHg1EXgmT1u+MC4o6Xe5cod41sF41gb0Ec8oT3cVnnXE8AzL5Lpbh7Z8lyl3khLPJjOeEf5JwDPKs6gKzybH8Kwd4g5WRhbqQpubhTz0/702nZdh8uvwKN9typ0iXu4Q76fasoj3hJ/qy0GeMxjNeGFZhLOF8a4d3qW8OrTlC20MD2EMGMaA0WvwTBfHU+hrC8onkarhmQ54ponjGbIb8nQO2fADbFmSk4WGVzMYr6YwXnVAngOAfzMU+JeBeqlseqb6PGaP2WP2mD1mj9lj9pg9Zo/ZY/aYPWaP2WP2mD1mj9lj9pg9Zo/ZY/aYix6zx+wxjwizwUPrvYS1DfJNTQhGSpsGGHOAzVxm3fyfkKaw72LwkOcUqK8IOHDfBeWZkinlfcSmtcP/pwI97SxNaR9P2V5OKrsdcBBG3H9AeKYq4ZnE8Exy8Ifuxzp4NgHSiIaJkEb7pSZDGskS7iElOcO+QP10EqRlHfho7yHyEvc6U8z3cA3uebb3KN9E53RII1k/AMpIszwp4Olx4eHtkAlK/G9leXDPGeU51PZj1x4enX2dQ/uMSB74Hq9xgJHyHFkBI5ZFOF17vIjeabq09aHe53oUaaM8x1Th/3QFjDq0D/WXA4BGU+4kB+2UZw7YkLn2Hvs32qNFjv/TlWHPRbifDvUfKE/z4D6kgwBnEerBuvHcgFDdIdZNe8qpHkrPwf1JmVJeykf8IF4TdsNj8lMQO3+vnb3XAXlmOOgvBrL0H8jwHMgwmzaZD3JGcqS1j87lK6PeJR5RnvHAI4V9j04fhHBQfZVsBvp+lOe0CjoL/W60lfQu2mx53TZE7/ignF56xrEKtwfo0xDN6HdzHSMK2Dhd5qBfkdXBv7g32oOkgocYw5szcrheL4cr36hT+JKYEe8bMv4Uvr1CpHe/PIVvhMg0uHS5bxTsnFp0vzEj3kaDnX9MMPySxi95GlwT581KOGXbrVCmAO+NHh5n78exukTq68534ylyLi9G0T168nsEp8jRk8jCyXKcFRnDTpZPgbQM0E4KtlOK9nDohwPGlpMxWHY2KM0iUL10umm8I7/OKfN8iLNBdFUa4SFfaWYsCzxUOIE1KK/8lNokhgc9eulR32QoF2duKR1PyHUGpQtPceEsIl1TgX9THP/Hk/ITHe/wk/PkGPCTYNS+eMpuKtzTNbEC3n05a9sSNGb2kZ8sxtlgc2Gf5X2ZMPO+3O7Ir/Rlh8G+jO1prkp9GUeMJL+kX5VG7HnXjN00hgdPsUn35elQLs6gUTrOFvYFpQtn2vipVHPRDEM2GD7Tb66pUO9kxzt85p36Mp/doPbFVQfKgw765Ap4NVfh+OzwNEarafM5gEPBXlT8ygbyQGMGqC0ob3dzVeqDUxx4BGU+3xEMP1Vs6pqsRHs9p34Jg2v1GDF2ymHM48oZ+hTLAC/OhHdCfvzYEeU5D/Iut/d4yh1X+/gpd/Rx0Z9xrcShf6rt31A96L9QnlVA782ATaGtQmyLjC2b2gAx449wdQbluo9iyrOWvY8XlkX1oSxQ+jRWH/0P+UV5Lq1QX5aVZa6irSPORuJXYHDHSNHe50d3DVtVQiwzIJ3y9FegD8vidIx3lLWpxrKCoNyvRf+BsKL/0BqDAVdxse3wHaSZ8lxdBeeUmPraHWVdW2NZQeC2/+3B8P6KMmrqwtl/nETU8rEQB7bbNAf9u21seHWTA39LDH60a7jKPE2BJrRP0xx4G60LqWxux1y60KWbKM/t7H282hzvcjtZdlO08WgnQN+YkWWaUbL3ZoY7IllF3KMt6z5BHjRqhUZy8jMLON9kgb45irfZNKWJyi6cqOQ8c01Ijg3Kt5FlHJ+wzLKJzymOfONKRYpOPppyW6TLjSaQDW40qtQOJn1COYsenQgZ58iv9Vk23PZGV6WBCGHDbX/YNgqfgszjxBc5Ch0MDxoTaSM9CcrFQQBuQaD7I4PShc418QonzqYA/yY7/j8R6m1zvNPO8tFECHeEqH07IKY8uGWprQJezW0g/PNx+ElPc7UE5YNdjcn9StszkAcKn6wb7IPY7uaqZTIS8UiutHcAHuWtoyEujtRCO362Fj9nSxg1PkWLuq4WjB0OPJK7DzqC4Z/v1VpQwoVE1MEFqDcnXm84qPNboL4i4MDJCsqzBPL22nv8zDHKM/98Z1swfBEHt4bh4kbW8S7hGg9xO2Cj9zOAndOEg03tz0nnGJYOSKc8p9k4brDdHkPHOEdZy2osKwjK7RVu7+dbxV0LRntZXuyzkyq8x+/55yBRH+YcmND+yvfB8r5AZfM+iXxsZXlwUpbyXGjjWtu3BcqmPOjf4DsoT5Sn2mTi5Jj6xjnKWldjWUFQLk+4/b6dlZENhm/P38vyojxVeo/f84lYl+1y1YM+rZj9CIc2zDy6EcTBC7QveERAw/dBPURl82M9KP9ctl22oNKkY5vjXbRnGenBvpmguDdTTqBAuSq73wzO+zLyE1VvySSbbjNx8hYFut8qSDdN0Jky7yBhFebDm5X48DYFPrwN+ECX1A/B22tQLmosK6zy//ybBSc9357w/nSzkhy9rkWXbgk993YFul8vTDddWeF2F2yfUJLmuN3XQZ30V2mnsmMBGjZKih+j4UEVmGU7pu83vo+9b+Yd0x0ME/GjRZof1qHGqwj3LQ48YxKGJ5cwPJkE4GkL3Its9H9cRKMBOv4OHN9Vj/KPdfDJKJT/sRCHjvqyjvpaHfkawU+++4svwLUDjtaE4MklDM+YhOHJMjz4/xb4P/4oMi4Ommc+EYR9CBc2ed8YH/hTL3hV0ln+1EvlUy9nBaXLn3qpjb+1nHo5CXD4Uy9uGvypl8r8wbr5jkzXqZf1Qenyp15q428tp15WAQ5/6mU4HkGZ96de2BV36mU74K3n1MseyHu9vd+fT73cDPS+GrCl5dRLpZ3efKzSGYz+1MtdFerLBuk/9fKUCvRhWbWcenl6jWUFQblf2+hTL8+pgrOeUy/Pr7GsIHDb/7SfenmpjQ2vXuXAn+RTL6+C+0bqQip7tKde3sDexyvu1AvaybKbohChkpsJaDH5/sxwR0T6G2eSi8n3Cy4mv6MOfu6LTzKZ9n6HwqLqOxXk6J01bEoYLW7JjQSScvSuOvhZrS4tOXqXghy9W0GO3m3lqFEn0iQ/G5YFnO+xQN+b8SfS6rr8ibSyq9IkgT+R5k+kFQNZ/voTaf5EWq20+xNp/kSaP5FWP0MzgT+RFvcev/cn0vyJNHP5E2lNeCItYDdFIUKTfirL4HuPwoTN+xQmbN6X0TuVZfjwXgU+vF+BD+/PVJ8AzY/uCt8jOJH+XsEJ0A8kvD+ZST6NU1n3puBU1gcU6L5PmG66ssLtLtg+oSTN+8OprPdkdGSgXh5UgVl2KuuDGX8qy1z+VFbtePyprOF4/Kms+vjpT2WNHo8/leVPZeX9qayq/MG6aZHUn8qS5a8/lSVDgz+VVZk/WDf1ZX8qS5a//lSWP5VVK+3+VJY/lVUNmz+VVa5H/amsoasY+FNZVKY/lVWiyZ/KKvEJ8zT1qawPZgL1U1mSi8kfFFxM/lAd/NxXp7I+pLCo+mEFOfpwDZsSRotbciOBpBx9pA5+7qtTWR9RkKOPKsjRRzOlU1muhWtp3mh98tMvggfBx/wi+ODlF8Frx+MXwYfj8Yvg9fHTL4KPHo9fBPeL4Hm/CF6VP34RvFS2XwT3i+D5UV5+EdwvgvtF8NLlF8H9Ijjm84vg5dj8InjgF8EDvwgeBH4RHPH7RXC/CF71okWnj2WqL4LnR3eVLTRJLqiP+uSu0gnbOvlXdeH/Y4I0fzwjKI8tcri0+svHFRZ/P6HQDz+Rqb6JID+6K5T8tKvkhoS3NagfjhanZD/8pGA/lOafRj/8pEI//JRCP/yUox9mhXHfKyhHnxaUo7R/DvgzFuhnM/5zwHVd/nPAZVeliTn/OWD/OeBiIMtf/zlg/zngWmn3nwP2nwP2nwOun6GZwH8OOO49ft/C3vGfAy7/HCvl8Z8D9p8Dzo/uSt7ngKUH+/dFBX46U06gQLkqE1WEVXqi6oFMsuk2EycPKND9OYUJus9l9D6F/FklPjyowIcHM/oLBp+pHXfVRazPCk56fj7h/elGJTm6X3miX0LPfV6B7ncoLRBlhdtdsH1CSZr3h08hfyajIwP18qAKzLJToF/I+FOg5vKnQGvH40+BDsfjT4HWx09/CnT0ePwpUH8KNO9PgVblD9ZNC8T+FKgsf/0pUBka/CnQyvzBuqkv+1Ogsvz1p0D9KdBaafenQP0p0GrY/CnQcj3qT4EOXcXAnwKlMv0p0BJN/hRoiU+YJzWnQCU3E9Bi8hcyQdVToKNdxJNcTP6C4GLyF+vg5744xWja+4sKi6pfUpCjL9WwKWG0uCU3EkjK0f/Vwc998SlkI0f/pyBHX1aQoy9nSp9C5npJgzc3C9KQBZxfsUC/mvEn0uq6/Im0sqvSJIE/keZPpBUDWf76E2n+RFqttPsTaf5Emj+RVj9DM4E/kRb3Hr/3J9L8iTRz+RNpTXgiLWA3RSFCk34qy+D7isKEzdcUJmy+ltE7lWX48FUFPnxdgQ9fz1SfAM2P7gq/IjiR/lXBCdBvJLw/mUk+jVNZ707BqaxvKND9HmG66coKt7tg+4SSNO8Pp7K+ktGRgXp5UAVm2amsb2b8qSxz+VNZtePxp7KG4/Gnsurjpz+VNXo8/lSWP5WV96eyqvIH66ZFUn8qS5a//lSWDA3+VFZl/mDd1Jf9qSxZ/vpTWf5UVq20+1NZ/lRWNWz+VFa5HvWnsoauYuBPZVGZ/lRWiSZ/KqvEJ8zT1KeyvpkJ1E9lSS4mf1NwMflbdfBzX53K+pbCouq3FeTo2zVsShgtbsmNBJJy9J06+LmvTmV9R0GOvqsgR9/NlE5luRaupXmj9clPvwgeBN/zi+CDl18Erx2PXwQfjscvgtfHT78IPno8fhHcL4Ln/SJ4Vf74RfBS2X4R3C+C50d5+UVwvwjuF8FLl18E94vgmM8vgpdj84vggV8ED/wieBD4RXDE7xfB/SJ41YsWnb6Xqb4Inh/dVbbQJLmgPtqy3q90wrZO/lVd+P+eIM3fl5OhEPk3Wlxa/eX7Cou/P1Dohz/IVN9EkB/dFUp+2lVyQ8IHG9QPR4tTsh/+ULAfSvNPox/+UKEf/kihH/6oAf3wRkE5eqxgWT8W5GejPi38Y2EZoOsnmeGLuYGDpnFBaaJC8pOUKHctUB/VlQvcC5UZeSwh0utq1ykO/gxr+6IgGA0h+klGvtyfCnZOLbp/mhFvo3yjdrA9NqPjOEjjvFEJp2y7FcoU4M+ih8fZ+2beweZ3P5QurtSLcO93P1Te/dAZlC6/+6E2/tay+wFXgfzuBzcNfvdDZf5g3Xxm3rX7oS8oXX73Q238rWX3wxzA4Xc/DMcjKPN+9wO74nY/LAO89ex+OA/yLrf3+/Puh1VA782ALS27H6p9r11698OlFerbH3Y/9FegD8uqZffDphrLCoJgn+5+uLoKznp2P1xbY1lBsH/ufthtY8Ormxz4k7z74Sa4b6QupLJHu/uh0k6wuN0PaCfLboo2Hu0E6E8zskwzSvZnmeGOSFYR92jL+rkgDxq1QiM5+ZkFnL+wQH+Z8T/+WNflf/yx7Ko0EMGjcTjZQ//zP/5YuvyPP9bGX//jj/7HH2ul3f/4o//xR5ysoDz+xx8rMzQT+B9/jHuP37ewd/yPP5bK8D/+WP09fs8nYv2PP5bQoB6isrHfmwvlX/3HH6UH+2aC4meZcgIFylXZ/WZw/jwjP1H1q0yy6TYTJ79SoPvXgnTTBJ0p8w4SVmE+/FKJD79R4MNvgA90SW9L/0XtuKseWfql4KTnbxPen25UkqMPKx/rkNBzv1Wg+yNKx4Gywu0u2D6hJM37ww9f/iKjIwP18qAKzLId07/L+G9+mst/87N2PP6bn8Px+G9+1sdP/83P0ePx3/z03/zM+1MvVfmDddMCsf/mpyx//Tc/ZWjwp14q8wfr5jsy/Tc/G3fqxX/zs3T5Uy/+m5+Yz3/zsxyb/+ZnuR713/wcuoqB/+Ynlem/+VmiyX/zs8QnzJOab35KbiagxeTfZYY7ItLfypNcTP6d4GLy7+vg5774JJNp798rLKr+QUGO/lDDpoTR4pbcSCApR3+sg5/74ocvjRz9UUGO/qQgR3+yctSoE2mSnw3LAs4/W6B/yfgTaXVd/kRa2VVpksCfSPMn0oqBLH/9iTR/Iq1W2v2JNH8izZ9Iq5+hmcCfSIt7j9/7E2n+RJq5/Im0JjyRFrCbohChST+VZfD9WWHC5q8KEzZ/zeidyjJ8+IsCH/6mwIe/ZapPgOZHd4V/FpxI/4vgBOjfE96fzCSfxqmsj6fgVNbfFej+hDDddGWF212wfUJJmveHU1l/zujIQL08qAKz7FTWPzL+VJa5/Kms2vH4U1nD8fhTWfXx05/KGj0efyrLn8rK+1NZVfmDddMiqT+VJctffypLhgZ/Kqsyf7Bu6sv+VJYsf/2pLH8qq1ba/aksfyqrGjZ/Kqtcj/pTWUNXMfCnsqhMfyqrRJM/lVXiE+Zp6lNZ/8gE6qeyJBeT/yG4mPxQHfzcV6eyHlJYVP2nghz9s4ZNCaPFLbmRQFKO/lUHP/fVqax/KcjRwwpy9HCmdCrLtXAtzRutT376RfAg+LdfBB+8/CJ47Xj8IvhwPH4RvD5++kXw0ePxi+B+ETzvF8Gr8scvgpfK9ovgfhE8P8rLL4L7RXC/CF66/CK4XwTHfH4RvBybXwQP/CJ44BfBg8AvgiN+vwjuF8GrXrTo9O9M9UXw/OiusoUmyQX10Zb1aaUTtnXyr+rC/78FaX5EToZC5N9ocWn1l0cUFn//o9AP/5OpvokgP7orlPy0q+SGhM82qB+OFqdkP/yvYD+U5p9GP/yvQj/cq9AP9zr6YVYY988E5eh/gnKU9s8BU0Nlsv5zwHVd/nPAZVeliTn/OWD/OeBiIMtf/zlg/zngWmn3nwP2nwP2nwOun6GZwH8OOO49ft/C3vGfAy7/HCvl8Z8D9p8Dzo/uSt7ngKUH+z+PCvxfppxAgXJVJqoIq/REVTabbLpNLzAYpekeI0g3TdCZMu8gYRXmQ0aJDzkFPuSy+gsGQe24qy5iZbJy/GxJeH8yE5wacvQ55Yl+CT3XokD3g0oLRFnhdhdsn1CS5v3hU8hBVkcG6uVBFZhlp0Bbs/4UqLn8KdDa8fhToMPx+FOg9fHTnwKNvfwp0MCfAq0HoT8FWpk/WDctEPtToLL89adAZWjwp0Ar8wfrpr7sT4HK8tefAvWnQGul3Z8C9adAq2Hzp0DL9ag/BTp0FQN/CpTK9KdASzT5U6AlPmGe1JwCldxMQIvJrdmg6inQUZ/wqx131cXk1qwcrrF18HNfnGI07T02K7+oOk5BjkyZdyjLkeRGAkk5Gl8HP/fFp5CNHI1XkKMJCnI0IVv6FDLXSxq8uTEjR0MWcLbZh4lZfyKtrsufSCu7Kk0S+BNp/kRaMZDlrz+R5k+k1Uq7P5HmT6T5E2n1MzQT+BNpce/xe38izZ9IM5c/kdaEJ9ICdlMUIjTpp7IMvjaFCZt2hQmb9qzeqSzDh4kKfOhQ4ENHtvoEaH50V9gmOJE+UXACdFLC+5OZ5NM4lfXFFJzKmqRA95eE6aYrK9zugu0TStK8P5zKasvqyEC9PKgCs+xU1uSsP5VlLn8qq3Y8/lTWcDz+VFZ9/PSnskaPx5/K8qey8v5UVlX+YN20SOpPZcny15/KkqHBn8qqzB+sm+8Y9qey/Kksibr9qazaafensvyprGrY/Kmscj3qT2UNXcXAn8qiMv2prBJN/lRWiU+Yp6lPZU3OBuqnsiQXkydn5XBNqYOf++pU1pSs/KLqVAU5MmXeoSxHkhsJJOVoWh383FensqYpyNF0BTmani2dynItXEvzJhCkQRNnGhfBD8j6RXBz+UXw2vH4RfDhePwieH389Ivgo8fjF8H9InjeL4JX5Y9fBC+V7RfB/SJ4fpSXXwT3i+B+Ebx0+UVwvwiO+fwieDk2vwherkf9IvjQVQz8IjiV6RfBSzT5RfASnzBPUy+CH5CtvgieH91VttAkuaA+2rK+onTCtk7+VV34P0CQ5hlyMhQi/0b9+Vql/jIjK7/4e6BCPzRl3hHo9kPJT7tKbkj4WoP64WhxSvbDgwT7oTT/NPrhQQr98GCFfnhwtrGfxr01I0sDXYdkhy9GBg6axgWlgbbkJxWDYPjnuAKoKxe4F9oy8lhCpNfVrlMc/BnW9kVBMBpCdEhWvtxDs8k28IbuQ7PibZRvVOd/rFLnP8x3frr2/85vhOgwhc5/eMI7v6H7cIXOr4H15xmdb2MdkU023UY5H65A95EJp/u+qMAHMvJ0dyrTLSGPpm2kR66Cch4eKajXZia8PYy8zFTof7OyujZxtPjMtwhnKdD9jYSPtG9WovubKfkWoWD7hJI0N2pAcbPSgOIoP6Cga/8fUBghOkphQHF0wgcUhu6js+Jt1LDOf4tS5z/Gd3669v/Ob4ToGIXOf2zCO7+h+9iUzCYYJXWsgpd3XMJH1WYm4TgFuo8XXkfCnwgyRsUooFtsfKuNH2tjc822cidNl5l9OV6BX3MER3/Q5Zw8yI/uCm8SNIrH23JOiEDPjcKJUZgXhflRMKeZDDGFKHRFoTsKPVHojcKCKPRFYWEUTorCoigsjsKSKJwchVMMP6OwNAqnRuG0KJwehTOisCwKZ0bhrCgsj8LZUTgnCudG4bwonB+FC6KwIgoro7AqO2QYaT3zhGxps5l5nsueT2TP89jzfPacZ88hey6w5y723M2ee9hzL3tewJ772PNC9nwSe17Enhez5yXs+WT2fAp7LrLnpez5VPZ8Gns+nT2fwZ6Xsecz2fNZ7Hk5ez6bPZ/Dns9lz+ex5/PZ8wXseQV7XsmeV2WHOzzSs4HYp0ery07IypX1nYTvYxnYPHTNzYqVtelEQf59Nx38WzhPjn/hfEH+fS8V/BsI82L82xiGgvz7fir41xcWxPiXD7sE+feDNPBvIB92S/FvYz7sEeTfD9PAv7582CvFv8iWLxDk349SwL+BiOY+If5tjMpaKMi/H6eAf30RzScJ8S+CGS4S5N9Pks+/AUPzYhn+bTRlLRHk30+Tz78+Q/PJMvwzMMNTBPn3s8Tzb2CQ5qII/zYOlrVUkH8/Tzz/+gZpPlWEf4Mww9ME+feLpPNvYIjm0yX4t3GorDME+ffLpPOvb4jmZRL8G4IZninIv18lnH+bLM1nCdC8wZa1XJB/v044/xZYms8ePc0F+vXOcwT595tk8y8kms8dNc19m6ms8wT599tE869vA9F8/uj59+ivx14gyL/fJZp/Cx6lecWoae55tKyVgvz7faL5Fz5K86qs3FrKdwTPcP8hGefpq12h4DpD+D1B/v0xJfwTnCcPfyDIvz+lhH+C87zhjwT59+eU8E9wnjL8iSD//pIS/gnOs4U/E+TfX1PCP8F5ovAXgvz7W0r4JzjPEf5KkH9/Twn/BMfp4W8E+fePlPBPcJwZ/k6Qfw+lhH+C46TwD4L8+2dK+Cfo54d/EuTfv1LCP0E/NfyLIP8eTgn/BP2s8G+C/Pt3Svgn6CeE/xDk3yMp4Z+gnQv/Kci//6SEf4J6OnxYkH//TQn/BPVM+Igg//amhH+C/SQUlJlQi39Zxr8knTm4UHAtwJQhff7KnG0z58Wkz6BdlJVta2m6b8uUzl5J0n1Ma7LpNvJ4kQLdx7Y2RjeOFudqwf4o2NbhsQmXG9NfLlSQm9kJp/sEpf4yJyX9ZY1gfxFs61CSf3QmnPwIoyPM2e812dIZ8LXZoOyS9jkkzvxRWRcn3Oe4PVM65yzJwxMTrkuMDF2sQPe8lOiSSwTlUrCtw3kJlxvTXzTkJkw43UZHrFWgu5CS/rJOsL8ItnVYULS9l1ibuw5s76XKtlfyjPxlCbe9d2RK3xSR5GFPwnWJkaHLFOjuTYkuuVxQLgXbOuxNuNyY/qIhNwsTTrfREZcq0H1SSvrLFYL9RbCtw5MUbe/l1uZeAbb3SmXbK/GtFiprfcJt7+Mype93SfJwScJ1iZGh9Qp0n5wSXdIvKJeCbR2enHC5Mf1FQ26WJpxuoyOuVKD71JT0lw2C/UWwrcNTFW1vv7W5G8D2blS2vZLfNtuUcNt7Z6b0rUxJHp6RcF1iZGiTAt3LUqJLBgTlUrCtw2UJlxvTXzTkZnnC6TY6YqMC3WenpL9sFuwvgm0dnq1oeweszd0MtvcqZdsr8Y1NKmtLwm3vXVGBeYU+dV7CdYmRoS0KdJ+fEl2yVVAuBds6PD/hcmP6i4bcrEw43UZHXKVA96qU9JerBfuLYFuHqxRt71Zrc68G23uNsu2V/Cb1toTb3sdnSr8BIcnD1QnXJUaGtinQvSYluuRaQbkUbOtwTcLlxvQXDbm5JOF0Gx1xjQLd61LSX7YL9hfBtg7XKdrea63N3Q62d4ey7ZX4bQQq67qE294nZEq/tyTJw8sTrkuMDF2nQPcVKdEl1wvKpWBbh1ckXG5Mf9GQm/6E0210xA4FujekpL/sFOwvgm0dblC0vddbm7sTbO8uZdsr+VtCuxNue58YFdil0KcGEq5LjAztVqB7c0p0yR5BuRRs63BzwuXG9BcNudmacLqNjtilQPfVKekvNwj2F8G2Dq9WtL17rM29AWzvY5Rtr8Rv2lFZNybc9j4pU/odYUkeXptwXWJk6EYFurenRJfcJCiXgm0dbk+43Jj+oiE31yecbqMjHqNA986U9JebBfuLYFuHOxVt703W5t4MtvcWZdsr+Ruwj0247X1yVGCPQp/ak3BdYmTosQp035ASXXKroFwKtnV4Q8LlxvQXDbm5KeF0Gx1xiwLdN6ekv9wm2F8E2zq8WdH23mpt7m1ge29Xtr0Sv0VOZd2RcNv7lKjAXoU+dWvSv08U0XyHAt23pUSXPE5QLgXbOrwt4XJj+ouG3Dwu4XQbHXG7At13pqS/3CnYXwTbOrxT0fY+ztrcO8H23qVsexcI2t7HJ9z2PjUqcIFCn3pC0s+KRDQ/XoHuJ6ZElzxBUC4F2zp8YsLlxvQXDbl5SsLpNjriLgW6n5qS/vJEwf4i2NbhUxVt7xOszX0i2N4nKdvePkHb++SE296nRQX2KfSpZyR93S6i+ckKdN+dEl3yFEG5FGzr8O6Ey43pLxpy8+yE0210xJMU6H5OSvrLUwX7i2Bbh89RtL1PsTb3qWB7n6ZsexcK2t6nJ9z2Pj0qcKFCn3p+0nVoRPPTFeh+QUp0yTME5VKwrcMXJFxuTH/RkJsXJZxuoyOepkD3i1PSX+4W7C+CbR2+WNH2PsPa3LvB9j5T2faeJGh7n5Vw2/uMqMCTFPrUyxKuS4wMPUuB7penRJc8W1AuBds6fHnC5cb0Fw25eVXC6TY64pkKdL86Jf3lOYL9RbCtw1cr2t5nW5v7HLC9z1W2vYsEbe/zEm57744KXKTQp16XcF1iZOh5CnS/PiW65PmCcinY1uHrEy43pr9oyM29Cafb6IjnKtB9X0r6ywsE+4tgW4f3Kdre51ub+wKwvS9Utr2LBW3vPQm3vc+MClys0KfeknBdYmToHgW635oSXfIiQbkUbOvwrUmfL8noyM39Cafb6IgXKtD9jpT0lxcL9hfBtg7foWh7X2Rt7ovB9r5E2fYuEbS9L0247X1WVOAShT717oTrEiNDL1Wg+z0p0SUvE5RLwbYO35NwuTH9RUNu3p9wuo2OeIkC3R9ISX95uWB/EWzr8AOKtvdl1ua+HGzvK5Rt78mCtveVCbe9z44KPFmhT3044brEyNArFej+SEp0yasE5VKwrcOPJFxuTH/RkJuPJ5xuoyNeoUD3J1LSX14t2F8E2zr8hKLtfZW1ua8G2/saZdt7iqDtfW3Cbe9zogJPUehTn064LjEy9FoFuj+TEl3yOkG5FGzr8DMJlxvTXzTk5nMJp9voiNco0P1gSvrL6wX7i2Bbhw8q2t7XWZv7erC9b1C2vUVB2/vGhNve50YFFhX61BcTrkuMDL1Rge4vpUSX3Csol4JtHX4p4XJj+ouG3Hwl4XQbHfEGBbq/mpL+cp9gfxFs6/Crirb3Xmtz7wPb+yZl27tU0Pa+OeG293lRgUsV+tQ3Eq5LjAy9WYHub6ZEl7xFUC4F2zr8ZsLlxvQXDbn5TsLpNjriTQp0fzcl/eWtgv1FsK3D7yra3rdYm/tWsL1vU7a9pwra3rcn3PY+PyrwVIU+9YOE6xIjQ29XoPuHKdEl9wvKpWBbhz9MuNyY/qIhNz9JON1GR7xNge6fpqS/vEOwvwi2dfhTRdt7v7W57wDb+05l23uaoO19V8Jt7wuiAk9T6FO/SLguMTL0LgW6f5kSXfJuQbkUbOvwlwmXG9NfNOTmNwmn2+iIdyrQ/duU9Jf3CPYXwbYOf6toe99tbe57wPa+V9n2ni5oe9+XcNv7wqjA0xX61B8SrkuMDL1Pge4/pkSXvF9QLgXbOvxjwuXG9BcNuflLwuk2OuK9CnT/NSX95QOC/UWwrcO/Ktre91ub+wGwvR9Utr1nCNreDyXc9t4TFXiGQp/6R8J1iZGhDynQ/VBKdMmHBeVSsK3DhxIuN6a/aMjNwwmn2+iIDyrQ/e+U9JePCPYXwbYO/61oez9sbe5HwPZ+VNn2LhO0vR9LuO19UVTgMoU+9d+E6xIjQx9ToHtvSnTJxwXlUrCtw70JlxvTXzTkJjM22XQbHfFRBbqzY9PRXz4h2F8E2zqU5B+3vR+3NvcTYHs/qWx7zxS0vZ9KuO19cVTgmQp9qiXhusTI0KcU6G5NiS75tKBcCrZ12JpwuTH9RUNuxiecbqMjPqlA94SU9JfPCPYXwbYOJyja3k9bm/sZsL2fVba9Zwna3gcSbntfEhV4lkKfak+4LjEy9IAC3R0p0SWfE5RLwbYOOxIuN6a/aMjNlITTbXTEZxXonpqS/vKgYH8RbOtwqqLt/Zy1uQ+C7f28su1dLmh7v5Bw2/vSqMDlCn3qgITrEiNDX1Cge0ZKdMkXBeVSsK3DGQmXG9NfNOTm4ITTbXTE5xXoPiQl/eVLgv1FsK3DQxRt7xetzf0S2N7/U7a9Zwva3i8n3Pa+LCrwbIU+dXjCdYmRoS8r0H1ESnTJVwTlUrCtwyMSLjemv2jIzcyE0210xP8p0D0rJf3lq4L9RbCtw1mKtvcr1uZ+FWzv15Rt7zmCtvfrCbe9L48KPEehTx2TcF1iZOjrCnQfmxJd8g1BuRRs6/DYhMuN6S8acjM74XQbHfE1BbrnpKS/fFOwvwi2dThH0fZ+w9rcb4Lt/Zay7T1X0PZ+O+G29xVRgecq9KkTE65LjAx9W4HueSnRJd8RlEvBtg7nJVxuTH/RkJsw4XQbHfEtBboLKekv3xXsL4JtHRYUbe93rM39Ltje7ynb3vMEbe/3E257XxkVeJ5Cn+pJuC4xMvR9Bbp7U6JLfiAol4JtHfYmXG5Mf9GQm4UJp9voiO8p0H1SSvrLDwX7i2Bbhycp2t4fWJv7Q7C9P1K2vecL2t4fJ9z2vioq8HyFPrUk4brEyNCPFeg+OSW65CeCcinY1uHJCZcb01805GZpwuk2OuJHCnSfmpL+8lPB/iLY1uGpirb3J9bm/hRs78+Ube8Fgrb35wm3va+OCrxAoU+dkXBdYmTo5wp0L0uJLvmFoFwKtnW4LOFyY/qLhtwsTzjdRkf8TIHus1PSX34p2F8E2zo8W9H2/sLa3F+C7f2Vsu1dIWh7f51w2/uaqMAVCn3qvITrEiNDv1ag+/yU6JLfCMqlYFuH5ydcbkx/0ZCblQmn2+iIXynQvSol/eW3gv1FsK3DVYq29zfW5v4WbO/vlG3vSkHb+/uE297XRgWuVOhTqxOuS4wM/V6B7jUp0SV/EJRLwbYO1yRcbkx/0ZCbSxJOt9ERv1Oge11K+ssfBfuLYFuH6xRt7x+szf0j2N4/KdveVYK2988Jt72viwpcpdCnLk+4LjEy9GcFuq9IiS75i6BcCrZ1eEXC5cb0Fw256U843UZH/EmB7g0p6S9/Fewvgm0dblC0vX+xNvevYHv/VsX25kd3hTMF2+xv2WT3qT1RgTdk5PvU37PyMkHlmWeSBRP/3cpGIfBxM8Rzo/APawdQLv7h5aDp5eKh7JDdJX1m4lxQfknr0Ewg7z9IYwxSgFHSZgTskio3A2X+M8Lbbu/HsbpE6uvO97SaQqwAczlGP0mwzrwpd4x0uVH7tgENhLsN7ul/kTsZjIf/53Ll70yBNGqPCUGpLa7r33jN0p1X7bl2YPvuXdhgVAGm7Q3KlUU2Jm/G8V4OQLaw95Aw+t94VsbgVbRxfnRXiGVKe8QPCc5G/VOwlxspbQW6pTXSrAjrLRnxthqmnSTK3hD29/f29vUHivx4SElDS+O8LpMOnOOCZMsUXadDmf+yyuVhG//bxo/Y+D82/q+N99r4f6SUrGnJ2Dhr4zE2ztm4xcatNh5r43E2Hm/jCTZus/FEG7fbuMPGk2w82cZTbDzVxtNsPH3MUDsXhx6DA6LnGVE4MAoHReHgKBwShUOjcFgUDo/CEVE4MgqdUZgZhVlROCoKR0fhmCgcG4XjonB8FGZHYU4UTojC3CicGIV5UZgfBaPQwigUotAVhe4o9EShNwoLotAXhYVROCkKi6KwOApLonByFE6JQjEKS6NwahROi8LpUTgjCsuicGYUzorC8iicHYVzonBuFM6LwvlRuCAKK6KwMgqronBhFC4aU+5Br46e10RhbRQuZv+7JHpeF4VLo3CZ/V+n/d/l0fMVUbgyCuuj0B+FDVHYGIVNURiIwuYoXBWFLVHYGoWro3BNFLZF4doobI/CjihcF4Xro7AzCruisDsKe6JwQxQeE4Ubo3BTFG6Owi1ReKzFQh3k1uj5tijcHoU7ovC4KNwZhbui8PgoPCEKT4zCk6Lw5Cg8JQpPjcLTovD0KDwjCndH4ZlReFYUnh2F50ThuVF4XhSeH4UXROGFUbgnCi+Kwouj8JIovDQKL4vCy6Pwiii8MgqvisKro/CaKLw2Cq+Lwuuj8IYovDEK90bhvii8KQpvZjx/S/T81ii8LQpvZ/+7P3p+RxTeGYV3sf+9O3p+TxTeG4X3jRlKe7+NP2DjD9r4Qzb+sI0/YuOP2vhjNv64jT9h40/a+FM2/rSNP2Pjz9r4ARt/zsYP2vjzNv6Cjb9o4y/Z+P9s/GUbf8XGX7Xx12z8dRt/w8bftPG3ovhnhw7d63jvA73ovaOfYi6jDjPkxdq406aPsc9jWDp5vej9mvQW+9wC6eiAEgaTZsl/tM4yrxzSyGkdA2lEQw7SxgbldZvnDwTwDvPeB98h+iBtHBvlmLTxRBekTWD8NGltUDelTbRp4yCt3abh6KLDpk2AtElAH8WTbdpESJti09ohbapN64C0aTZtEqRNt2mTIe0AmzYF0mbYtKmQdqBNmwZpB9m06ZB2sE07ANIOsWkzIO1Qm3YgpB1m0w6CtMNt2sGQdoRNOwTSjrRph0Jap007DNJm2rTDIW2WTTvCppn2O9/eFwOpvlnoMuVeIF1uNHw25a4UL3do5mGVLavFlkv1XAC8utDeC85KhVg3DYSpHkrPwX0f5KV8xI8j7T1hN31nhb2/sMJ757P3OiDPCgf9xUCW/pUMz0qG2bTJiYBDXmZ7lWQ23+1lNvKRIS+XvZn2fn+U2UWAQ0FmF3iZrfmqW2Yvgrxc9o6y9/ujzC4HHAoyu0FHZgveN4iuDZCXy94x9n5/lNm1gENeZvuUZLbLy2x0XQd5uewdZ+/3R5kdABzyMrthg/cNar7qltnbIC+Xvdn2fn+U2V2AQ0FmN3uZrfmqW2afDnm57J1g7/dHmX0c4JCX2Y1+3qD2q26ZfTHk5bJH80H7o8w+096bOdvP2jnb+ZD2gE3LQ9rnbFoIaQ/atAKkfd6mdUHaF2xaN6R90ab1QNqXbFovpP2fTVsAaV+2aX2Q9hWbthDSvmrTToK0r9m0RZD2dZu2GNK+YdOWQNo3bdrJkPYtm3YKpH3bphUh7Ts2bSmkfdemnQpp37Npp0Ha923a6ZD2A5t2BqT90KYtg7Qf2bQzIe3HNu0sSPuJTVsOaT+1aWdD2s9s2jmQ9nObdi6k/cKmnWfTpgSl9aQf2zTTD+bY+2Ig1Q8G8qb+44Pyi2/eKsL9HMAzWxxPPjTrU9NsWRv7t21bsXPrDf27B5bt2b5x99Yd23GfGsH+MaRRzPewUR5cnszC/Ri4xw2ILXCP7451pO21cWfMM+LTac4htTYbMBXhGZvO1934uk+Qr7vQBnXQVan7ngB45irwog3qqAXPXF08+Q7Ag3WdqEB7JTnAJbN58nUPysGJQe18nwd48gq8aIM6asGTBzzzFfAo0Tk4bUhu3l7Bcg2vCoxX8xivOiBPCPwrKPAPt5ZR2fRcADwkg4S1DfKdmBCMlDYf8Gj0gUr6ANuQ9PfxDp7NSRjPZgNG2nJEetX4Sr8HvAru4WC/oPpyttxxDFsO8rzu0BK2P9u0dvj/HKDneJampKtD9F2pbHqeBxiJnuMhje7Rjmvoy0xQrr8RI9WHstMaQ0cO8jxi48nB8AvtNPKA7kl3xOmTUIkHcX0jBIxEM9owbf+CpoJc/oW2nZOmifRMSwyPc5BnnHUiXDJUi81sB149WmZQasNi0Jj2Or6BdQcV6tbyReuZUkBfVEHGCvX6otq+lBKdg32UphKlfdFuxqt5jFcdkKcL+NetwL8M1Etl0zPVl0bMBg+3n22Q7/iEYKQ01J9atiFOh2Ebkr8218GzOQnjGfrPtD2fbNPg1tpMCa+C/1xA/5ns7XiGDf3nq8B/Di22OP95HktrpG9Kz1Qf+s8ufxL9ZwV/aZDP82MwUn0oO60xdOQgz+IKvg/6z8gDusexpUufaI0t4/pGATByvbyv/TEt26zA40E5I9vVEsPjHORZXsV/7oLnYlCSH9d4h/JmoS76X6dN72JY9tp0XobJr+lvKej+Qd7TkizxnvBTfTnIc2EV3vfAczEo8R77CvGL8mYhXxeUZdK5LiHeU755kF9zriOuz6Hfr113UKFuBRtV95gD5yLlZXXTprag3B5Vw9MNeHrE8aj1yUE9S1sipMdACxiv5jNedUCeXuDfAgX+ucY39Ez1ecwes8fsMXvMHrPH7DF7zB6zx+wxe8wes8fsMXvMHrPH7DF7zB6zx+wxFz1mj9lj9pg9Zo858Jjzo7s8Zo/ZY/aYPWaP2WP2mD1mj9lj9pg9Zo/ZY/aYPWaP2WP2mD1mj9lj9pg9Zo/ZY/aYPWaP2WP2mD1mj9lj9pg9Zo/ZY/aYPWaP2WP2mD1mj9lj9pg9Zo/ZY/aYPWaP2WP2mD1mj9lj9pg9Zo/ZY/aYPWaP2WP2mD1mj9lj9pg9Zo/ZY/aYPWaP2WP2mD1mj9lj9pg9Zo/ZY/aYPWaP2WP2mD1mj9lj9pg9Zo/ZY/aYPWaP2WP2mD1mj9lj9pg9Zo/ZY/aYPWaP2WP2mD1mj9lj9pg9Zo95VJgNnnn2nrC2Qb55CcFIaT2Ap1sJz2yGh56xDefY+7kOns1JGM9mA8YJ9j60cUsUfpUr4Q3F8W7aZPAWoL6iA0cO8sw+tJT3dxZbO/x/DtCTZ2mGhvniNAzxnOqisumZ6msHevKQRvcnAMa54hiH+Dw/BiPVh/LdGkNHDvI8ZPk/ORh+dQBNyAO6J93RBuWhPtlX/RfbZDbgmaeEh2QiY8sNGS9QnxSAZ/R/lO3ZShipLip7HuMP2okQ8Mjri8p9zdddkhHBugttUAddGfZchPsC4NHoN21QRy145uniyXcAHqxLqz/GyQHqKwX9WUBdXQvfuwFPrziesAf9qlrwoE/dI44nH+rQmc+jr7hXsFzDqz7Gq27Gqw7IswD416fAvwzUS2XTM9XnMXvMHrPH7DF7zB6zx+wxe8wes8fsMTcnZoOHz+G2Qb7ZCcFIabhGpTBXUHF+CNuQ5vPmO3gWJoxnecDYZu9pns2sA93WUsIrv74T9iBPaY2qjfEvB3l+d0gp750WG64rhECPa95cfv2n8jw+1edan2mHe5zXlZ9fHOLz3BiMVJ/JQ32oNYaOHOR5huV/3BpVwcEDuse10R6Wptl/e4JyHtBzL2AkmlGfaM03k0zQGtV8xgvUJ9hX6f8o2xrzrpXW9XoAI6XNBzxa68Fxfc3XXZIRwboH1yZwfdtcldYC8oBHo9/g/oNa8MxWxlPLOq5S/8xrrf/gniqyy1xX5iDPWyrYAiyLcJIdoDLbgVfo+2rt45kH2Irw3Mi6gwp1a9g/HZ9zSFYW2rJIVrjPmYM876siKwsZf0hW0EYTrxYCzxYq8KySrDSy7qBC3QrjiIIp9yTxcodkZZEti2SF8FN9OcjzySqysojxh2SFymwHXi0Cni2S51lFWaH6snBPuPZaTIvhebSYNtvLlLtkBOVurnKZck8ePd6QJwTAhyzcU121/N+Vdwm8cxLLt5c9jw1KbYQySf//agWZ1Ok3lXXBSVC3glx3YVvLlTukC6hdSBcsYm2RgzzfqaILljD+kC6gMtuBV0uAZ0vkedZtxkR5R13yfKysd6g+7CvEg06bTnlQ/7j6SWeDaAhiaEAdKVj34PgGdQbxMWB4AsancZAuiKerDeqoBU8R8JwijydUonNw7LLUliW99+pUxp/FjFcdkGcp8O9UBf5lguHtRc9Un8fcGMwGD9d3bZDv5IRgpLRTAE9RCU+c3i0CHpr/mevg2fyE8QzPP0y09zTPYFyIsa0lvAr2pMvl1xAOqg/9mrfAmkabxdYO/8d1pEUsTXMdiY+t6BnHVkQP+lh0j/OACvMZXa41Vaqb6nOtaXA6cE1jhuW/y8dE2khP4D5p1B1aZ1rizp/hmhLRgnvEtXw2an/qo4sdvFDYL59X4nEXrpO1xPA4B3lmVZAX15obyQ+eiSJeUd5sMNz37bTpcxkW8tV5GSa/lhwq+ZldqOeJ94Sf6stBnrlVeF+EZ3O/iPEO1yMpbxbqQl5mg+E2mXjPyzD5lXhUQJ9ZsNwu9OWI94Sf6stBnt4qvD8VnotBifdUZnsw3IZng/L5C+KlSSedRv8n3lO+HsivuRYap+9wrVi77qBC3fLzP0PzNFw2+lh7oGycVqdskJ+DfgXRVGmsQflx7oPwtLI8pwJOyrO8Ak5NvypOhqg+7Ac9kDcbDOc79YMeVkamQTQEMTRoyiLpI5LFUxlPcpDnoiqyuJTRQbJIZbYDTUsrvEf5K8kiHwejLK6rIota46o4WXTpZJStbDCc7ySLvM9lGkRDEEODpiyeZssiWVzKeJKDPANVZPE0RgfJIpXZDjSdVuE9yl9JFpeyclAWr6mAE+e16d1xcF8MGiOfVF8WaCHedNp0yoNzjCi3p0H+RtAQxNCg5NMNzmujbBAfA4YnYHwyeE6Xx9PfFpTrzWp4Tgc8Guu1SnQOjk3PsGVJz2svY7xaynjVAXnOAP4tU+BfBuqlsumZ6vOYPWaP2WP2mD1mKcwGD/ft2iDfaQnBSGm470zB36joY2Ib0prREgfP5ieMZ7g2227vac7cjLXe0VrCqzDP2u+aZyAcOBdNeXbAGt57YA1vKeOvoYev6ymtQ4a4DkllL2H8bQd6lkAa3eManoIP3u+SXaqb6jN5aD2vNYaOHOT5eI3jV+QBH5PhmT3UJ1rfzos7s4frREQzfmtJa8xKMkHj7lMYL1CfoA6m/6Nsa53l4vMepzH+oJ3AfRQae6Qq9TVft978xilB+VXr/IZGv6l3fkN5/mzw23lLHXVp9cc4OUB9pfXtPNSf1fiO+yIU/LGuer+dh/NcWuv1aZ/n6ma8SsM4ymOWx4zfLsBvUlC+3oRgpDT8ZqnW2C9O72Ibkp1c7ODZKQnjGY5PO+w9rrNlxpbwNmr/ZgfjH+7fDGHs12Kxob9+CtDD98Fojini9m/imKLS/k30l7T22nXHYMS1S2r71hg6cI11suV/3NhvqYMH/Ds8OI5BfaLVf+PGMacDRqK5EX5c3Jqr8rgzr+WPGTrIdrXE8DgHeQ6vIENYFuEk+aEy24FXlDcbDLdRnTb9DIaF1ql5GSa/lhwq6f5B3p9pyyLec92fgzzHVeH9mfBcDIb7K+3AL8qbDYb7MJ02/UyGhXjPyzD5lXg0uKfzLPlyB3m/3JZFvCf8VF8O8oRVeL8cnotBifdUZjvwi/Jqrd1X0lONOOcdN9+OdWuNddGuE/0Bw0MXjnU1ZKzese5ZgGe5PJ5Qic5B23S2LUt6rHsO41U341UH5Dkb+HeOAv8yUC+VTc9Un8fcGMwGD/d12yDfooRgpDTU+Qp9sKLexTbk61nIs1MSxjMcj0+y9zjWXQdjXS3feBnUVwQc6BtTnr8dXMp7BYx1lzH+4hgKea7wrYWKYyhc0+T7A9qD4fsIGjGnwDGiH0P9vDWGjhzk2VrjWNe1rku6A+036pN9eX6RaEbfRcuPI5kgH9K1ZyNt5xdJt1Q6v0h5bqji83NdRvKD8yfEK8qbDYZ/96jTpp/FsNB4i5dh8muuhyj4noO8J7+Bn1+k+nKQ544qvD8bnotBiffYV4hflDcLdSEvs5CH/k+852WY/Eo8KijZ3UHen2vLIt4TfqovB3meWoX358JzMSjxnspsB35RXs39GHF6qhFnMOLm7rFuBbte9/kF/M6Shozh3q1a8JwDeM6VxxMq0Tlom86zZUmPdc9nvFrCeNUBec4D/p2vwD/XmJCeqT6PuTGYca8Wjtso32kJwUhpqPO1xpFxehfbkMZWyxw8OyVhPDsdMJLdxT2974SxrtZaBJ8Pn8z4h/Ph74ax7nthrLuc8TduLV1rrBsnFzjOI3pwXYTu98VYl+/rdo11OR041v1EBX/NNbbH339A3aHVV+cF5fTS8zmAkY/DNH023ONThGfkhcLYKt9I/57zGP37L9Xp3/P9OjgPQXmzwXB71GnTz2VYaGzFyzD5teQQ/TbBcrvQnyDeE36qLwd5vl2F99w34XatHfhFebNQF/IyGwz3Y4j3vAyTX4lHg+PaC+TLHeT9ClsW8Z7wU305yPPTKrxfAc/FoMR7KrMd+EV5Nfcoxemp7gbWHVSoW+McvKtN+Z49bNPf19mm5J+gP0A0rajwHh8joK/Bz92sAJyU5681zkejXCmcC6goV0sBD/lqxC/cv49+3AoljFQXlc35gzzDPRZ0j2fKTmFpmrw9heHm3wlz+cia50+oLmrrfVF3EFM3nq/Ds3TyMuX+njrVjf310XmycUNxrd9TX+agzbXGxOl1lUV5UNcQxlaWB8cDlGdSBexx317XGo/Fyd8SwEP9EsfprnOgCr/fVHGPeB4wuua4CRv+rt4ylqbJ2zgbjfK2nPFWaf6gYls3su4gpm60Dfh7gvIytWkT2gG+t5Dqy0GeY6roGm5T5jto4/vpXfS6yqI8qGsIY2vg1m05yDO3AvZmlTVNueK+MbcnaAe6q8gV93FJrlwyVMk3dtkrLkMuW0t5TqoiQ83oG2nKEI1JSIaoTVCGKM+pVWSIz7eSDFGZ6POcXuE9yl9JhlawclCGzqri8xTYu0rj14pyRfVlgRbiTWdQfg6C/k/zNZyHnQ2iIYihQWnsV8D1ggD4GDA8AeOT0hzTIJ4VdeC5APBo+KtKdA7OTa+0ZUmva69ivFrBeNUBeVYC/1Yp8C8D9VLZ9Ez1pREznhElrG2Q7/SEYKQ0HO8ryHNFHYZt6Po9evp/mDCe4VzcFHtPazLGlu8YV8KrsIZSMHjPg/qKgAPXmSjPY2CNeJfF1g7/x3HzcpamtP5aUS7wm0dED4736V53/DjE58UxGHHeiGS2NYaOHOS5rUb/yPXdJ9ybMJ+lae6Hns94QM+4Dkk04zyRlk+EvmkxGL53Y1yg8vvmWvuhC6h/WmJ4nIM8T6syFuC6jOSHysS9CJQ3C3Xh+CALefh+aF6Gya+5H1rDzzWYyW/ga/Y4RqY8z6/C+5XwXAxKvMe+QvyivFnIR//rDMr3SfPfveS2yORX2g9dsc/heSqt371EO0EY8CrCPf7upby8dOfr/d1LHBetFMej1i/y6GtJj0MuZLxazHjVAXlWAf8uVOCfax6Nni901N0ZyPLiohp4cZEDz0UN5gXVVy/mVSnE7Pns+RyH2fPZ8zkOs+ez53McZs9nz+c4zJ7Pns9xmD2fPZ/jMHs+ez7HYfZ89nyOw+z57Pkch9nz2fM5DrPns+dzHGbPZ8/nOMyez57PcZg9nz2f4zB7Pns+x2H2fPZ8jsPs+ez5HIfZ89nzOQ6z57Pncxxmz2fP5zjMSeCzwcPPCuCZ2eUJwUhpeFZzhRKeuO++YhvSObfzHDwLE8azcwDjVHtPZ3rM2ZV3jS/hlT93WBjcr87PHU5l2PDc4TMOKuV9n8WG5w7xHOVilqZ1bjsTxP8+D9WH5w7xHB4/G9kG76CsKJw9G8SdZ7jpGc91cVoawcdMDB81647r23nddihgmwdAf8Dw0IXnIRX0XDeeBa0FzwrAM08ej+p5pEZ9F4F/O6XR3xiIswmrHHV3BrK8uLAGXiTpbFa9mFemEHMS+IzfK8RvNFC+fEIwUhp+v1zLv4zzI1z+5XIHz8KE8QzPziqc5R08OzuN1WV8wz+NV6138Iw3/00FjgN/U+E1B5by/g38Vv7tB7S9KP/78jsMrrP+3EfF3x1AGdTqJ/MYbn6+vt1BSyP4mInho2bdcTpDWV8VsM0DoD9geOhCP1HBz+mu93teaAO1ztEr0JlH3S7tt/I5Ku4nNnqOivvR9FxpXs1j9pgJD7cLbZBvXkIwNnIcGGfvsQ3JfucdPGvE/GU9PMO5EI3vMxnap7O6jA83e4JuvTg3l7Plchz4jdRNM0rYTrTY0E8jWUcbifKvYf8qjRWoPvTT0HfjvmQbvNOIb/fxby7R8yrA6Fp30OZjJoaPmnXH6QxlfVXANg+A/oDhoUt3na+QRz1YC56LAI/GWFxJBw/6l6ttWdL+5RrGK5dupzyrgX9rFPjn8mnoeY2j7s5Alhdra+DFWgeetQ3mBdVXL+bVKcTs+ez5HIfZ89nzOQ6z57Pncxxmz2fP5zjMns+ez3GYPZ89n+Mwez57Psdh9nz2fI7D7Pns+RyH2fN5ZJgNHr4+1Ab5ViYEYyPX5ms5g0LrePMcPAsTxjPcu6SxF93QfgCry6zlfh3WmeX3j4X5DKuvCDioPvzd2ZsPKOX9Nqwz8/VIXCtrxP7ouD0DVB+uKeMaLl9TboN3GrHXge/ZpueLACOnpRF8zMTwUbNuah8qe56jboV2KGCbB0B/wPDQheu68uuSXXnUg7XgQRu4WhzP0DqzwvprHnW79DrzxYxXfF23A/KsBf5drMA/17o3PVN9acSMdXcGsu13SQ28uMSB55IG84LqqxfzWo+5IZi9bHjMcZi9bHjMcZi9bHjMcZi9bHjMcZi9bHjMcZi9bHjMcZi9bHjMcZi9bHjMcZi9bHjMcZi9bHjMcZi9bHjMcZi9bHjMcZi9bHjMcZi9bHjMcZiTIBv4/UvC2gb5LkwIRkprxPcP4vbNYRvSPriVDp6FCeOZ63u2gngG92bNYHWZvZAfbSvVK/8dlrDsm8K0T3MGa5cc5Nk0vZT3kxabay8h7jVD+dfYR1Zpzy3Vh3sycQ8k35PZBu+gDGr1k9UMNz2vAYyclkbwMRPDR826476NpKyvCtjmAdAfMDx0rQE8CnvkulEP1oIHbaDGnnYlOvOo26X3aa5jvFrDeNUBeS4B/q1T4J9rDyY9U30es8cch9ng4XahDfKtTgjGRu4hjrP32IZkvy908CxMGM9w77/CWYRB//JAVpfx4R4G/1Lh/EV3htVXBBxUXw7yHAv+5X/Bv+Tnt+LGClpnuuLGClQf+pLou9F9ATBq+AyZYPj5Rq7XcGzdGkNHDvKMmzgUTw6GXx1AE/KAn/lsg/Iaoaf43AE9rwOMfJyn6dPi72gU4bkR/nSczGLdCmPruv1pbIdL5fF0owzWgudSwKMhp0p0DvrTl9mypP3pyxmvLmG86oA8lwH/LlfgXwbqpbLpmerzmD3mOMzoTxPWNsi3OiEYKW0d4FHQG2V2isqmZ2xD8rMucvAsTBjPlM8VD/rTB7G6jM960kTVep3+NMeB/vSvp5XynmyxxfnTrrGR1tx73NiI6kN/+mJIo3v0pxVsdLfLl3TNJZC8tcbQkYM8y2v0p5EH3HeO01OXyfOgYp+7DDASzeg37Y/+dJzMYt0K+rlufxrbQUEXd6MM1oLncsCjIadKdA7601fYsqT96SsZr1y2jPJcAfy7UoF/Lh+Onqk+j9ljjsOM/jRhbYN8qxOCsZFjkDh/GtvQ5U/T/8OE8awR/vTBrC7js96i608XXP40x4H+9ENTS3lvd/jT6KetY2ma4ze+pkXPVB/60zgXyvc6xI3p9qV/yWlpBB8zMXzcl2PwfS0/dI9jL3n9uWmTwUN2jfokt4E5yPO8CuMqLItwrnbQRvJ2RcPpHeI/x+iaZyO93MryXAE8oTwvrcCTfdl/soCReN5p0ykP/X+vTb+MldEZ7Nu+oGOTh+R+vS2L5P4KxpMc5HlDFblfz+gguXfJ+PoK71H+SrJ4BSsHZfEtVWTxCqiraO/zo7sqyiLVh7KIspUNhvOdZJH3uc4G0RDE0KApi/22LJLF9YwnOcjzviqy2M/oIFlcb+N2oKm/wnuUv5IsrmfloCx+pIosroe6ivY+P7qroiyub2DdQYW6tWRogy2LZIjaBGWI8nymigxtYHSQDFGZ7UDThgrvUf5KMtTPykEZ+kIVGeqHuor2Pj+6q6IM9Tew7qBC3VoytNGWRTJEbYIyRHm+XkWGNjI6SIaozHagaWOF9yh/JRnawMpBGfpuFRnaAHUV7X1+dFdFGdrQwLqDCnVrydAmWxbJELUJyhDl+WkVGdrE6CAZojLbgaZNFd6j/JVkaCMrB2Xo1zWuJ9G74+C+GDRGrhpZd1Ch7o3ydQ+uy2CbEv0Bw0PXRsAzII4nXNAWlOupangGAI/GHKMOnUPrMpttWdLrMlcxXm1kvOqAPJuBf1cp8C8D9VLZ9Ez1ecwes8fsMXvMHrPH7DF7zB6zx+wxe8wes8esh9ngobkfwtoG+TYlBCOlXQl4FOZkKs7DYRvSnqLVDp6FCeMZnrtROGMwuOftEFZXSxT620v1ys/LhQtcayqEw7Wm8j7Y8zZgsbXD/3HvmGv/otZZ37j9i7i/jei5HNLoHvf1yJ8ZGOLzuhiMVB/KZGsMHTnIc53lf7U5f+QBnw+P01ObxXlQuc9tBoxEM85Ja60X4F7rIjxvAj6S/KJup/+jbGvpUr5WtInxB+0P6naFdY6wLSjfk068CxjGgPFMCU8e97/rrqnUv8aD8qtgwwrYd2vBcxXg0ejfSnQOrvFssWVJr/FsZbxy+QCUZwvwb6sC/1y+Lz1TfWnEjPqJsLZBvk0JwcjHFAbjofYefaQXg0+mcL6w4PLJCAfVhz7Z48Ene7nDJ0uyrSd6GmHr476vuAnwuOyoAn8KLv5sYvxBuW0N3LY/B3neVMUfvJK9q2mX6rGTaJcU+n836ppa8GwFPFvk8YRKdA7ayattWdJ28hrGK5f+pDxXA/+uUeCfywbSM9XnMXvMcZjRHyGsbZBvU0IwNsiHG5x7OsyWReUbX+KL4Oco2InB72pshvqKgIPqy0Gec8HP+Qr4OdynifMtNXR5Jd+S6msHGtDWafk5mxmezYwXcX6OAn+6XfzZxPiD/YH7OSgHlOeHNfo5yn5F3X4O+hUKeqUPdVgteK4BPFfL4wmV6Bz0c7bZsqT9nGsZr1x6mfJsA/5dq8A/l22lZ6rPY/aYPWaPuRkwo99OWNsg36aEYGzQWGfQbz/clkXlG994ckepXgW/p8/wYQvUVwQcVF8O8kwHv326xWZcOO6jx43BNHyTSmMwqq8daEDfTctv38LwbGG8iPPbFfjT5+LPJsYf7A/cb0c5oDwzbdtX89uVeV2odw0TZXGbPJ6F9Y4jUBdrzE8o0ZlHvSztt29nvNrEeNUBea4F/m1X4F8G6qWy6Znq85g9Zo/ZY/aYk4kZ/RH0TynflQnBSGk4l6dhuw3tR9iyqHzjz6+FsYaCH7oQ97/RWINwUH34vYbvTynlvRTGGtxvxm8yYltq7T+J2w9N9eG+R9xrvK++96m1z1lrLt7QRPLQEsPjHOS5qsJYBMsinLSXxrWfGMf5GvKj5OcXUMcQz/gcUA7ybK/Cs20xPEMZJ15R3izko/912nT+LRX67hrlWw35lfaXdrt4tI7hQh49pk4e8fMFuCcKx3latF3DaNvqoI3y3FqFtmtiaMP2d9krje+xKM0BdqMvQzwj/NcCzyjP46vwbHsMz/D7QcSr7cAzBdq6TLk7lHh2HeMZ4d8BPKM8T6vCs+tieHYt8Ix4dR3wTGN/vvEjNjswBgwjXbhnn95De3+dPMa694kjz65XwnNdHXiuBzwK8hkq0Tno6+y0ZUnPd+1ivLqO8aoD8uwE/u1S4F8G6qWy6ZnqSyNmPP9HWNsg30BCMFLaDsB4pL3Hs4T36q4LFXBNkfQ84UAfnPK8EcZqb4Gx2rWMv/gtM+S51llC/n1Hl+/P/SQt+1JpnWoA8PC99Ur8Kbj4w31Yk4dksTVw+zU5yPOBKutCm9m7mue7RmLLlex272jstpadVKAzj/ZX2k7uZLzi+rwD8qCfsVOBfy7flZ6pPo/ZY/aY9y1mtDnog1C+zQnBSGk7AI+Gfja0d9qycBz/c/AnFXyNXjwjR/4k4XB+DwH8yV+DP7nF/h/Pdbr8JY3z8kgDle2a46G9UOhTaJ3LjDuvgLxQ8K/yWnN9uL7SEsT7m5Tn71Xml/haDR+P4HkOnLvRkB8lX67gmpMj/K45uUfqnJMjnqGME68obxby0f86bTqNcXC/UDYYvqZj8ivNh/a6eMTnGpFHuUlDca08Ir2EckV0oS+vRdsORptrHpvyTKhC244Y2rD9ub3C9qf/ddr0HQwLtT8vw+RX4lFBaV6wF30iPh9O9eUgz/QqvOf+1RbGu3bgF86rKdDWpTQXNsiz3YxnfC4sB3kOrcKz3TE8ux54RryivNlg+Pxkp03fzbCQvPIyTH4lHnWbcvfIlzvI+xtsWcR7wk/15SDPMVV4fwM8F4MS76nMduAX5VWirceU+xglnt3IeEb4HwM8ozxzq/Dsxhie7QGeEa8obxby0f86bTo/o0rySvmugvxK538r7kPBs5vNWrfCedxCvd/CwLPnNyrwoi0oP/dQDc+NyngqtQ3WraAzBve63WTL4v4m6gzKc1oVnXETo4N/O6YdaLoJaLtJnrYyvmYYXxtZd1Chbq02vdmWxf1sbFPKc16VNr2Z0cG/O9sONN0MtN0sT1vFNm1k3UGFurXa9BZbFvffsU0pz9oqbXoLo4PaFP13oukWoO0Wedoqtmkj6w4q1K3Vpo+1ZfHxBbYp5emv0qaPZXRQm+L4gmh6LND2WHnaKrYp1ZcFOrFts5CH/k++IsdfbBANQQwNmrJxqy2Lj39QNijP9iqycSujg2QDxz9E061A263ytFWUDaovC/eEa6/FdBs8jxbTZnuZcm8fQbmbq1ym3DtGjzfkCQHwIQv3VFct/3flvR3eeQzLt5c9jw1KbYQySf+/tYJMKvWbin32MVC3glwP9tk7bFl8/H2rgz93VemzdzA6qM/i+Ju3EcpbMZCbWzBT8Vscde0r/dCIuoMKdd8uX/fgOBn1NNEfMDx03Q54HiePp6sN6qgFz+MAz23yeEIlOgfXCO+0ZUnvBbqL8ep2xqsOyHMn8O8uBf5loF4qm56pPo+5MZgNHurrhLUN8t2aEIyUdhvgUeiDFfUutqHr+y30/6sSxrPLAeNMe497S946qYRXYW2my+DdA/UVAQeuX1GeAuxleYfF1g7/x++WXs/SlNZDK+5Hx7kKogfHunSP88kKe0y6cA86x0j1mTwks60xdOCZ4g9X8A3RF0Me0D3pDmwn1Cda3xKKayf8lhBf89T04/AcSBGekRdaZ3AUeNyF++BbYniM3+h/sMr4gu+p5/sB2oFXuA9eQ35MuZcr8ew2xjPCfznwjPJ8pQrPbovhGco48QptpgJtBaVxSJdrHEv4bweeUZ5v1zmOJZ7hb2Lx+QmltciKeoHqQz+DbB+uGTbC5lFdVDbX92gDcA6PsIWAew9L0+TtHoZ7D+Mt2uo9gEdhn0XFtm5k3UFM3ehb4W/BycvUpk2V5qbQ/6A8f6qzT1/loI3PF7nodZVFeTZBHsLYyvLcAdgpz0NV5h2bUdY05YpsAsnVHfYZ5erRufUqcnU7o4Pk6g4bowzdXuE9yl9Jhu5g5aAM5SbH48TfOcQ5uALUX7T3+dFdFeWqAHhIt+MYjf6Pev8OJYxUF5VNz3c4eLYL8IRKeM5heM5x8EKr7sWs7sUNrHs+q3t+A+uex+qe18C6V7K6Vzaw7jWs7jUNrPtiVvfFDaz7Qlb3hY665ee1hmwO1ZELyud7cV6L8iyeXMITADYZPD2D47CMeLm9g/uEs/LlDo61x8iXO7gXPKfEhxbxchcMtlureLmFwfmfsUr8HSdf7kJT1nglvBOU+Nsmj3fAlDVRvtzBPSDt8vI7yN8OJf5Oksc72N8my/N3UD9MkS93UE9OVeoX05TabboSHw6QL3ejKWuGUrkHKvH3ICV5OFip3Q4RL3dI7xyqgBfH2odB+Qpz3BXHiLc3oO64MWIj6o4bIzai7rgxYiPqjhsjNqLuuDFiI+qOGyM2ou64MSLV1w73c2yM58XmAEat+bW4b1MUACOfXxsX6J3To7povo/X3QF8uT2hPMM1tEbMRfj5Pj/f16i6/Xxf/Hyf79++f+dHd/n+DWUnqX+jH3QC4JH3HQcG985THTTHT3Xjei3leZGf48dy/Rz/4OXn+G25fo5/CK+f4x+8/By/LdfP8Q/h9XP8g5ef4x+6GjvHj3NXJ0LaHfb+eEij/XldkPY4ez8b0u609wsgjc5oLYS0x9v7kyDtCfb+ZEh7or2fC2lPsvdFSHuyve+BtKfY+z5Ie6q9PxXSnmbveyHt6fb+DEh7hr0/E9LutveLIO2Z9v4sSHuWvT8b0p5t70+DtOfY+3Mh7bn2/nxIe56974a059v7pZD2Anu/BNJeaO+XQdo99v4USHuRvT8d0l5s7y+AtJfY+/Mg7aX2/hxIe5m9Xw5pL7f3iyHtFfY+D2mvtPfzIe1V9n4FpL3a3s+DtNfY+1WQ9lp7vxLSXmfv10La6+39Gkh7g72/BNLeaO8vhrR77f1FkHafvb8Q0t5k7y+DtDfb+0sh7S32/gpIe6u9Xw9pb7P3/ZD2dnu/AdLut/dXQto77P3VkPZOe78a0t5l77dB2rvt/TWQ9h57vx3S3mvv8Rvd77P36yDt/fZ+K6R9wN5fB2kftPf4mzgfsvc7Ie3D9n43pH3E3t8AaR+19zdC2sfs/U2Q9nF7fzOkfcLe3wJpn7T3j4W0T9n7x0Dap+09niP8jL3fCGmftfe3QdoD9n4LpH3O3uNZGhrz4n5lGq/eAWk01rwW0mic+DhIozHenZBG47O7II3GVo+HNBoXPQHSaEzzREij8ciTII3GEk+GNBoHPAXSyId/KqSR//00SCP7+HRII7/3GZBGPuvdkEb+5jMhjXzFZ0Ea+XnPhjTy0Z4DaeRfPRfSyDd6HqSRX/N8SCOf5AWQRv7ECyGNfIB7IO1we/8iSKPf330xpB1p718CaZ32/qWQNtPevwzSZtn7l0PaUfb+FZB2tL1/JaQdY+9fBWnH2vtXQ9px9v41kEa+zGshjfyW10EareG9HtJOsPdvgDTyR94IaeRD3QtpZIfugzSyYW+CNLJ1b4Y0mnd7C6TROt9bIY18srdBGvkFb4c08o3uhzTyed4BaeS7vRPSyId6F6SRP/duSCN/7j2QRr7ReyGN7P37II18lPdDGvmCH4A08lE+CGlFe/8hSCM/6MOQRn7fRyCN/K+PQhr5PB+DNPIFPw5p5EN9AtLIP/wkpJEv+ClIIz/o05BG/uFnIO0ce/9ZSCP/8AFII/+L9L7Rr3hup9r59KR+RwBt1QBLM7i1ztXH/ZYHnjl2/V4E3ZMtxm8Q8LJmQh6y8a0x9eEZ86XWOMWdtVP4fYqF+K0QfqYbf3uD8pxRASOWRThd3y0gHlwOtCl8O6DLRRu1zfUO2s6pwn+NM/VKtJf9DiKt+exy0E55VsD3SlbZe9M3+XfSzP/7Hf+nK8Oei3CP7a2wRyrvOpd7u6PuxwFWobpDrDtjA9VD6XgmeP2UUl7KR/zgZzLxTD9i5+9tYu81+ptD/Nwo/26UaZPVIGckR5p26rYYHs0EHlGeRvweLLc//BtCeO6/leWhd/E7Q1sr6Cz8LhZ+44n7Dkq6reI3DC4HjPzsfFtQ+RtPrt9LNe/sYGmGLoXfUxuki/9eDj1Tffh7SfQ/13ud9n4j5KEyWlke1+863VTFZinYlj6Dkf/+DWFz/f7NrVV8Bv77N1cxevG3h5R//6YXz4jz36xD2ijPXVX4r/FbOpo+w26g0ZS7zkE75Xky6PKngk9A7YZ990WO/9NVyWfA8+03yNM86DM8BnAWoR6s+0bAKlR3iHWTz0D14DeA6f4e8Bn478kQrwk7jhERO39vB3uvA/LscdBfDGTp578lxH8Dx7TJM0DOXgQ+g9Zvd+6J4VEn8Ijy4O+8af1+OP89Q8KB38OLsxn4O5uU51VVfAaynzj37vrtVC0fif/OHj3vAozcHrQ5aMbfOE3z79Ir4OlDX4T03pEMD/5+4P1VbDj3a8iGHwm08d+nVPLPCjg/xWl79LceIc97G+9DFTR9051Aoyl3q4N2yvMh0K0fcdjoa4GPXxyhDb8eeLlbnuY86mxq792Oum8ArEJ1l9kLsuFUD/62Ht1/AWw4t33Ea8KOc6iInb+3g73XEbh9GAX/qcxnpLL5b/+ZNvk4yNkXwYZr6dpdMTw6EnhEeVDXas1DbGV4CAfV55orpjz0Ls7XfaOKDSd7hjbcZeu05x6pbHq+HjBy+9fmoNnIy71gw2keA/c3XMPSDF3blOiiuqhseqb6DEbaZ0H/c713BKMzA2W0sjz0bg7y/KKKzZKX43CBwUh7PloY/fh9Osrzmyo+w3Z4LgYlOaAy24He7aq0Da2DcH/oCAdtlOdPVfiv8JvfCzX1E/oGptyrHbRTnr+DLn8IfAJqt03Ax5apw/9PVyWfAX1EhXFe3jXPs9NR927AKlT3sO8Qog3Fb249ej+1lJfbWuI1Ycc1VsTO37uGvdcRuH0mBX8tdM358d9ZNm3yMMgZyZHBtF0J0/UxPDoCeER5tgGPtNaqr2Z4CAd+hzPOZtC7aDPaLQ/jfAayn0R3G7yLtlVBt4VIC5VNzzsAI7cHbQ6ajbysBZ9hi03HNZCrWdo4oLsY6LYj9w9w3E//c71He7mugjxURivLg+1PeQ6v0P46PtOQz4BjyCJg2wYYKc/MChixLMK5jtHbHgz3SZT8wT6XP3S4gzbKc1wV/ivotT5NXxjXo0y5Wx20U565U0t8mgc+AbXbFuDjEsf/6arkM6CPqDCuybvWva531M2/MSxQd5nNJJ+B6sH5HrpfDD4DHwsTr3FfFp9jdb13NXsPx9DXOegvBrr2+XqG2bRJCHK2BHwGbb+Z8+hw4BHluQZ4tFUJDx9nEg4cZ1L7c5uB40zKc0YVn4HsJ54t4PZW02fbEpTTS8/bASOl4f4CTrORl8ngM2xmNMTRpdWOcXRRffj7FLgnkb9He8JxrYjKaGV56N0c5FldxWZdLU7/kM+A7VIEbC6/5pIqPgPvE+sYveh/XaNKW74b/Vyi7TAHbY/63Q332fLdSrSH6L+Rz3CVg/ZHfwcIdPlm8Amo3TYDH/c4/k9XJZ8Bx3EK45o82gi+Vwbrvh6wCtVdZp/IZ6B6cL6H7neDz8BtLV8TNn2GdCxi5+9tYe/hGFrZX6u4TwvXB7eCnO0Bn0FrPLg9hkeHAY8oz1bgkdY38vjaBOHAcSa1P7cZuDZBeW6t0WfAc23c3mqOWzYH5fTS8zbASGk4F8JpHlzLsgfUcH0bfYYBB12bleiKO9tA9RmMdN5zQBXPkA2/Cvhkyj2U4clBnmdUseH8G4lkww8F2lznSLaI0za0v2BrDG0uH+q5VWy4gg9ZUKK9bD6LbPhqB+2U5x7QrS8GG01thL/BeK/j/3RVsuGoIxV0Rt41h7XNUfd2wCpUd5nPRDac6kFfiu7fCDac2xniNa5Vkn5D7Py9q9h7aJ+ucdBfDBozL4xzby8DObsXbLiWrr0mhkeHAo8oD+ra1Up4uO4nHFSfa3/BoQwf7i+4v0Ybjuf4uP3THB/H7S/YChgpDc8IcJoH9VIVG365gy6tfStxv9uNewRpLQZ/85PuQ8C9mqVp7lFdzXBzPwPPQ6yGNLov2Ngly5TnEMjD/VFeH/qjn61if+V1xNDvKnH/h/tj6P98vk7/53JGL/IS/R/59nb7docwPEjbV6rwX35cEy7QlHVsP1PulQ7aKc83wS59G/wb6gvo//zK8X+6Kvk/2N4K+jaPPh+191ZH3bjfSajuMn+T/B+qB/1Quv8l+D/cRnMbgWvDlfZqrWPvoW3f4qC/GOiOz/lcpWmT74Gc/Qr8H61zfVtieHQI8IjyrAYeKZxhH8RzJcNDOPBcHeFoZXno3Rzk+VON/g/uXaR30U/QmrOJs7f4uwaUdjlg5DQPnsMF/4e+a4XfheJ229B1qRJd/KwLPVN9BiN9Zwt9IrpH/+cylqbZHy5juOkZfTSi4TLAc5kSnksZHlfdCrwoIN/pqmS78Fz+lUp4Lq8DD+5zukIeT6hE5+C3NtfbsvYKlmt41c94dTnjVQfkWQ/861fgn0vX0zPVl0bMBg/XGW2Q77KEYKS0KwCPgjxX1GHYhqTb1zl4FiaMZ5cCHgX7mTe0z2J1Gfs+a1qpXoV5i0KG1VcEHHiWkPLcN62U91h7j/YRbTif19DSy5XmXqg+9DNccy8FwKhhyzKAhWOk+kye9fa+NYaOHOQJLf/j/NyCgwd0j982Xc/SNPvc+qCcB/TcDxiJ5vWAR8vXIpmgce86By/Wy9edV+LxoJxtsGW1xPA4B3lOriBDWBbhJPlZb+N24BXlzcI9/W9vUD6GlPBzNtsL9/HXU+7mKhfOQ40Cb8gTAuBDNhh+tq+W/7vyboJ3+lm+vezZfBOW2gjlgv5/TgW5GAfvFgNZ/1ph3m+wT+C5piLgx3k/yrOiSp/YBM/FoNQnqMx24CnOJ2iNX+N0GH6niWwwfr86Sfa5Ixi+XoK0Ze179I3dK3X5mke/KBe47TX6Rf3TSpipzccE5e2Bdv4KVja9czCkX8HKjuuLCmeYuhFjC6NjkwPjQBWMCnLVrUR72Zostc+FDtopz9XgE2+z99i/LgI+3uL4P12V5jZwzKawLp53rQttdtS9BbAK1V32O6q0TkD1UDquSd0MfY3PZROvcd8U2cdKe60vZ+/hHPhGB/3FQGddisrezDCbNtkBcnYLjAu15nM3xvBoHfCI8lwGvOW/n0f5N0AeaqdWlofezUGeO6voFoWxgVP/XchoRf33xH2k/7TGRVz/XeqgnfI8DeTyGaDfuB9i/v9Sx//p8vqvNv33kgr6j+uxWvXfOvZeEvXfs0DOXgr67yIlTBtjeHQh8Ijy4JwhrbXhvCb9H9fhLlTC3c9w9ztwUxrxDnUyvUe+KOptoqmV5aF3c5DnjRV0Ypvj3UG7Zn9IxLXmhj4Tzs8kdU4R50Jd89rrlXDHzWuvB4xEw5WQRve4n2t9TFmzIA/JUmtMfTnI8/4qdlJ+TmxoP1c9c2IfrnNOjM9XIi83AG0aa7Yu2qhtLnfQ9snGz+sUNOc+sP1MuesctFOeB8B+PAh+yHr7f1wH+Y7j/3RV8lOwvRXGpnn0zai9Nznq3gxYheou8wvJT6F60F+k+2+Dn8LtO/Eaf1uC7/l1vbeevYfnfTY66C8GsvTzub9NDPPguSKQs++An6JlpzbG8GgW8Ijy4LyZ1j5obn8IB87rUfu3sjyuubWfVFnnIl9gvY3bAveeGQXdVnGtewNgpDT8rUBOM673xu3nupilGbouUaKL6qKy6Znqw/1cF0Ma3aP/w/d47et9aESDax8a+j+XxpR1EOQhGWuNqS8Hef7Z8LmMIf+H/5aOazxPeR6p4v9wv/hiRq/LL1Zq724XbQcxPEhbZno8bUp+SremrGP7mXIvdND+qHxOL/FpnL03fZP6Ao7DDnT8n659uCcwj2MSau8rHXX3A1ahusv2L5D/w/eh4f6MGdNLefmYnHiN469H13uC+PcuYe/hWP4KB/3FoDFjS6rPtEkbyBnJkcF0sRKmK2J4dBDwiPKsAx5pzRvx+W/CgXMtfB6F8uD8N+U5soLOwvkm/P1j175v7fVnKtu1/kxp+HvMnGYjLyfB/I/L/1njoGutEl1UF5VNz1Qf+j9rII3u0f/hPtG+9tuIBpffhv7PJTFlHQh5uCzz+lCWe6rYX/kxyZD/w/c4cv8PxxsLK2B0+YRrGL3IS9w3ukactiH/h9NGbbPGQdspVfiv4aMp0V6me7j/g7RTntPBLi2r4v+sHqH/g+2ttS+Fr0te7qgb95oI1V1ma8n/4XvKcU30IvB/uN9AvMZ5c/JTETt/7xL2Hu7RvsxBfzFozJoAjuGXg5ytBv9Hy05dFsOjA4FHlOdi4FGj/B/Cgf4P4WhledD/oTyXj8D/cc2TaI3B4uztpYCR0tYCRk7z4Hez24buTX9Yxf5v/nURS9P8LgVfD+T+mMG40t5fBGl0j/4P94n2td9GNKwBPFo2Ku685xpdXhSQ73RVsl1rAY+Cb9rVBnXUgucSwKMxdlSiM49+rPR5Pu57rmW8wrlmHOtq6T4+PqBnqs9jbgxmg4frOfRd1yQEI6WhH6I1Do7Tu9iGZI8ucvCsEWsV9fAMfRkFmz94BvEoVpfxSZ4HPqyCz9iVYfUVAQfuK6I8iw8o5b3HYkObjn7HWpamOQ+Jtq0YuOdYiB70RegezyBq2F+Xr8r1mms+h9OBY+rXVPHNCw4e0D3pJJyvbISeqmV9kGhG3a7lH+K4qAjPyAuFtfq8Eo+7cEzaEsNjXJd6e5X5Nj6+JfnBtVviFc4BaMiP0rxOl2teh/DjXibK894qPLsihmco48QrXDfS2KOmNB/T5VoLdJ3RojwfqcKz9TE8wzkqfv41C/nof502nevNvTad8q2F/Jrj4Tj9QvWhH4RrLUmynR2Q5tqznLXvzbDPOHZU4GsefZZc4Lal6LN8FeZC19s0Oh94EXsP7TSVTe/MgPSLWdlxc/rrxenvyiPGFkbHegfGb1bBKC9XXXkd2svXwal9Vjpopzzfg/ngH8C6AsnLKuDj7x3/p6vSXAmOpzbI05zHfYb8DDXWvQmwCtVdtseR1h2oHkrH79/+Dvoa369JvCbsrrParvfWsvfwO3L9DvqLgSz9GxieDQyzaZMfg5z9HsZsWvPD/TE8ugh4RHnWAG/5/Czlx/kX6k+tgdsnzkGev1XRLavE6XfrP8K2CjBSnn/uI/0nT7tb/6120E55/gNyuRf0G/dDzP/bDxj+f7q8/qtN/008oJS3mh6rVf9dxN5Lov7LwLwQyZHBtFIJU9yevjXAI8qD56P5eJbyo/7j3zvl41v0LadbWuN0i7z/69Z/hG0tYKQ8B1XBqKX/tMZUcf4f0k55Dge5PBL0G7Up7juZ5/g/XV7/1ab/Tqyg/7geq1X/rWHvJVH/zQI5mwf6r1H+H9dRrr3JJo3v0cLvzuK+Bi29Hfe935WAkdLwNzj4ehKNxVFvE02tLA/OFVCekyroxDbHu6ZdPwr7Q/g+Ahwz4txxUtc7cJ3GteamdT4tbs0N55Nde2bpHvfHrosp6yjIw8+6Vdp7ek4VOyk/pz20P7ae+foLKmB09S++loK8xPl6BVvtXIugtlnroG11Ff4rfG+lS9NP4d8wu8hB+6P7GMB+XAZ+CD9LYP5/jeP/dFXyU5S/25BH34za+wpH3esBq1DdZX4h+SlUD/qLdH81+CmUj/hBvMZvTfDvDLjeW8fe64A8lzvoLway9PN1J75eYtrkSpCza8BP0bJTl8fw6CjgEeXBdYNG7avkey7QRrWyPLgfgvLsqqCzcF8Qfo/GtS9I61tScfYW/US+L6jNQTPuRTH9YYVNXwnvrGJpmt/ZobqobL5f12CcZ+9XQRrdo//D98zu6329RMNFgKdR+8VddSvwolDvHKPymbMC/g5NLXhwv67G3hSttVPU9dL7Y7muWc141eg9iHFjJFzrTRtmg8d1NpOv/+xrjK6xsJafHafDXHssVjl41ohzofXwDOdhFOzn4F7To1ldxr6/HvxBhbWrQobVVwQcuHZFeY6dUcp7n8WG9rHab3buqzMl6GdU+s1OLVvmWufleg3XEFpj6MA1hHdX8XMLDh7wOXY8G9YIPVXLWWyiuRFn80gmaNy7ysELhXFYXonHBZyDa4nhMe5X/kSVuSs+n0fy45rTxL3BGvKjtIe14JoT4+cOcE7sc3XO97nOw/PfVckGw8elnTad6wDaN8nnoUx+zXFSXF+h+tCm4xnNJNkBPB+L9NB91r5nm7hsTKHA1zzaX753BOckKc8PYI6MZIf2Ta5i76HNobLpnQMgfQ0ru3FzvYU8YmxhdFzmwPiTKhjl5aqQ15wL4vPR8xy0U55fwjzhr2G+meRlBfDxn47/01VpDI1jg0bPR2Pd6wGrUN11z0c/VGE+mnhd73w0n8dO4nz070DO/gnjD615w8tjeLQKeMR/O8Q1b0f5cS6B+lNr4PbvcpBnbxXdskKcfrf+I2wrACPlyc6ojFFL/8nT7tZ/FzpopzxjYew53t7jHDeuxx3k+D9dXv/Vpv8OnFHKS/mIHyNdj1vF3kui/psIckZyZDDNU8J0eQyPcN+467dmaE0H58+o/+B6j9Z4IG6OD8cDlEa8Q51M75EvinqbaGpleejdHOQ5uoJObHO8a9r16xOG7l1rO+gz4TxAUueukny+2/WtGX6+2zUvRHmOhjx8Ddh1Dpvy9FSxk/LzE0P7huqZe1lYAaNr7oXPi8Wdy9ZYG3TRRm2z2kHbKVX4r/HbzZq6DtvPlLvKQTvlOR3sxzLwQ6jdcL59teP/dFXyU7C9FcamebRLfD871o3fvxOqu8wmkp9C9eDZ70fHBOCncPvOf6MMf0cHscedD8c9GZTnUgf9xUCW/rg9uXgmfjnI2WrwU7Ts1KUxPDoaeER5cN5M68wVtz983Qp9lFaWxzW3dnkFnYVrvLgnx7U3Q2ufbpy/hT6hay85pxnXFU1/yNv0efDOCpamuf+c6qKy+T4mg3G+vV8BaXSP/g/fS7Sv9ztxH12zP6xkeFx1K/CiUO8YW/lbjd3YL2vBg/uYNNYZtdYOUNdL7xviutU1tmvkfpK4MRKudXjMHrMLs8Hj+nYsn2fe1xhdcw5a45k4W+Fay13h4FkjvltbD89wvkvBTxncn3UMq2vwe3vgdyvMkXdnWH1FwIFz5JRn4MBS3pdabOiHoK/E92ztyz3N6M+h/0T3uD9Lw2dwrSdxvYZrNa0xdOBazRuqjCcKDh7QPc7p8u9oaPa5kfzGh6ZPSzJB8wsrHLxQGO9qnZXvxrnOlhge4x6/d1WZI+TzpvybCzh3jPvpNORHad9Xt2vu0fVtMcrzwTrnVV1ncvk3FbX26yntaeuud0/bJ6rw7LIYnlXa06b1PU2l7zJ24zxgLd+c/FwVnl0Rw7Nq35zUmq+I06X4O+jkC+AZsiT5CTjHhfTQfda+Z4/Faf++fB79M76HAdcGKM93HXPVtH9vBXsPfRIqm96ZDukXsbLj1lwU5qrL/KYWRscVDow/rIJRQa66NefpUS+Ycuc7aKc8P4P5+l/Aug/JSx74+HfH/+mqNJeFY8f18jQPyns/4CxCPVj3BsAqVHfZN1ZoXYjqoXT8ffO/QV+jfMQP4vV6G7t+o9713oXsvQ7Ic6WD/mIgS/96hmc9wzy4NxTk7O8wPtWav78yhkcrgEeUx7Xnmt6j/DjXRP2pNXD7/znI80gV3ZKXp9+p/whbHjBSnv/tI/2nQLtT/6100P5oHpibaLX3uNaE6+IHOP5Pl9d/tem/6QeW8lbTY7XqvxXsvSTqv/EgZyRHBtN8JUxXxvAI9y9TnouBt3zs7jq/wb/7ysfy6FseZmmN0y0K/q9T//F9Lqj/Oqtg1NJ/2nvXuf+HtFOeY0AujwP9Rm2K5zd6Hf+ny+u/2vRfTwX9x/VYrfpvFXsvifpvDshZL+i/Rvl/XEeh/lsHvJ3P3uO/CYnjev5byvRuDvIsqaJbFPblOPXffEYr6r+l+0j/ae1JivP/kHbKswzk8izQb9Sm+N3/tY7/0+X1X236b00F/cf1WK3672L2XhL13zkgZ2tB/2mdYboyhkfzgUf8N5lNGu2tw/2E9H/cd6flt8btMUXclOaaa6X3aC6y0ncsprNycI1rYwWd2OZ417TrbDi/UekcDK4TJnVtO8nfTHF9C41/M8W1bkx5joE8JB+Vvm1CeXZXsZPy65dD5zfqWZu9sQJG1/iOr5vHfetEa5zGaaO2cf3G+G1V+K9wpkh1nIbtZ8pd4aCd8twF9uMJ4IdQu+F+nOc5/k9XJT8F21vjtwxxvz7/hjHWjb/DIFR32VkB8lOoHlx7pvvngp/CbRL3J13fSna9x7+lgrbsEgf9xUCW/rjf1MQ1+SeDnD0P/BQtO3VJDI+OAR65fltXy2/i9ofva3PNfx3D8OH810sr6CzcA4pnI1x75LXOS8btucRxMqXhWVROM+47NP1hOWGEd+azNM3zy3wcT89Un8G42N7PhzS6R/+Hn+nY1+dOiIYVgEerP/Bz0a66FXhRqHeNRflbwgXsl7XgwfMkGvsQtfaOoK6XPr/BdetKxqtG7zev9q2ANGI2eFzf3Obr30n5BoPyObCKOsy1x2y+g2eN+N73SL5boWQ/B88VHMvqMvb9/w5UrbeAdpvGBxwH7q244KBS3q9ZbHE2nJ810NwfXu3MI9pwtOt0j+cKNGyZa58L12u4htAaQ0fZHroqfm7BwQO+xojfem+EnqrlG/vc922Er0XjXpevpTAOy2t+nyPuO2I4VqI8v6syd8Xn8/g3iXBOE8+BaMiPznzfEM/4nJjr25uU5691zve5vtnDv5+bDYaPSzttOtcB9N1XPg9l8muOk+L6Cv4+nMumJ8kO4Nja9S2qrH1vmn1W/t29PNpfvnaKc5KP7n88qISZZIf2jXMfC20OlU3vTIP0VazsRs71IsYWRsfFDowTqmBUkKtuzbkgPh+92EE75ZkEvtcUe4/9aznwsdPxf7oqjaFxbNDo+WisOwnz0UdCX+PzysTreuej+Tx2Euejp4OckRxprj9fEsOjecAjyoNzwovZe5Qf5xKonVpZHno3B3mOq6JbtM51c/23mNGK+u+EfaT/tPxvrv/mO2inPHmQywLoN+6HmP8vdfyfLq//atN/xQr6b6TrcfPYe0nUfz0gZ0tB/y1XwnRJDI8WA4/47xKaNFrTwe910f9xvWexEu64bwQgbkoj3qFOpvfIF0W9zb/XPY2Vg9/rPq+CTmxzvGva9U/jh+5d3xRDnwnnAZI6d5Xkb3m4voXGv+Xhmhd69HemIA/JR6Vvbjz6PeoqdlJ+fmJo31A9cy8bKmB09S8+Lxb3DQ6F9nbOKx3L8CBtW6rwX2EvW0FT1rH9TLnzHLRTnmvBfuwAP4T6As633+b4P12V/BTl37Ev+81Ifp4H68Z9/EJ1l9lE8lOoHvzOB93fCn4Kt+/E60rfSna95zq7QHnWOugvBrL0x/0+Gn7/ZCfI2W3gp2jN/62N4dGxwCPX7yRqjRv5GiPhoPrQRrWyPLi2RXmeWEFn4Rqva38x+gla+3Tj7C36hPy7/9XWFU1/OM+mL4d3FrM0zbPDfBxPz1SfwXiOvV8MaXSP/g9fh9zX+52IhvmAR6s/5BkeV90aa8jId7oq2S7lbwkX6h3z4z4mjXkOrbUDHJNI7xviusa11tPI/SRxYyRc60gbZoOH6wwce85PCEbXWFjLx4jTYa41xsUOnjXie9/18AznYRTs5+C+oeNYXca+v/8g1XoLaLdpfMBx5CDPwoNLeT9sscXZ8HksbV/utXV9Fx/nY3DfkIYtc+1P5noN1xBaY+jANYQHqvi5BQcP6B7X9fl4VrPP1fKNfaIZdbu2r0XjXpevpTBfmNfcnxb3/SLX9zu+UWXuis/n8bETzrviPi8N+WnkXivXN/8oz/frnO9znRXl33XNQr5Hv61i07kOoH1DlG8e5NccJ8X1FVzfddn0JNkBPKeN9NB91r431T7jmEKBr3m0v3xOEr9DSXn+DHNkJDu0b4j7WGhzqGx6Zyqkr2BlN26utzuPGFsYHWscGP/e8LX97rzmXBCfjz7HQTvleRjmCR9xrIufB3yccPDw/9NVaQyNY4NGz0dj3UmYjx5/cCkvn1cmXtc7H833xCVxPnovyBnJkeb689oYHuWBR5QH54TPYe9RfpxLoHZqZXno3RzkmWJpjdMt8j6oW/+dw2hF/XdAFYxa+k/L/+b6b7GDdspzCIw9DwP9xv0Q8/8THP+ny+u/2vTfnAr6j+uxWvVfnr2XRP13JMjZCaD/zlPCtDaGR+cAjygPfjfddU6c3sH1Hi29zfUvX9vpgDTiHepkeo98UdTbRFMry0Pv5iDPggo6sc3xrmnXd8G+Ia5z0GfCeYCkzl0l+aye6ww+P6vnmheiPMdBHr4G7DpTR3nOqmIn5ecnhvYN1TP3cm4FjK65Fz4vFnfGTut8KaeN2maeg7ZVVfivsbdJc+4D28+Um3fQTnnWgv24BPwQajecb9/i+D9dlfwU5d+xL/vNSP7tLKwbv38sVHeZTSQ/hX9LFPeTXwV+CrfvxOtK3+hyvcfP8HVAntUO+ouBLP1xe3LxfONlIGdbwE9p1Pd9iEfHAY9cv9+n5X/wNUbCQfWhjWoN4te2KM91FXQWrvHiviHXGq/W3sU4e4s+IV/jrbauiPuGTod3lrM0zXbk+8jpGfcIcb8Wv5OE/k+epe3LfTroW+IeKLpH/2d+TFlTIA/fS8/rw730T6xif+Xt5JD/c4Eti387Ge0k5XlqFf/nAnguBqX2Rv4SDy4A2hTOdxRctFHbLHfQ9qwq/L9AAaMS7WVjFD5P7TrH8XywSy8E/4baDcdhr3f8n65K/g+2t9Z5bn6eb6WjbhyzCtVdtk5O/g/f74T7AF4H/g/fO0W8xvEXX490vTefvYd7rlY46C8GjbF1+JsyLwY5e30D5qlXxPBoCvCI8uB+oXOU8HD7QzioPtf89xSGD+e/31rF/yFfAOdJuO+gpNtC17wRPV8AGCkN1585zYPnOcYN3aMfcRq8czpLM9mXKNFFdVHZ9Ez1GYzL7P3pkEb3pwDuxSzN4O5Wwh2337sbMBINrv3eS22cgXd4WZMhD/d/eH1ogz7VcP8n349zomQzCBvaT8rzQBX/h8+vns7oRV6eA7SdLk9bl4s2wn26g7YvVeG/gk7sUqLd6f8sc9BOeb4Gdukb4N9Qu+H51Z87/k9XJf8H21thXWLQ/zkfcBahHqz7AsAqVHeIdZP/Q/VQeg7ufwb+T9yYgbCbPnOuvUfs/L1u9l4H5DnXQX8xaKytM23ybZCzn4P/o2Wnzo3h0WTgEeVZDDxapoSH2x/CQfXh3EIry+P6bsjvq/g/5AsQ3ThPgn6Clr8XN0+C64SUtgQwcpqNvLxz7NA9+haL4J3TWJqmXFFdVPZpjAb0dU6DNLrfn/2fSZCnHv8ne8hQ3Gj/5yxbViX/h/K0VsCIZRFO3v+Ql2cBbQrt3eWibRLDg7RNrML/sxQwaso6939Od9BOeaYcUuLTNHtv+ib1hWXAx1mO/9NVyf/B9j5bnua8y98921H3uYBVqO6yvRXk/1A9uG+N7mceUsrLbTTxmrDjeBex8/eWsPfQti930F8MZOk/m+E5m2E2bTID5IzkyGA6TQnT8hgeTQIe8bULTf+HzxsQDvR/CEcry4PjFsozp4LOMrSRL4C+Bb2LfoKCbqtob88CjJSGczmcZiMv68D/IXp64Z1FLE1Tt1JdVDY9u+zcIkije/R/5rE0zf4Qt28JfTRu/3HfEvo/p8WU1QF5qP1aY+rLQZ5iFfurME8w6P+cYcsim0HYsL9RntOr+D9nwHMxKLU38pd4cAbQtkieti4XbdQ2ixy0nV2F/2coYFSivUzX8n3KSDvluQDs0krwb/i4xvx/veP/dFXyf7C9z5SnOe/yd8901I3fgxOqO8S6yf+heigdfe0rwf+Js9GEHce7lb5ldxp7D237Mgf9xUCW/jMZnjMZZtMmF4GcrQf/R8tOLYvhUQfElAe/DaI1b8D9AcJB9bnGzJQH538oz5Yq/g/5Auhb0LvoJyjotor29gzASGk4R8VpNvKSAf9nqYOuJSxNc111CaPLNWdC/gzOCdE9rkcuYmkGd68S7ji/rRcwVvLb8Pxpb0xZ7ZCH2rQ1pr4c5Lmtiv2V1xFhD8oo2QzC5ponuLOK/8PlnfvpyEtlfdPvoo3aZomDtifvg/k3TV2L7WfKPcVBO+V5BtilZ4J/Q+22FPj4csf/6ark/2B7K+jbPNo7au8zHHWfCViF6i6zteT/UD2UnoP7l4H/w/0G4jVhx7l0xM7f62XvdUCe0x30FwNZ+vnY5wyG2bTJc0DOXg7+j5adOj2GR+3AI8qD8yGnKOHh9odwUH0mD7V/K8uD4xbK8/oq/g/5AjhPwn0HJd0WIi1UNj3jXAGl4f4fTrORl3e0Dt2jH3EyvLOIpRm6+pToivMjqL5qfgT6P70szeDuUcLNfRZ67gGMRAP2FbpH/6cnpqyJkIf7P7w+tEEfSoj/Q9hc/s/H6vR/FjF6kZdok7Tmfzht1DaLHLR9pvH+j+r8D/d/XPM/lOfzYJe+CP4NtRvO/3zf8X+6avV/FOxLHv0Zau9THHXjHK5Q3SGWRf7PUsaDHNx/D/wfbiOI14Td9Jm59h6x8/d62HtoW+Y66C8GsvSfwvCcwjCbNvkyyNn3wf/RslNzY3g0EXhEeXA+RMsf4/aHcOD5L2r/VpYHx8yU5+dV/B/yBYhunCdBP0HL/4mbJ0H/h9L6ACOn2cjLWPB/yA7PhnfmsTRD11wluuLmtag+/MZctfPv3SxN0//he3boGe0z0YBreXSP5796YspqgzzUfq0x9eUgz7+r2F/5ObGh818LbFnc/8H+Rnn2VvF/FsBzMSi1N/KXeLAAaJNv7yHfjtPWxvAgbblD42kbB/mKghgb4evz3/dyyd74Q0t8arP3hlfUF/AcxiGO/9NVyf/B9l4oT/Og/3MS4CxCPVj3IsAqVHeIdZP/Q/VQeg7uDz60lJePJYnXhB3HZIidvzeXvYf7P/oc9BcDWfoXMjwLGWbTJh0gZyRHmva3L4ZHbcAjytMNPFL4brPzdwsIB46r+ZiZ8uCZYcozq4LOMrSRL4B007voJ8jrtsr2dgFg5PtN2oLhNA/+zkrL0L3pDwXHO/z7Hvv6HDn5M65z5HMA91yWZnDPVsLNxwP0PBswEg3oy9H9CTbOwDu8rAmQh8syrw9lua+K/ZWf/xnIox9HNoOw4fwB5VlcAaPLJ+R+OvKyB2iT1zdDvh2njdom76Dt1Cr8l/dTNm3S1LV8/id00E55zgS7tBz8G2q3AvDxYsf/6ark/2B7K+jbPNo7au8FjroXAlahustsLfk/VA+l5+B+Lfg/3G8gXhN2nDNF7Py92ey9DsjT66C/GMjSz8c+Cxhm0ybngpxdDP6Plp3qjeHRBOAR5cE5soISnpDhIRw4riYcrSwPvZuDPOur+D98TgTtLfoJWmOwOHvbAxgpDdeEOM1GXn6VG7pHG3I8vDOPpWnKVdz8D/o/xHPX/A/6P9wnGgd0F4Vxx/ltIWAkGlx+G/o/YUxZ4yEPyXVrTH05yHNDFfsr3yeH/J8uWxbZDMJWAIyU5+Yq/k8XPBeD4fN9yMsuoE3r+4ecNmqbeQ7a7qjC/y4FjJpjX2w/U+5sB+2U5wlgl54E/g2121zg4wsc/6erkv+D7a2gb/No7/hcJta9ALAK1V1ma8n/oXpwHo7unw/+D/cbuI1wzZm63gvZex2Qp9tBfzGQpZ+PfXoYZtMmTwU5e0ED/J/uGB6NBx5RHvz+j9b4m9sfwkH1ufyf8Qwf+j8vr+L/kC+A6y3cd1DSbRX9ny7A6PJ/OM1GXk60ygX9nxPhneNZmqZupbqobHpGX4fa9HhIo3v0f+aztEbOP7p8HZcvR/fo/+RjyhoHeUjuWmPqy0Ged1Wxv/I+4ZD/g2P7YlDZR3tfFf+nAM/FoNTeyF/iAf5+3fHitJX7AEQbtc3xDto+0nD/c+j3wbRox/Yz5c520E55Pgl26dPg31C7of/zdcf/6ark/2B7K5z3cc5ldjvqRj9FqO4y+0/+j2uvH91/DfwfPkfhWn8ne4HY+Xt59h7ObXQ56C8GjVnrQJ/0AZCzrzdg/asrhkfjgEeUB/W3lv/D7Q/hqOT/jGP40P/5fhX/h3wB/L0N7jtoznfF+T8FwMjno9qC4TQbefm9vec6RhRwNgr/zpY6sXneG/3phOf/sWfza3b4nGHPY8aUl5dj/29hz63seRx7Hs+e29jzRPY8lT1PY3ims//PYM8HsedD2PNh7PkI9tzJnmex56PZ87Hs+Xj2PIc9z2XP89hznj0X2HM3e+5lz33s+ST2vJg9n8yei+z5VPZ8Ontexp7PYs9ns+dz2fP57HkFe17Fni9iz2vY88Xs+Qr2vJ49b2DPm9jzZva8hT1fzZ63seft7Pk69ryTPe9mzzew5xvZ883s+bHs+Xb2fCd7fgJ7fjJ7fhp7vps9P5s9P489v5A9v5g9v4w9v5I9v4Y9v54938ue38ye38+eP8CeP8aeP8OeH2DPD7LnL7DnL48p6Xi6sjam9K58b3f3wILCQNgV9ucLCzf09eS7ezb09oV9YU9fz6ZCX1fXQF9334KFGxYuyC8Mu7sGws09C7s2W+V/XUbOjuTGiJWVTwvN728QzfnRXeEHxsjx79tyND/qe3zbyn4QlBwdqTpuiQqclR1e7mj58K+sTttL0/9wdvQ0dw309CxcuGCBpow+lJVrm8lj0tE22ZTozHGCNI9JCc2C/Tv8TzYdNGcE2/mRBunH0dL8HQF53BD29/f29g1+fML0lR/b8owM7Y1iU4eJ/22fTb698P//2nivjf9n48C+l7Fxwb43zsbGlzFxi/1/q43H2nicjcfbeIKN22w80cbtNu6w8SQbP2RxTLHPU208zcbTbXyAjWfY+EAbH2Tjg218iI0PtfFhNj7cxkfY+Egbd9p4po1n2fgoGx9t42NsfKyNj7Px8TaebeM5Nj7BxnNtfKKN59l4vo3zNg6J/zbusnG3jXts3GvjBTbus/FCG59k40U2XmzjJTY+2can2Lho46U2PtXGp9n4dBufYeNlNj7TxmfZeLmNz7bxOTY+18bn2fh8G19g4xU2XmnjVTa+0MYX2Xi1jdfYeK2NL7bxJTZeZ+NLbXyZjS+38RU2vtLG623cb+MNNt5o4002HrDxZhtfZeMtNt5q46ttfI2Nt9n4Whtvt/EOG19n4+ttvNPGu2y828Z7bHyDjR9j4xttfJONb7bxLTZ+rI1vtfFtNr7dxnfY+HE2vtPGd9n48TZ+go2faOMn2fjJNn6KjZ9q46fZ+Ok2foaN77bxM238LBs/28bPsfFzbfw8Gz/fxi+w8QttfI+NX2TjF9v4JTZ+qY1fZuOX2/gVNn6ljV9l41fb+DU2fq2NX2fj19v4DTZ+o43vtfF9Nn6Tjd9s47fY+K02fpuN327j+238Dhu/08bvsvG7bfweG7/Xxu8jObJ6+gP2+YM2/pCNP2zjj9j4ozb+mI0/buNP2PiTNv6UjT9t48/Y+LM2fsDGn7Pxgzb+vI2/YOMv2vhLNv4/G3/Zxl+x8Vdt/DUbf93G37DxN238LRubH3T+bnRvLmnf2Uyc9wby/sD3xsj6LdJ0f8m0iwLdA2OTTffXojJ+qED35rE6fuoYYZzfl5PLULCtw80JlxvTX/6mIDc/GNOYMV1+dFcoSfMPU0JzRpDmH6WE5qwgzT9OCc1jBGn+SUpozgnS/NOU0NwiSPPPUkJzqyDNP08JzWMFaf5FSmgeJ0jzL1NC83hBmn+VEponCNL865TQ3CZI829SQvNEQZp/mxKa2wVp/l1KaO4QpPn3KaF5kiDNf0gJzZMFaf5jSmieIkjzn1JC81RBmv+cEpqnCdL8l5TQPF2Q5r+mhOZuQZr/lhKaC4I0/z0lNOPa1Whp/kcTtvNDTUjzP1NC8/cFZftfKaF5nmA7P9yEsv3vJqT5kSak+T9NSPN/m5DmvU1I8/+akGZz2rvZaM40Ic3ZJqR5TBPSnGtCmluakObWJqR5bBPSPK4JaR7fhDRPaEKa25qQ5olNSHN7E9Lc0YQ0T2pCmic3Ic1TmpDmqU1I87QmpHl6E9J8QBPSPKMJaT6wCWk+qAlpPrgJaT6kCWk+tAlpPqwJaT68CWk+oglpPrIJae5sQppnNiHNs5qQ5qOakOajm5DmY5qQ5mObkObjmpDm45uQ5tlNSPOcJqT5hCakeW4T0nxiE9I8rwlpnt+ENOebkOawCWkuNCHNXU1Ic3cT0tzThDT3NiHNC5qQ5r4mpHlhE9J8UhPSvCglNP9OkObFKaH594I0L0kJzX8QpPnklND8R0GaT0kJzf8UpLmYEpr/IUjz0ia0Vac2Ic2nNSHNpzchzWc0Ic3LmpDmM5uQ5rOakOblTUjz2U1I8zlNSPO5TUjzeU1I8/lNSPMFTUjziiakeWUT0ryqCWm+sAlpvqgJaV7dhDSvaUKa1zYhzRc3Ic2XNCHN65qQ5kubkObLmpDmy5uQ5iuakOYrU0LznwVpXp8Smn8g+Jsg/Smh+UeC7byhCfvzxiakeVMT0jzQhDRvbkKar2pCmrc0Ic1bm5Dmq5uQ5muakOZtTUjztU1I8/YmpHlHE9J8XRPSfH0T0ryzCWne1YQ0725Cmvc0Ic03NCHNj2lCmm9sQppvakKab25Cmm9pQpof24Q039qENN/WhDTf3oQ039GEND+uCWm+swlpvqsJaX58E9L8hCak+YlNSPOTmpDmJzchzU9pQpqf2oQ0P60JaX56E9L8jCak+e4mpPmZKaH5u4J7mZ/VhO387Cak+TlNSPNzU0Lz7owczc9rwnZ+fhPS/IImpPmFTUjzPU1I84uakOYXNyHNL0kJzfMEaX5pSmj+tuAY42VNKNsvb0KaX9GENL+yCWl+VUpoPkCQ5lenhOYZgjS/JiU0HyhI82tTQvNBgjS/LiU0HyxI8+tTQvMhgjS/ISU0HypI8xtTQvNhgjTfmxKaDxek+b6U0HyEIM1vSgnNRwrS/OaU0NwpSPNbUkLzTEGa35oSmmcJ0vy2lNB8lCDNb08JzUcL0nx/Smg+RpDmd6SE5mMFaX5nSmg+TpDmd6WE5uMFaX53SmieLUjze1JC8xxBmt+bEppPEKT5fSmhea4gze9PCc0nCtL8AUGaM1EZY2xZBaA/Y3lg/hdVF7REoTUKY6MwLgrjozAhCm1RmBiF9ih0RGFSFCZHYUoUpkZhWhSmR8HM75v5bjP/a+ZDzfygmS8z80dmPsXML5jxthl/dkbBjE+Mv278V+PPGf/G2Htj/4w9MPrR6AvTf4w8Gf6atd/5hidRCIGWH9j4hxExP4rCj6Pwkyj8NAo/i8LPo/CLKPwyCr+Kwq+j8Jso/DYKv4vC76Pwhyj8MQp/isKfo/CXKPw1Cn+Lwt+j8I8oPBSFf0bhX1F4OAr/jsIjUfhPFP4bhb1R+J9laCYK2SiMiUIuCi1RaI3C2CiMi8L4KEyIQlsUJkahPQodUZgUhclRmBKFqVGYFoXpUTggCjOicGAUDorCwVE4JAqHRuGwKBwehSOicGQUOqMwMwqzonBUFI6OwjFRODYKx0Xh+CjMjsKcKJwQhblRODEK86IwPwr5KIRRKEShKwrdUeiJQm8UFkTB/A69+V128zvl5ne7ze9Ym991Nr9zPPi7v1EwvwtrfifV/G6o+R1N87uS5ncWze8Omt/hM79LZ36nzfxumfkdL/O7VuZ3nszvHpnfATK/i2N+J8b8bor5HRHzuxrmdybM7y6Y3yEw3+U336k332033zE33/U237k2330230E23wU238k1340131E13xU139k0350032E03yU03+kz360z33Ez3zUz3/ky370y34Ey30Uy3wky380x35Ex31Ux3xkx390w36Ew32Uw3ykw5/bNOXZzrtucczbnfs05WHMu1JyTNOcGzTk6c67MnLMy547MORxzLsWc0zDnFsw+frOv3ezzNvuezT5gsy/W7BM1+ybNPkKzr87sMzP7rsw+JLMvx+xTMfs2zD4Gs65v1rnNuq9ZBzXrgmadzKwbmXUUs65g5tnNvLOZhzXzkmaezsxbmXkcM69hxvlm3GvGgWZcZMYJxm82fqTxq4yfYeyusUNGLxs9NTZb6ofH23i2jc/fs23b1s1bB3Z2btoxsKtz+47dndf27964pfOG/m17Bjq3bu98zNbd2wd27TKZ99qXZtl4xc4dN2zdflXn9kcL2bp947Y9u7bu2N65uX/rtoFNJlcuM5R7sX3rwt07dvZfNdC5a1tUWX6wyv5t23Y8ZmDTvE78367Oa/fs2t25a3f/zt2dm3fuuLZzcGdJcLgt7zBbXv/u3QPXXre7c/eOzv5NmwzeLZ07bhjYuTkq0/y/p878i+rMv9rmP9Tm3xhRM5h5166BnbuvvLb/xis3bN195a6tNw+Yf/+yzuIz2bqKH1Nf9on1ZZ9UX/ap9WWfXl/2w+vL3llf9mPryz6nvuzz68se1pf9pPqyL6kve7G+7KfWl/2c+rKfX1/2i+rLfnF92TfWl32gvuzb68t+fX3Zd9eX/Yb6st9eX/Y768v+5PqyP72+7M+uL/tz68v+0vqyv6K+7K+uL/tr68v+lvqyv72+7O+pL/sH6sv+GZv9WJt9xZ4N27Zu7NzUv7t/yDUxDtH248gfAjfosyN+84ERv2n8Y3MdQ29a1+u6oRLIWxvufT1gX6zF3cgAtHNtfLCNl+7c2X9TVMOmgRs7d+zZ3bljc+eGHXu2b9qFL60ayUuXjOSl9SN56VfByHjxu5FU9peRvDSpDucQ3+sc4XtHZ0YAck49L7XYzMeN5KV5I3mpZyQvLR7JS6eN5KWzR/LSypG8dPFIXro1O4KXnjSSl95gX5ppXwKZvXbPtt1br9t203DBpZffbF+uVeDpvbePBOl7R1jZB0dS2adGWNlfRlLZv0by0v9G8tIJY0bR2vkxI6jxvDEjY+TKkVS2fYSV7RxJZc8cYWXPHUllbx9hZe8aSWVfGWFl3xhJZX8dYWUPjaSyabmRVXZgbgSVLRphZctG+N7ZIwG5YiQvba8TIfkqBwR1VDaHeVN1vXTUSF6aU89L/7AvHTOSl+aO5KWukbx00kheOn0kLx1Sp/dL7x2RGUFlR4/kpVPrRPiIzb/G5p85/L1dezbs3tm/cXf8y+tG8/J6+9I0Gy93E0jZN9bTbvTS1vrq2DaSOm4L6uP8Xmqx2rBR9jPqwUYvrRohtjX1YbtkJNi21oltXLac33UJHb1852hefnJtXKHsT6uHK/TSs+ur43kjqeP1dXJ+sn2vRoml7HVJLL1Ur8TSezVKLGWvS2LppXol9uDRSOzBo5HYg+uT2INHIrEH1yexB49EYg8eocTOHA3nZ46G8zPr4/zMkXB+Zn2cnzkSzs8cIefn1qcr5o5EV8wdoa6YW5+umDsSXTF3hLqidzQS2zsaie2tT2J7RyKxvfVJbO9IJLZ3hBJ7cn0Se/JIJPbkEUrsyfVJ7MkjkdiTRyixZ45GYs8cjcSeWZ/EnjkSiT2zPok9cyQSe+YIJfaC0XD+gtFw/oL6OH/BSDh/QX2cv2AknL9ghJy/nPXHuphHL68bzcvra+MKZa9r1Hw50wQ11rFtJHXUO2peX5+WXj8SLb1+hFp6fX1aev1ItPT6EWrpq0ejK64eja64uj5dcfVIdMXV9emKq0eiK64eoa7YWZ/E7hyJxO4cocTurE9id45EYneOUGJvGY3E3jIaib2lPom9ZSQSe0t9EnvLSCT2lhFK7F2j4fxdo+H8XfVx/q6RcP6u+jh/10g4f9cIOX93fbri7pHoirtHqCvurk9X3D0SXXH3CHXFPaOR2HtGI7H31Cex94xEYu+pT2LvGYnE3jNCiX1lfRL7ypFI7CtHKLGvrE9iXzkSiX3lCCX23tFI7L2jkdh765PYe0cisffWJ7H3jkRi7x2hxN4/Gs7fPxrO318f5+8fCefvr4/z94+E8/ePkPNX2y0V/x7he2MzdYCkl+o5ZIXvnTWSylaN5KV/1LnThN57esvI3ntzywhAvnckL31iJC99xb70/6XcXWjNARzHYVqMzLzMbDZh0YrdKMMWZpvVZhbJEjWMZEutFc1Lba1NS1tK4W4pKVMiq2nzssVoNrSaTLNmtUWR1TTLympSHFJSzmM3u3r6fv6/ztY6rfMP/13/O3slW5FT7YRxU2EsQdBqQemCsvAWO2RsN44dlLHDOPYA3axQcwtD4eHiBa0UVIiPVSJj5YKqBbXiY3XKWI+gQUFDgkbwFqHTYCx8mo0tk7EEHFslY8k4liZjmThWhq5GIi8ICg2zwix058MgshbH6mTsOo41yVgLjrXJ2DMceyFjvTg2KGPvcKx4prlr6PrRLQk3dygcjlkk6JigUkGnBNUIuoNXH5WxcUEhswBNFxQhKEbQMkEJgtIF5QjaKShfUJGg0gAK8u2AStlqDqBgf6ieyFiXoB5Bw4I+4y0mZCxkto2lzjGXMQciswUVYuEJdKUSWSnoEhbWy1ijoG4sfIvuvUQOCwqba4UL0S2ZC5HxgjKwMBfdLoncK6gUC8/I2DlB9Vj4GN1TiewSNIyFKyPMbYiAyOwACvIvnW2ylR9AcX8+2N8/JOHXm/CyWIGnrJKxqzh2G12zRD4UNICFY+jGJfL7hwAHixbNs8JEdEkSmSIoDwsvo7spkY2CWgQ9DyD63fNSFj/hIcdkLCLSxqIiYSwZx7LRbZXIXEFHsPAWulaJ7BD0OoDo9T8gixN4k8nzYWzpfBtLRJckkSmC8rCwDl2DRN4V1CqoQ1BvANGLv18Wx/H6X2UsNsrGFkfB2HocS5WxAzh2FN1xiSwTVIuF/eg+SOSIoCnRP77TD9v0aFiMj7abrJCxHBzbg26/RBYIqsLCdnTdEtkn6OP/vCRHZXH2ArvJvAUwtgbHMtFtkcjtgoqxsApdtUSeFXQDCx+ha5fITkFDWDg5xtyUGIicIWg5Fm5Et0kiNwsqwMIydBUSeVrQFSy8h+6+RLYJeoOFX9BNSGRILKC4WCtci26dRKYJ2oeFJehOSmS5oItY2ICuSSJbBPUFUTjp59c36oCt0HjyDAA=","debug_symbols":"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2Hr6aetZnZFtXBd/5oKCtQX9/RbdHnOMXiv4p/fVJFOrEVOryaZWU0ytpppaTTO1mm5pNWExtZpgajWm9uJgai8OpvbiYGovDqb24mBqLw6m9uJgai+OpvbiaGovjqb24mhqL46m9uJoai+OpvbiaGovjqb24mhqL06m9uJkai9OpvbiZGovTqb24mRqL06m9uJkai9OpvbiZGovFlN7sZjai8XUXiym9mIxtReLqb1YTO3FYmovFlN7sZjai7OpvTib2ouzqb04m9qLs6m9OJvai7OpvTib2ouzqb04m9qLi6m9uJjai4upvbiY2ouLqb24mNqLi6m9uJjai4upvbiY2ourqb24mtqLq6m9uJrai6upvbia2ourqb24mtqLq6m9uJrai5upvbiZ2oubqb24mdqLm6m9uJnai5upvbiZ2oubqb24mdqLu6m9uJvai7upvbib2ou7qb24m9qL+6H7zStzn9C7peXEY09QvTKNicceoXq9HLG1nGxrOcXWcj4oc+4f0T7+Ecf+dPvl/nDsb7dfL0dsLSfbWk6xtZxD+44s94sw8tMNBs/LabaW000t59ifcL9eTrC1nGN35cfB9/x0Q9DzcpKt5Yit5WRbyym2llNtLaeZEpHH/pb75XKO/TH36+UEW8ux1byKreb12B90v16OreZVbDWvx/6m+/VybO3KYmtXzrZ25WxrV862duVsa1fOtnblbGtXzrZ25WxrV862duVsa1cutnblYmtXLrZ25WJrVy62duVia1cutnblYmtXLrZ25WJrV662duVqa1eutnblamtXrrZ25WprV662duV67PVDr14+tsXWckxdeBabqRvPYku2liOHLufVy8eWbS2n2FpOtbWcZms5x+7Kr9729cXWcoKt5URby0m2liO2lmPqms7YTd3TGbupizpjN3VTZ+ymrupMy2JrOcHWcqKt5SRbyxFbyzG1K6fF1K6cFlO7clpM7cppsbUrB1u7crC1Kwdbu3KwtSsHW7tysLUrB1u7crC1Kwdbu3KwtStHW7tytLUrR1u7crS1K0dbu3K0tStHW7tytLUrRzu7cizhv67LryKP5ZS2fI3Ncn3gEogTEJdBXAFxFcQ1ENcx3PpjbAcugDiwXiJYLxGslwjWSwTrJYL1EsF6iWC9JLBeElgvCayXBNZLAuslgfWSwHpJYL0ksF4SWC8C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5+/Y9laX9Q/+/B3b4Oqy/sGfv2NbXF3WP/jzd2yTq8v6B3/+jm1zdVn/4M/fsY2uLusf/Pk7ttXVZf2DP3/HNru6rH/w5+/YdleX9Q/+/B3b8Oqy/sGfv2NbXl3WP/jzd2zTq8v6B3/+jm17dVn/4M/fsY2vLusf/Pk7tvXVZf2DP3/HNr+6rH/w5+/Y9leX9Y/9/A2D+1+Fwf2vwuD+V2Fw/6uwjP38DYP7X4XB/a/C4P5XYXD/qzC4/1UY3P8qDO5/FQb3vwqD+1+Fwf2vwuD+V2Fw/6swuP9VGNz/KgzufxUG978Kg/tfhcH9r8Lg/ldhcP+rMLj/VRjc/yoM7n8VBve/CoP7X4XB/a/C4P5XYXD/qzC4/1UY3P8qDO5/FQb3vwqD+1+Fwf2vwuD+V2Fw/6swuP9VGNz/KgzufxUG978Kg/tfhcH9r8Lg/ldhcP+rMLj/VRjc/yoM7n8VBve/CoP7X4XB/a/C4P5XYXD/qzC4/1UY3P8qDO5/FQb3vwqD+1+Fwf2vwuD+V2Fw/6swuP9VGNz/KgzufxUG978Kg/tfhcH9r8Lg/ldhcP+rMLj/VRjc/yoM7n8VBve/CoP7X4XB/a/C4P5XYXD/qzC4/1UY3P8qDO5/FQb3vwqD+1+Fwf2vwuD+V2Fw/6swuP9VGNz/KgzufxUG978Kg/tfhcH9r8Lg/ldhcP+rMLj/VRjc/yoM7n8VB/e/ioP7X8XB/a/i4P5XcRn7+RsH97+Kg/tfxcH9r+Lg/ldxcP+rOLj/VRzc/yoO7n8VB/e/ioP7X8XB/a/i4P5XcXD/qzi4/1Uc3P8qDu5/FQf3v4qD+1/Fwf2v4uD+V3Fw/6s4uP9VHNz/Kg7ufxUH97+Kg/tfxcH9r+Lg/ldxcP+rOLj/VRzc/yoO7n8VB/e/ioP7X8XB/a/i4P5XcXD/qzi4/1Uc3P8qDu5/FQf3v4qD+1/Fwf2v4uD+V3Fw/6s4uP9VHNz/Kg7ufxUt+y+lHv78beqb6ze8/+9av+H9R5b7KiSUjfVb9v/ZtX7D+8+u9Rvef3at37D+37V+GXz9hvd/Kfm+/ha21m94/9+1fsP6f9f6Dev/Xeu3/PzdsX7L/j+71m/5+btn/Zafv3vWb/n5u2f9lp+/e9Y/+PPXsv/PrvUP/vy17P+za/2DP38t+//sWv/gz1/L/j+71n/083dzJrjyt3m5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PhCvOIvXmb6yfUfHB+J1pq9s36fxgXid6Svbd198IF5n+sr2PRUfiNeZvrJ9p8QH4nWmr2zf//CBeJ3pK9t3NXwgXmf6yva9Ch+I15m+sn0HwgfidaavbN9X8IF4nekr23cLfCBeZ/rK9j0AH4jXmb6y7dn/gXid6Svb/vofiNeZvrLthf+BeJ3pK9u+9R+I15m+su0x/4F4femrZNsP/gPx+tJXybZ3+wfi9aWv0iLO4vWlr5Iz//bkzL89OfNvT87825Mz//bkzL89OfNvT87825Mz//bkzL89OfNvT87825Mz//bkzL89OfNvT87825Mz//bkzL89OfNvT87825Mz//bkzL89OfNvT87825Mz//bkzL89OfNvT87825Mz//bkzL89OfNvT87825Mz//bkzL89OfNvT87825Mz//bkzL89OfNvT87825Mz//bkzL89OfNvT87825Mz//bkzL89OfNvT87825Mz//bkzL89OfNvT87825Mz//bkzL89OfNvT87825Mz//bkzL89OfNvT87825Mz//bkzL89OfNvT87825Mz//bkzL89OfNvT87825Mz//bkzL89OfNvT87825Mz//bkzL89OfNvT87825Mz//bkzL89OfNvT87825Mz//bkzL89OfNvT87825Mz//bkzL89OfNvT87825Mz//bkzL89OfNvT87825Mz//bkzL9dnPm3izP/dnHm3y7O/NtlEWfx+tJX4sy/XZz5t4sz/3Zx5t8uzvzbxZl/uzjzbxdn/u3izL9dnPm3izP/dnHm3y7O/NvFmX+7OPNvF2f+7eLMv12c+beLM/92cebfLs7828WZf7s4828XZ/7t4sy/XZz5t4sz/3Zx5t8uzvzbxZl/uzjzbxdn/u3izL9dnPm3izP/dnHm3y7O/NvFmX+7OPNvF2f+7eLMv12c+beLM/92cebfLs7828WZf7s4828XZ/7t4sy/XZz5t4sz/3Zx5t8uzvzbxZl/uzjzbxdn/u3izL9dnPm3izP/dnHm3y7O/NvFmX+7OPNvF2f+7eLMv12c+beLM/92cebfLs7828WZf7s4828XZ/7t4sy/XZz5t4sz/3Zx5t8u8/h7t3j/4xa//8tP0U7z9N0V7TR7c0v3NTcpW9FOszPviXYe3+dd0U6zK++Kdpqed1e003S8u6Kd53m7J9p5nrd7op2m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rrTURM75e6J1paUmcqHfE60rLTWR//ueaF1pqYl82vdE60pLTeSnvidaV1rKle95d+V73l35nndXvufdle95d+V73l35nndXvufdle95d+V73l35nndXvufdle95d+V73l35nndXvufdle95d+V73l35nndXvufdle95d+V73l35nndXvufdle95d+V73l35nndXvufdle95d+V73l35nndXvufdle95d+V73l35nndXvufdle95d+V73l35nndXvufdle95d+V73l35nndXvufdle95n8gbW/o92tpe/Msltccqwou/Tf2+iNTjBosTeW6fyeI8+uBMFufRHWeyOI+eOZNFIYsKLM6jv85kcR5ddyaL88zezmRxnpnemSyyd/lrFssykcf9h1iUeP93RWSLRfYuGiyyd9Fgkb2LBotCFl+wGL5YzFsssnfRYJG9iwaL7F00WGTvosEiexcFFie6U+JTLC53LiSULRbZu2iwyN5Fg0X2LhosCllUYJG9iwaL7F00WGTvosEiexcNFtm7KLA40R0uZ7LI3kWDRfYuGiyyd9FgUcji/7+9s9t1JLut8CupSls/9ThOkAsDgRMkTgBf+N0twz7dx4C3RWFW7yIXv7sZtEYgv4VprkVJRQFFsouCItlFQZHsoqBIdlFQJLsIKBrdTDqTItlFQZHsoqBIdlFQHFAUUCS7KCiSXRQUyS4KimQXBUWyi4Ci0Y2yMymSXRQUyS4KimQXBcUBRQFFsouCItlFQZHsoqBIdhFQTH3f7ZUJvihu39/5n1Pcv5A/99lv6lPfd9N3m9l/6bsdrbrN7Gf03Wb2HZ91+8Hf9e+fE/kik9lLnEsmsz84l0zmfeWpZFLfozuXjI9PVJPx8ZRqMj7+8xcltHnF3ygOKAoo+vjlMym29OFyii09u5xiS38vp9gyC6gppr69WIdiy4whp9gyj8gpkl0UFAcUBRTJLgqKZBcFRbKLgiLZRUGR7CKgmPrWaR2KZBcFRbKLgiLZRUFxQFFAkeyioEh2UVAkuygokl0UFMkuAoqp7zvXoUh2UVDE6bx5beTqYeprsHUoMl3evDbw26gt9QXOOhSZLgqKbMYUFNmMKSgOKAoo4hffUbzfvig+txlF/KKCIpsxBUU2YwqKZBcBxdQXOOtQJLsoKJJdFBTJLgqKA4oCimQXBUWyi4Ii2UVBsWd2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+HPx04QOHxetJuPjddVkBmQmZHx8o5qMj7tTk/HxYGoyPk5JTcZnr64lc1x8tt9qMnjgGZmWHjjwbLrj0tIDh8gMyEzItPTAITItPXDgWVLHpaUHDpFp6YFDZFp64AiZraUHDpFp6YFDZHp64PefHRxbTw8cITMgMyHT0wNHyPT0wBEyPT1whExPDxwh09MDB8jsPT1whExPDxwhgweekcEDz8gMyEzI4IFnZPDAMzJ44BkZPPCMDB54QuaKB56RwQPPyOCBZ2TwwDMyAzITMnjgGRk88IwMHnhGBg88I4MHnpAxupauJoMHnpHBA8/I4IFnZAZkJmTwwDMyeOAZGTzwjAweeEYGDzwhY3SpWU1mtZ8R/3Jt+c1Wdf234vXfi9f/KF7/s3j9R+36l99eVNe/Fa9/L15/8fm7/Fad+Bep98TzN1R/4vkbqj/x/A3Vn3j+Rn71dk88fyP1PxLP31D9iedvqP7E8zdUf+L5G6o/8/wN7B8emedvpP7M8zdSf+b5G6k/8/yN1J95/gbqf2aev5H6M8/fSP2Z52+k/szzN1J/8fn7LD5/n8Xn77P4/H0Wn7/P4vP3KD5/j+Lz9yg+f4/i83f5k9jV9Refv0fx+XsUn79H8fl7lJ6/j8ul9Px91V96/r7qLz1/X/WXnr+v+kvP31f9pefvq/7S8/dVf+n5+6q/9Px91V98/m7F5+9WfP5uxeev4jmlPz6m3bf7ENb//vtXr/rvxet/FK//Wbz+o3b9iqdcnlr/Vrz+vXj91+L1j+L1F5+/e+L5+/77q6/6E8/fUP2J52+o/sTzN1L/NfH8ff/9yVf9iedvqP7E8zdUf+L5G6o/8fwN1Z94/obqzzx/A/uHa+b5G6k/8/yN1J95/gbqH5nnb6T+zPM3Un/m+RupP/P8jdSfef5G6s88fyP1F5+/o/j8HcXn7yg+f2/F5++t+Py9FZ+/t+LzV/H8pVPrLz5/b8Xn7634/L0Vn7+34vP3Xnz+3ovP33vx+XsvPn8Vz186tf7i8/defP7ei8/fe/H5ey8+fx/F5++j+Px9FJ+/j+LzV/H8pVPr/+1//7922F/1X46LsP7I968Ez/85t/6jdv2C5/+cW/9WvP69eP3X4vWP4vXfitd/L15/8fn7TDx/I99ffSaev5H6j8TzN1R/4vkbqj/x/I18f/JIPH9D9Seev6H6E8/fUP2J52+o/sTzN1R/5vkb2D8cmefv+/q3S+b5G6k/8/yN1J95/kbqzzx/I/Vnnr+R+jPP30j9medvpP7M8zdSf+35u12Kz9+t+Pzdis/frfj83YrP3634/N2Kz9+t+Pzdis/frfj83YrP3734/N2Lz9+9+Pzdi89fwfOXzq2/+Pzdi8/fvfj83YvP3734/L0Wn7/X4vP3Wnz+XovPX8Hzl86tv/j8vdacv69/+//f/c/vf/dv//kf//v6L/76h//3h3//4+//6w9//9c//um///Ynf/4L"}],"outputs":{"structs":{"functions":[{"kind":"struct","path":"BatcherVault::validate_execute_batch_abi","fields":[{"name":"parameters","type":{"kind":"struct","path":"BatcherVault::validate_execute_batch_parameters","fields":[{"name":"sender","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"c1","type":{"kind":"field"}},{"name":"c2","type":{"kind":"field"}},{"name":"amount_out","type":{"kind":"field"}},{"name":"amount_out_sub_cancelled","type":{"kind":"field"}}]}}]},{"kind":"struct","path":"BatcherVault::_sub_token_out_amount_abi","fields":[{"name":"parameters","type":{"kind":"struct","path":"BatcherVault::_sub_token_out_amount_parameters","fields":[{"name":"amount","type":{"kind":"field"}},{"name":"_round","type":{"kind":"field"}}]}}]},{"kind":"struct","path":"BatcherVault::_add_token_out_amount_abi","fields":[{"name":"parameters","type":{"kind":"struct","path":"BatcherVault::_add_token_out_amount_parameters","fields":[{"name":"enc_c1","type":{"kind":"field"}},{"name":"enc_c2","type":{"kind":"field"}}]}}]},{"kind":"struct","path":"BatcherVault::claim_token_in_abi","fields":[{"name":"parameters","type":{"kind":"struct","path":"BatcherVault::claim_token_in_parameters","fields":[{"name":"round","type":{"kind":"field"}},{"name":"total_token_in","type":{"kind":"field"}},{"name":"total_token_out","type":{"kind":"field"}}]}}]},{"kind":"struct","path":"BatcherVault::spend_public_authwit_abi","fields":[{"name":"parameters","type":{"kind":"struct","path":"BatcherVault::spend_public_authwit_parameters","fields":[{"name":"inner_hash","type":{"kind":"field"}}]}},{"name":"return_type","type":{"kind":"field"}}]},{"kind":"struct","path":"BatcherVault::_validate_claim_params_abi","fields":[{"name":"parameters","type":{"kind":"struct","path":"BatcherVault::_validate_claim_params_parameters","fields":[{"name":"_round","type":{"kind":"field"}},{"name":"_total_token_in","type":{"kind":"field"}},{"name":"_total_token_out","type":{"kind":"field"}}]}}]},{"kind":"struct","path":"BatcherVault::stake_abi","fields":[{"name":"parameters","type":{"kind":"struct","path":"BatcherVault::stake_parameters","fields":[{"name":"relayer","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"token","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"amount","type":{"kind":"field"}},{"name":"nonce","type":{"kind":"field"}}]}}]},{"kind":"struct","path":"BatcherVault::check_sk_hash_abi","fields":[{"name":"parameters","type":{"kind":"struct","path":"BatcherVault::check_sk_hash_parameters","fields":[{"name":"sk_hash","type":{"kind":"field"}}]}}]},{"kind":"struct","path":"BatcherVault::constructor_abi","fields":[{"name":"parameters","type":{"kind":"struct","path":"BatcherVault::constructor_parameters","fields":[{"name":"admin","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"target","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"token_in","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"token_out","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"relayer","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"bonding_token","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"bonding_amount","type":{"kind":"field"}},{"name":"he_pub_key","type":{"kind":"field"}},{"name":"sk_hash","type":{"kind":"field"}},{"name":"interval","type":{"kind":"field"}},{"name":"he_secret_key","type":{"kind":"field"}}]}}]},{"kind":"struct","path":"BatcherVault::execute_batch_abi","fields":[{"name":"parameters","type":{"kind":"struct","path":"BatcherVault::execute_batch_parameters","fields":[{"name":"encrypted_amount","type":{"kind":"array","length":2,"type":{"kind":"field"}}},{"name":"secret_key","type":{"kind":"field"}},{"name":"token_out_amount_cancelled","type":{"kind":"field"}},{"name":"tokne_in","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"token_out","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"nonce_for_transfer_approval","type":{"kind":"field"}},{"name":"nonce_for_swap_approval","type":{"kind":"field"}}]}},{"name":"return_type","type":{"kind":"field"}}]},{"kind":"struct","path":"BatcherVault::dipute_relayer_abi","fields":[{"name":"parameters","type":{"kind":"struct","path":"BatcherVault::dipute_relayer_parameters","fields":[{"name":"he_secret_key","type":{"kind":"field"}},{"name":"new_sk_hash","type":{"kind":"field"}},{"name":"new_he_pub_key","type":{"kind":"field"}},{"name":"new_he_secret_key","type":{"kind":"field"}},{"name":"new_relayer","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"secret_hash","type":{"kind":"field"}},{"name":"nonce","type":{"kind":"field"}}]}}]},{"kind":"struct","path":"BatcherVault::_validate_round_abi","fields":[{"name":"parameters","type":{"kind":"struct","path":"BatcherVault::_validate_round_parameters","fields":[{"name":"round","type":{"kind":"field"}}]}}]},{"kind":"struct","path":"BatcherVault::deposit_to_batch_abi","fields":[{"name":"parameters","type":{"kind":"struct","path":"BatcherVault::deposit_to_batch_parameters","fields":[{"name":"current_round","type":{"kind":"field"}},{"name":"amount_out","type":{"kind":"field"}},{"name":"relayer_he_pubkey","type":{"kind":"field"}},{"name":"he_add_rand","type":{"kind":"field"}},{"name":"nonce","type":{"kind":"field"}}]}}]},{"kind":"struct","path":"BatcherVault::replace_relayer_and_slash_stake_abi","fields":[{"name":"parameters","type":{"kind":"struct","path":"BatcherVault::replace_relayer_and_slash_stake_parameters","fields":[{"name":"sk_hash","type":{"kind":"field"}},{"name":"new_he_pub_key","type":{"kind":"field"}},{"name":"new_relayer","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"secret_hash","type":{"kind":"field"}},{"name":"nonce","type":{"kind":"field"}}]}}]},{"kind":"struct","path":"BatcherVault::cancel_batch_and_claim_abi","fields":[{"name":"parameters","type":{"kind":"struct","path":"BatcherVault::cancel_batch_and_claim_parameters","fields":[{"name":"current_round","type":{"kind":"field"}},{"name":"secret_hash","type":{"kind":"field"}}]}}]},{"kind":"struct","path":"BatcherVault::finalize_execute_abi","fields":[{"name":"parameters","type":{"kind":"struct","path":"BatcherVault::finalize_execute_parameters","fields":[{"name":"secret_hash_for_redeeming_minted_notes","type":{"kind":"field"}},{"name":"amount","type":{"kind":"field"}},{"name":"secret_for_L1_to_L2_message_consumption","type":{"kind":"field"}}]}}]},{"kind":"struct","path":"BatcherVault::_initialize_abi","fields":[{"name":"parameters","type":{"kind":"struct","path":"BatcherVault::_initialize_parameters","fields":[{"name":"admin","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"target","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"token_in","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"token_out","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"relayer","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"bonding_token","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"bonding_amount","type":{"kind":"field"}},{"name":"he_pub_key","type":{"kind":"field"}},{"name":"sk_hash","type":{"kind":"field"}},{"name":"interval","type":{"kind":"field"}}]}}]}]},"globals":{"storage":[{"kind":"struct","fields":[{"name":"admin","value":{"kind":"struct","fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"1"}},{"name":"typ","value":{"kind":"string","value":"PublicImmutable<AztecAddress>"}}]}},{"name":"target","value":{"kind":"struct","fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"2"}},{"name":"typ","value":{"kind":"string","value":"SharedImmutable<AztecAddress>"}}]}},{"name":"token_out","value":{"kind":"struct","fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"3"}},{"name":"typ","value":{"kind":"string","value":"SharedImmutable<AztecAddress>"}}]}},{"name":"token_in","value":{"kind":"struct","fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"4"}},{"name":"typ","value":{"kind":"string","value":"SharedImmutable<AztecAddress>"}}]}},{"name":"current_round","value":{"kind":"struct","fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"5"}},{"name":"typ","value":{"kind":"string","value":"PublicMutable<Field>"}}]}},{"name":"batch_relayer","value":{"kind":"struct","fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"6"}},{"name":"typ","value":{"kind":"string","value":"PublicMutable<BatchRelayer>"}}]}},{"name":"rounds","value":{"kind":"struct","fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"7"}},{"name":"typ","value":{"kind":"string","value":"Map<Field, PublicMutable<Round>>"}}]}},{"name":"deposit_notes","value":{"kind":"struct","fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"8"}},{"name":"typ","value":{"kind":"string","value":"Map<AztecAddress, PrivateMutable<DepositNote>>"}}]}}]}],"notes":[{"kind":"tuple","fields":[{"kind":"integer","sign":false,"value":"6810111211111510511678111116101"},{"kind":"string","value":"DepositNote"}]}]}},"file_map":{"2":{"source":"// docs:start:eq-trait\ntrait Eq {\n    fn eq(self, other: Self) -> bool;\n}\n// docs:end:eq-trait\n\nimpl Eq for Field { fn eq(self, other: Field) -> bool { self == other } }\n\nimpl Eq for u64 { fn eq(self, other: u64) -> bool { self == other } }\nimpl Eq for u32 { fn eq(self, other: u32) -> bool { self == other } }\nimpl Eq for u8 { fn eq(self, other: u8) -> bool { self == other } }\nimpl Eq for u1 { fn eq(self, other: u1) -> bool { self == other } }\n\nimpl Eq for i8 { fn eq(self, other: i8) -> bool { self == other } }\nimpl Eq for i32 { fn eq(self, other: i32) -> bool { self == other } }\nimpl Eq for i64 { fn eq(self, other: i64) -> bool { self == other } }\n\nimpl Eq for () { fn eq(_self: Self, _other: ()) -> bool { true } }\nimpl Eq for bool { fn eq(self, other: bool) -> bool { self == other } }\n\nimpl<T, N> Eq for [T; N] where T: Eq {\n    fn eq(self, other: [T; N]) -> bool {\n        let mut result = true;\n        for i in 0 .. self.len() {\n            result &= self[i].eq(other[i]);\n        }\n        result\n    }\n}\n\nimpl<T> Eq for [T] where T: Eq {\n    fn eq(self, other: [T]) -> bool {\n        let mut result = self.len() == other.len();\n        for i in 0 .. self.len() {\n            result &= self[i].eq(other[i]);\n        }\n        result\n    }\n}\n\nimpl<N> Eq for str<N> {\n    fn eq(self, other: str<N>) -> bool {\n        let self_bytes = self.as_bytes();\n        let other_bytes = other.as_bytes();\n        self_bytes == other_bytes\n    }\n}\n\nimpl<A, B> Eq for (A, B) where A: Eq, B: Eq {\n    fn eq(self, other: (A, B)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1)\n    }\n}\n\nimpl<A, B, C> Eq for (A, B, C) where A: Eq, B: Eq, C: Eq {\n    fn eq(self, other: (A, B, C)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1) & self.2.eq(other.2)\n    }\n}\n\nimpl<A, B, C, D> Eq for (A, B, C, D) where A: Eq, B: Eq, C: Eq, D: Eq {\n    fn eq(self, other: (A, B, C, D)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1) & self.2.eq(other.2) & self.3.eq(other.3)\n    }\n}\n\nimpl<A, B, C, D, E> Eq for (A, B, C, D, E) where A: Eq, B: Eq, C: Eq, D: Eq, E: Eq {\n    fn eq(self, other: (A, B, C, D, E)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1) & self.2.eq(other.2) & self.3.eq(other.3) & self.4.eq(other.4)\n    }\n}\n\nimpl Eq for Ordering {\n    fn eq(self, other: Ordering) -> bool {\n        self.result == other.result\n    }\n}\n\n// Noir doesn't have enums yet so we emulate (Lt | Eq | Gt) with a struct\n// that has 3 public functions for constructing the struct.\nstruct Ordering {\n    result: Field,\n}\n\nimpl Ordering {\n    // Implementation note: 0, 1, and 2 for Lt, Eq, and Gt are built\n    // into the compiler, do not change these without also updating\n    // the compiler itself!\n    pub fn less() -> Ordering {\n        Ordering { result: 0 }\n    }\n\n    pub fn equal() -> Ordering {\n        Ordering { result: 1 }\n    }\n\n    pub fn greater() -> Ordering {\n        Ordering { result: 2 }\n    }\n}\n\n// docs:start:ord-trait\ntrait Ord {\n    fn cmp(self, other: Self) -> Ordering;\n}\n// docs:end:ord-trait\n\n// Note: Field deliberately does not implement Ord\n\nimpl Ord for u64 {\n    fn cmp(self, other: u64) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for u32 {\n    fn cmp(self, other: u32) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for u8 {\n    fn cmp(self, other: u8) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i8 {\n    fn cmp(self, other: i8) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i32 {\n    fn cmp(self, other: i32) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i64 {\n    fn cmp(self, other: i64) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for () {\n    fn cmp(_self: Self, _other: ()) -> Ordering {\n        Ordering::equal()\n    }\n}\n\nimpl Ord for bool {\n    fn cmp(self, other: bool) -> Ordering {\n        if self {\n            if other {\n                Ordering::equal()\n            } else {\n                Ordering::greater()\n            }\n        } else {\n            if other {\n                Ordering::less()\n            } else {\n                Ordering::equal()\n            }\n        }\n    }\n}\n\nimpl<T, N> Ord for [T; N] where T: Ord {\n    // The first non-equal element of both arrays determines\n    // the ordering for the whole array.\n    fn cmp(self, other: [T; N]) -> Ordering {\n        let mut result = Ordering::equal();\n        for i in 0 .. self.len() {\n            if result == Ordering::equal() {\n                let result_i = self[i].cmp(other[i]);\n\n                if result_i == Ordering::less() {\n                    result = result_i;\n                } else if result_i == Ordering::greater() {\n                    result = result_i;\n                }\n            }\n        }\n        result\n    }\n}\n\nimpl<T> Ord for [T] where T: Ord {\n    // The first non-equal element of both arrays determines\n    // the ordering for the whole array.\n    fn cmp(self, other: [T]) -> Ordering {\n        let mut result = self.len().cmp(other.len());\n        for i in 0 .. self.len() {\n            if result == Ordering::equal() {\n                let result_i = self[i].cmp(other[i]);\n\n                if result_i == Ordering::less() {\n                    result = result_i;\n                } else if result_i == Ordering::greater() {\n                    result = result_i;\n                }\n            }\n        }\n        result\n    }\n}\n\nimpl<A, B> Ord for (A, B) where A: Ord, B: Ord {\n    fn cmp(self, other: (A, B)) -> Ordering {\n        let result = self.0.cmp(other.0);\n\n        if result != Ordering::equal() {\n            result\n        } else {\n            self.1.cmp(other.1)\n        }\n    }\n}\n\nimpl<A, B, C> Ord for (A, B, C) where A: Ord, B: Ord, C: Ord {\n    fn cmp(self, other: (A, B, C)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        result\n    }\n}\n\nimpl<A, B, C, D> Ord for (A, B, C, D) where A: Ord, B: Ord, C: Ord, D: Ord {\n    fn cmp(self, other: (A, B, C, D)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        if result == Ordering::equal() {\n            result = self.3.cmp(other.3);\n        }\n\n        result\n    }\n}\n\nimpl<A, B, C, D, E> Ord for (A, B, C, D, E) where A: Ord, B: Ord, C: Ord, D: Ord, E: Ord {\n    fn cmp(self, other: (A, B, C, D, E)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        if result == Ordering::equal() {\n            result = self.3.cmp(other.3);\n        }\n\n        if result == Ordering::equal() {\n            result = self.4.cmp(other.4);\n        }\n\n        result\n    }\n}\n","path":"std/cmp.nr"},"3":{"source":"struct BoundedVec<T, MaxLen> {\n    storage: [T; MaxLen],\n    len: u64,\n}\n\nimpl<T, MaxLen> BoundedVec<T, MaxLen> {\n    pub fn new() -> Self {\n        let zeroed = crate::unsafe::zeroed();\n        BoundedVec { storage: [zeroed; MaxLen], len: 0 }\n    }\n\n    pub fn get(mut self: Self, index: u64) -> T {\n        assert(index as u64 < self.len);\n        self.storage[index]\n    }\n\n    pub fn get_unchecked(mut self: Self, index: u64) -> T {\n        self.storage[index]\n    }\n\n    pub fn push(&mut self, elem: T) {\n        assert(self.len < MaxLen as u64, \"push out of bounds\");\n\n        self.storage[self.len] = elem;\n        self.len += 1;\n    }\n\n    pub fn len(self) -> u64 {\n        self.len\n    }\n\n    pub fn max_len(_self: BoundedVec<T, MaxLen>) -> u64 {\n        MaxLen\n    }\n\n    // This is a intermediate method, while we don't have an\n    // .extend method\n    pub fn storage(self) -> [T; MaxLen] {\n        self.storage\n    }\n\n    pub fn extend_from_array<Len>(&mut self, array: [T; Len]) {\n        let new_len = self.len + array.len();\n        assert(new_len as u64 <= MaxLen as u64, \"extend_from_array out of bounds\");\n        for i in 0..array.len() {\n            self.storage[self.len + i] = array[i];\n        }\n        self.len = new_len;\n    }\n\n    pub fn extend_from_slice(&mut self, slice: [T]) {\n        let new_len = self.len + slice.len();\n        assert(new_len as u64 <= MaxLen as u64, \"extend_from_slice out of bounds\");\n        for i in 0..slice.len() {\n            self.storage[self.len + i] = slice[i];\n        }\n        self.len = new_len;\n    }\n\n    pub fn extend_from_bounded_vec<Len>(&mut self, vec: BoundedVec<T, Len>) {\n        let append_len = vec.len();\n        let new_len = self.len + append_len;\n        assert(new_len as u64 <= MaxLen as u64, \"extend_from_bounded_vec out of bounds\");\n\n        let mut exceeded_len = false;\n        for i in 0..Len {\n            exceeded_len |= i == append_len;\n            if !exceeded_len {\n                self.storage[self.len + i] = vec.get_unchecked(i);\n            }\n        }\n        self.len = new_len;\n    }\n\n    pub fn pop(&mut self) -> T {\n        assert(self.len as u64 > 0);\n        self.len -= 1;\n\n        let elem = self.storage[self.len];\n        self.storage[self.len] = crate::unsafe::zeroed();\n        elem\n    }\n\n    pub fn any<Env>(self, predicate: fn[Env](T) -> bool) -> bool {\n        let mut ret = false;\n        let mut exceeded_len = false;\n        for i in 0..MaxLen {\n            exceeded_len |= i == self.len;\n            if !exceeded_len {\n                ret |= predicate(self.storage[i]);\n            }\n        }\n        ret\n    }\n}\n","path":"std/collections/bounded_vec.nr"},"19":{"source":"// The low and high decomposition of the field modulus\nglobal PLO: Field = 53438638232309528389504892708671455233;\nglobal PHI: Field = 64323764613183177041862057485226039389;\n\nglobal TWO_POW_128: Field = 0x100000000000000000000000000000000;\n\n/// A hint for decomposing a single field into two 16 byte fields.\nunconstrained fn decompose_unsafe(x: Field) -> (Field, Field) {\n    let x_bytes = x.to_le_bytes(32);\n\n    let mut low: Field = 0;\n    let mut high: Field = 0;\n\n    let mut offset = 1;\n    for i in 0..16 {\n        low += (x_bytes[i] as Field) * offset;\n        high += (x_bytes[i + 16] as Field) * offset;\n        offset *= 256;\n    }\n\n    (low, high)\n}\n\n// Assert that (alo > blo && ahi >= bhi) || (alo <= blo && ahi > bhi)\nfn assert_gt_limbs(a: (Field, Field), b: (Field, Field)) {\n    let (alo, ahi) = a;\n    let (blo, bhi) = b;\n    let borrow = lte_unsafe(alo, blo, 16);\n\n    let rlo = alo - blo - 1 + (borrow as Field) * TWO_POW_128;\n    let rhi = ahi - bhi - (borrow as Field);\n\n    rlo.assert_max_bit_size(128);\n    rhi.assert_max_bit_size(128);\n}\n\n/// Decompose a single field into two 16 byte fields.\npub fn decompose(x: Field) -> (Field, Field) {\n    // Take hints of the decomposition\n    let (xlo, xhi) = decompose_unsafe(x);\n\n    // Range check the limbs\n    xlo.assert_max_bit_size(128);\n    xhi.assert_max_bit_size(128);\n\n    // Check that the decomposition is correct\n    assert_eq(x, xlo + TWO_POW_128 * xhi);\n\n    // Assert that the decomposition of P is greater than the decomposition of x\n    assert_gt_limbs((PLO, PHI), (xlo, xhi));\n    (xlo, xhi)\n}\n\nunconstrained fn lt_unsafe(x: Field, y: Field, num_bytes: u32) -> bool {\n    let x_bytes = x.__to_le_radix(256, num_bytes);\n    let y_bytes = y.__to_le_radix(256, num_bytes);\n    let mut x_is_lt = false;\n    let mut done = false;\n    for i in 0..num_bytes {\n        if (!done) {\n            let x_byte = x_bytes[num_bytes - 1 - i];\n            let y_byte = y_bytes[num_bytes - 1 - i];\n            let bytes_match = x_byte == y_byte;\n            if !bytes_match {\n                x_is_lt = x_byte < y_byte;\n                done = true;\n            }\n        }\n    }\n    x_is_lt\n}\n\nunconstrained fn lte_unsafe(x: Field, y: Field, num_bytes: u32) -> bool {\n    lt_unsafe(x, y, num_bytes) | (x == y)\n}\n\npub fn assert_gt(a: Field, b: Field) {\n    // Decompose a and b\n    let a_limbs = decompose(a);\n    let b_limbs = decompose(b);\n\n    // Assert that a_limbs is greater than b_limbs\n    assert_gt_limbs(a_limbs, b_limbs)\n}\n\npub fn assert_lt(a: Field, b: Field) {\n    assert_gt(b, a);\n}\n\npub fn gt(a: Field, b: Field) -> bool {\n    if a == b {\n        false\n    } else if lt_unsafe(a, b, 32) {\n        assert_gt(b, a);\n        false\n    } else {\n        assert_gt(a, b);\n        true\n    }\n}\n\npub fn lt(a: Field, b: Field) -> bool {\n    gt(b, a)\n}\n\nmod tests {\n    // TODO: Allow imports from \"super\"\n    use crate::field::bn254::{decompose_unsafe, decompose, lt_unsafe, assert_gt, gt, lt, TWO_POW_128, lte_unsafe, PLO, PHI};\n\n    #[test]\n    fn check_decompose_unsafe() {\n        assert_eq(decompose_unsafe(TWO_POW_128), (0, 1));\n        assert_eq(decompose_unsafe(TWO_POW_128 + 0x1234567890), (0x1234567890, 1));\n        assert_eq(decompose_unsafe(0x1234567890), (0x1234567890, 0));\n    }\n\n    #[test]\n    fn check_decompose() {\n        assert_eq(decompose(TWO_POW_128), (0, 1));\n        assert_eq(decompose(TWO_POW_128 + 0x1234567890), (0x1234567890, 1));\n        assert_eq(decompose(0x1234567890), (0x1234567890, 0));\n    }\n\n    #[test]\n    fn check_lt_unsafe() {\n        assert(lt_unsafe(0, 1, 16));\n        assert(lt_unsafe(0, 0x100, 16));\n        assert(lt_unsafe(0x100, TWO_POW_128 - 1, 16));\n        assert(!lt_unsafe(0, TWO_POW_128, 16));\n    }\n\n    #[test]\n    fn check_lte_unsafe() {\n        assert(lte_unsafe(0, 1, 16));\n        assert(lte_unsafe(0, 0x100, 16));\n        assert(lte_unsafe(0x100, TWO_POW_128 - 1, 16));\n        assert(!lte_unsafe(0, TWO_POW_128, 16));\n\n        assert(lte_unsafe(0, 0, 16));\n        assert(lte_unsafe(0x100, 0x100, 16));\n        assert(lte_unsafe(TWO_POW_128 - 1, TWO_POW_128 - 1, 16));\n        assert(lte_unsafe(TWO_POW_128, TWO_POW_128, 16));\n    }\n\n    #[test]\n    fn check_assert_gt() {\n        assert_gt(1, 0);\n        assert_gt(0x100, 0);\n        assert_gt((0 - 1), (0 - 2));\n        assert_gt(TWO_POW_128, 0);\n        assert_gt(0 - 1, 0);\n    }\n\n    #[test]\n    fn check_gt() {\n        assert(gt(1, 0));\n        assert(gt(0x100, 0));\n        assert(gt((0 - 1), (0 - 2)));\n        assert(gt(TWO_POW_128, 0));\n        assert(!gt(0, 0));\n        assert(!gt(0, 0x100));\n        assert(gt(0 - 1, 0 - 2));\n        assert(!gt(0 - 2, 0 - 1));\n    }\n\n    #[test]\n    fn check_plo_phi() {\n        assert_eq(PLO + PHI * TWO_POW_128, 0);\n        let p_bytes = crate::field::modulus_le_bytes();\n        let mut p_low: Field = 0;\n        let mut p_high: Field = 0;\n\n        let mut offset = 1;\n        for i in 0..16 {\n            p_low += (p_bytes[i] as Field) * offset;\n            p_high += (p_bytes[i + 16] as Field) * offset;\n            offset *= 256;\n        }\n        assert_eq(p_low, PLO);\n        assert_eq(p_high, PHI);\n    }\n}\n","path":"std/field/bn254.nr"},"20":{"source":"mod bn254;\nuse bn254::lt as bn254_lt;\n\nimpl Field {\n    pub fn to_le_bits(self: Self, bit_size: u32) -> [u1] {\n        crate::assert_constant(bit_size);\n        self.__to_le_bits(bit_size)\n    }\n\n    pub fn to_be_bits(self: Self, bit_size: u32) -> [u1] {\n        crate::assert_constant(bit_size);\n        self.__to_be_bits(bit_size)\n    }\n\n    #[builtin(to_le_bits)]\n    fn __to_le_bits(self, _bit_size: u32) -> [u1] {}\n\n    #[builtin(to_be_bits)]\n    fn __to_be_bits(self, bit_size: u32) -> [u1] {}\n\n    #[builtin(apply_range_constraint)]\n    fn __assert_max_bit_size(self, bit_size: u32) {}\n\n    pub fn assert_max_bit_size(self: Self, bit_size: u32) {\n        crate::assert_constant(bit_size);\n        assert(bit_size < modulus_num_bits() as u32);\n        self.__assert_max_bit_size(bit_size);\n    }\n\n    pub fn to_le_bytes(self: Self, byte_size: u32) -> [u8] {\n        self.to_le_radix(256, byte_size)\n    }\n\n    pub fn to_be_bytes(self: Self, byte_size: u32) -> [u8] {\n        self.to_be_radix(256, byte_size)\n    }\n\n    pub fn to_le_radix(self: Self, radix: u32, result_len: u32) -> [u8] {\n        crate::assert_constant(radix);\n        crate::assert_constant(result_len);\n        self.__to_le_radix(radix, result_len)\n    }\n\n    pub fn to_be_radix(self: Self, radix: u32, result_len: u32) -> [u8] {\n        crate::assert_constant(radix);\n        crate::assert_constant(result_len);\n        self.__to_be_radix(radix, result_len)\n    }\n\n    // decompose `_self` into a `_result_len` vector over the `_radix` basis\n    // `_radix` must be less than 256\n    #[builtin(to_le_radix)]\n    fn __to_le_radix(self, radix: u32, result_len: u32) -> [u8] {}\n\n    #[builtin(to_be_radix)]\n    fn __to_be_radix(self, radix: u32, result_len: u32) -> [u8] {}\n\n    // Returns self to the power of the given exponent value.\n    // Caution: we assume the exponent fits into 32 bits\n    // using a bigger bit size impacts negatively the performance and should be done only if the exponent does not fit in 32 bits\n    pub fn pow_32(self, exponent: Field) -> Field {\n        let mut r: Field = 1;\n        let b = exponent.to_le_bits(32);\n\n        for i in 1..33 {\n            r *= r;\n            r = (b[32-i] as Field) * (r * self) + (1 - b[32-i] as Field) * r;\n        }\n        r\n    }\n\n    // Parity of (prime) Field element, i.e. sgn0(x mod p) = 0 if x ∈ {0, ..., p-1} is even, otherwise sgn0(x mod p) = 1.\n    pub fn sgn0(self) -> u1 {\n        self as u1\n    }\n\n    pub fn lt(self, another: Field) -> bool {\n        if crate::compat::is_bn254() {\n            bn254_lt(self, another)\n        } else {\n            lt_fallback(self, another)\n        }\n    }\n}\n\n#[builtin(modulus_num_bits)]\npub fn modulus_num_bits() -> u64 {}\n\n#[builtin(modulus_be_bits)]\npub fn modulus_be_bits() -> [u1] {}\n\n#[builtin(modulus_le_bits)]\npub fn modulus_le_bits() -> [u1] {}\n\n#[builtin(modulus_be_bytes)]\npub fn modulus_be_bytes() -> [u8] {}\n\n#[builtin(modulus_le_bytes)]\npub fn modulus_le_bytes() -> [u8] {}\n// Convert a 32 byte array to a field element by modding\npub fn bytes32_to_field(bytes32: [u8; 32]) -> Field {\n    // Convert it to a field element\n    let mut v = 1;\n    let mut high = 0 as Field;\n    let mut low = 0 as Field;\n\n    for i in 0..16 {\n        high = high + (bytes32[15 - i] as Field) * v;\n        low = low + (bytes32[16 + 15 - i] as Field) * v;\n        v = v * 256;\n    }\n    // Abuse that a % p + b % p = (a + b) % p and that low < p\n    low + high * v\n}\n\nfn lt_fallback(x: Field, y: Field) -> bool {\n    let num_bytes = (modulus_num_bits() as u32 + 7) / 8;\n    let x_bytes = x.to_le_bytes(num_bytes);\n    let y_bytes = y.to_le_bytes(num_bytes);\n    let mut x_is_lt = false;\n    let mut done = false;\n    for i in 0..num_bytes {\n        if (!done) {\n            let x_byte = x_bytes[num_bytes - 1 - i] as u8;\n            let y_byte = y_bytes[num_bytes - 1 - i] as u8;\n            let bytes_match = x_byte == y_byte;\n            if !bytes_match {\n                x_is_lt = x_byte < y_byte;\n                done = true;\n            }\n        }\n    }\n    x_is_lt\n}\n\n","path":"std/field.nr"},"30":{"source":"mod poseidon;\nmod mimc;\nmod poseidon2;\nmod pedersen;\n\nuse crate::default::Default;\nuse crate::uint128::U128;\n\n#[foreign(sha256)]\n// docs:start:sha256\npub fn sha256<N>(input: [u8; N]) -> [u8; 32]\n// docs:end:sha256\n{}\n\n#[foreign(sha256)]\n// docs:start:sha256_slice\npub fn sha256_slice(input: [u8]) -> [u8; 32]\n// docs:end:sha256_slice\n{}\n\n#[foreign(blake2s)]\n// docs:start:blake2s\npub fn blake2s<N>(input: [u8; N]) -> [u8; 32]\n// docs:end:blake2s\n{}\n\n#[foreign(blake2s)]\n// docs:start:blake2s_slice\npub fn blake2s_slice(input: [u8]) -> [u8; 32]\n// docs:end:blake2s_slice\n{}\n\n#[foreign(blake3)]\n// docs:start:blake3\npub fn blake3<N>(input: [u8; N]) -> [u8; 32]\n// docs:end:blake3\n{}\n\n#[foreign(blake3)]\n// docs:start:blake3_slice\npub fn blake3_slice(input: [u8]) -> [u8; 32]\n// docs:end:blake3_slice\n{}\n\n// docs:start:pedersen_commitment\nstruct PedersenPoint {\n   x : Field,\n   y : Field,\n}\n\npub fn pedersen_commitment<N>(input: [Field; N]) -> PedersenPoint {\n    // docs:end:pedersen_commitment\n    pedersen_commitment_with_separator(input, 0)\n}\n\n// docs:start:pedersen_commitment_slice\npub fn pedersen_commitment_slice(input: [Field]) -> PedersenPoint {\n    pedersen_commitment_with_separator_slice(input, 0)\n}\n// docs:end:pedersen_commitment_slice\n\n#[foreign(pedersen_commitment)]\npub fn __pedersen_commitment_with_separator<N>(input: [Field; N], separator: u32) -> [Field; 2] {}\n\n#[foreign(pedersen_commitment)]\npub fn __pedersen_commitment_with_separator_slice(input: [Field], separator: u32) -> [Field; 2] {}\n\npub fn pedersen_commitment_with_separator<N>(input: [Field; N], separator: u32) -> PedersenPoint {\n    let values = __pedersen_commitment_with_separator(input, separator);\n    PedersenPoint { x: values[0], y: values[1] }\n}\n\npub fn pedersen_commitment_with_separator_slice(input: [Field], separator: u32) -> PedersenPoint {\n    let values = __pedersen_commitment_with_separator_slice(input, separator);\n    PedersenPoint { x: values[0], y: values[1] }\n}\n\n// docs:start:pedersen_hash\npub fn pedersen_hash<N>(input: [Field; N]) -> Field\n// docs:end:pedersen_hash\n{\n    pedersen_hash_with_separator(input, 0)\n}\n\n// docs:start:pedersen_hash_slice\npub fn pedersen_hash_slice(input: [Field]) -> Field\n// docs:end:pedersen_hash_slice\n{\n    pedersen_hash_with_separator_slice(input, 0)\n}\n\n#[foreign(pedersen_hash)]\npub fn pedersen_hash_with_separator<N>(input: [Field; N], separator: u32) -> Field {}\n\n#[foreign(pedersen_hash)]\npub fn pedersen_hash_with_separator_slice(input: [Field], separator: u32) -> Field {}\n\npub fn hash_to_field(inputs: [Field]) -> Field {\n    let mut inputs_as_bytes = &[];\n\n    for input in inputs {\n        let input_bytes = input.to_le_bytes(32);\n        for i in 0..32 {\n            inputs_as_bytes = inputs_as_bytes.push_back(input_bytes[i]);\n        }\n    }\n\n    let hashed_input = blake2s_slice(inputs_as_bytes);\n    crate::field::bytes32_to_field(hashed_input)\n}\n\n#[foreign(keccak256)]\n// docs:start:keccak256\npub fn keccak256<N>(input: [u8; N], message_size: u32) -> [u8; 32]\n// docs:end:keccak256\n{}\n\n#[foreign(keccak256)]\n// docs:start:keccak256_slice\npub fn keccak256_slice(input: [u8], message_size: u32) -> [u8; 32]\n// docs:end:keccak256_slice\n{}\n\n#[foreign(poseidon2_permutation)]\npub fn poseidon2_permutation<N>(_input: [Field; N], _state_length: u32) -> [Field; N] {}\n\n#[foreign(sha256_compression)]\npub fn sha256_compression(_input: [u32; 16], _state: [u32; 8]) -> [u32; 8] {}\n\n// Generic hashing support. \n// Partially ported and impacted by rust.\n\n// Hash trait shall be implemented per type.\ntrait Hash{\n    fn hash<H>(self, state: &mut H) where H: Hasher;\n}\n\n// Hasher trait shall be implemented by algorithms to provide hash-agnostic means.\n// TODO: consider making the types generic here ([u8], [Field], etc.)\ntrait Hasher{\n    fn finish(self) -> Field;\n    \n    fn write(&mut self, input: [Field]);\n}\n\n// BuildHasher is a factory trait, responsible for production of specific Hasher.\ntrait BuildHasher<H> where H: Hasher{\n    fn build_hasher(self) -> H;\n}\n\nstruct BuildHasherDefault<H>;\n\nimpl<H> BuildHasher<H> for BuildHasherDefault<H>\nwhere \n    H: Hasher + Default\n{\n    fn build_hasher(_self: Self) -> H{\n        H::default()\n    }\n}\n\nimpl<H> Default for BuildHasherDefault<H>\nwhere \n    H: Hasher + Default\n{\n    fn default() -> Self{\n        BuildHasherDefault{}\n    }    \n}\n\nimpl Hash for Field {\n    fn hash<H>(self, state: &mut H) where H: Hasher{\n        H::write(state, &[self]);\n    }\n}\n\nimpl Hash for u8 {\n    fn hash<H>(self, state: &mut H) where H: Hasher{\n        H::write(state, &[self as Field]);\n    }\n}\n\nimpl Hash for u32 {\n    fn hash<H>(self, state: &mut H) where H: Hasher{\n        H::write(state, &[self as Field]);\n    }\n}\n\nimpl Hash for u64 {\n    fn hash<H>(self, state: &mut H) where H: Hasher{\n        H::write(state, &[self as Field]);\n    }\n}\n\nimpl Hash for i8 {\n    fn hash<H>(self, state: &mut H) where H: Hasher{\n        H::write(state, &[self as Field]);\n    }\n}\n\nimpl Hash for i32 {\n    fn hash<H>(self, state: &mut H) where H: Hasher{\n        H::write(state, &[self as Field]);\n    }\n}\n\nimpl Hash for i64 {\n    fn hash<H>(self, state: &mut H) where H: Hasher{\n        H::write(state, &[self as Field]);\n    }\n}\n\nimpl Hash for bool {\n    fn hash<H>(self, state: &mut H) where H: Hasher{\n        H::write(state, &[self as Field]);\n    }\n}\n\nimpl Hash for () {\n    fn hash<H>(_self: Self, _state: &mut H) where H: Hasher {}\n}\n\nimpl Hash for U128 {\n    fn hash<H>(self, state: &mut H) where H: Hasher{\n        H::write(state, &[self.lo as Field, self.hi as Field]);\n    }\n}\n\nimpl<T, N> Hash for [T; N] where T: Hash {\n    fn hash<H>(self, state: &mut H) where H: Hasher{\n        for elem in self {\n            elem.hash(state);\n        }\n    }\n}\n\nimpl<T> Hash for [T] where T: Hash {\n    fn hash<H>(self, state: &mut H) where H: Hasher{\n        self.len().hash(state);\n        for elem in self {\n            elem.hash(state);\n        }\n    }\n}\n\nimpl<A, B> Hash for (A, B) where A: Hash, B: Hash {\n    fn hash<H>(self, state: &mut H) where H: Hasher{\n        self.0.hash(state);\n        self.1.hash(state);\n    }\n}\n\nimpl<A, B, C> Hash for (A, B, C) where A: Hash, B: Hash, C: Hash {\n    fn hash<H>(self, state: &mut H) where H: Hasher{\n        self.0.hash(state);\n        self.1.hash(state);\n        self.2.hash(state);\n    }\n}\n\nimpl<A, B, C, D> Hash for (A, B, C, D) where A: Hash, B: Hash, C: Hash, D: Hash {\n    fn hash<H>(self, state: &mut H) where H: Hasher{\n        self.0.hash(state);\n        self.1.hash(state);\n        self.2.hash(state);\n        self.3.hash(state);\n    }\n}\n\nimpl<A, B, C, D, E> Hash for (A, B, C, D, E) where A: Hash, B: Hash, C: Hash, D: Hash, E: Hash {\n    fn hash<H>(self, state: &mut H) where H: Hasher{\n        self.0.hash(state);\n        self.1.hash(state);\n        self.2.hash(state);\n        self.3.hash(state);\n        self.4.hash(state);\n    }\n}\n","path":"std/hash.nr"},"33":{"source":"// Regular merkle tree means a append-only merkle tree (Explain why this is the only way to have privacy and alternatives if you don't want it)\n// Currently we assume that it is a binary tree, so depth k implies a width of 2^k\n// XXX: In the future we can add an arity parameter\n// Returns the merkle root of the tree from the provided leaf, its hashpath, using a pedersen hash function.\npub fn compute_merkle_root<N>(leaf: Field, index: Field, hash_path: [Field; N]) -> Field {\n    let n = hash_path.len();\n    let index_bits = index.to_le_bits(n as u32);\n    let mut current = leaf;\n    for i in 0..n {\n        let path_bit = index_bits[i] as bool;\n        let (hash_left, hash_right) = if path_bit {\n            (hash_path[i], current)\n        } else {\n            (current, hash_path[i])\n        };\n        current = crate::hash::pedersen_hash([hash_left, hash_right]);\n    }\n    current\n}\n","path":"std/merkle.nr"},"35":{"source":"use crate::hash::{Hash, Hasher};\nuse crate::cmp::{Ordering, Ord, Eq};\nuse crate::default::Default;\n\nstruct Option<T> {\n    _is_some: bool,\n    _value: T,\n}\n\nimpl<T> Option<T> {\n    /// Constructs a None value\n    pub fn none() -> Self {\n        Self { _is_some: false, _value: crate::unsafe::zeroed() }\n    }\n\n    /// Constructs a Some wrapper around the given value\n    pub fn some(_value: T) -> Self {\n        Self { _is_some: true, _value }\n    }\n\n    /// True if this Option is None\n    pub fn is_none(self) -> bool {\n        !self._is_some\n    }\n\n    /// True if this Option is Some\n    pub fn is_some(self) -> bool {\n        self._is_some\n    }\n\n    /// Asserts `self.is_some()` and returns the wrapped value.\n    pub fn unwrap(self) -> T {\n        assert(self._is_some);\n        self._value\n    }\n\n    /// Returns the inner value without asserting `self.is_some()`\n    /// Note that if `self` is `None`, there is no guarantee what value will be returned,\n    /// only that it will be of type `T`.\n    pub fn unwrap_unchecked(self) -> T {\n        self._value\n    }\n\n    /// Returns the wrapped value if `self.is_some()`. Otherwise, returns the given default value.\n    pub fn unwrap_or(self, default: T) -> T {\n        if self._is_some { self._value } else { default }\n    }\n\n    /// Returns the wrapped value if `self.is_some()`. Otherwise, calls the given function to return\n    /// a default value.\n    pub fn unwrap_or_else<Env>(self, default: fn[Env]() -> T) -> T {\n        if self._is_some {\n            self._value\n        } else {\n            default()\n        }\n    }\n\n    /// Asserts `self.is_some()` with a provided custom message and returns the contained `Some` value\n    fn expect<N, MessageTypes>(self, message: fmtstr<N, MessageTypes>) -> T {\n        assert(self.is_some(), message);\n        self._value\n    }\n\n    /// If self is `Some(x)`, this returns `Some(f(x))`. Otherwise, this returns `None`.\n    pub fn map<U, Env>(self, f: fn[Env](T) -> U) -> Option<U> {\n        if self._is_some {\n            Option::some(f(self._value))\n        } else {\n            Option::none()\n        }\n    }\n\n    /// If self is `Some(x)`, this returns `f(x)`. Otherwise, this returns the given default value.\n    pub fn map_or<U, Env>(self, default: U, f: fn[Env](T) -> U) -> U {\n        if self._is_some {\n            f(self._value)\n        } else {\n            default\n        }\n    }\n\n    /// If self is `Some(x)`, this returns `f(x)`. Otherwise, this returns `default()`.\n    pub fn map_or_else<U, Env1, Env2>(self, default: fn[Env1]() -> U, f: fn[Env2](T) -> U) -> U {\n        if self._is_some {\n            f(self._value)\n        } else {\n            default()\n        }\n    }\n\n    /// Returns None if self is None. Otherwise, this returns `other`.\n    pub fn and(self, other: Self) -> Self {\n        if self.is_none() {\n            Option::none()\n        } else {\n            other\n        }\n    }\n\n    /// If self is None, this returns None. Otherwise, this calls the given function\n    /// with the Some value contained within self, and returns the result of that call.\n    ///\n    /// In some languages this function is called `flat_map` or `bind`.\n    pub fn and_then<U, Env>(self, f: fn[Env](T) -> Option<U>) -> Option<U> {\n        if self._is_some {\n            f(self._value)\n        } else {\n            Option::none()\n        }\n    }\n\n    /// If self is Some, return self. Otherwise, return `other`.\n    pub fn or(self, other: Self) -> Self {\n        if self._is_some { self } else { other }\n    }\n\n    /// If self is Some, return self. Otherwise, return `default()`.\n    pub fn or_else<U, Env>(self, default: fn[Env]() -> Self) -> Self {\n        if self._is_some { self } else { default() }\n    }\n\n    // If only one of the two Options is Some, return that option.\n    // Otherwise, if both options are Some or both are None, None is returned.\n    pub fn xor(self, other: Self) -> Self {\n        if self._is_some {\n            if other._is_some { Option::none() } else { self }\n        } else if other._is_some {\n            other\n        } else {\n            Option::none()\n        }\n    }\n\n    /// Returns `Some(x)` if self is `Some(x)` and `predicate(x)` is true.\n    /// Otherwise, this returns `None`\n    pub fn filter<Env>(self, predicate: fn[Env](T) -> bool) -> Self {\n        if self._is_some {\n            if predicate(self._value) {\n                self\n            } else {\n                Option::none()\n            }\n        } else {\n            Option::none()\n        }\n    }\n\n    /// Flattens an Option<Option<T>> into a Option<T>.\n    /// This returns None if the outer Option is None. Otherwise, this returns the inner Option.\n    pub fn flatten(option: Option<Option<T>>) -> Option<T> {\n        if option._is_some {\n            option._value\n        } else {\n            Option::none()\n        }\n    }\n}\n\nimpl<T> Default for Option<T> {\n    fn default() -> Self {\n        Option::none()\n    }\n}\n\nimpl<T> Eq for Option<T> where T: Eq {\n    fn eq(self, other: Self) -> bool {\n        if self._is_some == other._is_some {\n            if self._is_some {\n                self._value == other._value\n            } else {\n                true\n            }\n        } else {\n            false\n        }\n    }\n}\n\nimpl<T> Hash for Option<T> where T: Hash {\n    fn hash<H>(self, state: &mut H) where H: Hasher {\n        self._is_some.hash(state);\n        if self._is_some {\n            self._value.hash(state);\n        }\n    }\n}\n\n// For this impl we're declaring Option::none < Option::some\nimpl<T> Ord for Option<T> where T: Ord {\n    fn cmp(self, other: Self) -> Ordering {\n        if self._is_some {\n            if other._is_some {\n                self._value.cmp(other._value)\n            } else {\n                Ordering::greater()\n            }\n        } else {\n            if other._is_some {\n                Ordering::less()\n            } else {\n                Ordering::equal()\n            }\n        }\n    }\n}\n","path":"std/option.nr"},"44":{"source":"use crate::ops::{Add, Sub, Mul, Div, Rem, BitOr, BitAnd, BitXor, Shl, Shr};\nuse crate::cmp::{Eq, Ord, Ordering};\n\nglobal pow64 : Field = 18446744073709551616; //2^64;\n\nstruct U128 {\n    lo: Field,\n    hi: Field,\n}\n\nimpl U128 {\n\n    pub fn from_u64s_le(lo: u64, hi: u64) -> U128 {\n        // in order to handle multiplication, we need to represent the product of two u64 without overflow\n        assert(crate::field::modulus_num_bits() as u32 > 128);\n        U128 { lo: lo as Field, hi: hi as Field }\n    }\n\n    pub fn from_u64s_be(hi: u64, lo: u64) -> U128 {\n        U128::from_u64s_le(lo, hi)\n    }\n\n    pub fn from_le_bytes(bytes: [u8; 16]) -> U128 {\n        let mut lo = 0;\n        let mut base = 1;\n        for i in 0..8 {\n            lo += (bytes[i] as Field)*base;\n            base *= 256;\n        }\n        let mut hi = 0;\n        base = 1;\n        for i in 8..16 {\n            hi += (bytes[i] as Field)*base;\n            base *= 256;\n        }\n        U128 { lo, hi }\n    }\n\n    pub fn to_be_bytes(self: Self) -> [u8; 16] {\n        let lo = self.lo.to_be_bytes(8);\n        let hi = self.hi.to_be_bytes(8);\n        let mut bytes = [0; 16];\n        for i in 0..8 {\n            bytes[i] = hi[i];\n            bytes[i+8] = lo[i];\n        }\n        bytes\n    }\n\n    pub fn to_le_bytes(self: Self) -> [u8; 16] {\n        let lo = self.lo.to_le_bytes(8);\n        let hi = self.hi.to_le_bytes(8);\n        let mut bytes = [0; 16];\n        for i in 0..8 {\n            bytes[i] = lo[i];\n            bytes[i+8] = hi[i];\n        }\n        bytes\n    }\n\n    pub fn from_hex<N>(hex: str<N>) -> U128 {\n        let N = N as u32;\n        let bytes = hex.as_bytes();\n        // string must starts with \"0x\"\n        assert((bytes[0] == 48) & (bytes[1] == 120), \"Invalid hexadecimal string\");\n        assert(N < 35, \"Input does not fit into a U128\");\n\n        let mut lo = 0;\n        let mut hi = 0;\n        let mut base = 1;\n        if N <= 18 {\n            for i in 0..N - 2 {\n                lo += U128::decode_ascii(bytes[N-i-1])*base;\n                base = base*16;\n            }\n        } else {\n            for i in 0..16 {\n                lo += U128::decode_ascii(bytes[N-i-1])*base;\n                base = base*16;\n            }\n            base = 1;\n            for i in 17..N - 1 {\n                hi += U128::decode_ascii(bytes[N-i])*base;\n                base = base*16;\n            }\n        }\n        U128 { lo: lo as Field, hi: hi as Field }\n    }\n\n    fn decode_ascii(ascii: u8) -> Field {\n        if ascii < 58 {\n            ascii - 48\n        } else if ascii < 71 {\n            ascii - 55\n        } else {\n            ascii - 87\n        } as Field\n    }\n\n    unconstrained fn unconstrained_div(self: Self, b: U128) -> (U128, U128) {\n        if self < b {\n            (U128::from_u64s_le(0, 0), self)\n        } else {\n            //TODO check if this can overflow?\n            let (q,r) = self.unconstrained_div(b * U128::from_u64s_le(2, 0));\n            let q_mul_2 = q * U128::from_u64s_le(2, 0);\n            if r < b {\n                (q_mul_2, r)\n            } else {\n                (q_mul_2 + U128::from_u64s_le(1, 0), r - b)\n            }\n        }\n    }\n\n    pub fn from_integer<T>(i: T) -> U128 {\n        let f = crate::as_field(i);\n        // Reject values which would overflow a u128\n        f.assert_max_bit_size(128);\n        let lo = f as u64 as Field;\n        let hi = (f - lo) / pow64;\n        U128 { lo, hi }\n    }\n\n    pub fn to_integer<T>(self) -> T {\n        crate::from_field(self.lo + self.hi * pow64)\n    }\n\n    fn wrapping_mul(self: Self, b: U128) -> U128 {\n        let low = self.lo * b.lo;\n        let lo = low as u64 as Field;\n        let carry = (low - lo) / pow64;\n        let high = if crate::field::modulus_num_bits() as u32 > 196 {\n            (self.lo + self.hi) * (b.lo + b.hi) - low + carry\n        } else {\n            self.lo * b.hi + self.hi * b.lo + carry\n        };\n        let hi = high as u64 as Field;\n        U128 { lo, hi }\n    }\n}\n\nimpl Add for U128 {\n    fn add(self: Self, b: U128) -> U128 {\n        let low = self.lo + b.lo;\n        let lo = low as u64 as Field;\n        let carry = (low - lo) / pow64;  \n        let high = self.hi + b.hi + carry;\n        let hi = high as u64 as Field;\n        assert(hi == high, \"attempt to add with overflow\");\n        U128 {\n            lo,\n            hi,\n        }\n    }\n}\n\nimpl Sub for U128 {\n    fn sub(self: Self, b: U128) -> U128 {\n        let low = pow64 + self.lo - b.lo;\n        let lo = low as u64 as Field;\n        let borrow = (low == lo) as Field;\n        let high = self.hi - b.hi - borrow;\n        let hi = high as u64 as Field;\n        assert(hi == high, \"attempt to subtract with underflow\");\n        U128 {\n            lo,\n            hi,\n        }\n    }\n}\n\nimpl Mul for U128 {\n    fn mul(self: Self, b: U128) -> U128 {\n        assert(self.hi*b.hi == 0, \"attempt to multiply with overflow\");\n        let low = self.lo*b.lo;\n        let lo = low as u64 as Field;\n        let carry = (low - lo) / pow64;\n        let high = if crate::field::modulus_num_bits() as u32 > 196 {\n            (self.lo+self.hi)*(b.lo+b.hi) - low + carry\n        } else {\n            self.lo*b.hi + self.hi*b.lo + carry\n        };\n        let hi = high as u64 as Field;\n        assert(hi == high, \"attempt to multiply with overflow\");\n        U128 {\n            lo,\n            hi,\n        }\n    }\n}\n\nimpl Div for U128 {\n    fn div(self: Self, b: U128) -> U128 {\n        let (q,r) = self.unconstrained_div(b);\n        let a = b * q + r;\n        assert_eq(self, a);\n        assert(r < b);\n        q\n    }\n}\n\nimpl Rem for U128 {\n    fn rem(self: Self, b: U128) -> U128 {\n        let (q,r) = self.unconstrained_div(b);\n        let a = b * q + r;\n        assert_eq(self, a);\n        assert(r < b);\n        r\n    }\n}\n\nimpl Eq for U128 {\n    fn eq(self: Self, b: U128) -> bool {\n        (self.lo == b.lo) & (self.hi == b.hi)\n    }\n}\n\nimpl Ord for U128 {\n    fn cmp(self, other: Self) -> Ordering {\n        let hi_ordering = (self.hi as u64).cmp((other.hi as u64));\n        let lo_ordering = (self.lo as u64).cmp((other.lo as u64));\n        \n        if hi_ordering == Ordering::equal() {\n            lo_ordering\n        } else {\n            hi_ordering\n        }\n    }\n}\n\nimpl BitOr for U128 { \n    fn bitor(self, other: U128) -> U128 {\n        U128 {\n            lo: ((self.lo as u64) | (other.lo as u64)) as Field,\n            hi: ((self.hi as u64) | (other.hi as u64))as Field\n        }\n    }\n}\n\nimpl BitAnd for U128 {\n    fn bitand(self, other: U128) -> U128 { \n        U128 {\n            lo: ((self.lo as u64) & (other.lo as u64)) as Field,\n            hi: ((self.hi as u64) & (other.hi as u64)) as Field\n        }\n    }\n}\n\nimpl BitXor for U128 {\n    fn bitxor(self, other: U128) -> U128 { \n        U128 {\n            lo: ((self.lo as u64) ^ (other.lo as u64)) as Field,\n            hi: ((self.hi as u64) ^ (other.hi as u64)) as Field\n        }\n    }\n}\n\nimpl Shl for U128 { \n    fn shl(self, other: U128) -> U128 { \n        assert(other < U128::from_u64s_le(128,0), \"attempt to shift left with overflow\");\n        let exp_bits = other.lo.to_be_bits(7);\n\n        let mut r: Field = 2;\n        let mut y: Field = 1;\n        for i in 1..8 {\n            y = (exp_bits[7-i] as Field) * (r * y) + (1 - exp_bits[7-i] as Field) * y;\n            r *= r;\n        }\n        self.wrapping_mul(U128::from_integer(y))\n    } \n}\n\nimpl Shr for U128 { \n    fn shr(self, other: U128) -> U128 { \n        assert(other < U128::from_u64s_le(128,0), \"attempt to shift right with overflow\");\n        let exp_bits = other.lo.to_be_bits(7);\n\n        let mut r: Field = 2;\n        let mut y: Field = 1;\n        for i in 1..8 {\n            y = (exp_bits[7-i] as Field) * (r * y) + (1 - exp_bits[7-i] as Field) * y;\n            r *= r;\n        }\n        self / U128::from_integer(y)\n    } \n}\n","path":"std/uint128.nr"},"47":{"source":"// docs:start:interfaces\nuse dep::aztec::prelude::{FunctionSelector, AztecAddress, EthAddress, PrivateContext};\nuse dep::aztec::context::{PublicContext, gas::GasOpts};\n\nstruct Token {\n  address: AztecAddress,\n}\n\nimpl Token {\n    pub fn at(address: AztecAddress) -> Self {\n        Self { address }\n    }\n\n    pub fn transfer_public(\n        self: Self,\n        context: &mut PublicContext,\n        from: AztecAddress,\n        to: AztecAddress,\n        amount: Field,\n        nonce: Field\n    ) {\n        context.call_public_function(\n            self.address,\n            FunctionSelector::from_signature(\"transfer_public((Field),(Field),Field,Field)\"),\n            [from.to_field(), to.to_field(), amount, nonce],\n            GasOpts::default()\n        ).assert_empty();\n    }\n\n    pub fn shield(\n        self: Self,\n        context: &mut PublicContext,\n        from: AztecAddress,\n        amount: Field,\n        secret_hash: Field,\n        nonce: Field\n    ) {\n        context.call_public_function(\n            self.address,\n            FunctionSelector::from_signature(\"shield((Field),Field,Field,Field)\"),\n            [from.to_field(), amount, secret_hash, nonce],\n            GasOpts::default()\n        ).assert_empty();\n    }\n    \n    pub fn unshield(\n        self: Self,\n        context: &mut PrivateContext,\n        from: AztecAddress,\n        to: AztecAddress,\n        amount: Field,\n        nonce: Field\n    ) {\n        let _ = context.call_private_function(\n            self.address,\n            FunctionSelector::from_signature(\"unshield((Field),(Field),Field,Field)\"),\n            [from.to_field(), to.to_field(), amount, nonce]\n        );\n    }\n\n    pub fn transfer(\n        self: Self,\n        context: &mut PrivateContext,\n        from: AztecAddress,\n        to: AztecAddress,\n        amount: Field,\n        nonce: Field\n    ) {\n        let _ret = context.call_private_function(\n            self.address,\n            FunctionSelector::from_signature(\"transfer((Field),(Field),Field,Field)\"),\n            [from.to_field(), to.to_field(), amount, nonce]\n        );\n    }\n\n    // pub fn balance_of_public(\n    //     self: Self,\n    //     context: &mut PublicContext,\n    //     owner: AztecAddress\n    // ) -> Field {\n    //     let _ret = context.call_public_function(\n    //         self.address,\n    //         FunctionSelector::from_signature(\"balance_of_public((Field))\"),\n    //         [owner.to_field()],\n    //          GasOpts::default()\n    //     );\n    //     _ret[0]\n    // }\n}\n\nstruct Uniswap {\n  address: AztecAddress,\n}\n\nimpl Uniswap {\n    pub fn at(address: AztecAddress) -> Self {\n        Self { address }\n    }\n\n    pub fn swap_public(\n        self: Self,\n        context: &mut PublicContext,\n        sender: AztecAddress,\n        input_asset_bridge: AztecAddress,\n        input_amount: Field,\n        output_asset_bridge: AztecAddress,\n        nonce_for_transfer_approval: Field,\n        uniswap_fee_tier: Field,\n        minimum_output_amount: Field,\n        recipient: AztecAddress,\n        secret_hash_for_L1_to_l2_message: Field,\n        caller_on_L1: EthAddress,\n        nonce_for_swap_approval: Field\n    ) {\n        let _ = context.call_public_function(\n            self.address,\n            FunctionSelector::from_signature(\"swap_public((Field),(Field),Field,(Field),Field,Field,Field,(Field),Field,(Field),Field)\"),\n            [\n                sender.to_field(), \n                input_asset_bridge.to_field(), \n                input_amount, \n                output_asset_bridge.to_field(), \n                nonce_for_transfer_approval,\n                uniswap_fee_tier,\n                minimum_output_amount,\n                recipient.to_field(),\n                secret_hash_for_L1_to_l2_message,\n                caller_on_L1.to_field(),\n                nonce_for_swap_approval\n            ],\n             GasOpts::default()\n        );\n    }\n\n    // pub fn swap_public(\n    //     self: Self,\n    //     context: &mut PrivateContext,\n    //     sender: AztecAddress,\n    //     input_asset_bridge: AztecAddress,\n    //     input_amount: Field,\n    //     output_asset_bridge: AztecAddress,\n    //     nonce_for_transfer_approval: Field,\n    //     uniswap_fee_tier: Field,\n    //     minimum_output_amount: Field,\n    //     recipient: AztecAddress,\n    //     secret_hash_for_L1_to_l2_message: Field,\n    //     caller_on_L1: EthAddress,\n    //     nonce_for_swap_approval: Field\n    // ) {\n    //     let _ = context.call_public_function(\n    //         self.address,\n    //         FunctionSelector::from_signature(\"swap_public((Field),(Field),Field,(Field),Field,Field,Field,(Field),Field,(Field),Field)\"),\n    //         [\n    //             sender.to_field(), \n    //             input_asset_bridge.to_field(), \n    //             input_amount, \n    //             output_asset_bridge.to_field(), \n    //             nonce_for_transfer_approval,\n    //             uniswap_fee_tier,\n    //             minimum_output_amount,\n    //             recipient.to_field(),\n    //             secret_hash_for_L1_to_l2_message,\n    //             caller_on_L1.to_field(),\n    //             nonce_for_swap_approval\n    //         ],\n    //          GasOpts::default()\n    //     );\n    // }\n\n    // pub fn claim_public(\n\n    // ) {\n    //     let _ = context.call_public_function(\n    //         self.address,\n    //         FunctionSelector::from_signature(\"claim_public((Field),(Field),Field,(Field),Field,Field,Field,(Field),Field,(Field),Field)\"),\n    //         [\n    //             sender.to_field(), \n    //             input_asset_bridge.to_field(), \n    //             input_amount, \n    //             output_asset_bridge.to_field(), \n    //             nonce_for_transfer_approval,\n    //             uniswap_fee_tier,\n    //             minimum_output_amount,\n    //             recipient.to_field(),\n    //             secret_hash_for_L1_to_l2_message,\n    //             caller_on_L1.to_field(),\n    //             nonce_for_swap_approval\n    //         ],\n    //          GasOpts::default()\n    //     );  \n    // }\n}\n// docs:end:interfaces\n","path":"/Users/jack-sw/Codes/abstract/dex-build/token-bridge-uniswap/packages/aztec-contracts/batcher_contract/src/interfaces.nr"},"48":{"source":"use dep::aztec::protocol_types::{address::AztecAddress, traits::{Serialize, Deserialize}};\n\nglobal RELAYER_SERIALIZED_LEN: Field = 7;\n\nstruct BatchRelayer {\n    relayer: AztecAddress, \n    bonding_token: AztecAddress, \n    bonding_amount: Field, // say 50-100k dai\n    he_pub_key: Field,\n    sk_hash: Field,\n    last_timestamp: Field,\n    interval: Field,\n}\n\nimpl BatchRelayer {\n    fn new(\n        relayer: AztecAddress, \n        bonding_token: AztecAddress,\n        bonding_amount: Field,\n        he_pub_key: Field,\n        sk_hash: Field, \n        last_timestamp: Field,\n        interval: Field,\n    ) -> Self {\n        BatchRelayer {\n            relayer,\n            bonding_token,\n            bonding_amount,\n            he_pub_key,\n            sk_hash,\n            last_timestamp,\n            interval\n        }\n    }\n}\n\nimpl Deserialize<RELAYER_SERIALIZED_LEN> for BatchRelayer {\n    fn deserialize(fields: [Field; RELAYER_SERIALIZED_LEN]) -> Self {\n        BatchRelayer { \n            relayer: AztecAddress::from_field(fields[0]),\n            bonding_token: AztecAddress::from_field(fields[1]),\n            bonding_amount: fields[2],\n            he_pub_key: fields[3],\n            sk_hash: fields[4],\n            last_timestamp: fields[5],\n            interval: fields[6],\n         }\n    }\n}\n\nimpl Serialize<RELAYER_SERIALIZED_LEN> for BatchRelayer {\n    fn serialize(self) -> [Field; RELAYER_SERIALIZED_LEN] {\n        [\n            self.relayer.to_field(), \n            self.bonding_token.to_field(),\n            self.bonding_amount,\n            self.he_pub_key,\n            self.sk_hash,\n            self.last_timestamp,\n            self.interval,\n        ]\n    }\n}\n","path":"/Users/jack-sw/Codes/abstract/dex-build/token-bridge-uniswap/packages/aztec-contracts/batcher_contract/src/relayer.nr"},"49":{"source":"use dep::noir_elgamal::elgamal::standard_fe;\n\n// global gen: Field = 10944121435919637611123202872628637544274182200208017171849102093287991052496;\nglobal gen: Field = 1094412143;\n\n    fn encrypt(\n        amount: Field,\n        pub_key: Field,\n        rand: Field\n    ) -> (Field, Field) {\n\n        let (c1, c2) = standard_fe::single_standard_encryption_fe(\n            gen, \n            pub_key, \n            amount,\n            rand\n        );\n\n        (c1, c2)\n    }\n\n    fn add(\n        c1_1: Field, \n        c2_1: Field,\n        c1_2: Field, \n        c2_2: Field) -> (Field, Field) \n    {\n         (c1_1*c1_2, c2_1*c2_2)\n    }\n\n    fn decrypt(\n        c1: Field,\n        c2: Field,\n        x: Field\n    ) -> Field {\n        standard_fe::single_decryption_fe(c1, c2, x)\n    }\n\n    fn validate_keypair(\n        he_pub_key:Field, \n        he_secret_key:Field\n    ) -> pub bool {\n        let computed_pubkey = gen.pow_32(he_secret_key);\n        // dep::std::println(computed_pubkey);\n        let ret = computed_pubkey.eq(he_pub_key);\n        ret\n    }\n\n\n    #[test]\n    fn test_validate_keypair() {\n        let pubkey = 3061722711224745108837506421211829939949377330929128360282042230364241268412;\n        let sk = 7115637666404682632379307215493662218327241124760828634863089038725962038957;\n        let ret = validate_keypair(pubkey, sk);\n        dep::std::println(ret);\n    }","path":"/Users/jack-sw/Codes/abstract/dex-build/token-bridge-uniswap/packages/aztec-contracts/batcher_contract/src/he_add.nr"},"50":{"source":"use dep::aztec::protocol_types::{address::AztecAddress, traits::{Serialize, Deserialize}};\n\n\nglobal ROUND_SERIALIZED_LEN: Field = 6;\n\nstruct Round {\n    token_in_amount: Field,\n    token_out_amount_cancelled: Field,\n    token_out_amount: Field,\n    encrypted_token_out_amount: [Field; 2], // [c1, c2]\n    executed: bool,\n    // minimum batch count\n}\n\nimpl Round {\n    fn get_encrypted_amount(self) -> (Field, Field) {\n        (\n            self.encrypted_token_out_amount[0],\n            self.encrypted_token_out_amount[1]\n        )\n    }\n}\n\n\nimpl Deserialize<ROUND_SERIALIZED_LEN> for Round {\n    fn deserialize(fields: [Field; ROUND_SERIALIZED_LEN]) -> Self {\n        let mut encrypted_token_out_amount: [Field;2] = [0;2];\n        encrypted_token_out_amount[0] = fields[3];\n        encrypted_token_out_amount[1] = fields[4];\n\n        Round { \n            token_in_amount: fields[0],\n            token_out_amount_cancelled: fields[1],\n            token_out_amount: fields[2],\n            encrypted_token_out_amount,\n            executed: fields[5] as bool\n         }\n    }\n}\n\nimpl Serialize<ROUND_SERIALIZED_LEN> for Round {\n    fn serialize(self) -> [Field; ROUND_SERIALIZED_LEN] {\n        [\n            self.token_in_amount,\n            self.token_out_amount_cancelled,\n            self.token_out_amount,\n            self.encrypted_token_out_amount[0],\n            self.encrypted_token_out_amount[1],\n            self.executed as Field,\n        ]\n    }\n}\n\n","path":"/Users/jack-sw/Codes/abstract/dex-build/token-bridge-uniswap/packages/aztec-contracts/batcher_contract/src/round.nr"},"51":{"source":"use dep::aztec::prelude::{AztecAddress, NoteInterface, NoteHeader, PrivateContext, emit_encrypted_log};\nuse dep::aztec::{\n    note::{utils::compute_note_hash_for_consumption},\n    oracle::{nullifier_key::get_nullifier_secret_key, get_public_key::get_public_key},\n    hash::pedersen_hash, protocol_types::traits::Empty\n};\n\nglobal DEPOSIT_NOTE_LEN: Field = 3;\n\n#[aztec(note)]\nstruct DepositNote {\n    round: Field,\n    amount_out: Field,\n    owner: AztecAddress,\n}\n\nimpl DepositNote {\n    pub fn new(\n        round: Field,\n        amount_out: Field,\n        owner: AztecAddress\n    ) -> Self {\n        DepositNote { \n            round,\n            amount_out, \n            owner,\n            header: NoteHeader::empty()\n        }\n    }\n\n    pub fn empty() -> Self {\n        DepositNote::new(\n            0,\n            0,\n            AztecAddress::from_field(0),\n        )\n    }\n}\n\nimpl NoteInterface<DEPOSIT_NOTE_LEN> for DepositNote {\n    fn compute_nullifier(self, context: &mut PrivateContext) -> Field {\n        let note_hash_for_nullify = compute_note_hash_for_consumption(self);\n        let secret = context.request_nullifier_secret_key(self.owner);\n        pedersen_hash([\n            note_hash_for_nullify,\n            secret.high,\n            secret.low,\n        ],0)\n    }\n\n    fn compute_nullifier_without_context(self) -> Field {\n        let note_hash_for_nullify = compute_note_hash_for_consumption(self);\n        let secret = get_nullifier_secret_key(self.owner);\n        pedersen_hash([\n            note_hash_for_nullify,\n            secret.high,\n            secret.low,\n        ],0)\n    }\n\n    // Broadcasts the note as an encrypted log on L1.\n    fn broadcast(self, context: &mut PrivateContext, slot: Field) {\n        let encryption_pub_key = get_public_key(self.owner);\n        emit_encrypted_log(\n            context,\n            (*context).this_address(),\n            slot,\n            Self::get_note_type_id(),\n            encryption_pub_key,\n            self.serialize_content(),\n        );\n    }\n}\n","path":"/Users/jack-sw/Codes/abstract/dex-build/token-bridge-uniswap/packages/aztec-contracts/batcher_contract/src/deposit_note.nr"},"52":{"source":"mod deposit_note;\nmod interfaces;\nmod relayer;\nmod round;\nmod he_add;\n\n// aztec-cli codegen ./target/ -o ../../test/artifacts --ts\n\n\n\ncontract BatcherVault {\n    use dep::aztec::prelude::{\n        AztecAddress, EthAddress, FunctionSelector, NoteHeader, NoteGetterOptions, NoteViewerOptions,\n        Map, PublicMutable, PublicImmutable, PrivateMutable, SharedImmutable\n    };\n    use dep::aztec::{note::note_getter_options::Comparator, \n        context::{Context, PrivateContext, PublicContext, gas::GasOpts}\n    };\n    \n    // interfaces\n    use crate::interfaces::{Token, Uniswap};\n\n    // note\n    use crate::deposit_note::{DepositNote, DEPOSIT_NOTE_LEN};\n\n    // type \n    use crate::relayer::{BatchRelayer, RELAYER_SERIALIZED_LEN};\n    use crate::round::{Round, ROUND_SERIALIZED_LEN};\n    \n    // libs\n    use crate::he_add;\n\n    #[aztec(storage)]\n    struct Storage {\n        admin: PublicImmutable<AztecAddress>, // admin\n        target: SharedImmutable<AztecAddress>, // amm or uniswap connect\n        token_out: SharedImmutable<AztecAddress>, // token sold e.g. dai\n        token_in: SharedImmutable<AztecAddress>, // token purchased e.g. eth\n        current_round: PublicMutable<Field>,\n        batch_relayer: PublicMutable<BatchRelayer>,\n        rounds: Map<Field, PublicMutable<Round>>,\n        deposit_notes: Map<AztecAddress, PrivateMutable<DepositNote>>, \n    }\n\n    impl Storage {\n      fn init(context: Context) -> Self {\n        Storage {\n            admin: PublicImmutable::new(context, 1),\n            target: SharedImmutable::new(context, 2),\n            token_out: SharedImmutable::new(context, 3),\n            token_in: SharedImmutable::new(context, 4),\n            current_round: PublicMutable::new(context, 5),\n            batch_relayer: PublicMutable::new(context, 6),\n            rounds: Map::new(context, 7, |context, slot| {\n                    PublicMutable::new(context, slot)\n                },\n            ),\n            deposit_notes: Map::new(context, 8,|context, slot| {\n                    PrivateMutable::new(context, slot)\n               },\n            ),\n        }\n      }\n    }\n\n    #[aztec(private)]\n    #[aztec(initializer)]\n    fn constructor(\n        admin: AztecAddress, \n        target:AztecAddress, \n        token_in:AztecAddress, \n        token_out:AztecAddress, \n        relayer: AztecAddress,\n        bonding_token: AztecAddress, \n        bonding_amount: Field,\n        he_pub_key: Field,\n        sk_hash: Field,\n        interval: Field,\n        he_secret_key: Field\n    ) {\n\n        // validate that hash(new_he_secret_key) == sk_hash\n        let computed_sk_hash = dep::std::hash::pedersen_hash([he_secret_key]);\n        assert(sk_hash == computed_sk_hash, \"invalid sk_hash\");\n\n        // TODO: fail w/ \"Cannot satisfy constraint 'self.__to_le_bits(bit_size)'\"\n        // validate that new_he_pub_key corresponds to new_he_secret_key\n        // assert(he_add::validate_keypair(he_pub_key, he_secret_key), \"invalid he_pub_key\");\n\n        context.call_public_function(\n            context.this_address(),\n            FunctionSelector::from_signature(\"_initialize((Field),(Field),(Field),(Field),(Field),(Field),Field,Field,Field,Field)\"), \n            [\n                admin.to_field(),\n                target.to_field(),\n                token_in.to_field(),\n                token_out.to_field(),\n                relayer.to_field(), \n                bonding_token.to_field(), \n                bonding_amount,\n                he_pub_key,\n                sk_hash,\n                interval\n            ]\n        );\n    }\n\n    #[aztec(public)]\n    #[aztec(internal)]\n    #[aztec(noinitcheck)]\n    fn _initialize(\n        admin: AztecAddress, \n        target:AztecAddress, \n        token_in:AztecAddress, \n        token_out:AztecAddress, \n        relayer: AztecAddress,\n        bonding_token: AztecAddress, \n        bonding_amount: Field,\n        he_pub_key: Field,\n        sk_hash: Field,\n        interval: Field\n    ) {\n        // should put asserts to validate params\n        storage.admin.initialize(admin);\n        storage.target.initialize(target);\n        storage.token_in.initialize(token_in);\n        storage.token_out.initialize(token_out);\n\n        storage.current_round.write(1);\n\n        // initialize BatchRelayer\n        let batch_relayer = BatchRelayer::new(\n            relayer,\n            bonding_token,\n            bonding_amount,\n            he_pub_key,\n            sk_hash,\n            0, // TODO:  context.timestamp(),\n            interval\n        );\n\n        // store BatchRelayer\n        storage.batch_relayer.write(batch_relayer);\n\n        // // relayer stakes bonding\n        // context.call_public_function(\n        //     context.this_address(),\n        //     FunctionSelector::from_signature(\"stake((Field),(Field),Field,Field)\"), \n        //     [relayer.to_field(), bonding_token.to_field(), bonding_amount, nonce],\n        //      GasOpts::default()\n        // ).assert_empty();\n    }\n\n    /************************************************************************\n     * Admin's Operations\n     ************************************************************************/\n\n     // set_relayer(): set a new relayer\n     // set_relayer_params: set new relayer params, e.g. bonding_token, bonding_amount, etc...\n\n\n    /************************************************************************\n     * Users' Operations : Deposit, Withdraw, and Claim\n     ************************************************************************/\n\n    // TODO: some checks if relayer has already made a deposit before users depositing\n    #[aztec(private)]\n    fn deposit_to_batch(\n        current_round: Field,\n        amount_out: Field, \n        relayer_he_pubkey: Field,\n        he_add_rand: Field,\n        nonce: Field\n    ) {\n        // TODO: validate current_round\n\n        let sender = context.msg_sender();\n        let mut deposit_note = DepositNote::empty();\n\n        deposit_note = DepositNote::new(current_round, amount_out, sender);\n        storage.deposit_notes.at(sender).initialize(\n            &mut deposit_note,\n            true\n        );\n\n        let asset = storage.token_out.read_private();\n        Token::at(asset).transfer(\n            &mut context,\n            sender,\n            context.this_address(),\n            amount_out,\n            nonce\n        );\n\n        // TODO: validate relayer pubkey here\n\n        let (enc_c1, enc_c2) = he_add::encrypt(\n            amount_out,\n            relayer_he_pubkey, \n            he_add_rand\n        );\n\n        context.call_public_function(\n            context.this_address(),\n            FunctionSelector::from_signature(\"_add_token_out_amount(Field,Field)\"),\n            [enc_c1, enc_c2]\n        );\n    }\n\n    // TODO: this func or another func should let users withdraw in the case of relayer failure\n    // partial removal be a bit tricker but complete cancelling might be quite easy to implement\n    #[aztec(private)]\n    fn cancel_batch_and_claim(\n        current_round: Field, \n        secret_hash:Field\n    ) {\n        \n        let deposit_note = storage.deposit_notes.at(context.msg_sender()).get_note(false);\n\n        // transfer cancelled amount to the sender\n        let asset = storage.token_out.read_private();\n        Token::at(asset).transfer(\n            &mut context, \n            context.this_address(), \n            context.msg_sender(),\n            deposit_note.amount_out,\n            0\n        );\n\n        // report cancelled amount\n        context.call_public_function(\n            context.this_address(),\n            FunctionSelector::from_signature(\"_sub_token_out_amount((Field),Field)\"),\n            [deposit_note.amount_out, current_round]\n        ); \n\n        // make note empty\n        let mut empty_deposit_note = DepositNote::empty();\n        storage.deposit_notes.at(context.msg_sender()).replace(&mut empty_deposit_note, true);\n    }\n\n    // from user\n    #[aztec(private)]\n    fn claim_token_in(round: Field, total_token_in:Field, total_token_out: Field) {\n\n        // get msg_sender's note\n        let mut deposit_note = storage.deposit_notes.at(context.msg_sender()).get_note(false);\n\n        context.call_public_function(\n            context.this_address(),\n            FunctionSelector::from_signature(\"_validate_claim_params(Field[])\"), \n            [deposit_note.round, total_token_in, total_token_out]\n        ); \n\n        // calculate total token_in purchased at a specificed round\n        let token_in_amount = (total_token_in * deposit_note.amount_out / total_token_out);\n\n        // individual users can execute private transfer from this address to them with no permission..?\n        let _callStackItem = context.call_private_function(\n            storage.token_out.read_private(),\n            FunctionSelector::from_signature(\"transfer((Field),(Field),Field,Field)\"),\n            [context.this_address().to_field(), context.msg_sender().to_field(), token_in_amount, 0]\n        );\n\n        // TODO: note should be destroyed\n    }\n\n    /************************************************************************\n     * Relayer's Public Operations\n     ************************************************************************/\n\n    // from relayer or amind controlled by L1 contract with timestamp checkers\n    // minimum_output_amount should be calculated based on target twap\n    #[aztec(private)]\n    fn execute_batch(\n        encrypted_amount: [Field;2],\n        secret_key: Field,\n        token_out_amount_cancelled: Field,\n        tokne_in: AztecAddress,\n        token_out: AztecAddress,\n        nonce_for_transfer_approval: Field,\n        nonce_for_swap_approval: Field\n    ) -> pub Field {\n        // caller should be an authorized relayer \n        // assert(context.msg_sender() == storage.batch_relayer.relayer, \"caller must be relayer\");\n\n        let amount_out = he_add::decrypt(encrypted_amount[0], encrypted_amount[1], secret_key);\n        let amount_out_minus_cancelled = amount_out - token_out_amount_cancelled;\n        amount_out\n        // context.call_public_function(\n        //     context.this_address(),\n        //     FunctionSelector::from_signature(\"validate_execute_batch((Field),Field,Field,Field,Field)\"), \n        //     [\n        //         context.msg_sender().to_field(),\n        //         encrypted_amount[0], \n        //         encrypted_amount[1], \n        //         amount_out_minus_cancelled, \n        //         token_out_amount_cancelled\n        //     ]\n        // );  \n\n        // TODO: unshield / redeem if necessary\n\n        \n        // let target = storage.target.read_public();\n        // Uniswap::at(target).swap_public(\n        //     &mut context,\n        //     context.this_address(),\n        //     input_asset_bridge,\n        //     input_amount.to_field(),\n        //     output_asset_bridge,\n        //     nonce_for_transfer_approval,\n        //     uniswap_fee_tier,\n        //     minimum_output_amount,\n        //     context.this_address(),\n        //     secret_hash_for_L1_to_l2_message,\n        //     caller_on_L1,\n        //     nonce_for_swap_approval\n        // );\n    }\n\n    // TODO: this func can have conditions to be executed \n    // 1: total deposit count: how many deposits are made so far\n    // 2: time: how long did it take since last batch execute\n    #[aztec(public)]\n    #[aztec(internal)]\n    fn validate_execute_batch(\n        sender:AztecAddress, \n        c1:Field, \n        c2:Field, \n        amount_out:Field,\n        amount_out_sub_cancelled:Field\n    ) {\n        let relayer = storage.batch_relayer.read();\n        let current_time = relayer.last_timestamp + relayer.interval;\n        assert(current_time as u64 >= context.timestamp() as u64, \"time hasn't elapsed enough to update round\");\n        assert(sender == relayer.relayer, \"caller must be relayer\");\n\n        let current_round = storage.current_round.read();\n        let mut round = storage.rounds.at(current_round).read();\n        assert(!round.executed, \"already executed\");\n        assert(round.token_out_amount_cancelled == amount_out_sub_cancelled, \"invalid_cancelled_amount_out\");\n\n        assert(\n            (round.encrypted_token_out_amount[0] == c1)\n            & (round.encrypted_token_out_amount[1] == c2), \n            \"invalid encrypted amount\"\n        );\n\n        round.token_out_amount = amount_out;\n        round.executed = true;\n        storage.rounds.at(current_round).write(round); \n\n\n    }\n\n    // here anyone can update the acquired eth reward of the latest round after eth purchase\n    // but this should only occur once each round, so...\n    #[aztec(public)]\n    fn finalize_execute(\n        secret_hash_for_redeeming_minted_notes: Field, // secret hash used to redeem minted notes at a later time. This enables anyone to call this function and mint tokens to a user on their behalf\n        amount: Field,\n        secret_for_L1_to_L2_message_consumption: Field \n    ) {\n       // assert caller == relayer\n\n        let current_round = storage.current_round.read();\n        let mut round = storage.rounds.at(current_round).read();\n        assert(round.executed, \"batch tx hasn't been executed\");\n        assert(round.token_in_amount == 0, \"already claimed\");\n\n        // store the new balance \n        round.token_in_amount = amount;\n        storage.rounds.at(current_round).write(round);\n        \n\n        // claim_private ( mint_private() )\n        // redeem_shield()\n\n        let new_round = storage.current_round.read() + 1;\n        storage.current_round.write(new_round); \n    }\n\n    // here probably there is need to implement create public auth wit\n    // so that target contract can receive(transfer) token from this cotnract.\n    #[aztec(public)] \n    fn spend_public_authwit(inner_hash: Field) -> Field {\n        // let message_hash = compute_outer_authwit_hash(\n        //     context.msg_sender(),\n        //     context.chain_id(),\n        //     context.version(),\n        //     inner_hash\n        // );\n        // let value = storage.approved_action.at(message_hash).read();\n        // if (value) {\n        //     context.push_new_nullifier(message_hash, 0);\n        //     IS_VALID_SELECTOR\n        // } else {\n        //     0\n        // }\n        0\n    }\n\n\n    /************************************************************************\n     * Functions for Relayer Dispute\n     ************************************************************************/\n\n    #[aztec(private)]\n    fn dipute_relayer(\n        he_secret_key: Field, \n        new_sk_hash: Field, \n        new_he_pub_key:Field,\n        new_he_secret_key: Field,\n        new_relayer: AztecAddress,\n        secret_hash: Field,\n        nonce:Field\n        ) {\n        let sk_hash = dep::std::hash::pedersen_hash([he_secret_key]);\n\n        context.call_public_function(\n            context.this_address(),\n            FunctionSelector::from_signature(\"check_sk_hash(Field)\"), // or (Field)[]\n            [sk_hash]\n        ); \n\n        // validate that new_sk_hash == hash(new_he_secret_key);\n        let new_computed_sk_hash = dep::std::hash::pedersen_hash([new_he_secret_key]);\n        assert(new_sk_hash == new_computed_sk_hash, \"invalid_new_sk_hash\");\n\n        // validate that new_he_pub_key corresponds to new_he_secret_key\n        assert(he_add::validate_keypair(new_he_pub_key, new_he_secret_key), \"invalid new_he_pub_key\");\n\n        context.call_public_function(\n            context.this_address(),\n            FunctionSelector::from_signature(\"replace_relayer_and_slash_stake(Field,Field,(Field),Field,Field)\"),\n            [new_sk_hash, new_he_pub_key, new_relayer.to_field(), secret_hash, nonce]\n        ); \n    }\n\n    #[aztec(public)]\n    fn check_sk_hash(sk_hash: Field) {\n        assert(sk_hash == storage.batch_relayer.read().sk_hash, \"invalid sk_hash\");\n    }\n\n\n    // register sk_hash\n\n    // replace_relayer_and_slash_stake\n    // 1: replace current relayer with a new relayer\n    // 2: slash bond token\n    // 3: make a new stake deposit from a new layer\n    #[aztec(public)]\n    #[aztec(internal)]\n    fn replace_relayer_and_slash_stake(sk_hash: Field, new_he_pub_key: Field, new_relayer:AztecAddress, secret_hash:Field, nonce:Field) {\n        // replacement from slashed relayer to a new relayer ( disputer )\n        let mut relayer = storage.batch_relayer.read();\n        relayer.relayer = new_relayer;\n        relayer.sk_hash = sk_hash;\n        relayer.he_pub_key = new_he_pub_key;\n        storage.batch_relayer.write(relayer);\n\n        // slash by shielding staked asset to new relayer\n        Token::at(relayer.bonding_token).shield(\n            &mut context, \n            context.this_address(), \n            relayer.bonding_amount,\n            secret_hash, \n            0\n        );\n\n        // new stake deposit from new relayer\n        context.call_public_function(\n            context.this_address(),\n            FunctionSelector::from_signature(\"stake((Field),(Field),Field,Field)\"), \n            [new_relayer.to_field(), relayer.bonding_token.to_field(), relayer.bonding_amount, nonce],\n            GasOpts::default()\n        ).assert_empty();  \n    }\n\n    #[aztec(public)] \n    fn stake(relayer: AztecAddress, token:AztecAddress, amount:Field, nonce:Field) {\n        let batch_relayer = storage.batch_relayer.read();\n        assert(U128::from_field(amount) >= U128::from_field(batch_relayer.bonding_amount), \"insufficient bonding amount\");\n        // TODO: also verify caller == relayer in normal situation..?\n\n        // transfer public\n        Token::at(token).transfer_public(\n            &mut context, \n            relayer,\n            context.this_address(), \n            amount,\n            nonce\n        );\n    }\n\n    /************************************************************************\n     * Public Internal Function\n     ************************************************************************/\n\n    #[aztec(public)] \n    #[aztec(internal)]\n    fn _validate_claim_params(\n        _round: Field, \n        _total_token_in: Field,\n        _total_token_out: Field\n    ) {\n        let round = storage.rounds.at(_round).read();\n        assert(round.token_in_amount == _total_token_in, \"invalid _total_token_in\");\n        assert(round.token_out_amount == _total_token_out, \"invalid _total_token_in\");\n    }\n\n    #[aztec(public)]\n    #[aztec(internal)]\n    fn _add_token_out_amount(enc_c1: Field, enc_c2:Field) {\n        let current_round = storage.current_round.read();\n        let mut round = storage.rounds.at(current_round).read();\n        let mut new_c1 = 0;\n        let mut new_c2 = 0;\n\n        let (c1, c2) = round.get_encrypted_amount();\n\n        // if the existing encrypted valeus are 0\n        if ((c1 == 0) & (c2 == 0)) {\n            new_c1 = enc_c1;\n            new_c2 = enc_c2;\n        // if there is already values inserted\n        } else {\n            let (_new_c1, _new_c2) = he_add::add(c1, c2, enc_c1, enc_c2);\n            new_c1 = _new_c1;\n            new_c2 = _new_c2;\n        }\n\n        round.encrypted_token_out_amount[0] = new_c1;\n        round.encrypted_token_out_amount[1] = new_c2;\n              \n        storage.rounds.at(current_round).write(round);\n    }\n\n    /// \"decrease\" (increase) `token_out_amount_cancelled` in rounds\n    #[aztec(public)]\n    #[aztec(internal)]\n    fn _sub_token_out_amount(amount: Field, _round: Field) {\n        let mut round = storage.rounds.at(_round).read();\n        round.token_out_amount_cancelled = amount;\n        storage.rounds.at(_round).write(round);\n    }\n\n    #[aztec(public)]\n    #[aztec(internal)]\n    fn _validate_round(round:Field) {\n        let current_round = storage.current_round.read();\n        assert(current_round == round, \"invalid_round\");\n    }\n\n    unconstrained fn get_admin() -> pub Field {\n        storage.admin.read().to_field()\n    }\n\n    unconstrained fn get_target_address() -> pub Field {\n        storage.target.read_public().to_field()\n    }\n\n    unconstrained fn get_token_in() -> pub Field {\n        storage.token_in.read_public().to_field()\n    }\n\n    unconstrained fn get_token_out() -> pub Field {\n        storage.token_out.read_public().to_field()\n    }\n\n    unconstrained fn get_round() -> pub Field {\n        storage.current_round.read()\n    }\n\n    unconstrained fn get_batch_relayer() -> pub BatchRelayer {\n        storage.batch_relayer.read()\n    }\n\n    unconstrained fn get_encrypted_sum(current_round:Field) -> pub [Field;2] {\n        let mut ret:[Field;2] = [0;2];\n        let (c1, c2) = storage.rounds.at(current_round).read().get_encrypted_amount();\n        ret[0] = c1;\n        ret[1] = c2;\n        ret\n    }\n\n    unconstrained fn get_sk_hash(he_secret_key: Field) -> pub Field {\n        dep::std::hash::pedersen_hash([he_secret_key])\n    }\n\n    #[test]\n    fn test_get_sk_hash() {\n        let sk = 711563766;\n        let ret = get_sk_hash(sk);\n        dep::std::println(ret);\n    }\n    \n}\n","path":"/Users/jack-sw/Codes/abstract/dex-build/token-bridge-uniswap/packages/aztec-contracts/batcher_contract/src/main.nr"},"53":{"source":"use crate::context::{PrivateContext, PublicContext};\nuse crate::oracle;\nuse dep::protocol_types::{address::AztecAddress, grumpkin_point::GrumpkinPoint};\n\npub fn emit_encrypted_log<N>(\n    context: &mut PrivateContext,\n    contract_address: AztecAddress,\n    storage_slot: Field,\n    note_type_id: Field,\n    encryption_pub_key: GrumpkinPoint,\n    log: [Field; N]\n) {\n    let _ = oracle::logs::emit_encrypted_log(\n        contract_address,\n        storage_slot,\n        note_type_id,\n        encryption_pub_key,\n        log\n    );\n    context.accumulate_encrypted_logs(log);\n}\n\npub fn emit_unencrypted_log<T>(context: &mut PublicContext, log: T) {\n    let contract_address = context.this_address();\n    let event_selector = 5; // TODO: compute actual event selector.\n    let _ = oracle::logs::emit_unencrypted_log(contract_address, event_selector, log);\n    // context.accumulate_unencrypted_logs(log);\n}\n\n// TODO: We might want to remove this since emitting unencrypted logs from private functions is violating privacy.\n// --> might be a better approach to force devs to make a public function call that emits the log if needed then\n// it would be less easy to accidentally leak information.\n// If we decide to keep this function around would make sense to wait for traits and then merge it with emit_unencrypted_log.\npub fn emit_unencrypted_log_from_private<T>(context: &mut PrivateContext, log: T) {\n    let contract_address = context.this_address();\n    let event_selector = 5; // TODO: compute actual event selector.\n    let _ = oracle::logs::emit_unencrypted_log(contract_address, event_selector, log);\n    // context.accumulate_unencrypted_logs(log);\n}\n","path":"/Users/jack-sw/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.35.1/noir-projects/aztec-nr/aztec/src/log.nr"},"57":{"source":"use dep::protocol_types::{\n    constants::{\n    MAX_NOTE_HASH_READ_REQUESTS_PER_CALL, GET_NOTE_ORACLE_RETURN_LENGTH, GET_NOTES_ORACLE_RETURN_LENGTH,\n    MAX_NOTES_PER_PAGE, VIEW_NOTE_ORACLE_RETURN_LENGTH\n}\n};\nuse crate::context::PrivateContext;\nuse crate::note::{\n    note_getter_options::{NoteGetterOptions, Select, Sort, SortOrder, Comparator, NoteStatus, PropertySelector},\n    note_interface::NoteInterface, note_viewer_options::NoteViewerOptions,\n    utils::compute_note_hash_for_consumption\n};\nuse crate::oracle;\n\nfn extract_property_value_from_selector<N>(serialized_note: [Field; N], selector: PropertySelector) -> Field {\n    // Selectors use PropertySelectors in order to locate note properties inside the serialized note. \n    // This allows easier packing and custom (de)serialization schemas. A note property is located\n    // inside the serialized note using the index inside the array, a byte offset and a length.\n    let value = serialized_note[selector.index].to_be_bytes(32);\n    let offset = selector.offset;\n    let length = selector.length;\n    let mut value_field = 0 as Field;\n    let mut acc: Field = 1;\n    for i in 0..32 {\n        if i < length {\n            value_field += value[31 + offset - i] as Field * acc;\n            acc = acc * 256;\n        }\n    }\n    value_field\n}\n\nfn check_note_header<Note, N>(context: PrivateContext, storage_slot: Field, note: Note) where Note: NoteInterface<N> {\n    let header = note.get_header();\n    let contract_address = context.this_address();\n    assert(header.contract_address.eq(contract_address));\n    assert(header.storage_slot == storage_slot);\n}\n\nfn check_note_fields<N>(serialized_note: [Field; N], selects: BoundedVec<Option<Select>, N>) {\n    for i in 0..selects.len {\n        let select = selects.get_unchecked(i).unwrap_unchecked();\n        let value_field = extract_property_value_from_selector(serialized_note, select.property_selector);\n\n        // Values are computed ahead of time because circuits evaluate all branches\n        let is_equal = value_field == select.value.to_field();\n        let is_lt = value_field.lt(select.value.to_field());\n\n        if (select.comparator == Comparator.EQ) {\n            assert(is_equal, \"Mismatch return note field.\");\n        } else if (select.comparator == Comparator.NEQ) {\n            assert(!is_equal, \"Mismatch return note field.\");\n        } else if (select.comparator == Comparator.LT) {\n            assert(is_lt, \"Mismatch return note field.\");\n        } else if (select.comparator == Comparator.LTE) {\n            assert(is_lt | is_equal, \"Mismatch return note field.\");\n        } else if (select.comparator == Comparator.GT) {\n            assert(!is_lt & !is_equal, \"Mismatch return note field.\");\n        } else if (select.comparator == Comparator.GTE) {\n            assert(!is_lt, \"Mismatch return note field.\");\n        }\n    }\n}\n\nfn check_notes_order<N>(\n    fields_0: [Field; N],\n    fields_1: [Field; N],\n    sorts: BoundedVec<Option<Sort>, N>\n) {\n    for i in 0..sorts.len {\n        let sort = sorts.get_unchecked(i).unwrap_unchecked();\n        let field_0 = extract_property_value_from_selector(fields_0, sort.property_selector);\n        let field_1 = extract_property_value_from_selector(fields_1, sort.property_selector);\n        let eq = field_0 == field_1;\n        let lt = field_0.lt(field_1);\n        if sort.order == SortOrder.ASC {\n            assert(eq | lt, \"Return notes not sorted in ascending order.\");\n        } else if !eq {\n            assert(!lt, \"Return notes not sorted in descending order.\");\n        }\n    }\n}\n\npub fn get_note<Note, N>(\n    context: &mut PrivateContext,\n    storage_slot: Field\n) -> Note where Note: NoteInterface<N> {\n    let note = get_note_internal(storage_slot);\n\n    check_note_header(*context, storage_slot, note);\n\n    let note_hash_for_read_request = compute_note_hash_for_consumption(note);\n\n    context.push_note_hash_read_request(note_hash_for_read_request);\n    note\n}\n\npub fn get_notes<Note, N, FILTER_ARGS>(\n    context: &mut PrivateContext,\n    storage_slot: Field,\n    options: NoteGetterOptions<Note, N, FILTER_ARGS>\n) -> [Option<Note>; MAX_NOTE_HASH_READ_REQUESTS_PER_CALL] where Note: NoteInterface<N> {\n    let opt_notes = get_notes_internal(storage_slot, options);\n\n    _get_notes_constrain_get_notes_internal(context, storage_slot, opt_notes, options)\n}\n\npub fn _get_notes_constrain_get_notes_internal<Note, N, FILTER_ARGS>(\n    context: &mut PrivateContext,\n    storage_slot: Field,\n    opt_notes: [Option<Note>; MAX_NOTE_HASH_READ_REQUESTS_PER_CALL],\n    options: NoteGetterOptions<Note, N, FILTER_ARGS>\n) -> [Option<Note>; MAX_NOTE_HASH_READ_REQUESTS_PER_CALL] where Note: NoteInterface<N> {\n    let mut returned_notes = [Option::none(); MAX_NOTE_HASH_READ_REQUESTS_PER_CALL];\n\n    let mut num_notes = 0;\n    let mut prev_fields = [0; N];\n    for i in 0..opt_notes.len() {\n        let opt_note = opt_notes[i];\n        if opt_note.is_some() {\n            let note = opt_note.unwrap_unchecked();\n            let fields = note.serialize_content();\n            check_note_header(*context, storage_slot, note);\n            check_note_fields(fields, options.selects);\n            if i != 0 {\n                check_notes_order(prev_fields, fields, options.sorts);\n            }\n            prev_fields = fields;\n\n            let note_hash_for_read_request = compute_note_hash_for_consumption(note);\n            // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1410): test to ensure\n            // failure if malicious oracle injects 0 nonce here for a \"pre-existing\" note.\n            context.push_note_hash_read_request(note_hash_for_read_request);\n\n            // The below code is used to collapse a sparse array into one where the values are guaranteed to be at the front of the array\n            // We write at returned_notes[num_notes] because num_notes is only advanced when we have a value in opt_notes\n            returned_notes[num_notes] = Option::some(note);\n            num_notes += 1;\n        };\n    }\n    if options.limit != 0 {\n        assert(num_notes <= options.limit, \"Invalid number of return notes.\");\n    }\n\n    assert(num_notes != 0, \"Cannot return zero notes\");\n\n    returned_notes\n}\n\nunconstrained fn get_note_internal<Note, N>(storage_slot: Field) -> Note where Note: NoteInterface<N> {\n    let placeholder_note = [Option::none()];\n    let placeholder_fields = [0; GET_NOTE_ORACLE_RETURN_LENGTH];\n    let placeholder_note_length = [0; N];\n    oracle::notes::get_notes(\n        storage_slot,\n        0,\n        [],\n        [],\n        [],\n        [],\n        [],\n        [],\n        [],\n        [],\n        [],\n        1, // limit\n        0, // offset\n        NoteStatus.ACTIVE,\n        placeholder_note,\n        placeholder_fields,\n        placeholder_note_length\n    )[0].unwrap() // Notice: we don't allow dummies to be returned from get_note (singular).\n}\n\nunconstrained fn get_notes_internal<Note, N, FILTER_ARGS>(\n    storage_slot: Field,\n    options: NoteGetterOptions<Note, N, FILTER_ARGS>\n) -> [Option<Note>; MAX_NOTE_HASH_READ_REQUESTS_PER_CALL] where Note: NoteInterface<N> {\n    let (num_selects, select_by_indexes, select_by_offsets, select_by_lengths, select_values, select_comparators, sort_by_indexes, sort_by_offsets, sort_by_lengths, sort_order) = flatten_options(options.selects, options.sorts);\n    let placeholder_opt_notes = [Option::none(); MAX_NOTE_HASH_READ_REQUESTS_PER_CALL];\n    let placeholder_fields = [0; GET_NOTES_ORACLE_RETURN_LENGTH];\n    let placeholder_note_length = [0; N];\n    let opt_notes = oracle::notes::get_notes(\n        storage_slot,\n        num_selects,\n        select_by_indexes,\n        select_by_offsets,\n        select_by_lengths,\n        select_values,\n        select_comparators,\n        sort_by_indexes,\n        sort_by_offsets,\n        sort_by_lengths,\n        sort_order,\n        options.limit,\n        options.offset,\n        options.status,\n        placeholder_opt_notes,\n        placeholder_fields,\n        placeholder_note_length\n    );\n\n    let filter = options.filter;\n    let filter_args = options.filter_args;\n    filter(opt_notes, filter_args)\n}\n\nunconstrained pub fn view_notes<Note, N>(\n    storage_slot: Field,\n    options: NoteViewerOptions<Note, N>\n) -> [Option<Note>; MAX_NOTES_PER_PAGE] where Note: NoteInterface<N> {\n    let (num_selects, select_by_indexes, select_by_offsets, select_by_lengths, select_values, select_comparators, sort_by_indexes, sort_by_offsets, sort_by_lengths, sort_order) = flatten_options(options.selects, options.sorts);\n    let placeholder_opt_notes = [Option::none(); MAX_NOTES_PER_PAGE];\n    let placeholder_fields = [0; VIEW_NOTE_ORACLE_RETURN_LENGTH];\n    let placeholder_note_length = [0; N];\n    oracle::notes::get_notes(\n        storage_slot,\n        num_selects,\n        select_by_indexes,\n        select_by_offsets,\n        select_by_lengths,\n        select_values,\n        select_comparators,\n        sort_by_indexes,\n        sort_by_offsets,\n        sort_by_lengths,\n        sort_order,\n        options.limit,\n        options.offset,\n        options.status,\n        placeholder_opt_notes,\n        placeholder_fields,\n        placeholder_note_length\n    )\n}\n\nunconstrained fn flatten_options<Note, N>(\n    selects: BoundedVec<Option<Select>, N>,\n    sorts: BoundedVec<Option<Sort>, N>\n) -> (u8, [u8; N], [u8; N], [u8; N], [Field; N], [u8; N], [u8; N], [u8; N], [u8; N], [u8; N]) {\n    let mut num_selects = 0;\n    let mut select_by_indexes = [0; N];\n    let mut select_by_offsets = [0; N];\n    let mut select_by_lengths = [0; N];\n    let mut select_values = [0; N];\n    let mut select_comparators = [0; N];\n\n    for i in 0..selects.len {\n        let select = selects.get(i);\n        if select.is_some() {\n            select_by_indexes[num_selects] = select.unwrap_unchecked().property_selector.index;\n            select_by_offsets[num_selects] = select.unwrap_unchecked().property_selector.offset;\n            select_by_lengths[num_selects] = select.unwrap_unchecked().property_selector.length;\n            select_values[num_selects] = select.unwrap_unchecked().value;\n            select_comparators[num_selects] = select.unwrap_unchecked().comparator;\n            num_selects += 1;\n        };\n    }\n\n    let mut sort_by_indexes = [0; N];\n    let mut sort_by_offsets = [0; N];\n    let mut sort_by_lengths = [0; N];\n    let mut sort_order = [0; N];\n    for i in 0..sorts.len {\n        let sort = sorts.get(i);\n        if sort.is_some() {\n            sort_by_indexes[i] = sort.unwrap_unchecked().property_selector.index;\n            sort_by_offsets[i] = sort.unwrap_unchecked().property_selector.offset;\n            sort_by_lengths[i] = sort.unwrap_unchecked().property_selector.length;\n            sort_order[i] = sort.unwrap_unchecked().order;\n        };\n    }\n\n    (\n        num_selects, select_by_indexes, select_by_offsets, select_by_lengths, select_values, select_comparators, sort_by_indexes, sort_by_offsets, sort_by_lengths, sort_order\n    )\n}\n","path":"/Users/jack-sw/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.35.1/noir-projects/aztec-nr/aztec/src/note/note_getter.nr"},"58":{"source":"use crate::context::{PrivateContext, PublicContext};\nuse crate::note::{\n    note_header::NoteHeader, note_interface::NoteInterface,\n    utils::{compute_note_hash_for_insertion, compute_note_hash_for_consumption}\n};\nuse crate::oracle::notes::{notify_created_note, notify_nullified_note};\n\npub fn create_note<Note, N>(\n    context: &mut PrivateContext,\n    storage_slot: Field,\n    note: &mut Note,\n    broadcast: bool\n) where Note: NoteInterface<N> {\n    let contract_address = (*context).this_address();\n\n    let header = NoteHeader { contract_address, storage_slot, nonce: 0, is_transient: true };\n    // TODO: change this to note.set_header(header) once https://github.com/noir-lang/noir/issues/4095 is fixed\n    Note::set_header(note, header);\n    // As `is_transient` is true, this will compute the inner note hsah\n    let inner_note_hash = compute_note_hash_for_insertion(*note);\n\n    // TODO: Strong typing required because of https://github.com/noir-lang/noir/issues/4088\n    let serialized_note: [Field; N] = Note::serialize_content(*note);\n    assert(\n        notify_created_note(\n        storage_slot,\n        Note::get_note_type_id(),\n        serialized_note,\n        inner_note_hash\n    )\n        == 0\n    );\n\n    context.push_new_note_hash(inner_note_hash);\n\n    if broadcast {\n        Note::broadcast(*note, context, storage_slot);\n    }\n}\n\npub fn create_note_hash_from_public<Note, N>(\n    context: &mut PublicContext,\n    storage_slot: Field,\n    note: &mut Note\n) where Note: NoteInterface<N> {\n    let contract_address = (*context).this_address();\n\n    let header = NoteHeader { contract_address, storage_slot, nonce: 0, is_transient: true };\n    // TODO: change this to note.set_header(header) once https://github.com/noir-lang/noir/issues/4095 is fixed\n    Note::set_header(note, header);\n    let inner_note_hash = compute_note_hash_for_insertion(*note);\n\n    context.push_new_note_hash(inner_note_hash);\n}\n\npub fn destroy_note<Note, N>(context: &mut PrivateContext, note: Note) where Note: NoteInterface<N> {\n    let mut nullifier = 0;\n    let mut consumed_note_hash: Field = 0;\n    nullifier = note.compute_nullifier(context);\n\n    // We also need the note hash corresponding to the \"nullifier\"\n    let header = note.get_header();\n    // `consumed_note_hash` is used to inform the kernel which pending note hash\n    // the nullifier corresponds to so they can be matched and both squashed/deleted.\n    // nonzero nonce implies \"persistable\" nullifier (nullifies a persistent/in-tree\n    // note hash) in which case `consumed_note_hash` is not used since the kernel\n    // just siloes and forwards the nullifier to its output.\n    if (header.is_transient) {\n        // TODO(1718): Can we reuse the note hash computed in `compute_nullifier`?\n        consumed_note_hash = compute_note_hash_for_consumption(note);\n    }\n    assert(notify_nullified_note(nullifier, consumed_note_hash) == 0);\n\n    context.push_new_nullifier(nullifier, consumed_note_hash)\n}\n","path":"/Users/jack-sw/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.35.1/noir-projects/aztec-nr/aztec/src/note/lifecycle.nr"},"59":{"source":"use crate::{context::PrivateContext, note::{note_header::NoteHeader, note_interface::NoteInterface}};\n\nuse dep::protocol_types::{\n    address::AztecAddress,\n    constants::{GENERATOR_INDEX__OUTER_NULLIFIER, GENERATOR_INDEX__UNIQUE_NOTE_HASH, GENERATOR_INDEX__SILOED_NOTE_HASH},\n    hash::pedersen_hash, utils::arr_copy_slice\n};\n\nfn compute_siloed_hash(contract_address: AztecAddress, inner_note_hash: Field) -> Field {\n    let inputs = [contract_address.to_field(), inner_note_hash];\n    pedersen_hash(inputs, GENERATOR_INDEX__SILOED_NOTE_HASH)\n}\n\nfn compute_unique_hash(nonce: Field, siloed_note_hash: Field) -> Field {\n    let inputs = [nonce, siloed_note_hash];\n    pedersen_hash(inputs, GENERATOR_INDEX__UNIQUE_NOTE_HASH)\n}\n\nfn compute_inner_note_hash<Note, N>(note: Note) -> Field where Note: NoteInterface<N> {\n    let header = note.get_header();\n    let note_hash = note.compute_note_content_hash();\n\n    // TODO(#1205) Do we need a generator index here?\n    pedersen_hash([header.storage_slot, note_hash], 0)\n}\n\nfn compute_siloed_note_hash<Note, N>(note_with_header: Note) -> Field where Note: NoteInterface<N> {\n    let header = note_with_header.get_header();\n\n    let inner_note_hash = compute_inner_note_hash(note_with_header);\n\n    compute_siloed_hash(header.contract_address, inner_note_hash)\n}\n\nfn compute_unique_siloed_note_hash<Note, N>(note_with_header: Note) -> Field where Note: NoteInterface<N> {\n    let header = note_with_header.get_header();\n\n    let siloed_note_hash = compute_siloed_note_hash(note_with_header);\n\n    compute_unique_hash(header.nonce, siloed_note_hash)\n}\n\npub fn compute_siloed_nullifier<Note, N>(\n    note_with_header: Note,\n    context: &mut PrivateContext\n) -> Field where Note: NoteInterface<N> {\n    let header = note_with_header.get_header();\n    let inner_nullifier = note_with_header.compute_nullifier(context);\n\n    let input = [header.contract_address.to_field(), inner_nullifier];\n    pedersen_hash(input, GENERATOR_INDEX__OUTER_NULLIFIER)\n}\n\npub fn compute_note_hash_for_insertion<Note, N>(note: Note) -> Field where Note: NoteInterface<N> {\n    compute_inner_note_hash(note)\n}\n\npub fn compute_note_hash_for_consumption<Note, N>(note: Note) -> Field where Note: NoteInterface<N> {\n    let header = note.get_header();\n    // There are 3 cases for reading a note intended for consumption:\n    // 1. The note was inserted in this transaction, and is transient.\n    // 2. The note was inserted in a previous transaction, and was inserted in public\n    // 3. The note was inserted in a previous transaction, and was inserted in private\n\n    if (header.is_transient) {\n        // If a note is transient, we just read the inner_note_hash (kernel will silo by contract address).\n        compute_inner_note_hash(note)\n    } else if (header.nonce == 0) {\n        // If not transient and nonce is zero, that means we are reading a public note.\n        compute_siloed_note_hash(note)\n    } else {\n        // When nonce is nonzero, that means we are reading a settled note (from tree) created in a\n        // previous TX. So we need the unique_siloed_note_hash which has already been hashed with\n        // contract address and then nonce. This hash will match the existing leaf in the note hash\n        // tree, so the kernel can just perform a membership check directly on this hash/leaf.\n        compute_unique_siloed_note_hash(note)\n        // IMPORTANT NOTE ON REDUNDANT SILOING BY CONTRACT ADDRESS: The note hash computed above is\n        // \"siloed\" by contract address. When a note hash is computed solely for the purpose of\n        // nullification, it is not strictly necessary to silo the note hash before computing\n        // its nullifier. In other words, it is NOT NECESSARY for protocol security that a nullifier\n        // be computed from a siloed note hash. After all, persistable note hashes and nullifiers are\n        // siloed by the kernel circuit. That being said, the siloed note hash computed above CAN be\n        // used for nullifier computation, and this achieves the (arguably unnecessary) property that\n        // nullifiers are computed from a note hash's fully-computed note hash tree leaf.\n    }\n}\n\npub fn compute_note_hash_and_nullifier<T, N, S>(\n    // docs:start:compute_note_hash_and_nullifier_args\n    deserialize_content: fn([Field; N]) -> T,\n    note_header: NoteHeader,\n    serialized_note: [Field; S] // docs:end:compute_note_hash_and_nullifier_args\n) -> [Field; 4] where T: NoteInterface<N> {\n    let mut note = deserialize_content(arr_copy_slice(serialized_note, [0; N], 0));\n    // TODO: change this to note.set_header(header) once https://github.com/noir-lang/noir/issues/4095 is fixed\n    T::set_header((&mut note), note_header);\n\n    let inner_note_hash = compute_inner_note_hash(note);\n\n    let siloed_note_hash = compute_siloed_hash(note_header.contract_address, inner_note_hash);\n\n    let unique_siloed_note_hash = compute_unique_hash(note_header.nonce, siloed_note_hash);\n\n    let inner_nullifier = note.compute_nullifier_without_context();\n    // docs:start:compute_note_hash_and_nullifier_returns\n    [inner_note_hash, siloed_note_hash, unique_siloed_note_hash, inner_nullifier]\n    // docs:end:compute_note_hash_and_nullifier_returns\n}\n","path":"/Users/jack-sw/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.35.1/noir-projects/aztec-nr/aztec/src/note/utils.nr"},"60":{"source":"use dep::protocol_types::address::AztecAddress;\nuse dep::protocol_types::traits::{Empty, Serialize};\n\nstruct NoteHeader {\n    contract_address: AztecAddress,\n    nonce: Field,\n    storage_slot: Field,\n    // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1386)\n    // Remove this and check the nonce to see whether a note is transient or not.\n    is_transient: bool,\n}\n\nimpl Empty for NoteHeader {\n    fn empty() -> Self {\n        NoteHeader { contract_address: AztecAddress::zero(), nonce: 0, storage_slot: 0, is_transient: false }\n    }\n}\n\nimpl NoteHeader {\n    pub fn new(contract_address: AztecAddress, nonce: Field, storage_slot: Field) -> Self {\n        NoteHeader { contract_address, nonce, storage_slot, is_transient: false }\n    }\n}\n\nimpl Serialize<4> for NoteHeader {\n    fn serialize(self) -> [Field; 4] {\n        [self.contract_address.to_field(), self.nonce, self.storage_slot, self.is_transient as Field]\n    }\n}\n","path":"/Users/jack-sw/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.35.1/noir-projects/aztec-nr/aztec/src/note/note_header.nr"},"70":{"source":"use crate::{\n    context::{\n    inputs::PublicContextInputs, interface::ContextInterface, interface::PublicContextInterface,\n    gas::GasOpts\n},\n    messaging::process_l1_to_l2_message,\n    oracle::{arguments, public_call::call_public_function_internal, returns},\n    hash::{hash_args_array, ArgsHasher}\n};\nuse dep::protocol_types::{\n    abis::{\n    global_variables::GlobalVariables, function_selector::FunctionSelector,\n    private_circuit_public_inputs::PrivateCircuitPublicInputs,\n    public_call_stack_item::PublicCallStackItem,\n    public_circuit_public_inputs::PublicCircuitPublicInputs, read_request::ReadRequest,\n    side_effect::{SideEffect, SideEffectLinkedToNoteHash}\n},\n    hash::silo_nullifier, address::{AztecAddress, EthAddress},\n    constants::{\n    MAX_NEW_NOTE_HASHES_PER_CALL, MAX_NEW_L2_TO_L1_MSGS_PER_CALL, MAX_NEW_NULLIFIERS_PER_CALL,\n    MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL, MAX_PUBLIC_DATA_READS_PER_CALL,\n    MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL, MAX_NOTE_HASH_READ_REQUESTS_PER_CALL,\n    MAX_NULLIFIER_READ_REQUESTS_PER_CALL, MAX_NULLIFIER_NON_EXISTENT_READ_REQUESTS_PER_CALL\n},\n    contrakt::{storage_read::StorageRead, storage_update_request::StorageUpdateRequest}, header::Header,\n    messaging::l2_to_l1_message::L2ToL1Message, utils::reader::Reader, traits::{Deserialize, Empty}\n};\n\nstruct PublicContext {\n    inputs: PublicContextInputs,\n    side_effect_counter: u32,\n\n    args_hash : Field,\n    return_hash : Field,\n\n    nullifier_read_requests: BoundedVec<ReadRequest, MAX_NULLIFIER_READ_REQUESTS_PER_CALL>,\n    nullifier_non_existent_read_requests: BoundedVec<ReadRequest, MAX_NULLIFIER_NON_EXISTENT_READ_REQUESTS_PER_CALL>,\n    contract_storage_update_requests: BoundedVec<StorageUpdateRequest, MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL>,\n    contract_storage_reads: BoundedVec<StorageRead, MAX_PUBLIC_DATA_READS_PER_CALL>,\n    public_call_stack_hashes: BoundedVec<Field, MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL>,\n\n    new_note_hashes: BoundedVec<SideEffect, MAX_NEW_NOTE_HASHES_PER_CALL>,\n    new_nullifiers: BoundedVec<SideEffectLinkedToNoteHash, MAX_NEW_NULLIFIERS_PER_CALL>,\n\n    new_l2_to_l1_msgs: BoundedVec<L2ToL1Message, MAX_NEW_L2_TO_L1_MSGS_PER_CALL>,\n\n    unencrypted_logs_hash: Field,\n    unencrypted_logs_preimages_length: Field,\n\n    // Header of a block whose state is used during public execution. Set by sequencer to be a header of a block\n    // previous to the one in which the tx is included.\n    historical_header: Header,\n    prover_address: AztecAddress,\n}\n\nimpl PublicContext {\n    pub fn new(inputs: PublicContextInputs, args_hash: Field) -> PublicContext {\n        PublicContext {\n            inputs,\n            side_effect_counter: inputs.start_side_effect_counter,\n            args_hash,\n            return_hash: 0,\n            nullifier_read_requests: BoundedVec::new(),\n            nullifier_non_existent_read_requests: BoundedVec::new(),\n            contract_storage_update_requests: BoundedVec::new(),\n            contract_storage_reads: BoundedVec::new(),\n            public_call_stack_hashes: BoundedVec::new(),\n            new_note_hashes: BoundedVec::new(),\n            new_nullifiers: BoundedVec::new(),\n            new_l2_to_l1_msgs: BoundedVec::new(),\n            unencrypted_logs_hash: 0,\n            unencrypted_logs_preimages_length: 0,\n            historical_header: inputs.historical_header,\n            prover_address: AztecAddress::zero() // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n            // encrypted_logs_preimages: Vec::new(),\n            // unencrypted_logs_preimages: Vec::new(),\n        }\n    }\n\n    pub fn call_public_function_no_args<RETURNS_COUNT>(\n        self: &mut Self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector\n    ) -> FunctionReturns<RETURNS_COUNT> {\n        self.call_public_function_with_packed_args(contract_address, function_selector, 0, false, false)\n    }\n\n    pub fn static_call_public_function_no_args<RETURNS_COUNT>(\n        self: &mut Self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector\n    ) -> FunctionReturns<RETURNS_COUNT> {\n        self.call_public_function_with_packed_args(contract_address, function_selector, 0, true, false)\n    }\n\n    pub fn delegate_call_public_function_no_args<RETURNS_COUNT>(\n        self: &mut Self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector\n    ) -> FunctionReturns<RETURNS_COUNT> {\n        self.call_public_function_with_packed_args(contract_address, function_selector, 0, false, true)\n    }\n\n    pub fn call_public_function_with_packed_args<RETURNS_COUNT>(\n        self: &mut Self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args_hash: Field,\n        is_static_call: bool,\n        is_delegate_call: bool\n    ) -> FunctionReturns<RETURNS_COUNT> {\n        let side_effect_counter = self.side_effect_counter;\n        // TODO get next value from output of `call_public_function_internal`\n        self.side_effect_counter += 1;\n\n        let raw_returns = call_public_function_internal(\n            contract_address,\n            function_selector,\n            args_hash,\n            side_effect_counter,\n            is_static_call,\n            is_delegate_call\n        );\n\n        FunctionReturns::new(raw_returns)\n    }\n\n    pub fn set_return_hash(&mut self, returns_hasher: ArgsHasher) {\n        returns::pack_returns(returns_hasher.fields);\n        self.return_hash = returns_hasher.hash();\n    }\n\n    // Keep private or ask the AVM team if you want to change it.\n    fn push_nullifier_read_request(&mut self, nullifier: Field) {\n        let request = ReadRequest { value: nullifier, counter: self.side_effect_counter };\n        self.nullifier_read_requests.push(request);\n        self.side_effect_counter = self.side_effect_counter + 1;\n    }\n\n    // Keep private or ask the AVM team if you want to change it.\n    fn push_nullifier_non_existent_read_request(&mut self, nullifier: Field) {\n        let request = ReadRequest { value: nullifier, counter: self.side_effect_counter };\n        self.nullifier_non_existent_read_requests.push(request);\n        self.side_effect_counter = self.side_effect_counter + 1;\n    }\n\n    pub fn finish(self) -> PublicCircuitPublicInputs {\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n        let unencrypted_logs_hash = 0;\n        let unencrypted_log_preimages_length = 0;\n\n        // Compute the public call stack hashes\n        let pub_circuit_pub_inputs = PublicCircuitPublicInputs {\n            call_context: self.inputs.call_context, // Done\n            args_hash: self.args_hash, // Done\n            nullifier_read_requests: self.nullifier_read_requests.storage,\n            nullifier_non_existent_read_requests: self.nullifier_non_existent_read_requests.storage,\n            contract_storage_update_requests: self.contract_storage_update_requests.storage,\n            contract_storage_reads: self.contract_storage_reads.storage,\n            returns_hash: self.return_hash,\n            new_note_hashes: self.new_note_hashes.storage,\n            new_nullifiers: self.new_nullifiers.storage,\n            public_call_stack_hashes: self.public_call_stack_hashes.storage,\n            new_l2_to_l1_msgs: self.new_l2_to_l1_msgs.storage,\n            start_side_effect_counter: self.inputs.start_side_effect_counter,\n            end_side_effect_counter: self.side_effect_counter,\n            unencrypted_logs_hash,\n            unencrypted_log_preimages_length,\n            historical_header: self.inputs.historical_header,\n            prover_address: self.prover_address,\n            revert_code: 0,\n            gas_left: self.inputs.call_context.gas_left\n        };\n        pub_circuit_pub_inputs\n    }\n}\n\nimpl ContextInterface for PublicContext {\n    fn msg_sender(self) -> AztecAddress {\n        self.inputs.call_context.msg_sender\n    }\n\n    fn this_address(self) -> AztecAddress {\n        self.inputs.call_context.storage_contract_address\n    }\n\n    fn this_portal_address(self) -> EthAddress {\n        self.inputs.call_context.portal_contract_address\n    }\n\n    fn chain_id(self) -> Field {\n        self.inputs.public_global_variables.chain_id\n    }\n\n    fn version(self) -> Field {\n        self.inputs.public_global_variables.version\n    }\n\n    fn selector(self) -> FunctionSelector {\n        self.inputs.call_context.function_selector\n    }\n\n    fn get_args_hash(self) -> Field {\n        self.args_hash\n    }\n\n    fn push_new_note_hash(&mut self, note_hash: Field) {\n        let side_effect = SideEffect { value: note_hash, counter: self.side_effect_counter };\n        self.new_note_hashes.push(side_effect);\n        self.side_effect_counter = self.side_effect_counter + 1;\n    }\n\n    fn push_new_nullifier(&mut self, nullifier: Field, _nullified_commitment: Field) {\n        let side_effect = SideEffectLinkedToNoteHash {\n            value: nullifier,\n            note_hash: 0, // cannot nullify pending notes in public context\n            counter: self.side_effect_counter\n        };\n        self.new_nullifiers.push(side_effect);\n        self.side_effect_counter = self.side_effect_counter + 1;\n    }\n}\n\nimpl PublicContextInterface for PublicContext {\n    fn block_number(self) -> Field {\n        self.inputs.public_global_variables.block_number\n    }\n\n    fn timestamp(self) -> u64 {\n        self.inputs.public_global_variables.timestamp\n    }\n\n    fn coinbase(self) -> EthAddress {\n        self.inputs.public_global_variables.coinbase\n    }\n\n    fn fee_recipient(self) -> AztecAddress {\n        self.inputs.public_global_variables.fee_recipient\n    }\n\n    fn fee_per_da_gas(self) -> Field {\n        self.inputs.public_global_variables.gas_fees.fee_per_da_gas\n    }\n\n    fn fee_per_l1_gas(self) -> Field {\n        self.inputs.public_global_variables.gas_fees.fee_per_l1_gas\n    }\n\n    fn fee_per_l2_gas(self) -> Field {\n        self.inputs.public_global_variables.gas_fees.fee_per_l2_gas\n    }\n\n    fn nullifier_exists(self, unsiloed_nullifier: Field, address: AztecAddress) -> bool {\n        // Current public can only check for settled nullifiers, so we always silo.\n        let siloed_nullifier = silo_nullifier(address, unsiloed_nullifier);\n        nullifier_exists_oracle(siloed_nullifier) == 1\n    }\n\n    fn message_portal(&mut self, recipient: EthAddress, content: Field) {\n        let message = L2ToL1Message { recipient, content };\n        self.new_l2_to_l1_msgs.push(message);\n    }\n\n    // We can consume message with a secret in public context because the message cannot be modified and therefore\n    // there is no front-running risk (e.g. somebody could front run you to claim your tokens to your address).\n    fn consume_l1_to_l2_message(&mut self, content: Field, secret: Field, sender: EthAddress) {\n        let this = (*self).this_address();\n        let nullifier = process_l1_to_l2_message(\n            self.historical_header.state.l1_to_l2_message_tree.root,\n            this,\n            sender,\n            self.chain_id(),\n            self.version(),\n            content,\n            secret\n        );\n\n        // Push nullifier (and the \"commitment\" corresponding to this can be \"empty\")\n        self.push_new_nullifier(nullifier, 0)\n    }\n\n    fn accumulate_encrypted_logs<N>(&mut self, log: [Field; N]) {\n        let _void1 = self;\n        let _void2 = log;\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n    }\n\n    fn accumulate_unencrypted_logs<T>(&mut self, log: T) {\n        let _void1 = self;\n        let _void2 = log;\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n    }\n\n    fn call_public_function<ARGS_COUNT, RETURNS_COUNT>(\n        self: &mut Self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT],\n        _gas: GasOpts\n    ) -> FunctionReturns<RETURNS_COUNT> {\n        let args_hash = hash_args_array(args);\n        assert(args_hash == arguments::pack_arguments(args));\n        self.call_public_function_with_packed_args(contract_address, function_selector, args_hash, false, false)\n    }\n\n    fn static_call_public_function<ARGS_COUNT, RETURNS_COUNT>(\n        self: &mut Self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT],\n        _gas: GasOpts\n    ) -> FunctionReturns<RETURNS_COUNT> {\n        let args_hash = hash_args_array(args);\n        assert(args_hash == arguments::pack_arguments(args));\n        self.call_public_function_with_packed_args(contract_address, function_selector, args_hash, true, false)\n    }\n\n    fn delegate_call_public_function<ARGS_COUNT, RETURNS_COUNT>(\n        self: &mut Self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT]\n    ) -> FunctionReturns<RETURNS_COUNT> {\n        let args_hash = hash_args_array(args);\n        assert(args_hash == arguments::pack_arguments(args));\n        self.call_public_function_with_packed_args(contract_address, function_selector, args_hash, false, true)\n    }\n}\n\nimpl Empty for PublicContext {\n    fn empty() -> Self {\n        PublicContext {\n            inputs: PublicContextInputs::empty(),\n            side_effect_counter: 0 as u32,\n            args_hash : 0,\n            return_hash : 0,\n            nullifier_read_requests: BoundedVec::new(),\n            nullifier_non_existent_read_requests: BoundedVec::new(),\n            contract_storage_update_requests: BoundedVec::new(),\n            contract_storage_reads: BoundedVec::new(),\n            public_call_stack_hashes: BoundedVec::new(),\n            new_note_hashes: BoundedVec::new(),\n            new_nullifiers: BoundedVec::new(),\n            new_l2_to_l1_msgs: BoundedVec::new(),\n            unencrypted_logs_hash: 0,\n            unencrypted_logs_preimages_length: 0,\n            historical_header: Header::empty(),\n            prover_address: AztecAddress::zero(),\n        }\n    }\n}\n\n#[oracle(checkNullifierExists)]\nfn nullifier_exists_oracle(nullifier: Field) -> Field {}\n\nstruct FunctionReturns<N> {\n    values: [Field; N]\n}\n\nimpl<N> FunctionReturns<N> {\n    pub fn new(values: [Field; N]) -> FunctionReturns<N> {\n        FunctionReturns { values }\n    }\n\n    pub fn assert_empty(returns: FunctionReturns<0>) {\n        assert(returns.values.len() == 0);\n    }\n\n    pub fn raw(self) -> [Field; N] {\n        self.values\n    }\n\n    pub fn deserialize_into<T>(self) -> T where T: Deserialize<N> {\n        Deserialize::deserialize(self.raw())\n    }\n}\n","path":"/Users/jack-sw/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.35.1/noir-projects/aztec-nr/aztec/src/context/public_context.nr"},"72":{"source":"use crate::{\n    context::{inputs::PrivateContextInputs, interface::ContextInterface},\n    key::nullifier_key::validate_nullifier_key_against_address, messaging::process_l1_to_l2_message,\n    hash::{hash_args_array, ArgsHasher},\n    oracle::{\n    arguments, returns, call_private_function::call_private_function_internal,\n    enqueue_public_function_call::enqueue_public_function_call_internal, context::get_portal_address,\n    header::get_header_at, nullifier_key::{get_nullifier_key_pair, NullifierKeyPair}\n}\n};\nuse dep::protocol_types::{\n    abis::{\n    gas::Gas, call_context::CallContext, function_data::FunctionData,\n    function_selector::FunctionSelector, max_block_number::MaxBlockNumber,\n    nullifier_key_validation_request::NullifierKeyValidationRequest,\n    private_call_stack_item::PrivateCallStackItem,\n    private_circuit_public_inputs::PrivateCircuitPublicInputs,\n    public_call_stack_item::PublicCallStackItem,\n    public_circuit_public_inputs::PublicCircuitPublicInputs, read_request::ReadRequest,\n    side_effect::{SideEffect, SideEffectLinkedToNoteHash}\n},\n    address::{AztecAddress, EthAddress},\n    constants::{\n    MAX_NEW_NOTE_HASHES_PER_CALL, MAX_NEW_L2_TO_L1_MSGS_PER_CALL, MAX_NEW_NULLIFIERS_PER_CALL,\n    MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL, MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL,\n    MAX_PUBLIC_DATA_READS_PER_CALL, MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL,\n    MAX_NOTE_HASH_READ_REQUESTS_PER_CALL, MAX_NULLIFIER_READ_REQUESTS_PER_CALL,\n    MAX_NULLIFIER_NON_EXISTENT_READ_REQUESTS_PER_CALL, MAX_NULLIFIER_KEY_VALIDATION_REQUESTS_PER_CALL\n},\n    contrakt::{storage_read::StorageRead, storage_update_request::StorageUpdateRequest},\n    grumpkin_private_key::GrumpkinPrivateKey, header::Header,\n    messaging::l2_to_l1_message::L2ToL1Message, utils::reader::Reader,\n    traits::{is_empty, Deserialize, Empty}\n};\n\n// TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n// use dep::std::collections::vec::Vec;\n\n// When finished, one can call .finish() to convert back to the abi\nstruct PrivateContext {\n    // docs:start:private-context\n    inputs: PrivateContextInputs,\n    side_effect_counter: u32,\n\n    min_revertible_side_effect_counter: u32,\n\n    args_hash : Field,\n    return_hash : Field,\n\n    max_block_number: MaxBlockNumber,\n\n    note_hash_read_requests: BoundedVec<SideEffect, MAX_NOTE_HASH_READ_REQUESTS_PER_CALL>,\n    nullifier_read_requests: BoundedVec<ReadRequest, MAX_NULLIFIER_READ_REQUESTS_PER_CALL>,\n    nullifier_key_validation_requests: BoundedVec<NullifierKeyValidationRequest, MAX_NULLIFIER_KEY_VALIDATION_REQUESTS_PER_CALL>,\n\n    new_note_hashes: BoundedVec<SideEffect, MAX_NEW_NOTE_HASHES_PER_CALL>,\n    new_nullifiers: BoundedVec<SideEffectLinkedToNoteHash, MAX_NEW_NULLIFIERS_PER_CALL>,\n\n    private_call_stack_hashes : BoundedVec<Field, MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL>,\n    public_call_stack_hashes : BoundedVec<Field, MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL>,\n    new_l2_to_l1_msgs : BoundedVec<L2ToL1Message, MAX_NEW_L2_TO_L1_MSGS_PER_CALL>,\n    // docs:end:private-context\n\n    // Header of a block whose state is used during private execution (not the block the transaction is included in).\n    historical_header: Header,\n\n    // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n    // encrypted_logs_preimages: Vec<Field>,\n    // unencrypted_logs_preimages: Vec<Field>,\n\n    nullifier_key: Option<NullifierKeyPair>,\n}\n\nimpl ContextInterface for PrivateContext {\n    fn msg_sender(self) -> AztecAddress {\n        self.inputs.call_context.msg_sender\n    }\n\n    fn this_address(self) -> AztecAddress {\n        self.inputs.call_context.storage_contract_address\n    }\n\n    fn this_portal_address(self) -> EthAddress {\n        self.inputs.call_context.portal_contract_address\n    }\n\n    fn chain_id(self) -> Field {\n        self.inputs.private_global_variables.chain_id\n    }\n\n    fn version(self) -> Field {\n        self.inputs.private_global_variables.version\n    }\n\n    fn selector(self) -> FunctionSelector {\n        self.inputs.call_context.function_selector\n    }\n\n    fn get_args_hash(self) -> Field {\n        self.args_hash\n    }\n\n    fn push_new_note_hash(&mut self, note_hash: Field) {\n        let side_effect = SideEffect { value: note_hash, counter: self.side_effect_counter };\n        self.new_note_hashes.push(side_effect);\n        self.side_effect_counter = self.side_effect_counter + 1;\n    }\n\n    fn push_new_nullifier(&mut self, nullifier: Field, nullified_commitment: Field) {\n        let side_effect = SideEffectLinkedToNoteHash { value: nullifier, note_hash: nullified_commitment, counter: self.side_effect_counter };\n        self.new_nullifiers.push(side_effect);\n        self.side_effect_counter = self.side_effect_counter + 1;\n    }\n}\n\nimpl PrivateContext {\n    pub fn new(inputs: PrivateContextInputs, args_hash: Field) -> PrivateContext {\n        let side_effect_counter = inputs.start_side_effect_counter;\n        let mut min_revertible_side_effect_counter = 0;\n        if is_empty(inputs.call_context.msg_sender) {\n            min_revertible_side_effect_counter = side_effect_counter;\n        }\n        PrivateContext {\n            inputs,\n            side_effect_counter,\n            min_revertible_side_effect_counter,\n            args_hash,\n            return_hash: 0,\n            max_block_number: MaxBlockNumber::empty(),\n            note_hash_read_requests: BoundedVec::new(),\n            nullifier_read_requests: BoundedVec::new(),\n            nullifier_key_validation_requests: BoundedVec::new(),\n            new_note_hashes: BoundedVec::new(),\n            new_nullifiers: BoundedVec::new(),\n            historical_header: inputs.historical_header,\n            private_call_stack_hashes: BoundedVec::new(),\n            public_call_stack_hashes: BoundedVec::new(),\n            new_l2_to_l1_msgs: BoundedVec::new(),\n            // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n            // encrypted_logs_preimages: Vec::new(),\n            // unencrypted_logs_preimages: Vec::new(),\n            nullifier_key: Option::none()\n        }\n    }\n\n    // Returns the header of a block whose state is used during private execution (not the block the transaction is\n    // included in).\n    fn get_header(self) -> Header {\n        self.historical_header\n    }\n\n    // Returns the header of an arbitrary block whose block number is less than or equal to the block number\n    // of historical header.\n    pub fn get_header_at(self, block_number: u32) -> Header {\n        get_header_at(block_number, self)\n    }\n\n    pub fn set_return_hash(&mut self, returns_hasher: ArgsHasher) {\n        returns::pack_returns(returns_hasher.fields);\n        self.return_hash = returns_hasher.hash();\n    }\n\n    pub fn finish(self) -> PrivateCircuitPublicInputs {\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n        let encrypted_logs_hash = 0;\n        let unencrypted_logs_hash = 0;\n        let encrypted_log_preimages_length = 0;\n        let unencrypted_log_preimages_length = 0;\n\n        let priv_circuit_pub_inputs = PrivateCircuitPublicInputs {\n            call_context: self.inputs.call_context,\n            args_hash: self.args_hash,\n            returns_hash: self.return_hash,\n            min_revertible_side_effect_counter: self.min_revertible_side_effect_counter,\n            max_block_number: self.max_block_number,\n            note_hash_read_requests: self.note_hash_read_requests.storage,\n            nullifier_read_requests: self.nullifier_read_requests.storage,\n            nullifier_key_validation_requests: self.nullifier_key_validation_requests.storage,\n            new_note_hashes: self.new_note_hashes.storage,\n            new_nullifiers: self.new_nullifiers.storage,\n            private_call_stack_hashes: self.private_call_stack_hashes.storage,\n            public_call_stack_hashes: self.public_call_stack_hashes.storage,\n            new_l2_to_l1_msgs: self.new_l2_to_l1_msgs.storage,\n            start_side_effect_counter: self.inputs.start_side_effect_counter,\n            end_side_effect_counter: self.side_effect_counter,\n            encrypted_logs_hash,\n            unencrypted_logs_hash,\n            encrypted_log_preimages_length,\n            unencrypted_log_preimages_length,\n            historical_header: self.historical_header,\n            chain_id: self.inputs.private_global_variables.chain_id,\n            version: self.inputs.private_global_variables.version\n        };\n\n        priv_circuit_pub_inputs\n    }\n\n    pub fn capture_min_revertible_side_effect_counter(&mut self) {\n        self.min_revertible_side_effect_counter = self.side_effect_counter;\n    }\n\n    // docs:start:max-block-number\n    pub fn set_tx_max_block_number(&mut self, max_block_number: u32) {\n        // docs:end:max-block-number\n        self.max_block_number = MaxBlockNumber::min_with_u32(self.max_block_number, max_block_number);\n    }\n\n    pub fn push_note_hash_read_request(&mut self, note_hash: Field) {\n        let side_effect = SideEffect { value: note_hash, counter: self.side_effect_counter };\n        self.note_hash_read_requests.push(side_effect);\n        self.side_effect_counter = self.side_effect_counter + 1;\n    }\n\n    pub fn push_nullifier_read_request(&mut self, nullifier: Field) {\n        let request = ReadRequest { value: nullifier, counter: self.side_effect_counter };\n        self.nullifier_read_requests.push(request);\n        self.side_effect_counter = self.side_effect_counter + 1;\n    }\n\n    pub fn request_nullifier_secret_key(&mut self, account: AztecAddress) -> GrumpkinPrivateKey {\n        let key_pair = if self.nullifier_key.is_none() {\n            let key_pair = get_nullifier_key_pair(account);\n            validate_nullifier_key_against_address(account, key_pair.public_key);\n            let request = NullifierKeyValidationRequest { public_key: key_pair.public_key, secret_key: key_pair.secret_key };\n            self.nullifier_key_validation_requests.push(request);\n            self.nullifier_key = Option::some(key_pair);\n            key_pair\n        } else {\n            let key_pair = self.nullifier_key.unwrap_unchecked();\n            // If MAX_NULLIFIER_KEY_VALIDATION_REQUESTS_PER_CALL is larger than 1, need to update the way the key pair is cached.\n            assert(MAX_NULLIFIER_KEY_VALIDATION_REQUESTS_PER_CALL == 1);\n            assert(\n                key_pair.account == account, \"Cannot query nullifier key for more than one account per call\"\n            );\n            key_pair\n        };\n        key_pair.secret_key\n    }\n\n    // docs:start:context_message_portal\n    pub fn message_portal(&mut self, recipient: EthAddress, content: Field) {\n        // docs:end:context_message_portal\n        let message = L2ToL1Message { recipient, content };\n        self.new_l2_to_l1_msgs.push(message);\n    }\n\n    // docs:start:context_consume_l1_to_l2_message\n    // docs:start:consume_l1_to_l2_message\n    pub fn consume_l1_to_l2_message(&mut self, content: Field, secret: Field, sender: EthAddress) {\n        // docs:end:context_consume_l1_to_l2_message\n        let nullifier = process_l1_to_l2_message(\n            self.historical_header.state.l1_to_l2_message_tree.root,\n            self.this_address(),\n            sender,\n            self.chain_id(),\n            self.version(),\n            content,\n            secret\n        );\n\n        // Push nullifier (and the \"commitment\" corresponding to this can be \"empty\")\n        self.push_new_nullifier(nullifier, 0)\n    }\n    // docs:end:consume_l1_to_l2_message\n\n    pub fn accumulate_encrypted_logs<N>(&mut self, log: [Field; N]) {\n        let _void1 = self.inputs;\n        let _void2 = log;\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n    }\n\n    pub fn accumulate_unencrypted_logs<T>(&mut self, log: T) {\n        let _void1 = self.inputs;\n        let _void2 = log;\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n    }\n\n    pub fn call_private_function<ARGS_COUNT>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT]\n    ) -> PackedReturns {\n        let args_hash = hash_args_array(args);\n        assert(args_hash == arguments::pack_arguments(args));\n        self.call_private_function_with_packed_args(contract_address, function_selector, args_hash, false, false)\n    }\n\n    pub fn static_call_private_function<ARGS_COUNT>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT]\n    ) -> PackedReturns {\n        let args_hash = hash_args_array(args);\n        assert(args_hash == arguments::pack_arguments(args));\n        self.call_private_function_with_packed_args(contract_address, function_selector, args_hash, true, false)\n    }\n\n    pub fn delegate_call_private_function<ARGS_COUNT>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT]\n    ) -> PackedReturns {\n        let args_hash = hash_args_array(args);\n        assert(args_hash == arguments::pack_arguments(args));\n        self.call_private_function_with_packed_args(contract_address, function_selector, args_hash, false, true)\n    }\n\n    pub fn call_private_function_no_args<RETURNS_COUNT>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector\n    ) -> PackedReturns {\n        self.call_private_function_with_packed_args(contract_address, function_selector, 0, false, false)\n    }\n\n    pub fn static_call_private_function_no_args<RETURNS_COUNT>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector\n    ) -> PackedReturns {\n        self.call_private_function_with_packed_args(contract_address, function_selector, 0, true, false)\n    }\n\n    pub fn delegate_call_private_function_no_args<ARGS_COUNT>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector\n    ) -> PackedReturns {\n        self.call_private_function_with_packed_args(contract_address, function_selector, 0, false, true)\n    }\n\n    pub fn call_private_function_with_packed_args<RETURNS_COUNT>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args_hash: Field,\n        is_static_call: bool,\n        is_delegate_call: bool\n    ) -> PackedReturns {\n        let mut is_static_call = is_static_call | self.inputs.call_context.is_static_call;\n        let item = call_private_function_internal(\n            contract_address,\n            function_selector,\n            args_hash,\n            self.side_effect_counter,\n            is_static_call,\n            is_delegate_call\n        );\n\n        assert_eq(item.public_inputs.call_context.side_effect_counter, self.side_effect_counter);\n        assert_eq(item.public_inputs.start_side_effect_counter, self.side_effect_counter);\n        self.side_effect_counter = item.public_inputs.end_side_effect_counter + 1;\n\n        // TODO (fees) figure out why this crashes the prover and enable it\n        // we need this in order to pay fees inside child call contexts\n        // assert(\n        //     (item.public_inputs.min_revertible_side_effect_counter == 0 as u32)\n        //     | (item.public_inputs.min_revertible_side_effect_counter\n        //         > self.min_revertible_side_effect_counter)\n        // );\n\n        // if item.public_inputs.min_revertible_side_effect_counter\n        //     > self.min_revertible_side_effect_counter {\n        //     self.min_revertible_side_effect_counter = item.public_inputs.min_revertible_side_effect_counter;\n        // }\n\n        assert(contract_address.eq(item.contract_address));\n        assert(function_selector.eq(item.function_data.selector));\n\n        assert(args_hash == item.public_inputs.args_hash);\n\n        // Assert that the call context of the enqueued call generated by the oracle matches our request.\n        assert(item.public_inputs.call_context.is_delegate_call == is_delegate_call);\n        assert(item.public_inputs.call_context.is_static_call == is_static_call);\n\n        if (is_delegate_call) {\n            // For delegate calls, we also constrain the execution context address for the nested call to be equal to our address.\n            assert(\n                item.public_inputs.call_context.storage_contract_address.eq(self.inputs.call_context.storage_contract_address)\n            );\n            assert(item.public_inputs.call_context.msg_sender.eq(self.inputs.call_context.msg_sender));\n        } else {\n            // For non-delegate calls, we also constrain the execution context address for the nested call to be equal to the address we called.\n            assert(item.public_inputs.call_context.storage_contract_address.eq(contract_address));\n            assert(\n                item.public_inputs.call_context.msg_sender.eq(self.inputs.call_context.storage_contract_address)\n            );\n        }\n\n        self.private_call_stack_hashes.push(item.hash());\n\n        PackedReturns::new(item.public_inputs.returns_hash)\n    }\n\n    pub fn call_public_function<ARGS_COUNT>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT]\n    ) {\n        let args_hash = hash_args_array(args);\n        assert(args_hash == arguments::pack_arguments(args));\n        self.call_public_function_with_packed_args(contract_address, function_selector, args_hash, false, false)\n    }\n\n    pub fn static_call_public_function<ARGS_COUNT>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT]\n    ) {\n        let args_hash = hash_args_array(args);\n        assert(args_hash == arguments::pack_arguments(args));\n        self.call_public_function_with_packed_args(contract_address, function_selector, args_hash, true, false)\n    }\n\n    pub fn delegate_call_public_function<ARGS_COUNT>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT]\n    ) {\n        let args_hash = hash_args_array(args);\n        assert(args_hash == arguments::pack_arguments(args));\n        self.call_public_function_with_packed_args(contract_address, function_selector, args_hash, false, true)\n    }\n\n    pub fn call_public_function_no_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector\n    ) {\n        self.call_public_function_with_packed_args(contract_address, function_selector, 0, false, false)\n    }\n\n    pub fn static_call_public_function_no_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector\n    ) {\n        self.call_public_function_with_packed_args(contract_address, function_selector, 0, true, false)\n    }\n\n    pub fn delegate_call_public_function_no_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector\n    ) {\n        self.call_public_function_with_packed_args(contract_address, function_selector, 0, false, true)\n    }\n\n    pub fn call_public_function_with_packed_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args_hash: Field,\n        is_static_call: bool,\n        is_delegate_call: bool\n    ) {\n        let mut is_static_call = is_static_call | self.inputs.call_context.is_static_call;\n        let fields = enqueue_public_function_call_internal(\n            contract_address,\n            function_selector,\n            args_hash,\n            self.side_effect_counter,\n            is_static_call,\n            is_delegate_call\n        );\n\n        let mut reader = Reader::new(fields);\n\n        // Note: Not using PublicCirclePublicInputs::deserialize here, because everything below args_hash is 0 and\n        // there is no more data in fields because there is only ENQUEUE_PUBLIC_FUNCTION_CALL_RETURN_SIZE fields!\n        let item = PublicCallStackItem {\n            contract_address: AztecAddress::from_field(reader.read()),\n            function_data: reader.read_struct(FunctionData::deserialize),\n            public_inputs: PublicCircuitPublicInputs {\n                call_context: reader.read_struct(CallContext::deserialize),\n                args_hash: reader.read(),\n                returns_hash: 0,\n                nullifier_read_requests: [ReadRequest::empty(); MAX_NULLIFIER_READ_REQUESTS_PER_CALL],\n                nullifier_non_existent_read_requests: [ReadRequest::empty(); MAX_NULLIFIER_NON_EXISTENT_READ_REQUESTS_PER_CALL],\n                contract_storage_update_requests: [StorageUpdateRequest::empty(); MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL],\n                contract_storage_reads: [StorageRead::empty(); MAX_PUBLIC_DATA_READS_PER_CALL],\n                public_call_stack_hashes: [0; MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL],\n                new_note_hashes: [SideEffect::empty(); MAX_NEW_NOTE_HASHES_PER_CALL],\n                new_nullifiers: [SideEffectLinkedToNoteHash::empty(); MAX_NEW_NULLIFIERS_PER_CALL],\n                new_l2_to_l1_msgs: [L2ToL1Message::empty(); MAX_NEW_L2_TO_L1_MSGS_PER_CALL],\n                start_side_effect_counter: 0,\n                end_side_effect_counter: 0,\n                unencrypted_logs_hash: 0,\n                unencrypted_log_preimages_length: 0,\n                historical_header: Header::empty(),\n                prover_address: AztecAddress::zero(),\n                revert_code: 0,\n                gas_left: Gas::empty()\n            },\n            is_execution_request: true\n        };\n        reader.finish();\n\n        assert(contract_address.eq(item.contract_address));\n        assert(function_selector.eq(item.function_data.selector));\n\n        assert_eq(item.public_inputs.call_context.side_effect_counter, self.side_effect_counter);\n        // We increment the sideffect counter by one, to account for the call itself being a side effect.\n        self.side_effect_counter = self.side_effect_counter + 1;\n\n        assert(args_hash == item.public_inputs.args_hash);\n\n        // Assert that the call context of the enqueued call generated by the oracle matches our request.\n        assert(item.public_inputs.call_context.is_delegate_call == is_delegate_call);\n        assert(item.public_inputs.call_context.is_static_call == is_static_call);\n\n        if (is_delegate_call) {\n            // For delegate calls, we also constrain the execution context address for the nested call to be equal to our address.\n            assert(\n                item.public_inputs.call_context.storage_contract_address.eq(self.inputs.call_context.storage_contract_address)\n            );\n            assert(item.public_inputs.call_context.msg_sender.eq(self.inputs.call_context.msg_sender));\n        } else {\n            // For non-delegate calls, we also constrain the execution context address for the nested call to be equal to the address we called.\n            assert(item.public_inputs.call_context.storage_contract_address.eq(contract_address));\n            assert(\n                item.public_inputs.call_context.msg_sender.eq(self.inputs.call_context.storage_contract_address)\n            );\n        }\n\n        self.public_call_stack_hashes.push(item.hash());\n    }\n}\n\nimpl Empty for PrivateContext {\n    fn empty() -> Self {\n        PrivateContext {\n            inputs: PrivateContextInputs::empty(),\n            side_effect_counter: 0 as u32,\n            min_revertible_side_effect_counter: 0 as u32,\n            args_hash : 0,\n            return_hash : 0,\n            max_block_number: MaxBlockNumber::empty(),\n            note_hash_read_requests: BoundedVec::new(),\n            nullifier_read_requests: BoundedVec::new(),\n            nullifier_key_validation_requests: BoundedVec::new(),\n            new_note_hashes: BoundedVec::new(),\n            new_nullifiers: BoundedVec::new(),\n            private_call_stack_hashes : BoundedVec::new(),\n            public_call_stack_hashes : BoundedVec::new(),\n            new_l2_to_l1_msgs : BoundedVec::new(),\n            historical_header: Header::empty(),\n            nullifier_key: Option::none(),\n        }\n    }\n}\n\nstruct PackedReturns {\n  packed_returns: Field,\n}\n\nimpl PackedReturns {\n    pub fn new(packed_returns: Field) -> Self {\n        PackedReturns { packed_returns }\n    }\n\n    pub fn assert_empty(self) {\n        assert_eq(self.packed_returns, 0);\n    }\n\n    pub fn raw(self) -> Field {\n        self.packed_returns\n    }\n\n    pub fn unpack<N>(self) -> [Field; N] {\n        let unpacked: [Field; N] = returns::unpack_returns(self.packed_returns);\n        assert_eq(self.packed_returns, hash_args_array(unpacked));\n        unpacked\n    }\n\n    pub fn unpack_into<T, N>(self) -> T where T: Deserialize<N> {\n        let unpacked: [Field; N] = self.unpack();\n        Deserialize::deserialize(unpacked)\n    }\n}\n","path":"/Users/jack-sw/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.35.1/noir-projects/aztec-nr/aztec/src/context/private_context.nr"},"77":{"source":"use dep::protocol_types::{abis::function_selector::FunctionSelector, address::AztecAddress};\n\n#[oracle(callPublicFunction)]\nfn call_public_function_oracle<RETURNS_COUNT>(\n    _contract_address: AztecAddress,\n    _function_selector: FunctionSelector,\n    _args_hash: Field,\n    _side_effect_counter: u32,\n    _is_static_call: bool,\n    _is_delegate_call: bool\n) -> [Field; RETURNS_COUNT] {}\n\nunconstrained pub fn call_public_function_internal<RETURNS_COUNT>(\n    contract_address: AztecAddress,\n    function_selector: FunctionSelector,\n    args_hash: Field,\n    side_effect_counter: u32,\n    is_static_call: bool,\n    is_delegate_call: bool\n) -> [Field; RETURNS_COUNT] {\n    call_public_function_oracle(\n        contract_address,\n        function_selector,\n        args_hash,\n        side_effect_counter,\n        is_static_call,\n        is_delegate_call\n    )\n}\n","path":"/Users/jack-sw/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.35.1/noir-projects/aztec-nr/aztec/src/oracle/public_call.nr"},"79":{"source":"use dep::protocol_types::{\n    abis::{function_selector::FunctionSelector, private_call_stack_item::PrivateCallStackItem},\n    address::AztecAddress, constants::PRIVATE_CALL_STACK_ITEM_LENGTH\n};\n\n#[oracle(callPrivateFunction)]\nfn call_private_function_oracle(\n    _contract_address: AztecAddress,\n    _function_selector: FunctionSelector,\n    _args_hash: Field,\n    _start_side_effect_counter: u32,\n    _is_static_call: bool,\n    _is_delegate_call: bool\n) -> [Field; PRIVATE_CALL_STACK_ITEM_LENGTH] {}\n\nunconstrained pub fn call_private_function_internal(\n    contract_address: AztecAddress,\n    function_selector: FunctionSelector,\n    args_hash: Field,\n    start_side_effect_counter: u32,\n    is_static_call: bool,\n    is_delegate_call: bool\n) -> PrivateCallStackItem {\n    let fields = call_private_function_oracle(\n        contract_address,\n        function_selector,\n        args_hash,\n        start_side_effect_counter,\n        is_static_call,\n        is_delegate_call\n    );\n\n    PrivateCallStackItem::deserialize(fields)\n}\n","path":"/Users/jack-sw/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.35.1/noir-projects/aztec-nr/aztec/src/oracle/call_private_function.nr"},"80":{"source":"use crate::note::{note_header::NoteHeader, note_interface::NoteInterface};\n\nuse dep::protocol_types::{address::AztecAddress, utils::arr_copy_slice};\n\n#[oracle(notifyCreatedNote)]\nfn notify_created_note_oracle<N>(\n    _storage_slot: Field,\n    _note_type_id: Field,\n    _serialized_note: [Field; N],\n    _inner_note_hash: Field\n) -> Field {}\n\nunconstrained pub fn notify_created_note<N>(\n    storage_slot: Field,\n    note_type_id: Field,\n    serialized_note: [Field; N],\n    inner_note_hash: Field\n) -> Field {\n    notify_created_note_oracle(storage_slot, note_type_id, serialized_note, inner_note_hash)\n}\n\n#[oracle(notifyNullifiedNote)]\nfn notify_nullified_note_oracle<N>(_nullifier: Field, _inner_note_hash: Field) -> Field {}\n\nunconstrained pub fn notify_nullified_note<N>(nullifier: Field, inner_note_hash: Field) -> Field {\n    notify_nullified_note_oracle(nullifier, inner_note_hash)\n}\n\n#[oracle(getNotes)]\nfn get_notes_oracle<N, S>(\n    _storage_slot: Field,\n    _num_selects: u8,\n    _select_by_indexes: [u8; N],\n    _select_by_offsets: [u8; N],\n    _select_by_lengths: [u8; N],\n    _select_values: [Field; N],\n    _select_comparators: [u8; N],\n    _sort_by_indexes: [u8; N],\n    _sort_by_offsets: [u8; N],\n    _sort_by_lengths: [u8; N],\n    _sort_order: [u8; N],\n    _limit: u32,\n    _offset: u32,\n    _status: u8,\n    _return_size: u32,\n    _placeholder_fields: [Field; S]\n) -> [Field; S] {}\n\nunconstrained fn get_notes_oracle_wrapper<N, S>(\n    storage_slot: Field,\n    num_selects: u8,\n    select_by_indexes: [u8; N],\n    select_by_offsets: [u8; N],\n    select_by_lengths: [u8; N],\n    select_values: [Field; N],\n    select_comparators: [u8; N],\n    sort_by_indexes: [u8; N],\n    sort_by_offsets: [u8; N],\n    sort_by_lengths: [u8; N],\n    sort_order: [u8; N],\n    limit: u32,\n    offset: u32,\n    status: u8,\n    mut placeholder_fields: [Field; S]\n) -> [Field; S] {\n    let return_size = placeholder_fields.len() as u32;\n    get_notes_oracle(\n        storage_slot,\n        num_selects,\n        select_by_indexes,\n        select_by_offsets,\n        select_by_lengths,\n        select_values,\n        select_comparators,\n        sort_by_indexes,\n        sort_by_offsets,\n        sort_by_lengths,\n        sort_order,\n        limit,\n        offset,\n        status,\n        return_size,\n        placeholder_fields\n    )\n}\n\nunconstrained pub fn get_notes<Note, N, M, S, NS>(\n    storage_slot: Field,\n    num_selects: u8,\n    select_by_indexes: [u8; M],\n    select_by_offsets: [u8; M],\n    select_by_lengths: [u8; M],\n    select_values: [Field; M],\n    select_comparators: [u8; M],\n    sort_by_indexes: [u8; M],\n    sort_by_offsets: [u8; M],\n    sort_by_lengths: [u8; M],\n    sort_order: [u8; M],\n    limit: u32,\n    offset: u32,\n    status: u8,\n    mut placeholder_opt_notes: [Option<Note>; S], // TODO: Remove it and use `limit` to initialize the note array.\n    placeholder_fields: [Field; NS], // TODO: Remove it and use `limit` to initialize the note array.\n    _placeholder_note_length: [Field; N] // Turbofish hack? Compiler breaks calculating read_offset unless we add this parameter\n) -> [Option<Note>; S] where Note: NoteInterface<N> {\n    let fields = get_notes_oracle_wrapper(\n        storage_slot,\n        num_selects,\n        select_by_indexes,\n        select_by_offsets,\n        select_by_lengths,\n        select_values,\n        select_comparators,\n        sort_by_indexes,\n        sort_by_offsets,\n        sort_by_lengths,\n        sort_order,\n        limit,\n        offset,\n        status,\n        placeholder_fields\n    );\n    let num_notes = fields[0] as u64;\n    let contract_address = AztecAddress::from_field(fields[1]);\n    for i in 0..placeholder_opt_notes.len() {\n        if i < num_notes {\n            // lengths named as per typescript.\n            let return_header_length: u64 = 2; // num_notes & contract_address.\n            let extra_preimage_length: u64 = 2; // nonce & is_transient.\n            let read_offset: u64 = return_header_length + i * (N + extra_preimage_length);\n            let nonce = fields[read_offset];\n            let is_transient = fields[read_offset + 1] as bool;\n            let header = NoteHeader { contract_address, nonce, storage_slot, is_transient };\n            let serialized_note = arr_copy_slice(fields, [0; N], read_offset + 2);\n            let mut note = Note::deserialize_content(serialized_note);\n            // TODO: change this to note.set_header(header) once https://github.com/noir-lang/noir/issues/4095 is fixed\n            Note::set_header(&mut note, header);\n            placeholder_opt_notes[i] = Option::some(note);\n        };\n    }\n    placeholder_opt_notes\n}\n\n// Only ever use this in private!\n#[oracle(checkNullifierExists)]\nfn check_nullifier_exists_oracle(_inner_nullifier: Field) -> Field {}\n\n// Only ever use this in private!\nunconstrained pub fn check_nullifier_exists(inner_nullifier: Field) -> bool {\n    check_nullifier_exists_oracle(inner_nullifier) == 1\n}\n","path":"/Users/jack-sw/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.35.1/noir-projects/aztec-nr/aztec/src/oracle/notes.nr"},"81":{"source":"#[oracle(packReturns)]\nfn pack_returns_oracle<N>(_returns: [Field]) -> Field {}\n\nunconstrained pub fn pack_returns(returns: [Field]) {\n    let _unused = pack_returns_oracle(returns);\n}\n\n#[oracle(unpackReturns)]\nfn unpack_returns_oracle<N>(_return_hash: Field) -> [Field; N] {}\n\nunconstrained pub fn unpack_returns<N>(return_hash: Field) -> [Field; N] {\n    unpack_returns_oracle(return_hash)\n}\n","path":"/Users/jack-sw/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.35.1/noir-projects/aztec-nr/aztec/src/oracle/returns.nr"},"82":{"source":"use dep::protocol_types::{\n    abis::function_selector::FunctionSelector, address::AztecAddress,\n    constants::ENQUEUE_PUBLIC_FUNCTION_CALL_RETURN_LENGTH\n};\n\n#[oracle(enqueuePublicFunctionCall)]\nfn enqueue_public_function_call_oracle(\n    _contract_address: AztecAddress,\n    _function_selector: FunctionSelector,\n    _args_hash: Field,\n    _side_effect_counter: u32,\n    _is_static_call: bool,\n    _is_delegate_call: bool\n) -> [Field; ENQUEUE_PUBLIC_FUNCTION_CALL_RETURN_LENGTH] {}\n\nunconstrained pub fn enqueue_public_function_call_internal(\n    contract_address: AztecAddress,\n    function_selector: FunctionSelector,\n    args_hash: Field,\n    side_effect_counter: u32,\n    is_static_call: bool,\n    is_delegate_call: bool\n) -> [Field; ENQUEUE_PUBLIC_FUNCTION_CALL_RETURN_LENGTH] {\n    enqueue_public_function_call_oracle(\n        contract_address,\n        function_selector,\n        args_hash,\n        side_effect_counter,\n        is_static_call,\n        is_delegate_call\n    )\n}\n","path":"/Users/jack-sw/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.35.1/noir-projects/aztec-nr/aztec/src/oracle/enqueue_public_function_call.nr"},"83":{"source":"#[oracle(packArguments)]\nfn pack_arguments_oracle<N>(_args: [Field; N]) -> Field {}\n\n/// - Pack arguments will notify the simulator that these arguments will be used later at\n///   some point in the call. \n/// - When the external call is made later, the simulator will know what the values unpack to.\n/// - This oracle will not be required in public vm functions, as the vm will keep track of arguments \n///   itself.\nunconstrained pub fn pack_arguments<N>(args: [Field; N]) -> Field {\n    pack_arguments_oracle(args)\n}\n","path":"/Users/jack-sw/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.35.1/noir-projects/aztec-nr/aztec/src/oracle/arguments.nr"},"84":{"source":"use dep::protocol_types::{address::{AztecAddress, PartialAddress, PublicKeysHash}, grumpkin_point::GrumpkinPoint};\n\n#[oracle(getPublicKeyAndPartialAddress)]\nfn get_public_key_and_partial_address_oracle(_address: AztecAddress) -> [Field; 3] {}\n\nunconstrained fn get_public_key_and_partial_address_internal(address: AztecAddress) -> [Field; 3] {\n    get_public_key_and_partial_address_oracle(address)\n}\n\npub fn get_public_key(address: AztecAddress) -> GrumpkinPoint {\n    let result = get_public_key_and_partial_address_internal(address);\n    let pub_key = GrumpkinPoint::new(result[0], result[1]);\n    let partial_address = PartialAddress::from_field(result[2]);\n\n    let calculated_address = AztecAddress::compute(PublicKeysHash::compute(pub_key), partial_address);\n    assert(calculated_address.eq(address));\n\n    pub_key\n}\n","path":"/Users/jack-sw/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.35.1/noir-projects/aztec-nr/aztec/src/oracle/get_public_key.nr"},"85":{"source":"use dep::protocol_types::traits::{Deserialize, Serialize};\n\n#[oracle(storageRead)]\nfn storage_read_oracle<N>(_storage_slot: Field, _number_of_elements: Field) -> [Field; N] {}\n\nunconstrained fn storage_read_oracle_wrapper<N>(_storage_slot: Field) -> [Field; N] {\n    storage_read_oracle(_storage_slot, N)\n}\n\npub fn storage_read<N>(storage_slot: Field) -> [Field; N] {\n    storage_read_oracle_wrapper(storage_slot)\n}\n\n#[oracle(storageWrite)]\nfn storage_write_oracle<N>(_storage_slot: Field, _values: [Field; N]) -> [Field; N] {}\n\nunconstrained pub fn storage_write<N>(storage_slot: Field, fields: [Field; N]) {\n    let _hash = storage_write_oracle(storage_slot, fields);\n}\n","path":"/Users/jack-sw/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.35.1/noir-projects/aztec-nr/aztec/src/oracle/storage.nr"},"87":{"source":"use dep::protocol_types::{address::AztecAddress, grumpkin_point::GrumpkinPoint};\n\n// TODO: Should take encrypted data.\n#[oracle(emitEncryptedLog)]\nfn emit_encrypted_log_oracle<N>(\n    _contract_address: AztecAddress,\n    _storage_slot: Field,\n    _note_type_id: Field,\n    _encryption_pub_key: GrumpkinPoint,\n    _preimage: [Field; N]\n) -> Field {}\n\nunconstrained pub fn emit_encrypted_log<N>(\n    contract_address: AztecAddress,\n    storage_slot: Field,\n    note_type_id: Field,\n    encryption_pub_key: GrumpkinPoint,\n    preimage: [Field; N]\n) -> Field {\n    emit_encrypted_log_oracle(\n        contract_address,\n        storage_slot,\n        note_type_id,\n        encryption_pub_key,\n        preimage\n    )\n}\n\n#[oracle(emitUnencryptedLog)]\nfn emit_unencrypted_log_oracle<T>(\n    _contract_address: AztecAddress,\n    _event_selector: Field,\n    _message: T\n) -> Field {}\n\nunconstrained pub fn emit_unencrypted_log<T>(\n    contract_address: AztecAddress,\n    event_selector: Field,\n    message: T\n) -> Field {\n    // https://github.com/AztecProtocol/aztec-packages/issues/885\n    emit_unencrypted_log_oracle(contract_address, event_selector, message)\n}\n","path":"/Users/jack-sw/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.35.1/noir-projects/aztec-nr/aztec/src/oracle/logs.nr"},"90":{"source":"use dep::protocol_types::{\n    constants::PUBLIC_DATA_TREE_HEIGHT, hash::pedersen_hash,\n    public_data_tree_leaf_preimage::PublicDataTreeLeafPreimage, traits::{Hash, Serialize},\n    utils::arr_copy_slice\n};\n\nglobal LEAF_PREIMAGE_LENGTH: u64 = 4;\nglobal PUBLIC_DATA_WITNESS: Field = 45;\n\nstruct PublicDataWitness {\n    index: Field,\n    leaf_preimage: PublicDataTreeLeafPreimage,\n    path: [Field; PUBLIC_DATA_TREE_HEIGHT],\n}\n\n#[oracle(getPublicDataTreeWitness)]\nfn get_public_data_witness_oracle(\n    _block_number: u32,\n    _leaf_slot: Field\n) -> [Field; PUBLIC_DATA_WITNESS] {}\n\nunconstrained pub fn get_public_data_witness(block_number: u32, leaf_slot: Field) -> PublicDataWitness {\n    let fields = get_public_data_witness_oracle(block_number, leaf_slot);\n    PublicDataWitness {\n        index: fields[0],\n        leaf_preimage: PublicDataTreeLeafPreimage { slot: fields[1], value: fields[2], next_index: fields[3] as u64, next_slot: fields[4] },\n        path: arr_copy_slice(fields, [0; PUBLIC_DATA_TREE_HEIGHT], 1 + LEAF_PREIMAGE_LENGTH)\n    }\n}\n","path":"/Users/jack-sw/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.35.1/noir-projects/aztec-nr/aztec/src/oracle/get_public_data_witness.nr"},"91":{"source":"use dep::protocol_types::{address::AztecAddress, grumpkin_point::GrumpkinPoint, grumpkin_private_key::GrumpkinPrivateKey};\n\nstruct NullifierKeyPair {\n    account: AztecAddress,\n    public_key: GrumpkinPoint,\n    secret_key: GrumpkinPrivateKey,\n}\n\n#[oracle(getNullifierKeyPair)]\nfn get_nullifier_key_pair_oracle(_account: AztecAddress) -> [Field; 4] {}\n\nunconstrained fn get_nullifier_key_pair_internal(account: AztecAddress) -> NullifierKeyPair {\n    let result = get_nullifier_key_pair_oracle(account);\n    NullifierKeyPair {\n        account,\n        public_key: GrumpkinPoint { x: result[0], y: result[1] },\n        secret_key: GrumpkinPrivateKey { high: result[2], low: result[3] }\n    }\n}\n\npub fn get_nullifier_key_pair(account: AztecAddress) -> NullifierKeyPair {\n    get_nullifier_key_pair_internal(account)\n}\n\npub fn get_nullifier_secret_key(account: AztecAddress) -> GrumpkinPrivateKey {\n    get_nullifier_key_pair_internal(account).secret_key\n}\n","path":"/Users/jack-sw/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.35.1/noir-projects/aztec-nr/aztec/src/oracle/nullifier_key.nr"},"92":{"source":"use dep::protocol_types::{\n    address::AztecAddress, contract_instance::ContractInstance, utils::arr_copy_slice,\n    constants::CONTRACT_INSTANCE_LENGTH, utils::reader::Reader\n};\n\n#[oracle(getContractInstance)]\nfn get_contract_instance_oracle(_address: AztecAddress) -> [Field; CONTRACT_INSTANCE_LENGTH] {}\n\n// Returns a ContractInstance plus a boolean indicating whether the instance was found.\n#[oracle(avmOpcodeGetContractInstance)]\nfn get_contract_instance_oracle_avm(_address: AztecAddress) -> [Field; CONTRACT_INSTANCE_LENGTH + 1] {}\n\nunconstrained fn get_contract_instance_internal(address: AztecAddress) -> [Field; CONTRACT_INSTANCE_LENGTH] {\n    get_contract_instance_oracle(address)\n}\n\nunconstrained fn get_contract_instance_internal_avm(address: AztecAddress) -> [Field; CONTRACT_INSTANCE_LENGTH + 1] {\n    get_contract_instance_oracle_avm(address)\n}\n\npub fn get_contract_instance(address: AztecAddress) -> ContractInstance {\n    let instance = ContractInstance::deserialize(get_contract_instance_internal(address));\n    assert(instance.to_address().eq(address));\n    instance\n}\n\npub fn get_contract_instance_avm(address: AztecAddress) -> Option<ContractInstance> {\n    let mut reader = Reader::new(get_contract_instance_internal_avm(address));\n    let found = reader.read();\n    if found == 0 {\n        Option::none()\n    } else {\n        Option::some(reader.read_struct(ContractInstance::deserialize))\n    }\n}\n","path":"/Users/jack-sw/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.35.1/noir-projects/aztec-nr/aztec/src/oracle/get_contract_instance.nr"},"93":{"source":"use dep::protocol_types::{\n    abis::nullifier_leaf_preimage::{NullifierLeafPreimage, NULLIFIER_LEAF_PREIMAGE_LENGTH},\n    constants::NULLIFIER_TREE_HEIGHT, hash::pedersen_hash, utils::arr_copy_slice\n};\n\n// INDEX_LENGTH + NULLIFIER_LEAF_PREIMAGE_LENGTH + NULLIFIER_TREE_HEIGHT\nglobal NULLIFIER_MEMBERSHIP_WITNESS: Field = 24;\n\nstruct NullifierMembershipWitness {\n    index: Field,\n    leaf_preimage: NullifierLeafPreimage,\n    path: [Field; NULLIFIER_TREE_HEIGHT],\n}\n\nimpl NullifierMembershipWitness {\n    pub fn deserialize(fields: [Field; NULLIFIER_MEMBERSHIP_WITNESS]) -> Self {\n        let leaf_preimage_fields = arr_copy_slice(fields, [0; NULLIFIER_LEAF_PREIMAGE_LENGTH], 1);\n        Self {\n            index: fields[0],\n            leaf_preimage: NullifierLeafPreimage::deserialize(leaf_preimage_fields),\n            path: arr_copy_slice(\n                fields,\n                [0; NULLIFIER_TREE_HEIGHT],\n                1 + NULLIFIER_LEAF_PREIMAGE_LENGTH\n            )\n        }\n    }\n}\n\n#[oracle(getLowNullifierMembershipWitness)]\nfn get_low_nullifier_membership_witness_oracle(\n    _block_number: u32,\n    _nullifier: Field\n) -> [Field; NULLIFIER_MEMBERSHIP_WITNESS] {}\n\n// Nullifier here refers to the nullifier we are looking to get non-inclusion proof for (by proving that a lower\n// nullifier's next_value is bigger than the nullifier)\nunconstrained pub fn get_low_nullifier_membership_witness(block_number: u32, nullifier: Field) -> NullifierMembershipWitness {\n    let fields = get_low_nullifier_membership_witness_oracle(block_number, nullifier);\n    NullifierMembershipWitness::deserialize(fields)\n}\n\n#[oracle(getNullifierMembershipWitness)]\nfn get_nullifier_membership_witness_oracle(\n    _block_number: u32,\n    _nullifier: Field\n) -> [Field; NULLIFIER_MEMBERSHIP_WITNESS] {}\n\n// Nullifier here refers to the nullifier we are looking to get non-inclusion proof for (by proving that a lower\n// nullifier's next_value is bigger than the nullifier)\nunconstrained pub fn get_nullifier_membership_witness(block_number: u32, nullifier: Field) -> NullifierMembershipWitness {\n    let fields = get_nullifier_membership_witness_oracle(block_number, nullifier);\n    NullifierMembershipWitness::deserialize(fields)\n}\n","path":"/Users/jack-sw/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.35.1/noir-projects/aztec-nr/aztec/src/oracle/get_nullifier_membership_witness.nr"},"99":{"source":"mod globals;\nmod inputs;\n\nmod private_context;\nmod public_context;\nmod avm_context;\nmod interface;\nmod gas;\n\nuse interface::ContextInterface;\nuse private_context::PrivateContext;\nuse private_context::PackedReturns;\nuse public_context::PublicContext;\nuse public_context::FunctionReturns;\nuse avm_context::AvmContext;\n\nstruct Context {\n    private: Option<&mut PrivateContext>,\n    public: Option<&mut PublicContext>,\n    avm: Option<&mut AvmContext>,\n}\n\nimpl Context {\n    pub fn private(context: &mut PrivateContext) -> Context {\n        Context { private: Option::some(context), public: Option::none(), avm: Option::none() }\n    }\n\n    pub fn public(context: &mut PublicContext) -> Context {\n        Context { public: Option::some(context), private: Option::none(), avm: Option::none() }\n    }\n\n    pub fn avm(context: &mut AvmContext) -> Context {\n        Context { avm: Option::some(context), public: Option::none(), private: Option::none() }\n    }\n\n    pub fn none() -> Context {\n        Context { public: Option::none(), private: Option::none(), avm: Option::none() }\n    }\n}\n","path":"/Users/jack-sw/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.35.1/noir-projects/aztec-nr/aztec/src/context.nr"},"102":{"source":"use dep::protocol_types::{\n    constants::GENERATOR_INDEX__PUBLIC_LEAF_INDEX, hash::pedersen_hash, address::AztecAddress,\n    header::Header, utils::field::full_field_less_than\n};\nuse dep::std::merkle::compute_merkle_root;\n\nuse crate::{context::PrivateContext, oracle::get_public_data_witness::get_public_data_witness};\n\nfn _public_storage_historical_read(storage_slot: Field, contract_address: AztecAddress, header: Header) -> Field {\n    // 1) Compute the leaf slot by siloing the storage slot with the contract address\n    let public_value_leaf_slot = pedersen_hash(\n        [contract_address.to_field(), storage_slot],\n        GENERATOR_INDEX__PUBLIC_LEAF_INDEX\n    );\n\n    // 2) Get the membership witness of the slot\n    let witness = get_public_data_witness(\n        header.global_variables.block_number as u32,\n        public_value_leaf_slot\n    );\n\n    // 3) Extract the value from the witness leaf and check that the storage slot is correct\n    let preimage = witness.leaf_preimage;\n\n    // Here we have two cases. Code based on same checks in `validate_public_data_reads` in `base_rollup_inputs`\n    // 1. The value is the same as the one in the witness\n    // 2. The value was never initialized and is zero\n    let is_less_than_slot = full_field_less_than(preimage.slot, public_value_leaf_slot);\n    let is_next_greater_than = full_field_less_than(public_value_leaf_slot, preimage.next_slot);\n    let is_max = ((preimage.next_index == 0) & (preimage.next_slot == 0));\n    let is_in_range = is_less_than_slot & (is_next_greater_than | is_max);\n\n    let value = if is_in_range {\n        0\n    } else {\n        assert_eq(preimage.slot, public_value_leaf_slot, \"Public data slot doesn't match witness\");\n        preimage.value\n    };\n\n    // 4) Prove that the leaf exists in the public data tree. Note that `hash` returns not just the hash of the value\n    // but also the metadata (slot, next index and next slot).\n    assert(\n        header.state.partial.public_data_tree.root\n        == compute_merkle_root(preimage.hash(), witness.index, witness.path), \"Proving public value inclusion failed\"\n    );\n\n    value\n}\n\npub fn public_storage_historical_read(\n    context: PrivateContext,\n    storage_slot: Field, // The storage slot to read\n    contract_address: AztecAddress // The contract we want to look into\n) -> Field {\n    _public_storage_historical_read(storage_slot, contract_address, context.historical_header)\n}\n\npub fn public_storage_historical_read_at(\n    context: PrivateContext,\n    storage_slot: Field, // The storage slot to read\n    contract_address: AztecAddress, // The contract we want to look into\n    block_number: u32 // The block number at the end of which we'll read the value\n) -> Field {\n    let header = context.get_header_at(block_number);\n\n    _public_storage_historical_read(storage_slot, contract_address, header)\n}\n","path":"/Users/jack-sw/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.35.1/noir-projects/aztec-nr/aztec/src/history/public_storage.nr"},"105":{"source":"use dep::std::merkle::compute_merkle_root;\nuse dep::protocol_types::header::Header;\n\nuse crate::{\n    context::PrivateContext, oracle::get_nullifier_membership_witness::get_nullifier_membership_witness,\n    note::{utils::compute_siloed_nullifier, note_interface::NoteInterface}\n};\n\nfn _nullifier_inclusion(nullifier: Field, header: Header) {\n    // 1) Get the membership witness of the nullifier\n    let witness = get_nullifier_membership_witness(header.global_variables.block_number as u32, nullifier);\n\n    // 2) Check that the witness we obtained matches the nullifier\n    assert(witness.leaf_preimage.nullifier == nullifier, \"Nullifier does not match value in witness\");\n\n    // 3) Compute the nullifier tree leaf\n    let nullifier_leaf = witness.leaf_preimage.hash();\n\n    // 4) Prove that the nullifier is in the nullifier tree\n    assert(\n        header.state.partial.nullifier_tree.root\n        == compute_merkle_root(nullifier_leaf, witness.index, witness.path), \"Proving nullifier inclusion failed\"\n    );\n    // --> Now we have traversed the trees all the way up to archive root and verified that the nullifier\n    //     was included in the nullifier tree.\n}\n\npub fn prove_nullifier_inclusion(nullifier: Field, context: PrivateContext) {\n    _nullifier_inclusion(nullifier, context.get_header());\n}\n\npub fn prove_nullifier_inclusion_at(\n    nullifier: Field,\n    block_number: u32, // The block at which we'll prove that the nullifier exists in the nullifier tree\n    context: PrivateContext\n) {\n    let header = context.get_header_at(block_number);\n\n    _nullifier_inclusion(nullifier, header);\n}\n\npub fn prove_note_is_nullified<Note, N>(\n    note: Note,\n    context: &mut PrivateContext\n) where Note: NoteInterface<N> {\n    let nullifier = compute_siloed_nullifier(note, context);\n\n    _nullifier_inclusion(nullifier, context.historical_header);\n}\n\npub fn prove_note_is_nullified_at<Note, N>(\n    note: Note,\n    block_number: u32,\n    context: &mut PrivateContext\n) where Note: NoteInterface<N> {\n    let nullifier = compute_siloed_nullifier(note, context);\n    let header = context.get_header_at(block_number);\n\n    _nullifier_inclusion(nullifier, header);\n}\n","path":"/Users/jack-sw/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.35.1/noir-projects/aztec-nr/aztec/src/history/nullifier_inclusion.nr"},"106":{"source":"use dep::protocol_types::{\n    address::AztecAddress, hash::{silo_nullifier, pedersen_hash},\n    constants::GENERATOR_INDEX__CONSTRUCTOR, abis::function_selector::FunctionSelector\n};\n\nuse crate::{\n    context::{PrivateContext, PublicContext, AvmContext, ContextInterface},\n    oracle::get_contract_instance::get_contract_instance,\n    oracle::get_contract_instance::get_contract_instance_avm,\n    history::nullifier_inclusion::prove_nullifier_inclusion\n};\n\npub fn mark_as_initialized_public(context: &mut PublicContext) {\n    mark_as_initialized(context);\n}\n\npub fn mark_as_initialized_avm(context: &mut AvmContext) {\n    mark_as_initialized(context);\n}\n\npub fn mark_as_initialized_private(context: &mut PrivateContext) {\n    mark_as_initialized(context);\n}\n\nfn mark_as_initialized<TContext>(context: &mut TContext) where TContext: ContextInterface {\n    let init_nullifier = compute_unsiloed_contract_initialization_nullifier((*context).this_address());\n    ContextInterface::push_new_nullifier(context, init_nullifier, 0);\n}\n\npub fn assert_is_initialized_public(context: &mut PublicContext) {\n    let init_nullifier = compute_unsiloed_contract_initialization_nullifier(context.this_address());\n    assert(context.nullifier_exists(init_nullifier, context.this_address()), \"Not initialized\");\n}\n\npub fn assert_is_initialized_avm(context: &mut AvmContext) {\n    let init_nullifier = compute_unsiloed_contract_initialization_nullifier(context.this_address());\n    assert(context.nullifier_exists(init_nullifier, context.this_address()), \"Not initialized\");\n}\n\npub fn assert_is_initialized_private(context: &mut PrivateContext) {\n    let init_nullifier = compute_contract_initialization_nullifier(context.this_address());\n    prove_nullifier_inclusion(init_nullifier, *context);\n}\n\nfn compute_contract_initialization_nullifier(address: AztecAddress) -> Field {\n    silo_nullifier(\n        address,\n        compute_unsiloed_contract_initialization_nullifier(address)\n    )\n}\n\nfn compute_unsiloed_contract_initialization_nullifier(address: AztecAddress) -> Field {\n    address.to_field()\n}\n\npub fn assert_initialization_matches_address_preimage_public(context: PublicContext) {\n    assert_initialization_matches_address_preimage(context);\n}\n\npub fn assert_initialization_matches_address_preimage_avm(context: AvmContext) {\n    let address = context.this_address();\n    let instance = get_contract_instance_avm(address).unwrap();\n    let expected_init = compute_initialization_hash(context.selector(), context.get_args_hash());\n    assert(instance.initialization_hash == expected_init, \"Initialization hash does not match\");\n    assert(\n        (instance.deployer.is_zero()) | (instance.deployer == context.msg_sender()), \"Initializer address is not the contract deployer\"\n    );\n}\n\npub fn assert_initialization_matches_address_preimage_private(context: PrivateContext) {\n    assert_initialization_matches_address_preimage(context);\n}\n\nfn assert_initialization_matches_address_preimage<TContext>(context: TContext) where TContext: ContextInterface {\n    let address = context.this_address();\n    let instance = get_contract_instance(address);\n    let expected_init = compute_initialization_hash(context.selector(), context.get_args_hash());\n    assert(instance.initialization_hash == expected_init, \"Initialization hash does not match\");\n    assert(\n        (instance.deployer.is_zero()) | (instance.deployer == context.msg_sender()), \"Initializer address is not the contract deployer\"\n    );\n}\n\npub fn compute_initialization_hash(init_selector: FunctionSelector, init_args_hash: Field) -> Field {\n    pedersen_hash(\n        [init_selector.to_field(), init_args_hash],\n        GENERATOR_INDEX__CONSTRUCTOR\n    )\n}\n","path":"/Users/jack-sw/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.35.1/noir-projects/aztec-nr/aztec/src/initializer.nr"},"107":{"source":"use dep::protocol_types::{\n    address::{AztecAddress, EthAddress},\n    constants::{\n    GENERATOR_INDEX__L1_TO_L2_MESSAGE_SECRET, GENERATOR_INDEX__NULLIFIER, ARGS_HASH_CHUNK_COUNT,\n    GENERATOR_INDEX__FUNCTION_ARGS, ARGS_HASH_CHUNK_LENGTH\n},\n    traits::Hash, hash::{pedersen_hash, silo_nullifier}\n};\n\nuse dep::protocol_types::hash::sha256_to_field;\n\npub fn compute_secret_hash(secret: Field) -> Field {\n    // TODO(#1205) This is probably not the right index to use\n    pedersen_hash([secret], GENERATOR_INDEX__L1_TO_L2_MESSAGE_SECRET)\n}\n\npub fn compute_message_hash(\n    sender: EthAddress,\n    chain_id: Field,\n    recipient: AztecAddress,\n    version: Field,\n    content: Field,\n    secret_hash: Field\n) -> Field {\n    let mut hash_bytes = [0 as u8; 192];\n    let sender_bytes = sender.to_field().to_be_bytes(32);\n    let chain_id_bytes = chain_id.to_be_bytes(32);\n    let recipient_bytes = recipient.to_field().to_be_bytes(32);\n    let version_bytes = version.to_be_bytes(32);\n    let content_bytes = content.to_be_bytes(32);\n    let secret_hash_bytes = secret_hash.to_be_bytes(32);\n\n    for i in 0..32 {\n        hash_bytes[i] = sender_bytes[i];\n        hash_bytes[i + 32] = chain_id_bytes[i];\n        hash_bytes[i + 64] = recipient_bytes[i];\n        hash_bytes[i + 96] = version_bytes[i];\n        hash_bytes[i + 128] = content_bytes[i];\n        hash_bytes[i + 160] = secret_hash_bytes[i];\n    }\n\n    sha256_to_field(hash_bytes)\n}\n\n// The nullifier of a l1 to l2 message is the hash of the message salted with the secret and index of the message hash\n// in the L1 to L2 message tree\npub fn compute_message_nullifier(message_hash: Field, secret: Field, leaf_index: Field) -> Field {\n    pedersen_hash(\n        [message_hash, secret, leaf_index],\n        GENERATOR_INDEX__NULLIFIER\n    )\n}\n\npub fn compute_siloed_nullifier(address: AztecAddress, nullifier: Field) -> Field {\n    silo_nullifier(address, nullifier)\n}\n\nstruct ArgsHasher {\n    fields: [Field],\n}\n\nimpl Hash for ArgsHasher {\n    fn hash(self) -> Field {\n        hash_args(self.fields)\n    }\n}\n\nimpl ArgsHasher {\n    pub fn new() -> Self {\n        Self { fields: [] }\n    }\n\n    pub fn add(&mut self, field: Field) {\n        self.fields = self.fields.push_back(field);\n    }\n\n    pub fn add_multiple<N>(&mut self, fields: [Field; N]) {\n        for i in 0..N {\n            self.fields = self.fields.push_back(fields[i]);\n        }\n    }\n}\n\npub fn hash_args_array<N>(args: [Field; N]) -> Field {\n    hash_args(args.as_slice())\n}\n\npub fn hash_args(args: [Field]) -> Field {\n    if args.len() == 0 {\n        0\n    } else {\n        assert(args.len() < ARGS_HASH_CHUNK_COUNT * ARGS_HASH_CHUNK_LENGTH);\n        let mut chunks_hashes = [0; ARGS_HASH_CHUNK_COUNT];\n        let mut current_chunk_values = [0; ARGS_HASH_CHUNK_LENGTH];\n\n        let mut current_chunk_index = 0;\n        let mut index_inside_current_chunk = 0;\n        for i in 0..args.len() {\n            current_chunk_values[index_inside_current_chunk] = args[i];\n            index_inside_current_chunk+=1;\n            if index_inside_current_chunk == ARGS_HASH_CHUNK_LENGTH {\n                chunks_hashes[current_chunk_index] = pedersen_hash(current_chunk_values, GENERATOR_INDEX__FUNCTION_ARGS);\n                current_chunk_values = [0; ARGS_HASH_CHUNK_LENGTH];\n                current_chunk_index+=1;\n                index_inside_current_chunk = 0;\n            }\n        }\n        if index_inside_current_chunk > 0 {\n            chunks_hashes[current_chunk_index] = pedersen_hash(current_chunk_values, GENERATOR_INDEX__FUNCTION_ARGS);\n        }\n        pedersen_hash(chunks_hashes, GENERATOR_INDEX__FUNCTION_ARGS)\n    }\n}\n\n#[test]\nfn compute_var_args_hash() {\n    let mut input = ArgsHasher::new();\n    for i in 0..800 {\n        input.add(i as Field);\n    }\n    let hash = input.hash();\n    assert(hash == 0x05a1023fef839ac88731f49ae983e172c1b600a3c8f3393ad0ac25d819ac0f0f);\n}\n","path":"/Users/jack-sw/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.35.1/noir-projects/aztec-nr/aztec/src/hash.nr"},"111":{"source":"use dep::protocol_types::{address::AztecAddress, constants::GENERATOR_INDEX__INITIALIZATION_NULLIFIER, hash::pedersen_hash};\n\nuse crate::context::{PrivateContext, PublicContext, Context};\nuse crate::note::{\n    lifecycle::{create_note, destroy_note}, note_getter::{get_note, view_notes},\n    note_interface::NoteInterface, note_viewer_options::NoteViewerOptions\n};\nuse crate::oracle::{nullifier_key::get_nullifier_secret_key, notes::check_nullifier_exists};\nuse crate::state_vars::storage::Storage;\n\n// docs:start:struct\nstruct PrivateMutable<Note> {\n    context: Option<&mut PrivateContext>,\n    storage_slot: Field\n}\n// docs:end:struct\n\nimpl<T> Storage<T> for PrivateMutable<T> {}\n\nimpl<Note> PrivateMutable<Note> {\n    // docs:start:new\n    pub fn new(context: Context, storage_slot: Field) -> Self {\n        assert(storage_slot != 0, \"Storage slot 0 not allowed. Storage slots must start from 1.\");\n        Self { context: context.private, storage_slot }\n    }\n    // docs:end:new\n\n    // The following computation is leaky, in that it doesn't hide the storage slot that has been initialized, nor does it hide the contract address of this contract.\n    // When this initialization nullifier is emitted, an observer could do a dictionary or rainbow attack to learn the preimage of this nullifier to deduce the storage slot and contract address.\n    // For some applications, leaking the details that a particular state variable of a particular contract has been initialized will be unacceptable.\n    // Under such circumstances, such application developers might wish to _not_ use this state variable type.\n    // This is especially dangerous for initial assignment to elements of a `Map<AztecAddress, PrivateMutable>` type (for example), because the storage slot often also identifies an actor. e.g.\n    // the initial assignment to `my_map.at(msg.sender)` will leak: `msg.sender`, the fact that an element of `my_map` was assigned-to for the first time, and the contract_address.\n    // Note: subsequent nullification of this state variable, via the `replace` method will not be leaky, if the `compute_nullifier()` method of the underlying note is designed to ensure privacy.\n    // For example, if the `compute_nullifier()` method injects the secret key of a note owner into the computed nullifier's preimage.\n    pub fn compute_initialization_nullifier(self) -> Field {\n        pedersen_hash(\n            [self.storage_slot],\n            GENERATOR_INDEX__INITIALIZATION_NULLIFIER\n        )\n    }\n\n    // docs:start:is_initialized\n    unconstrained pub fn is_initialized(self) -> bool {\n        let nullifier = self.compute_initialization_nullifier();\n        check_nullifier_exists(nullifier)\n    }\n    // docs:end:is_initialized\n\n    // docs:start:initialize\n    pub fn initialize<N>(self, note: &mut Note, broadcast: bool) where Note: NoteInterface<N> {\n        let context = self.context.unwrap();\n\n        // Nullify the storage slot.\n        let nullifier = self.compute_initialization_nullifier();\n        context.push_new_nullifier(nullifier, 0);\n\n        create_note(context, self.storage_slot, note, broadcast);\n    }\n    // docs:end:initialize\n\n    // docs:start:replace\n    pub fn replace<N>(self, new_note: &mut Note, broadcast: bool) where Note: NoteInterface<N> {\n        let context = self.context.unwrap();\n        let prev_note: Note = get_note(context, self.storage_slot);\n\n        // Nullify previous note.\n        destroy_note(context, prev_note);\n\n        // Add replacement note.\n        create_note(context, self.storage_slot, new_note, broadcast);\n    }\n    // docs:end:replace\n\n    // docs:start:get_note\n    pub fn get_note<N>(self, broadcast: bool) -> Note where Note: NoteInterface<N> {\n        let context = self.context.unwrap();\n        let mut note = get_note(context, self.storage_slot);\n\n        // Nullify current note to make sure it's reading the latest note.\n        destroy_note(context, note);\n\n        // Add the same note again.\n        // Because a nonce is added to every note in the kernel, its nullifier will be different.\n        create_note(context, self.storage_slot, &mut note, broadcast);\n\n        note\n    }\n    // docs:end:get_note\n\n    // docs:start:view_note\n    unconstrained pub fn view_note<N>(self) -> Note where Note: NoteInterface<N> {\n        let mut options = NoteViewerOptions::new();\n        view_notes(self.storage_slot, options.set_limit(1))[0].unwrap()\n    }\n    // docs:end:view_note\n}\n","path":"/Users/jack-sw/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.35.1/noir-projects/aztec-nr/aztec/src/state_vars/private_mutable.nr"},"112":{"source":"use crate::{\n    context::Context, history::public_storage::public_storage_historical_read,\n    oracle::{storage::{storage_read, storage_write}}, state_vars::storage::Storage\n};\nuse dep::protocol_types::{constants::INITIALIZATION_SLOT_SEPARATOR, traits::{Deserialize, Serialize}};\n\n// Just like PublicImmutable but with the ability to read from private functions.\nstruct SharedImmutable<T>{\n    context: Context,\n    storage_slot: Field,\n}\n\nimpl<T> Storage<T> for SharedImmutable<T> {}\n\nimpl<T> SharedImmutable<T> {\n    pub fn new(\n        // Note: Passing the contexts to new(...) just to have an interface compatible with a Map.\n        context: Context,\n        storage_slot: Field\n    ) -> Self {\n        assert(storage_slot != 0, \"Storage slot 0 not allowed. Storage slots must start from 1.\");\n        Self { context, storage_slot }\n    }\n\n    // Intended to be only called once. \n    pub fn initialize<T_SERIALIZED_LEN>(self, value: T) where T: Serialize<T_SERIALIZED_LEN> {\n        assert(\n            self.context.private.is_none(), \"SharedImmutable can only be initialized from public functions\"\n        );\n        // TODO(#4738): Uncomment the following assert\n        // assert(\n        //     self.context.public.unwrap_unchecked().is_deployment(), \"SharedImmutable can only be initialized during contract deployment\"\n        // );\n\n        // We check that the struct is not yet initialized by checking if the initialization slot is 0\n        let initialization_slot = INITIALIZATION_SLOT_SEPARATOR + self.storage_slot;\n        let fields_read: [Field; 1] = storage_read(initialization_slot);\n        assert(fields_read[0] == 0, \"SharedImmutable already initialized\");\n\n        // We populate the initialization slot with a non-zero value to indicate that the struct is initialized\n        storage_write(initialization_slot, [0xdead]);\n\n        let fields_write = T::serialize(value);\n        storage_write(self.storage_slot, fields_write);\n    }\n\n    pub fn read_public<T_SERIALIZED_LEN>(self) -> T where T: Deserialize<T_SERIALIZED_LEN> {\n        assert(self.context.private.is_none(), \"Public read only supported in public functions\");\n        let fields = storage_read(self.storage_slot);\n        T::deserialize(fields)\n    }\n\n    pub fn read_private<T_SERIALIZED_LEN>(self) -> T  where T: Deserialize<T_SERIALIZED_LEN> {\n        assert(self.context.public.is_none(), \"Private read only supported in private functions\");\n        let private_context = self.context.private.unwrap();\n\n        let mut fields = [0; T_SERIALIZED_LEN];\n\n        for i in 0..fields.len() {\n            fields[i] =\n                public_storage_historical_read(\n                    (*private_context),\n                    self.storage_slot + i as Field,\n                    (*private_context).this_address()\n                );\n        }\n        T::deserialize(fields)\n    }\n}\n","path":"/Users/jack-sw/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.35.1/noir-projects/aztec-nr/aztec/src/state_vars/shared_immutable.nr"},"113":{"source":"use crate::context::{PrivateContext, PublicContext, Context};\nuse dep::protocol_types::{hash::pedersen_hash, traits::ToField};\nuse crate::state_vars::storage::Storage;\n\n// docs:start:map\nstruct Map<K, V> {\n    context: Context,\n    storage_slot: Field,\n    state_var_constructor: fn(Context, Field) -> V,\n}\n// docs:end:map\n\nimpl<K, T> Storage<T> for Map<K, T> {}\n\nimpl<K, V> Map<K, V> {\n    // docs:start:new\n    pub fn new(\n        context: Context,\n        storage_slot: Field,\n        state_var_constructor: fn(Context, Field) -> V\n    ) -> Self {\n        assert(storage_slot != 0, \"Storage slot 0 not allowed. Storage slots must start from 1.\");\n        Map { context, storage_slot, state_var_constructor }\n    }\n    // docs:end:new\n\n    // docs:start:at\n    pub fn at(self, key: K) -> V where K: ToField {\n        // TODO(#1204): use a generator index for the storage slot\n        let derived_storage_slot = pedersen_hash([self.storage_slot, key.to_field()], 0);\n\n        let state_var_constructor = self.state_var_constructor;\n        state_var_constructor(self.context, derived_storage_slot)\n    }\n    // docs:end:at\n}\n","path":"/Users/jack-sw/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.35.1/noir-projects/aztec-nr/aztec/src/state_vars/map.nr"},"117":{"source":"use crate::context::Context;\nuse crate::oracle::storage::storage_read;\nuse crate::oracle::storage::storage_write;\nuse dep::protocol_types::traits::{Deserialize, Serialize};\nuse crate::state_vars::storage::Storage;\n\n// docs:start:public_mutable_struct\nstruct PublicMutable<T> {\n    context: Context,\n    storage_slot: Field,\n}\n// docs:end:public_mutable_struct\n\nimpl<T> Storage<T> for PublicMutable<T> {}\n\nimpl<T> PublicMutable<T> {\n    // docs:start:public_mutable_struct_new\n    pub fn new(\n        // Note: Passing the contexts to new(...) just to have an interface compatible with a Map.\n        context: Context,\n        storage_slot: Field\n    ) -> Self {\n        assert(storage_slot != 0, \"Storage slot 0 not allowed. Storage slots must start from 1.\");\n        PublicMutable { context, storage_slot }\n    }\n    // docs:end:public_mutable_struct_new\n\n    // docs:start:public_mutable_struct_read\n    pub fn read<T_SERIALIZED_LEN>(self) -> T where T: Deserialize<T_SERIALIZED_LEN> {\n        assert(self.context.private.is_none(), \"PublicMutable reads only supported in public functions\");\n        let fields = storage_read(self.storage_slot);\n        T::deserialize(fields)\n    }\n    // docs:end:public_mutable_struct_read\n\n    // docs:start:public_mutable_struct_write\n    pub fn write<T_SERIALIZED_LEN>(self, value: T) where T: Serialize<T_SERIALIZED_LEN> {\n        assert(self.context.private.is_none(), \"PublicMutable writes only supported in public functions\");\n        let fields = T::serialize(value);\n        storage_write(self.storage_slot, fields);\n    }\n    // docs:end:public_mutable_struct_write\n}\n","path":"/Users/jack-sw/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.35.1/noir-projects/aztec-nr/aztec/src/state_vars/public_mutable.nr"},"118":{"source":"use crate::{context::Context, oracle::{storage::{storage_read, storage_write}}, state_vars::storage::Storage};\nuse dep::protocol_types::{constants::INITIALIZATION_SLOT_SEPARATOR, traits::{Deserialize, Serialize}};\n\n// Just like SharedImmutable but without the ability to read from private functions.\n// docs:start:public_immutable_struct\nstruct PublicImmutable<T> {\n    context: Context,\n    storage_slot: Field,\n}\n// docs:end:public_immutable_struct\n\nimpl<T> Storage<T> for PublicImmutable<T> {}\n\nimpl<T> PublicImmutable<T> {\n    // docs:start:public_immutable_struct_new\n    pub fn new(\n        // Note: Passing the contexts to new(...) just to have an interface compatible with a Map.\n        context: Context,\n        storage_slot: Field\n    ) -> Self {\n        assert(storage_slot != 0, \"Storage slot 0 not allowed. Storage slots must start from 1.\");\n        PublicImmutable { context, storage_slot }\n    }\n    // docs:end:public_immutable_struct_new\n\n    // docs:start:public_immutable_struct_write\n    pub fn initialize<T_SERIALIZED_LEN>(self, value: T) where T: Serialize<T_SERIALIZED_LEN> {\n        assert(\n            self.context.private.is_none(), \"PublicImmutable can only be initialized from public functions\"\n        );\n        // TODO(#4738): Uncomment the following assert\n        // assert(\n        //     self.context.public.unwrap_unchecked().is_deployment(), \"PublicImmutable can only be initialized during contract deployment\"\n        // );\n\n        // We check that the struct is not yet initialized by checking if the initialization slot is 0\n        let initialization_slot = INITIALIZATION_SLOT_SEPARATOR + self.storage_slot;\n        let fields_read: [Field; 1] = storage_read(initialization_slot);\n        assert(fields_read[0] == 0, \"PublicImmutable already initialized\");\n\n        // We populate the initialization slot with a non-zero value to indicate that the struct is initialized\n        storage_write(initialization_slot, [0xdead]);\n\n        let fields_write = T::serialize(value);\n        storage_write(self.storage_slot, fields_write);\n    }\n    // docs:end:public_immutable_struct_write\n\n    // docs:start:public_immutable_struct_read\n    pub fn read<T_SERIALIZED_LEN>(self) -> T where T: Deserialize<T_SERIALIZED_LEN> {\n        assert(self.context.private.is_none(), \"PublicImmutable reads only supported in public functions\");\n        let fields = storage_read(self.storage_slot);\n        T::deserialize(fields)\n    }\n    // docs:end:public_immutable_struct_read\n}\n","path":"/Users/jack-sw/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.35.1/noir-projects/aztec-nr/aztec/src/state_vars/public_immutable.nr"},"127":{"source":"use dep::std::cmp::Eq;\nuse crate::{\n    address::AztecAddress,\n    constants::{NULLIFIER_KEY_VALIDATION_REQUEST_CONTEXT_LENGTH, NULLIFIER_KEY_VALIDATION_REQUEST_LENGTH},\n    traits::{Empty, Serialize, Deserialize}, grumpkin_point::GrumpkinPoint,\n    grumpkin_private_key::GrumpkinPrivateKey\n};\n\nstruct NullifierKeyValidationRequest {\n    public_key: GrumpkinPoint,\n    secret_key: GrumpkinPrivateKey,\n}\n\nimpl Eq for NullifierKeyValidationRequest {\n    fn eq(self, request: NullifierKeyValidationRequest) -> bool {\n        (request.public_key.eq(self.public_key))\n            & (request.secret_key.eq(self.secret_key))\n    }\n}\n\nimpl Empty for NullifierKeyValidationRequest {\n    fn empty() -> Self {\n        NullifierKeyValidationRequest {\n            public_key: GrumpkinPoint::zero(),\n            secret_key: GrumpkinPrivateKey::zero(),\n        }\n    }\n}\n\nimpl Serialize<NULLIFIER_KEY_VALIDATION_REQUEST_LENGTH> for NullifierKeyValidationRequest {\n    fn serialize(self) -> [Field; NULLIFIER_KEY_VALIDATION_REQUEST_LENGTH] {\n        [\n            self.public_key.x,\n            self.public_key.y,\n            self.secret_key.high,\n            self.secret_key.low,\n        ]\n    }\n}\n\nimpl Deserialize<NULLIFIER_KEY_VALIDATION_REQUEST_LENGTH> for NullifierKeyValidationRequest {\n    fn deserialize(fields: [Field; NULLIFIER_KEY_VALIDATION_REQUEST_LENGTH]) -> Self {\n        Self {\n            public_key: GrumpkinPoint::new(fields[0], fields[1]),\n            secret_key: GrumpkinPrivateKey::new(fields[2], fields[3]),\n        }\n    }\n}\n\nimpl NullifierKeyValidationRequest {\n    pub fn to_context(self, contract_address: AztecAddress) -> NullifierKeyValidationRequestContext {\n        NullifierKeyValidationRequestContext { public_key: self.public_key, secret_key: self.secret_key, contract_address }\n    }\n}\n\nstruct NullifierKeyValidationRequestContext {\n    public_key: GrumpkinPoint,\n    secret_key: GrumpkinPrivateKey,\n    contract_address: AztecAddress,\n}\n\nimpl Eq for NullifierKeyValidationRequestContext {\n    fn eq(self, request: NullifierKeyValidationRequestContext) -> bool {\n        (request.public_key.eq(self.public_key))\n            & (request.secret_key.eq(self.secret_key))\n            & (request.contract_address.eq(self.contract_address))\n    }\n}\n\nimpl Empty for NullifierKeyValidationRequestContext {\n    fn empty() -> Self {\n        NullifierKeyValidationRequestContext {\n            public_key: GrumpkinPoint::zero(),\n            secret_key: GrumpkinPrivateKey::zero(),\n            contract_address: AztecAddress::zero(),\n        }\n    }\n}\n\nimpl Serialize<NULLIFIER_KEY_VALIDATION_REQUEST_CONTEXT_LENGTH> for NullifierKeyValidationRequestContext {\n    fn serialize(self) -> [Field; NULLIFIER_KEY_VALIDATION_REQUEST_CONTEXT_LENGTH] {\n        [\n            self.public_key.x,\n            self.public_key.y,\n            self.secret_key.high,\n            self.secret_key.low,\n            self.contract_address.to_field(),\n        ]\n    }\n}\n\nimpl Deserialize<NULLIFIER_KEY_VALIDATION_REQUEST_CONTEXT_LENGTH> for NullifierKeyValidationRequestContext {\n    fn deserialize(fields: [Field; NULLIFIER_KEY_VALIDATION_REQUEST_CONTEXT_LENGTH]) -> Self {\n        Self {\n            public_key: GrumpkinPoint::new(fields[0], fields[1]),\n            secret_key: GrumpkinPrivateKey::new(fields[2], fields[3]),\n            contract_address: AztecAddress::from_field(fields[4]),\n        }\n    }\n}\n\n","path":"/Users/jack-sw/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.35.1/noir-projects/noir-protocol-circuits/crates/types/src/abis/nullifier_key_validation_request.nr"},"128":{"source":"use dep::std::cmp::Eq;\nuse crate::{\n    address::{AztecAddress, EthAddress}, abis::gas_fees::GasFees,\n    constants::{GENERATOR_INDEX__GLOBAL_VARIABLES, GLOBAL_VARIABLES_LENGTH},\n    traits::{Deserialize, Empty, Hash, Serialize}, utils::reader::Reader\n};\n\n// docs:start:global-variables\nstruct GlobalVariables {\n    chain_id : Field,\n    version : Field,\n    block_number : Field,\n    timestamp : u64,\n    coinbase : EthAddress,\n    fee_recipient : AztecAddress,\n    gas_fees : GasFees\n}\n// docs:end:global-variables\n\nimpl Serialize<GLOBAL_VARIABLES_LENGTH> for GlobalVariables {\n    fn serialize(self) -> [Field; GLOBAL_VARIABLES_LENGTH] {\n        let mut serialized: BoundedVec<Field, GLOBAL_VARIABLES_LENGTH> = BoundedVec::new();\n\n        serialized.push(self.chain_id);\n        serialized.push(self.version);\n        serialized.push(self.block_number);\n        serialized.push(self.timestamp as Field);\n        serialized.push(self.coinbase.to_field());\n        serialized.push(self.fee_recipient.to_field());\n        serialized.extend_from_array(self.gas_fees.serialize());\n\n        serialized.storage\n    }\n}\n\nimpl Deserialize<GLOBAL_VARIABLES_LENGTH> for GlobalVariables {\n    fn deserialize(serialized: [Field; GLOBAL_VARIABLES_LENGTH]) -> GlobalVariables {\n        let mut reader = Reader::new(serialized);\n        GlobalVariables {\n            chain_id: reader.read(),\n            version: reader.read(),\n            block_number: reader.read(),\n            timestamp: reader.read() as u64,\n            coinbase: EthAddress::from_field(reader.read()),\n            fee_recipient: AztecAddress::from_field(reader.read()),\n            gas_fees: reader.read_struct(GasFees::deserialize)\n        }\n    }\n}\n\nimpl Eq for GlobalVariables {\n    fn eq(self, other : GlobalVariables) -> bool {\n        (self.chain_id == other.chain_id) &\n        (self.version == other.version) &\n        (self.block_number == other.block_number) &\n        (self.timestamp == other.timestamp) &\n        (self.coinbase == other.coinbase) &\n        (self.fee_recipient == other.fee_recipient) &\n        (self.gas_fees == other.gas_fees) \n    }\n}\n\nimpl Empty for GlobalVariables {\n    fn empty() -> Self {\n        Self {\n            chain_id: 0,\n            version: 0,\n            block_number: 0,\n            timestamp: 0,\n            coinbase: EthAddress::empty(),\n            fee_recipient: AztecAddress::empty(),\n            gas_fees: GasFees::empty()\n        }\n    }\n}\n\n#[test]\nfn serialization_of_empty() {\n    let vars = GlobalVariables::empty();\n    let _serialized = vars.serialize();\n    let _deserialized = GlobalVariables::deserialize(_serialized);\n}\n","path":"/Users/jack-sw/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.35.1/noir-projects/noir-protocol-circuits/crates/types/src/abis/global_variables.nr"},"129":{"source":"use crate::{\n    abis::{function_data::FunctionData, private_circuit_public_inputs::PrivateCircuitPublicInputs},\n    address::AztecAddress,\n    constants::{GENERATOR_INDEX__CALL_STACK_ITEM, PRIVATE_CALL_STACK_ITEM_LENGTH}, hash::pedersen_hash,\n    traits::{Deserialize, Hash, Serialize, Empty}, utils::reader::Reader\n};\n\nstruct PrivateCallStackItem {\n    // This is the _actual_ contract address relating to where this function's code resides in the\n    // contract tree. Regardless of whether this is a call or delegatecall, this\n    // `contract_address` _does not change_. Amongst other things, it's used as a lookup for\n    // getting the correct code from the tree. There is a separate `storage_contract_address`\n    // within a CallStackItem which varies depending on whether this is a call or delegatecall.\n    contract_address: AztecAddress,\n    function_data: FunctionData,\n    public_inputs: PrivateCircuitPublicInputs,\n}\n\nimpl Eq for PrivateCallStackItem {\n    fn eq(self, other: Self) -> bool {\n        self.contract_address.eq(other.contract_address) &\n        self.function_data.eq(other.function_data) &\n        self.public_inputs.eq(other.public_inputs)\n    }\n}\n\nimpl Serialize<PRIVATE_CALL_STACK_ITEM_LENGTH> for PrivateCallStackItem {\n    fn serialize(self) -> [Field; PRIVATE_CALL_STACK_ITEM_LENGTH] {\n        let mut fields: BoundedVec<Field, PRIVATE_CALL_STACK_ITEM_LENGTH> = BoundedVec::new();\n\n        fields.push(self.contract_address.to_field());\n        fields.extend_from_array(self.function_data.serialize());\n        fields.extend_from_array(self.public_inputs.serialize());\n\n        assert_eq(fields.len(), PRIVATE_CALL_STACK_ITEM_LENGTH);\n\n        fields.storage\n    }\n}\n\nimpl Deserialize<PRIVATE_CALL_STACK_ITEM_LENGTH> for PrivateCallStackItem {\n    fn deserialize(serialized: [Field; PRIVATE_CALL_STACK_ITEM_LENGTH]) -> Self {\n        // TODO(#4390): This should accept a reader ^ to avoid copying data.\n        let mut reader = Reader::new(serialized);\n\n        let item = Self {\n            contract_address: reader.read_struct(AztecAddress::deserialize),\n            function_data: reader.read_struct(FunctionData::deserialize),\n            public_inputs: reader.read_struct(PrivateCircuitPublicInputs::deserialize),\n        };\n\n        reader.finish();\n        item\n    }\n}\n\nimpl Hash for PrivateCallStackItem {\n    fn hash(self) -> Field {\n        pedersen_hash(self.serialize(), GENERATOR_INDEX__CALL_STACK_ITEM)\n    }\n}\n\nimpl Empty for PrivateCallStackItem {\n    fn empty() -> Self {\n        PrivateCallStackItem {\n            contract_address: AztecAddress::empty(),\n            function_data: FunctionData::empty(),\n            public_inputs: PrivateCircuitPublicInputs::empty(),\n        }\n    }\n}\n\n#[test]\nfn serialization_of_empty() {\n    let item = PrivateCallStackItem::empty();\n    let serialized = item.serialize();\n    let deserialized = PrivateCallStackItem::deserialize(serialized);\n    assert(item.eq(deserialized));\n}\n\n#[test]\nfn empty_hash() {\n    let mut item = PrivateCallStackItem::empty();\n    item.function_data.is_private = true;\n    let hash = item.hash();\n\n    // Value from private_call_stack_item.test.ts \"computes empty item hash\" test\n    let test_data_empty_hash = 0x243b1b69ea529d158803cc7a16b52293c5e5f2a1859337e3f69e4b20f55c6fb6;\n    assert_eq(hash, test_data_empty_hash);\n}\n","path":"/Users/jack-sw/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.35.1/noir-projects/noir-protocol-circuits/crates/types/src/abis/private_call_stack_item.nr"},"131":{"source":"use crate::{\n    abis::function_selector::FunctionSelector, address::{EthAddress, AztecAddress},\n    constants::GAS_LENGTH, hash::pedersen_hash, traits::{Deserialize, Hash, Serialize, Empty},\n    abis::side_effect::Ordered, utils::reader::Reader\n};\n\nstruct Gas {\n    da_gas: u32,\n    l1_gas: u32,\n    l2_gas: u32,\n}\n\nimpl Gas {\n    pub fn new(da_gas: u32, l1_gas: u32, l2_gas: u32) -> Self {\n        Self { da_gas, l1_gas, l2_gas }\n    }\n\n    fn add(self, other: Gas) -> Self {\n        Gas::new(\n            self.da_gas + other.da_gas,\n            self.l1_gas + other.l1_gas,\n            self.l2_gas + other.l2_gas\n        )\n    }\n\n    fn sub(self, other: Gas) -> Self {\n        Gas::new(\n            self.da_gas - other.da_gas,\n            self.l1_gas - other.l1_gas,\n            self.l2_gas - other.l2_gas\n        )\n    }\n}\n\nimpl Serialize<GAS_LENGTH> for Gas {\n    fn serialize(self) -> [Field; GAS_LENGTH] {\n        [self.da_gas as Field, self.l1_gas as Field, self.l2_gas as Field]\n    }\n}\n\nimpl Deserialize<GAS_LENGTH> for Gas {\n    fn deserialize(serialized: [Field; GAS_LENGTH]) -> Gas {\n        Gas::new(serialized[0] as u32, serialized[1] as u32, serialized[2] as u32)\n    }\n}\n\nimpl Eq for Gas {\n    fn eq(self, other : Gas) -> bool {\n        (self.da_gas == other.da_gas) & (self.l1_gas == other.l1_gas) & (self.l2_gas == other.l2_gas)\n    }\n}\n\nimpl Empty for Gas {\n    fn empty() -> Self {\n        Gas::new(0, 0, 0)\n    }\n}\n\n","path":"/Users/jack-sw/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.35.1/noir-projects/noir-protocol-circuits/crates/types/src/abis/gas.nr"},"133":{"source":"use crate::{\n    abis::function_selector::FunctionSelector, address::{EthAddress, AztecAddress}, abis::gas::Gas,\n    constants::{GAS_SETTINGS_LENGTH, DIMENSION_GAS_SETTINGS_LENGTH}, hash::pedersen_hash,\n    traits::{Deserialize, Hash, Serialize, Empty}, abis::side_effect::Ordered, utils::reader::Reader\n};\n\nstruct GasSettings {\n    da: DimensionGasSettings,\n    l1: DimensionGasSettings,\n    l2: DimensionGasSettings,\n    inclusion_fee: Field,\n}\n\nimpl GasSettings {\n    fn new(\n        da: DimensionGasSettings,\n        l1: DimensionGasSettings,\n        l2: DimensionGasSettings,\n        inclusion_fee: Field\n    ) -> Self {\n        Self { da, l1, l2, inclusion_fee }\n    }\n\n    fn get_gas_limits(self) -> Gas {\n        Gas { da_gas: self.da.gas_limit, l1_gas: self.l1.gas_limit, l2_gas: self.l2.gas_limit }\n    }\n}\n\nimpl Eq for GasSettings {\n    fn eq(self, other: Self) -> bool {\n        (self.da == other.da) & (self.l1 == other.l1) & (self.l2 == other.l2) & (self.inclusion_fee == other.inclusion_fee)\n    }\n}\n\nimpl Empty for GasSettings {\n    fn empty() -> Self {\n        GasSettings::new(\n            DimensionGasSettings::empty(),\n            DimensionGasSettings::empty(),\n            DimensionGasSettings::empty(),\n            0,\n        )\n    }\n}\n\nimpl Serialize<GAS_SETTINGS_LENGTH> for GasSettings {\n    fn serialize(self) -> [Field; GAS_SETTINGS_LENGTH] {\n        let mut serialized: BoundedVec<Field, GAS_SETTINGS_LENGTH> = BoundedVec::new();\n\n        serialized.extend_from_array(self.da.serialize());\n        serialized.extend_from_array(self.l1.serialize());\n        serialized.extend_from_array(self.l2.serialize());\n        serialized.push(self.inclusion_fee);\n    \n        serialized.storage\n    }\n}\n\nimpl Deserialize<GAS_SETTINGS_LENGTH> for GasSettings {\n    fn deserialize(serialized: [Field; GAS_SETTINGS_LENGTH]) -> GasSettings {\n        let mut reader = Reader::new(serialized);\n        GasSettings {\n            da: reader.read_struct(DimensionGasSettings::deserialize),\n            l1: reader.read_struct(DimensionGasSettings::deserialize),\n            l2: reader.read_struct(DimensionGasSettings::deserialize),\n            inclusion_fee: reader.read(),\n        }\n    }\n}\n\nstruct DimensionGasSettings {\n    gas_limit: u32,\n    teardown_gas_limit: u32,\n    max_fee_per_gas: Field,\n}\n\nimpl DimensionGasSettings {\n    pub fn new(gas_limit: u32, teardown_gas_limit: u32, max_fee_per_gas: Field) -> Self {\n        Self { gas_limit, teardown_gas_limit, max_fee_per_gas }\n    }\n}\n\nimpl Eq for DimensionGasSettings {\n    fn eq(self, other: Self) -> bool {\n        (self.gas_limit == other.gas_limit) & (self.teardown_gas_limit == other.teardown_gas_limit) & (self.max_fee_per_gas == other.max_fee_per_gas)\n    }\n\n}\n\nimpl Serialize<DIMENSION_GAS_SETTINGS_LENGTH> for DimensionGasSettings {\n    fn serialize(self) -> [Field; DIMENSION_GAS_SETTINGS_LENGTH] {\n        [\n            self.gas_limit as Field,\n            self.teardown_gas_limit as Field,\n            self.max_fee_per_gas,\n        ]\n    }\n}\n\nimpl Deserialize<DIMENSION_GAS_SETTINGS_LENGTH> for DimensionGasSettings {\n    fn deserialize(serialized: [Field; DIMENSION_GAS_SETTINGS_LENGTH]) -> DimensionGasSettings {\n        DimensionGasSettings::new(serialized[0] as u32, serialized[1] as u32, serialized[2])\n    }\n}\n\nimpl Empty for DimensionGasSettings {\n    fn empty() -> Self {\n        DimensionGasSettings::new(0,0,0)\n    }\n}\n","path":"/Users/jack-sw/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.35.1/noir-projects/noir-protocol-circuits/crates/types/src/abis/gas_settings.nr"},"134":{"source":"use crate::{\n    abis::{\n    call_context::CallContext, max_block_number::MaxBlockNumber,\n    nullifier_key_validation_request::NullifierKeyValidationRequest, read_request::ReadRequest,\n    side_effect::{SideEffect, SideEffectLinkedToNoteHash}\n},\n    constants::{\n    MAX_NOTE_HASH_READ_REQUESTS_PER_CALL, MAX_NULLIFIER_READ_REQUESTS_PER_CALL,\n    MAX_NULLIFIER_KEY_VALIDATION_REQUESTS_PER_CALL, MAX_NEW_NOTE_HASHES_PER_CALL,\n    MAX_NEW_NULLIFIERS_PER_CALL, MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL,\n    MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL, MAX_NEW_L2_TO_L1_MSGS_PER_CALL,\n    PRIVATE_CIRCUIT_PUBLIC_INPUTS_LENGTH, GENERATOR_INDEX__PRIVATE_CIRCUIT_PUBLIC_INPUTS\n},\n    header::Header, hash::pedersen_hash, messaging::l2_to_l1_message::L2ToL1Message,\n    traits::{Deserialize, Hash, Serialize, Empty}, utils::reader::Reader\n};\n\nstruct PrivateCircuitPublicInputs {\n    call_context: CallContext,\n\n    args_hash: Field,\n    returns_hash: Field,\n\n    min_revertible_side_effect_counter: u32,\n\n    max_block_number: MaxBlockNumber,\n\n    note_hash_read_requests: [SideEffect; MAX_NOTE_HASH_READ_REQUESTS_PER_CALL],\n    nullifier_read_requests: [ReadRequest; MAX_NULLIFIER_READ_REQUESTS_PER_CALL],\n    nullifier_key_validation_requests: [NullifierKeyValidationRequest; MAX_NULLIFIER_KEY_VALIDATION_REQUESTS_PER_CALL],\n\n    new_note_hashes: [SideEffect; MAX_NEW_NOTE_HASHES_PER_CALL],\n    new_nullifiers: [SideEffectLinkedToNoteHash; MAX_NEW_NULLIFIERS_PER_CALL],\n    private_call_stack_hashes: [Field; MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL],\n    public_call_stack_hashes: [Field; MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL],\n    new_l2_to_l1_msgs: [L2ToL1Message; MAX_NEW_L2_TO_L1_MSGS_PER_CALL],\n\n    start_side_effect_counter : u32,\n    end_side_effect_counter : u32,\n    encrypted_logs_hash: Field,\n    unencrypted_logs_hash: Field,\n\n    // Here so that the gas cost of this request can be measured by circuits, without actually needing to feed in the\n    // variable-length data.\n    encrypted_log_preimages_length: Field,\n    unencrypted_log_preimages_length: Field,\n\n    // Header of a block whose state is used during private execution (not the block the transaction is included in).\n    historical_header: Header,\n\n    // Note: The following 2 values are not redundant to the values in self.historical_header.global_variables because\n    // they can be different in case of a protocol upgrade. In such a situation we could be using header from a block\n    // before the upgrade took place but be using the updated protocol to execute and prove the transaction.\n    chain_id: Field,\n    version: Field,\n}\n\nimpl Eq for PrivateCircuitPublicInputs {\n    fn eq(self, other: Self) -> bool {\n        self.call_context.eq(other.call_context) &\n        self.args_hash.eq(other.args_hash) &\n        (self.returns_hash == other.returns_hash) &\n        (self.max_block_number == other.max_block_number) &\n        (self.note_hash_read_requests == other.note_hash_read_requests) &\n        (self.nullifier_read_requests == other.nullifier_read_requests) &\n        (self.nullifier_key_validation_requests == other.nullifier_key_validation_requests) &\n        (self.new_note_hashes == other.new_note_hashes) &\n        (self.new_nullifiers == other.new_nullifiers) &\n        (self.private_call_stack_hashes == other.private_call_stack_hashes) &\n        (self.public_call_stack_hashes == other.public_call_stack_hashes) &\n        (self.new_l2_to_l1_msgs == other.new_l2_to_l1_msgs) &\n        (self.start_side_effect_counter == other.start_side_effect_counter) &\n        (self.end_side_effect_counter == other.end_side_effect_counter) &\n        (self.encrypted_logs_hash == other.encrypted_logs_hash) &\n        (self.unencrypted_logs_hash == other.unencrypted_logs_hash) &\n        (self.encrypted_log_preimages_length == other.encrypted_log_preimages_length) &\n        (self.unencrypted_log_preimages_length == other.unencrypted_log_preimages_length) &\n        self.historical_header.eq(other.historical_header) &\n        self.chain_id.eq(other.chain_id) &\n        self.version.eq(other.version)\n    }\n}\n\nimpl Serialize<PRIVATE_CIRCUIT_PUBLIC_INPUTS_LENGTH> for PrivateCircuitPublicInputs {\n    fn serialize(self) -> [Field; PRIVATE_CIRCUIT_PUBLIC_INPUTS_LENGTH] {\n        let mut fields: BoundedVec<Field, PRIVATE_CIRCUIT_PUBLIC_INPUTS_LENGTH> = BoundedVec::new();\n        fields.extend_from_array(self.call_context.serialize());\n        fields.push(self.args_hash);\n        fields.push(self.returns_hash);\n\n        fields.push(self.min_revertible_side_effect_counter as Field);\n\n        fields.extend_from_array(self.max_block_number.serialize());\n\n        for i in 0..MAX_NOTE_HASH_READ_REQUESTS_PER_CALL{\n            fields.extend_from_array(self.note_hash_read_requests[i].serialize());\n        }\n        for i in 0..MAX_NULLIFIER_READ_REQUESTS_PER_CALL{\n            fields.extend_from_array(self.nullifier_read_requests[i].serialize());\n        }\n        for i in 0..MAX_NULLIFIER_KEY_VALIDATION_REQUESTS_PER_CALL{\n            fields.extend_from_array(self.nullifier_key_validation_requests[i].serialize());\n        }\n        for i in 0..MAX_NEW_NOTE_HASHES_PER_CALL{\n            fields.extend_from_array(self.new_note_hashes[i].serialize());\n        }\n        for i in 0..MAX_NEW_NULLIFIERS_PER_CALL{\n            fields.extend_from_array(self.new_nullifiers[i].serialize());\n        }\n        fields.extend_from_array(self.private_call_stack_hashes);\n        fields.extend_from_array(self.public_call_stack_hashes);\n        for i in 0..MAX_NEW_L2_TO_L1_MSGS_PER_CALL {\n            fields.extend_from_array(self.new_l2_to_l1_msgs[i].serialize());\n        }\n        fields.push(self.start_side_effect_counter as Field);\n        fields.push(self.end_side_effect_counter as Field);\n        fields.push(self.encrypted_logs_hash);\n        fields.push(self.unencrypted_logs_hash);\n        fields.push(self.encrypted_log_preimages_length);\n        fields.push(self.unencrypted_log_preimages_length);\n        fields.extend_from_array(self.historical_header.serialize());\n        fields.push(self.chain_id);\n        fields.push(self.version);\n\n        assert_eq(fields.len(), PRIVATE_CIRCUIT_PUBLIC_INPUTS_LENGTH);\n\n        fields.storage\n    }\n}\n\nimpl Deserialize<PRIVATE_CIRCUIT_PUBLIC_INPUTS_LENGTH> for PrivateCircuitPublicInputs {\n    fn deserialize(serialized: [Field; PRIVATE_CIRCUIT_PUBLIC_INPUTS_LENGTH]) -> Self {\n        // TODO(#4390): This should accept a reader ^ to avoid copying data.\n        let mut reader = Reader::new(serialized);\n        let inputs = Self {\n            call_context: reader.read_struct(CallContext::deserialize),\n            args_hash: reader.read(),\n            returns_hash: reader.read(),\n            min_revertible_side_effect_counter: reader.read() as u32,\n            max_block_number: reader.read_struct(MaxBlockNumber::deserialize),\n            note_hash_read_requests: reader.read_struct_array(SideEffect::deserialize, [SideEffect::empty(); MAX_NOTE_HASH_READ_REQUESTS_PER_CALL]),\n            nullifier_read_requests: reader.read_struct_array(ReadRequest::deserialize, [ReadRequest::empty(); MAX_NULLIFIER_READ_REQUESTS_PER_CALL]),\n            nullifier_key_validation_requests: reader.read_struct_array(NullifierKeyValidationRequest::deserialize, [NullifierKeyValidationRequest::empty(); MAX_NULLIFIER_KEY_VALIDATION_REQUESTS_PER_CALL]),\n            new_note_hashes: reader.read_struct_array(SideEffect::deserialize, [SideEffect::empty(); MAX_NEW_NOTE_HASHES_PER_CALL]),\n            new_nullifiers: reader.read_struct_array(SideEffectLinkedToNoteHash::deserialize, [SideEffectLinkedToNoteHash::empty(); MAX_NEW_NULLIFIERS_PER_CALL]),\n            private_call_stack_hashes: reader.read_array([0; MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL]),\n            public_call_stack_hashes: reader.read_array([0; MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL]),\n            new_l2_to_l1_msgs: reader.read_struct_array(L2ToL1Message::deserialize, [L2ToL1Message::empty(); MAX_NEW_L2_TO_L1_MSGS_PER_CALL]),\n            start_side_effect_counter: reader.read() as u32,\n            end_side_effect_counter: reader.read() as u32,\n            encrypted_logs_hash: reader.read() as Field,\n            unencrypted_logs_hash: reader.read() as Field,\n            encrypted_log_preimages_length: reader.read(),\n            unencrypted_log_preimages_length: reader.read(),\n            historical_header: reader.read_struct(Header::deserialize),\n            chain_id: reader.read(),\n            version: reader.read(),\n        };\n\n        reader.finish();\n        inputs\n    }\n}\n\nimpl Hash for PrivateCircuitPublicInputs {\n    fn hash(self) -> Field {\n        pedersen_hash(self.serialize(), GENERATOR_INDEX__PRIVATE_CIRCUIT_PUBLIC_INPUTS)\n    }\n}\n\n\nimpl Empty for PrivateCircuitPublicInputs {\n    fn empty() -> Self {\n        PrivateCircuitPublicInputs {\n            call_context: CallContext::empty(),\n            args_hash: 0,\n            returns_hash: 0,\n            min_revertible_side_effect_counter: 0 as u32,\n            max_block_number: MaxBlockNumber::empty(),\n            note_hash_read_requests: [SideEffect::empty(); MAX_NOTE_HASH_READ_REQUESTS_PER_CALL],\n            nullifier_read_requests: [ReadRequest::empty(); MAX_NULLIFIER_READ_REQUESTS_PER_CALL],\n            nullifier_key_validation_requests: [NullifierKeyValidationRequest::empty(); MAX_NULLIFIER_KEY_VALIDATION_REQUESTS_PER_CALL],\n            new_note_hashes: [SideEffect::empty(); MAX_NEW_NOTE_HASHES_PER_CALL],\n            new_nullifiers: [SideEffectLinkedToNoteHash::empty(); MAX_NEW_NULLIFIERS_PER_CALL],\n            private_call_stack_hashes: [0; MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL],\n            public_call_stack_hashes: [0; MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL],\n            new_l2_to_l1_msgs: [L2ToL1Message::empty(); MAX_NEW_L2_TO_L1_MSGS_PER_CALL],\n            start_side_effect_counter : 0 as u32,\n            end_side_effect_counter : 0 as u32,\n            encrypted_logs_hash: 0,\n            unencrypted_logs_hash: 0,\n            encrypted_log_preimages_length: 0,\n            unencrypted_log_preimages_length: 0,\n            historical_header: Header::empty(),\n            chain_id: 0,\n            version: 0,\n        }\n    }\n}\n\n#[test]\nfn serialization_of_empty() {\n    let pcpi = PrivateCircuitPublicInputs::empty();\n    let serialized = pcpi.serialize();\n    let deserialized = PrivateCircuitPublicInputs::deserialize(serialized);\n    assert(pcpi.eq(deserialized));\n}\n\n#[test]\nfn empty_hash() {\n    let inputs = PrivateCircuitPublicInputs::empty();\n    let hash = inputs.hash();\n\n    // Value from private_circuit_public_inputs.test.ts \"computes empty item hash\" test\n    let test_data_empty_hash = 0x02e09d8c4897d560bd4caf05ab45fa22e1d4a251bf5b5e0448310a7f40f7a0b8;\n    assert_eq(hash, test_data_empty_hash);\n}\n","path":"/Users/jack-sw/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.35.1/noir-projects/noir-protocol-circuits/crates/types/src/abis/private_circuit_public_inputs.nr"},"135":{"source":"use crate::{\n    address::AztecAddress, constants::GENERATOR_INDEX__SIDE_EFFECT,\n    traits::{Empty, Hash, Serialize, Deserialize}\n};\nuse dep::std::cmp::Eq;\n\nglobal SIDE_EFFECT_SERIALIZED_LEN = 2;\n\ntrait Ordered {\n    fn counter(self) -> u32;\n}\n\ntrait OrderedValue<T> where T: Eq {\n    fn value(self) -> T;\n    fn counter(self) -> u32;\n}\n\ntrait ContractScopedOrderedValue<T> where T: Eq {\n    fn value(self) -> T;\n    fn counter(self) -> u32;\n    fn contract_address(self) -> AztecAddress;\n}\n\nstruct SideEffect {\n    value: Field,\n    counter: u32,\n}\n\nimpl Ordered for SideEffect {\n    fn counter(self) -> u32 {\n        self.counter\n    }\n}\n\nimpl OrderedValue<Field> for SideEffect {\n    fn value(self) -> Field {\n        self.value\n    }\n    fn counter(self) -> u32 {\n        self.counter\n    }\n}\n\nimpl Eq for SideEffect {\n    fn eq(self, side_effect: SideEffect) -> bool {\n        (self.value == side_effect.value)\n        & (self.counter == side_effect.counter)\n    }\n}\n\nimpl Empty for SideEffect {\n    fn empty() -> Self {\n        SideEffect {\n            value: 0,\n            counter: 0,\n        }\n    }\n}\n\nimpl Hash for SideEffect {\n    fn hash(self) -> Field {\n        dep::std::hash::pedersen_hash_with_separator(\n            self.serialize() , GENERATOR_INDEX__SIDE_EFFECT)\n    }\n}\n\nimpl Serialize<SIDE_EFFECT_SERIALIZED_LEN> for SideEffect {\n    fn serialize(self) -> [Field; SIDE_EFFECT_SERIALIZED_LEN] {\n        [self.value, self.counter as Field]\n    }\n}\n\nimpl Deserialize<SIDE_EFFECT_SERIALIZED_LEN> for SideEffect {\n    fn deserialize(values: [Field; SIDE_EFFECT_SERIALIZED_LEN]) -> Self {\n        Self {\n            value: values[0],\n            counter: values[1] as u32,\n        }\n    }\n}\n\nstruct SideEffectLinkedToNoteHash{\n    value: Field,\n    note_hash: Field,\n    counter: u32,\n}\n\nimpl Ordered for SideEffectLinkedToNoteHash {\n    fn counter(self) -> u32 {\n        self.counter\n    }\n}\n\nimpl OrderedValue<Field> for SideEffectLinkedToNoteHash {\n    fn value(self) -> Field {\n        self.value\n    }\n    fn counter(self) -> u32 {\n        self.counter\n    }\n}\n\nimpl Eq for SideEffectLinkedToNoteHash {\n    fn eq(self, side_effect: SideEffectLinkedToNoteHash) -> bool {\n        (self.value == side_effect.value)\n            & (self.note_hash == side_effect.note_hash) \n            & (self.counter == side_effect.counter)\n    }\n}\n\nimpl Empty for SideEffectLinkedToNoteHash {\n    fn empty() -> Self {\n        SideEffectLinkedToNoteHash {\n            value: 0,\n            note_hash: 0,\n            counter: 0,\n        }\n    }\n}\n\nimpl Hash for SideEffectLinkedToNoteHash {\n    fn hash(self) -> Field {\n        dep::std::hash::pedersen_hash_with_separator(\n            self.serialize(),\n        GENERATOR_INDEX__SIDE_EFFECT)\n    }\n}\n\nimpl Serialize<3> for SideEffectLinkedToNoteHash {\n    fn serialize(self) -> [Field; 3] {\n        [self.value, self.note_hash, self.counter as Field]\n    }\n}\n\nimpl Deserialize<3> for SideEffectLinkedToNoteHash {\n    fn deserialize(values: [Field; 3]) -> Self {\n        Self {\n            value: values[0],\n            note_hash: values[1],\n            counter: values[2] as u32,\n        }\n    }\n}\n","path":"/Users/jack-sw/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.35.1/noir-projects/noir-protocol-circuits/crates/types/src/abis/side_effect.nr"},"136":{"source":"use crate::{\n    abis::function_selector::FunctionSelector, address::{EthAddress, AztecAddress},\n    constants::{CALL_CONTEXT_LENGTH, GENERATOR_INDEX__CALL_CONTEXT}, hash::pedersen_hash,\n    traits::{Deserialize, Hash, Serialize, Empty}, abis::side_effect::Ordered,\n    abis::{gas_settings::GasSettings, gas::Gas}, utils::reader::Reader\n};\n\n// docs:start:call-context\nstruct CallContext {\n    msg_sender : AztecAddress,\n    storage_contract_address : AztecAddress,\n    portal_contract_address : EthAddress,\n    function_selector : FunctionSelector,\n    gas_left: Gas,\n\n    is_delegate_call : bool,\n    is_static_call : bool,\n\n    side_effect_counter : u32,\n\n    gas_settings: GasSettings,\n    transaction_fee: Field,\n}\n// docs:end:call-context\n\nimpl CallContext {\n    fn assert_is_zero(self) {\n        let serialized: [Field; CALL_CONTEXT_LENGTH] = self.serialize();\n\n        for i in 0..CALL_CONTEXT_LENGTH {\n            assert(serialized[i] == 0);\n        }\n    }\n}\n\nimpl Eq for CallContext {\n    fn eq(self, other: CallContext) -> bool {\n        self.serialize() == other.serialize()\n    }\n}\n\nimpl Hash for CallContext {\n    fn hash(self) -> Field {\n        pedersen_hash(self.serialize(), GENERATOR_INDEX__CALL_CONTEXT)\n    }\n}\n\nimpl Serialize<CALL_CONTEXT_LENGTH> for CallContext {\n    fn serialize(self) -> [Field; CALL_CONTEXT_LENGTH] {\n        let mut serialized: BoundedVec<Field, CALL_CONTEXT_LENGTH> = BoundedVec::new();\n\n        serialized.push(self.msg_sender.to_field());\n        serialized.push(self.storage_contract_address.to_field());\n        serialized.push(self.portal_contract_address.to_field());\n        serialized.push(self.function_selector.to_field());\n        serialized.extend_from_array(self.gas_left.serialize());\n        serialized.push(self.is_delegate_call as Field);\n        serialized.push(self.is_static_call as Field);\n        serialized.push(self.side_effect_counter as Field);\n        serialized.extend_from_array(self.gas_settings.serialize());\n        serialized.push(self.transaction_fee);\n    \n        serialized.storage\n    }\n}\n\nimpl Deserialize<CALL_CONTEXT_LENGTH> for CallContext {\n    fn deserialize(serialized: [Field; CALL_CONTEXT_LENGTH]) -> CallContext {\n        let mut reader = Reader::new(serialized);\n        CallContext {\n            msg_sender: AztecAddress::from_field(reader.read()),\n            storage_contract_address: AztecAddress::from_field(reader.read()),\n            portal_contract_address: EthAddress::from_field(reader.read()),\n            function_selector: FunctionSelector::from_field(reader.read()),\n            gas_left: reader.read_struct(Gas::deserialize),\n            is_delegate_call: reader.read() as bool,\n            is_static_call: reader.read() as bool,\n            side_effect_counter: reader.read() as u32,\n            gas_settings: reader.read_struct(GasSettings::deserialize),\n            transaction_fee: reader.read(),\n        }\n    }\n}\n\nimpl Empty for CallContext {\n    fn empty() -> Self {\n        CallContext {\n            msg_sender: AztecAddress::empty(),\n            storage_contract_address: AztecAddress::empty(),\n            portal_contract_address: EthAddress::empty(),\n            function_selector: FunctionSelector::empty(),\n            gas_left: Gas::empty(),\n            is_delegate_call: false,\n            is_static_call: false,\n            side_effect_counter: 0,\n            gas_settings: GasSettings::empty(),\n            transaction_fee: 0,\n        }\n    }\n}\n\n#[test]\nfn serialize_deserialize_of_empty() {\n    let context = CallContext::empty();\n    let serialized = context.serialize();\n    let deserialized = CallContext::deserialize(serialized);\n    assert(context.eq(deserialized));\n}\n\n#[test]\nfn assert_is_zero() {\n    let context = CallContext::empty();\n    context.assert_is_zero();\n}\n\n#[test(should_fail)]\nfn not_zero_assert_is_zero() {\n    let mut context = CallContext::empty();\n    context.is_delegate_call = true;\n    context.assert_is_zero();\n}\n\n#[test]\nfn test_eq() {\n    let mut context1 = CallContext::empty();\n    let mut context2 = CallContext::empty();\n\n    context1.is_delegate_call = true;\n    context2.is_delegate_call = true;\n\n    let address: AztecAddress = AztecAddress::from_field(69420);\n    context1.msg_sender = address;\n    context2.msg_sender = address;\n\n    assert(context1.eq(context2));\n}\n\n#[test(should_fail)]\nfn not_eq_test_eq() {\n    let mut context1 = CallContext::empty();\n    let mut context2 = CallContext::empty();\n\n    context1.is_delegate_call = true;\n    context2.is_delegate_call = false;\n\n    let address1: AztecAddress = AztecAddress::from_field(69420);\n    let address2: AztecAddress = AztecAddress::from_field(42069);\n\n    context1.msg_sender = address1;\n    context2.msg_sender = address2;\n\n    assert(context1.eq(context2));\n}\n\n#[test]\nfn hash_smoke() {\n    let context = CallContext::empty();\n    let _hashed = context.hash();\n}\n","path":"/Users/jack-sw/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.35.1/noir-projects/noir-protocol-circuits/crates/types/src/abis/call_context.nr"},"137":{"source":"use crate::{\n    abis::{\n    call_context::CallContext, read_request::ReadRequest,\n    side_effect::{SideEffect, SideEffectLinkedToNoteHash}, gas::Gas\n},\n    address::AztecAddress,\n    constants::{\n    MAX_NEW_L2_TO_L1_MSGS_PER_CALL, MAX_NEW_NULLIFIERS_PER_CALL, MAX_NEW_NOTE_HASHES_PER_CALL,\n    MAX_NULLIFIER_READ_REQUESTS_PER_CALL, MAX_NULLIFIER_NON_EXISTENT_READ_REQUESTS_PER_CALL,\n    MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL, MAX_PUBLIC_DATA_READS_PER_CALL,\n    MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL, GENERATOR_INDEX__PUBLIC_CIRCUIT_PUBLIC_INPUTS,\n    PUBLIC_CIRCUIT_PUBLIC_INPUTS_LENGTH\n},\n    contrakt::{storage_read::StorageRead, storage_update_request::StorageUpdateRequest},\n    hash::pedersen_hash, header::Header, messaging::l2_to_l1_message::L2ToL1Message,\n    traits::{Hash, Serialize, Deserialize, Empty}, utils::reader::Reader\n};\n\nstruct PublicCircuitPublicInputs{\n    call_context: CallContext,\n\n    args_hash: Field,\n    returns_hash: Field,\n\n    nullifier_read_requests: [ReadRequest; MAX_NULLIFIER_READ_REQUESTS_PER_CALL],\n    nullifier_non_existent_read_requests: [ReadRequest; MAX_NULLIFIER_NON_EXISTENT_READ_REQUESTS_PER_CALL],\n    contract_storage_update_requests: [StorageUpdateRequest; MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL],\n    contract_storage_reads: [StorageRead; MAX_PUBLIC_DATA_READS_PER_CALL],\n\n    // todo: add sideeffect ranges for the input to these hashes\n    public_call_stack_hashes: [Field; MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL],\n    new_note_hashes: [SideEffect; MAX_NEW_NOTE_HASHES_PER_CALL],\n    new_nullifiers: [SideEffectLinkedToNoteHash; MAX_NEW_NULLIFIERS_PER_CALL],\n    new_l2_to_l1_msgs: [L2ToL1Message; MAX_NEW_L2_TO_L1_MSGS_PER_CALL],\n\n    start_side_effect_counter: u32,\n    end_side_effect_counter: u32,\n\n    unencrypted_logs_hash: Field,\n\n    // Here so that the gas cost of this request can be measured by circuits, without actually needing to feed in the\n    // variable-length data.\n    unencrypted_log_preimages_length: Field,\n\n    // Header of a block whose state is used during public execution. Set by sequencer to be a header of a block\n    // previous to the one in which the tx is included.\n    historical_header: Header,\n\n    prover_address: AztecAddress,\n\n    revert_code: u8,\n    \n    // gas left after execution is completed\n    gas_left: Gas,\n}\n\nimpl Eq for PublicCircuitPublicInputs {\n    fn eq(self, other: Self) -> bool {\n        self.serialize() == other.serialize()\n    }\n}\n\nimpl Serialize<PUBLIC_CIRCUIT_PUBLIC_INPUTS_LENGTH> for PublicCircuitPublicInputs {\n    fn serialize(self) -> [Field; PUBLIC_CIRCUIT_PUBLIC_INPUTS_LENGTH] {\n        let mut fields: BoundedVec<Field, PUBLIC_CIRCUIT_PUBLIC_INPUTS_LENGTH> = BoundedVec::new();\n        fields.extend_from_array(self.call_context.serialize());\n        fields.push(self.args_hash);\n        fields.push(self.returns_hash);\n        for i in 0..MAX_NULLIFIER_READ_REQUESTS_PER_CALL {\n            fields.extend_from_array(self.nullifier_read_requests[i].serialize());\n        }\n        for i in 0..MAX_NULLIFIER_NON_EXISTENT_READ_REQUESTS_PER_CALL {\n            fields.extend_from_array(self.nullifier_non_existent_read_requests[i].serialize());\n        }\n        for i in 0..MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL {\n            fields.extend_from_array(self.contract_storage_update_requests[i].serialize());\n        }\n        for i in 0..MAX_PUBLIC_DATA_READS_PER_CALL {\n            fields.extend_from_array(self.contract_storage_reads[i].serialize());\n        }\n        fields.extend_from_array(self.public_call_stack_hashes);\n\n        for i in 0..MAX_NEW_NOTE_HASHES_PER_CALL {\n            fields.extend_from_array(self.new_note_hashes[i].serialize());\n        }\n        for i in 0..MAX_NEW_NULLIFIERS_PER_CALL {\n            fields.extend_from_array(self.new_nullifiers[i].serialize());\n        }\n        for i in 0..MAX_NEW_L2_TO_L1_MSGS_PER_CALL {\n            fields.extend_from_array(self.new_l2_to_l1_msgs[i].serialize());\n        }\n\n        fields.push(self.start_side_effect_counter as Field);\n        fields.push(self.end_side_effect_counter as Field);\n\n        fields.push(self.unencrypted_logs_hash);\n        fields.push(self.unencrypted_log_preimages_length);\n        fields.extend_from_array(self.historical_header.serialize());\n        fields.push(self.prover_address.to_field());\n        fields.push(self.revert_code as Field);\n        fields.extend_from_array(self.gas_left.serialize());\n        fields.storage\n    }\n}\n\nimpl Deserialize<PUBLIC_CIRCUIT_PUBLIC_INPUTS_LENGTH> for PublicCircuitPublicInputs {\n    fn deserialize(serialized: [Field; PUBLIC_CIRCUIT_PUBLIC_INPUTS_LENGTH]) -> Self {\n        // TODO(#4390): This should accept a reader ^ to avoid copying data.\n        let mut reader = Reader::new(serialized);\n        let inputs = PublicCircuitPublicInputs {\n            call_context: reader.read_struct(CallContext::deserialize),\n            args_hash: reader.read(),\n            returns_hash: reader.read(),\n            nullifier_read_requests: reader.read_struct_array(ReadRequest::deserialize, [ReadRequest::empty(); MAX_NULLIFIER_READ_REQUESTS_PER_CALL]),\n            nullifier_non_existent_read_requests: reader.read_struct_array(ReadRequest::deserialize, [ReadRequest::empty(); MAX_NULLIFIER_NON_EXISTENT_READ_REQUESTS_PER_CALL]),\n            contract_storage_update_requests: reader.read_struct_array(StorageUpdateRequest::deserialize, [StorageUpdateRequest::empty(); MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL]),\n            contract_storage_reads: reader.read_struct_array(StorageRead::deserialize, [StorageRead::empty(); MAX_PUBLIC_DATA_READS_PER_CALL]),\n            public_call_stack_hashes: reader.read_array([0; MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL]),\n            new_note_hashes: reader.read_struct_array(SideEffect::deserialize, [SideEffect::empty(); MAX_NEW_NOTE_HASHES_PER_CALL]),\n            new_nullifiers: reader.read_struct_array(SideEffectLinkedToNoteHash::deserialize, [SideEffectLinkedToNoteHash::empty(); MAX_NEW_NULLIFIERS_PER_CALL]),\n            new_l2_to_l1_msgs: reader.read_struct_array(L2ToL1Message::deserialize, [L2ToL1Message::empty(); MAX_NEW_L2_TO_L1_MSGS_PER_CALL]),\n            start_side_effect_counter: reader.read() as u32,\n            end_side_effect_counter: reader.read() as u32,\n            unencrypted_logs_hash: reader.read() as Field,\n            unencrypted_log_preimages_length: reader.read(),\n            historical_header: reader.read_struct(Header::deserialize),\n            prover_address: reader.read_struct(AztecAddress::deserialize),\n            revert_code: reader.read() as u8,\n            gas_left: reader.read_struct(Gas::deserialize),\n        };\n\n        reader.finish();\n        inputs\n    }\n}\n\nimpl Hash for PublicCircuitPublicInputs {\n    fn hash(self) -> Field {\n        pedersen_hash(self.serialize(), GENERATOR_INDEX__PUBLIC_CIRCUIT_PUBLIC_INPUTS)\n    }\n}\n\nimpl Empty for PublicCircuitPublicInputs {\n    fn empty() -> Self {\n        PublicCircuitPublicInputs {\n            call_context: CallContext::empty(),\n            args_hash: 0,\n            returns_hash: 0,\n            nullifier_read_requests: [ReadRequest::empty(); MAX_NULLIFIER_READ_REQUESTS_PER_CALL],\n            nullifier_non_existent_read_requests: [ReadRequest::empty(); MAX_NULLIFIER_NON_EXISTENT_READ_REQUESTS_PER_CALL],\n            contract_storage_update_requests: [StorageUpdateRequest::empty(); MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL],\n            contract_storage_reads: [StorageRead::empty(); MAX_PUBLIC_DATA_READS_PER_CALL],\n            public_call_stack_hashes: [0; MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL],\n            new_note_hashes: [SideEffect::empty(); MAX_NEW_NOTE_HASHES_PER_CALL],\n            new_nullifiers: [SideEffectLinkedToNoteHash::empty(); MAX_NEW_NULLIFIERS_PER_CALL],\n            new_l2_to_l1_msgs: [L2ToL1Message::empty(); MAX_NEW_L2_TO_L1_MSGS_PER_CALL],\n            start_side_effect_counter: 0 as u32,\n            end_side_effect_counter: 0 as u32,\n            unencrypted_logs_hash: 0,\n            unencrypted_log_preimages_length: 0,\n            historical_header: Header::empty(),\n            prover_address: AztecAddress::zero(),\n            revert_code: 0 as u8,\n            gas_left: Gas::empty(),\n        }\n    }\n}\n\n#[test]\nfn serialization_of_empty() {\n    let pcpi = PublicCircuitPublicInputs::empty();\n    let serialized = pcpi.serialize();\n    let deserialized = PublicCircuitPublicInputs::deserialize(serialized);\n    assert(pcpi.eq(deserialized));\n}\n\n#[test]\nfn empty_hash() {\n    let inputs = PublicCircuitPublicInputs::empty();\n    let hash = inputs.hash();\n\n    // Value from public_circuit_public_inputs.test.ts \"computes empty item hash\" test\n    let test_data_empty_hash = 0x00147d3d2cde08ee1046bf73cb6664c2bdf11b43c5dca0e72f4137f354bdad25;\n    assert_eq(hash, test_data_empty_hash);\n}\n","path":"/Users/jack-sw/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.35.1/noir-projects/noir-protocol-circuits/crates/types/src/abis/public_circuit_public_inputs.nr"},"144":{"source":"global NULLIFIER_LEAF_PREIMAGE_LENGTH: u64 = 3;\n\nuse crate::{merkle_tree::leaf_preimage::{LeafPreimage, IndexedTreeLeafPreimage}, traits::{Empty, Hash}};\n\nstruct NullifierLeafPreimage {\n    nullifier : Field,\n    next_nullifier :Field,\n    next_index : u64,\n}\n\nimpl Empty for NullifierLeafPreimage {\n    fn empty() -> Self {\n        Self {\n            nullifier : 0,\n            next_nullifier : 0,\n            next_index : 0,\n        }\n    }\n}\n\nimpl Hash for NullifierLeafPreimage {\n    fn hash(self) -> Field {\n        if self.is_empty() {\n            0\n        } else {\n            dep::std::hash::pedersen_hash(self.serialize())\n        }\n    }\n}\n\nimpl LeafPreimage for NullifierLeafPreimage {\n    fn get_key(self) -> Field {\n        self.nullifier\n    }\n\n    fn as_leaf(self) -> Field {\n        self.hash()\n    }\n}\n\nimpl IndexedTreeLeafPreimage for NullifierLeafPreimage {\n    fn get_key(self) -> Field {\n        self.nullifier\n    }\n\n    fn get_next_key(self) -> Field {\n        self.next_nullifier\n    }\n\n    fn as_leaf(self) -> Field {\n        self.hash()\n    }\n}\n\nimpl NullifierLeafPreimage {\n    pub fn is_empty(self) -> bool {\n        (self.nullifier == 0) & (self.next_nullifier == 0) & (self.next_index == 0)\n    }\n\n    pub fn serialize(self) -> [Field; NULLIFIER_LEAF_PREIMAGE_LENGTH] {\n        [self.nullifier, self.next_nullifier, self.next_index as Field]\n    }\n\n    pub fn deserialize(fields: [Field; NULLIFIER_LEAF_PREIMAGE_LENGTH]) -> Self {\n        Self { nullifier: fields[0], next_nullifier: fields[1], next_index: fields[2] as u64 }\n    }\n}\n","path":"/Users/jack-sw/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.35.1/noir-projects/noir-protocol-circuits/crates/types/src/abis/nullifier_leaf_preimage.nr"},"145":{"source":"use crate::abis::{function_data::FunctionData, public_circuit_public_inputs::PublicCircuitPublicInputs};\nuse crate::address::AztecAddress;\nuse crate::constants::GENERATOR_INDEX__CALL_STACK_ITEM;\nuse crate::traits::Hash;\n\nstruct PublicCallStackItem {\n    contract_address: AztecAddress,\n    public_inputs: PublicCircuitPublicInputs,\n    function_data: FunctionData,\n    // True if this call stack item represents a request to execute a function rather than a\n    // fulfilled execution. Used when enqueuing calls from private to public functions.\n    is_execution_request: bool,\n}\n\nimpl Hash for PublicCallStackItem {\n    fn hash(self) -> Field {\n        let item = if self.is_execution_request {\n            self.as_execution_request()\n        } else {\n            self\n        };\n\n        dep::std::hash::pedersen_hash_with_separator([\n            item.contract_address.to_field(),\n            item.function_data.hash(),\n            item.public_inputs.hash(),\n        ], GENERATOR_INDEX__CALL_STACK_ITEM)\n    }\n}\n\nimpl PublicCallStackItem {\n    fn as_execution_request(self) -> Self {\n        let public_inputs = self.public_inputs;\n        let mut request_public_inputs = PublicCircuitPublicInputs::empty();\n        request_public_inputs.call_context = public_inputs.call_context;\n        request_public_inputs.args_hash = public_inputs.args_hash;\n\n        let call_stack_item = PublicCallStackItem {\n            contract_address: self.contract_address,\n            function_data: self.function_data,\n            is_execution_request: true,\n            public_inputs: request_public_inputs\n        };\n        call_stack_item\n    }\n}\n\nmod tests {\n    use crate::{\n        abis::{\n        function_data::FunctionData, function_selector::FunctionSelector,\n        public_circuit_public_inputs::PublicCircuitPublicInputs,\n        public_call_stack_item::PublicCallStackItem, side_effect::SideEffect\n    },\n        address::AztecAddress, constants::GENERATOR_INDEX__CALL_STACK_ITEM, traits::Hash\n    };\n\n    #[test]\n    fn compute_call_stack_item_request_hash() {\n        let contract_address = AztecAddress::from_field(1);\n        let function_data = FunctionData { selector: FunctionSelector::from_u32(2), is_private: false };\n\n        let mut public_inputs = PublicCircuitPublicInputs::empty();\n        public_inputs.new_note_hashes[0] = SideEffect{\n            value: 1,\n            counter: 0,\n        };\n\n        let call_stack_item = PublicCallStackItem { contract_address, public_inputs, is_execution_request: true, function_data };\n\n        // Value from public_call_stack_item.test.ts \"Computes a callstack item request hash\" test\n        let test_data_call_stack_item_request_hash = 0x12c634ebadf4209e2def6cac0753f151422faf11237dc4f136bc17a84c8c2d76;\n        assert_eq(call_stack_item.hash(), test_data_call_stack_item_request_hash);\n    }\n\n    #[test]\n    fn compute_call_stack_item_hash() {\n        let contract_address = AztecAddress::from_field(1);\n        let function_data = FunctionData { selector: FunctionSelector::from_u32(2), is_private: false };\n\n        let mut public_inputs = PublicCircuitPublicInputs::empty();\n        public_inputs.new_note_hashes[0] = SideEffect{\n            value: 1,\n            counter: 0,\n        };\n\n        let call_stack_item = PublicCallStackItem { contract_address, public_inputs, is_execution_request: false, function_data };\n\n        // Value from public_call_stack_item.test.ts \"Computes a callstack item hash\" test\n        let test_data_call_stack_item_hash = 0x0864975afc9bec7eb7ec5b5608bbef648ec9afead1bbe986d0af148e3c944b9b;\n        assert_eq(call_stack_item.hash(), test_data_call_stack_item_hash);\n    }\n}\n","path":"/Users/jack-sw/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.35.1/noir-projects/noir-protocol-circuits/crates/types/src/abis/public_call_stack_item.nr"},"152":{"source":"use crate::{\n    abis::function_selector::FunctionSelector,\n    constants::{GENERATOR_INDEX__FUNCTION_DATA, FUNCTION_DATA_LENGTH}, hash::pedersen_hash,\n    traits::{Serialize, Hash, Deserialize, Empty}\n};\n\nstruct FunctionData {\n    selector : FunctionSelector,\n    is_private : bool,\n}\n\nimpl Eq for FunctionData {\n    fn eq(self, other: Self) -> bool {\n        self.selector.eq(other.selector) &\n        self.is_private == other.is_private\n    }\n}\n\nimpl Serialize<FUNCTION_DATA_LENGTH> for FunctionData {\n    // A field is ~256 bits\n    // TODO(https://github.com/AztecProtocol/aztec-packages/issues/3057): Since, function data can fit into a Field,\n    // This method will simply return a bit packed Field instead of hashing\n    fn serialize(self) -> [Field; FUNCTION_DATA_LENGTH] {\n        [\n            self.selector.to_field(),\n            self.is_private as Field,\n        ]\n    }\n}\n\nimpl Deserialize<FUNCTION_DATA_LENGTH> for FunctionData {\n    fn deserialize(serialized: [Field; FUNCTION_DATA_LENGTH]) -> Self {\n        Self {\n            selector: FunctionSelector::from_field(serialized[0]),\n            is_private: serialized[1] as bool,\n        }\n    }\n}\n\nimpl Hash for FunctionData {\n    fn hash(self) -> Field {\n        pedersen_hash(self.serialize(), GENERATOR_INDEX__FUNCTION_DATA)\n    }\n}\n\nimpl Empty for FunctionData {\n    fn empty() -> Self {\n        FunctionData {\n            selector: FunctionSelector::empty(),\n            is_private: false,\n        }\n    }\n}\n\n#[test]\nfn serialization_of_empty() {\n    let data = FunctionData::empty();\n    let serialized = data.serialize();\n    let deserialized = FunctionData::deserialize(serialized);\n    assert(data.eq(deserialized));\n}\n\n#[test]\nfn empty_hash() {\n    let data = FunctionData::empty();\n    let hash = data.hash();\n\n    // Value from function_data.test.ts \"computes empty item hash\" test\n    let test_data_empty_hash = 0x27b1d0839a5b23baf12a8d195b18ac288fcf401afb2f70b8a4b529ede5fa9fed;\n    assert_eq(hash, test_data_empty_hash);\n}\n","path":"/Users/jack-sw/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.35.1/noir-projects/noir-protocol-circuits/crates/types/src/abis/function_data.nr"},"157":{"source":"use crate::utils::field::field_from_bytes;\nuse dep::std::cmp::Eq;\nuse crate::traits::{Serialize, Deserialize, FromField, ToField, Empty};\n\nglobal SELECTOR_SIZE = 4;\n\nstruct FunctionSelector {\n    // 1st 4-bytes of abi-encoding of function.\n    inner: u32,\n}\n\nimpl Eq for FunctionSelector {\n    fn eq(self, function_selector: FunctionSelector) -> bool {\n        function_selector.inner == self.inner\n    }\n}\n\nimpl Serialize<1> for FunctionSelector {\n    fn serialize(self: Self) -> [Field; 1] {\n        [self.inner as Field]\n    }\n}\n\nimpl Deserialize<1> for FunctionSelector {\n    fn deserialize(fields: [Field; 1]) -> Self {\n        Self {\n            inner: fields[0] as u32\n        }\n    }\n}\n\nimpl FromField for FunctionSelector {\n    fn from_field(field: Field) -> Self {\n        Self { inner: field as u32 }\n    }\n}\n\nimpl ToField for FunctionSelector {\n    fn to_field(self) -> Field {\n        self.inner as Field\n    }\n}\n\nimpl Empty for FunctionSelector {\n    fn empty() -> Self {\n        Self { inner: 0 as u32 }\n    }\n}\n\nimpl FunctionSelector {\n    pub fn from_u32(value: u32) -> Self {\n        Self { inner: value }\n    }\n\n    pub fn from_signature<N>(signature: str<N>) -> Self {\n        let bytes = signature.as_bytes();\n        let hash = dep::std::hash::keccak256(bytes, bytes.len() as u32);\n\n        let mut selector_be_bytes = [0; SELECTOR_SIZE];\n        for i in 0..SELECTOR_SIZE {\n            selector_be_bytes[i] = hash[i];\n        }\n\n        FunctionSelector::from_field(field_from_bytes(selector_be_bytes, true))\n    }\n\n    pub fn zero() -> Self {\n        Self { inner: 0 }\n    }\n}\n","path":"/Users/jack-sw/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.35.1/noir-projects/noir-protocol-circuits/crates/types/src/abis/function_selector.nr"},"159":{"source":"use dep::std::cmp::Eq;\n\nstruct AppendOnlyTreeSnapshot {\n    root : Field,\n    // TODO(Alvaro) change this to a u64\n    next_available_leaf_index : u32\n}\n\nglobal APPEND_ONLY_TREE_SNAPSHOT_LENGTH: u64 = 2;\n\nimpl AppendOnlyTreeSnapshot {\n    pub fn serialize(self) -> [Field; APPEND_ONLY_TREE_SNAPSHOT_LENGTH] {\n        [self.root, self.next_available_leaf_index as Field]\n    }\n\n    pub fn deserialize(serialized: [Field; APPEND_ONLY_TREE_SNAPSHOT_LENGTH]) -> AppendOnlyTreeSnapshot {\n        AppendOnlyTreeSnapshot { root: serialized[0], next_available_leaf_index: serialized[1] as u32 }\n    }\n\n    pub fn zero() -> Self {\n        Self { root: 0, next_available_leaf_index: 0 }\n    }\n}\n\nimpl Eq for AppendOnlyTreeSnapshot {\n    fn eq(self, other : AppendOnlyTreeSnapshot) -> bool {\n        (self.root == other.root) & (self.next_available_leaf_index == other.next_available_leaf_index)\n    }\n}","path":"/Users/jack-sw/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.35.1/noir-projects/noir-protocol-circuits/crates/types/src/abis/append_only_tree_snapshot.nr"},"161":{"source":"use crate::{\n    abis::side_effect::{OrderedValue, ContractScopedOrderedValue},\n    traits::{Empty, Serialize, Deserialize}, address::AztecAddress\n};\nuse dep::std::cmp::Eq;\n\nglobal READ_REQUEST_SERIALIZED_LEN = 2;\nglobal READ_REQUEST_CONTEXT_SERIALIZED_LEN = 3;\n\nstruct ReadRequest {\n    value: Field,\n    counter: u32,\n}\n\nimpl OrderedValue<Field> for ReadRequest {\n    fn value(self) -> Field {\n        self.value\n    }\n    fn counter(self) -> u32 {\n        self.counter\n    }\n}\n\nimpl Eq for ReadRequest {\n    fn eq(self, read_request: ReadRequest) -> bool {\n        (self.value == read_request.value)\n        & (self.counter == read_request.counter)\n    }\n}\n\nimpl Empty for ReadRequest {\n    fn empty() -> Self {\n        ReadRequest {\n            value: 0,\n            counter: 0,\n        }\n    }\n}\n\nimpl Serialize<READ_REQUEST_SERIALIZED_LEN> for ReadRequest {\n    fn serialize(self) -> [Field; READ_REQUEST_SERIALIZED_LEN] {\n        [self.value, self.counter as Field]\n    }\n}\n\nimpl Deserialize<READ_REQUEST_SERIALIZED_LEN> for ReadRequest {\n    fn deserialize(values: [Field; READ_REQUEST_SERIALIZED_LEN]) -> Self {\n        Self {\n            value: values[0],\n            counter: values[1] as u32,\n        }\n    }\n}\n\nimpl ReadRequest {\n    pub fn to_context(self, contract_address: AztecAddress) -> ReadRequestContext {\n        ReadRequestContext { value: self.value, counter: self.counter, contract_address }\n    }\n}\n\nstruct ReadRequestContext {\n    value: Field,\n    counter: u32,\n    contract_address: AztecAddress,\n}\n\nimpl OrderedValue<Field> for ReadRequestContext {\n    fn value(self) -> Field {\n        self.value\n    }\n    fn counter(self) -> u32 {\n        self.counter\n    }\n}\n\nimpl ContractScopedOrderedValue<Field> for ReadRequestContext {\n    fn value(self) -> Field {\n        self.value\n    }\n    fn counter(self) -> u32 {\n        self.counter\n    }\n    fn contract_address(self) -> AztecAddress {\n        self.contract_address\n    }\n}\n\nimpl Eq for ReadRequestContext {\n    fn eq(self, read_request: ReadRequestContext) -> bool {\n        (self.value == read_request.value)\n        & (self.counter == read_request.counter)\n        & (self.contract_address.eq(read_request.contract_address))\n    }\n}\n\nimpl Empty for ReadRequestContext {\n    fn empty() -> Self {\n        ReadRequestContext {\n            value: 0,\n            counter: 0,\n            contract_address: AztecAddress::empty(),\n        }\n    }\n}\n\nimpl Serialize<READ_REQUEST_CONTEXT_SERIALIZED_LEN> for ReadRequestContext {\n    fn serialize(self) -> [Field; READ_REQUEST_CONTEXT_SERIALIZED_LEN] {\n        [self.value, self.counter as Field, self.contract_address.to_field()]\n    }\n}\n\nimpl Deserialize<READ_REQUEST_CONTEXT_SERIALIZED_LEN> for ReadRequestContext {\n    fn deserialize(values: [Field; READ_REQUEST_CONTEXT_SERIALIZED_LEN]) -> Self {\n        Self {\n            value: values[0],\n            counter: values[1] as u32,\n            contract_address: AztecAddress::from_field(values[2]),\n        }\n    }\n}\n\n","path":"/Users/jack-sw/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.35.1/noir-projects/noir-protocol-circuits/crates/types/src/abis/read_request.nr"},"164":{"source":"use crate::{\n    abis::function_selector::FunctionSelector, address::{EthAddress, AztecAddress},\n    constants::GAS_FEES_LENGTH, hash::pedersen_hash, traits::{Deserialize, Hash, Serialize, Empty},\n    abis::side_effect::Ordered, utils::reader::Reader\n};\n\nstruct GasFees {\n    fee_per_da_gas: Field,\n    fee_per_l1_gas: Field,\n    fee_per_l2_gas: Field,\n}\n\nimpl GasFees {\n    fn new(fee_per_da_gas: Field, fee_per_l1_gas: Field, fee_per_l2_gas: Field) -> Self {\n        Self { fee_per_da_gas, fee_per_l1_gas, fee_per_l2_gas }\n    }\n}\n\nimpl Serialize<GAS_FEES_LENGTH> for GasFees {\n    fn serialize(self) -> [Field; GAS_FEES_LENGTH] {\n        [self.fee_per_da_gas, self.fee_per_l1_gas, self.fee_per_l2_gas]\n    }\n}\n\nimpl Deserialize<GAS_FEES_LENGTH> for GasFees {\n    fn deserialize(serialized: [Field; GAS_FEES_LENGTH]) -> GasFees {\n        GasFees::new(serialized[0], serialized[1], serialized[2])\n    }\n}\n\nimpl Eq for GasFees {\n    fn eq(self, other : GasFees) -> bool {\n        (self.fee_per_da_gas == other.fee_per_da_gas) & (self.fee_per_l1_gas == other.fee_per_l1_gas) & (self.fee_per_l2_gas == other.fee_per_l2_gas)\n    }\n}\n\nimpl Empty for GasFees {\n    fn empty() -> Self {\n        GasFees::new(0, 0, 0)\n    }\n}\n","path":"/Users/jack-sw/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.35.1/noir-projects/noir-protocol-circuits/crates/types/src/abis/gas_fees.nr"},"166":{"source":"use crate::{constants::MAX_BLOCK_NUMBER_LENGTH, traits::{Deserialize, Serialize, Empty}};\n\nstruct MaxBlockNumber {\n    _opt: Option<u32>\n}\n\nimpl Empty for MaxBlockNumber {\n    fn empty() -> Self {\n        Self { _opt: Option::none() }\n    }\n}\n\nimpl Eq for MaxBlockNumber {\n    fn eq(self, other: Self) -> bool {\n        self._opt == other._opt\n    }\n}\n\nimpl Serialize<MAX_BLOCK_NUMBER_LENGTH> for MaxBlockNumber {\n    fn serialize(self) -> [Field; MAX_BLOCK_NUMBER_LENGTH] {\n        [self._opt._is_some as Field, self._opt._value as Field]\n    }\n}\n\nimpl Deserialize<MAX_BLOCK_NUMBER_LENGTH> for MaxBlockNumber {\n    fn deserialize(serialized: [Field; MAX_BLOCK_NUMBER_LENGTH]) -> MaxBlockNumber {\n        MaxBlockNumber {\n            _opt: Option {\n                _is_some: serialized[0] as bool,\n                _value: serialized[1] as u32,\n            }\n        }\n    }\n}\n\nimpl MaxBlockNumber {\n    pub fn new(max_block_number: u32) -> Self {\n        Self { _opt: Option::some(max_block_number) }\n    }\n\n    pub fn is_none(self) -> bool {\n        self._opt.is_none()\n    }\n\n    pub fn is_some(self) -> bool {\n        self._opt.is_some()\n    }\n\n    pub fn unwrap(self) -> u32 {\n        self._opt.unwrap()\n    }\n\n    pub fn unwrap_unchecked(self) -> u32 {\n        self._opt.unwrap_unchecked()\n    }\n\n    pub fn min(lhs: MaxBlockNumber, rhs: MaxBlockNumber) -> MaxBlockNumber {\n        if rhs.is_none() {\n            lhs // lhs might also be none, but in that case both would be\n        } else {\n            MaxBlockNumber::min_with_u32(lhs, rhs.unwrap_unchecked())\n        }\n    }\n\n    pub fn min_with_u32(lhs: MaxBlockNumber, rhs: u32) -> MaxBlockNumber {\n        if lhs._opt.is_none() {\n            MaxBlockNumber::new(rhs)\n        } else {\n            let lhs_value = lhs._opt.unwrap_unchecked();\n\n            MaxBlockNumber::new(if lhs_value < rhs { lhs_value } else { rhs })\n        }\n    }\n}\n\n#[test]\nfn zeroed_is_none() {\n    // Large parts of the kernel rely on zeroed to initialize structs. This conveniently matches what `default` does,\n    // and though we should eventually move everything to use `default`, it's good to check for now that both are\n    // equivalent.\n    let a = MaxBlockNumber::empty();\n    assert(a.is_none());\n}\n\n#[test]\nfn serde_default() {\n    let a = MaxBlockNumber::empty();\n    let b = MaxBlockNumber::deserialize(a.serialize());\n    assert(b.is_none());\n}\n\n#[test]\nfn serde_some() {\n    let a = MaxBlockNumber::new(13);\n    let b = MaxBlockNumber::deserialize(a.serialize());\n    assert_eq(b.unwrap(), 13);\n}\n\n#[test(should_fail)]\nfn default_unwrap_panics() {\n    let a = MaxBlockNumber::empty();\n    let _ = a.unwrap();\n}\n\n#[test]\nfn min_default_default() {\n    let a = MaxBlockNumber::empty();\n    let b = MaxBlockNumber::empty();\n\n    assert(MaxBlockNumber::min(a, b).is_none());\n}\n\n#[test]\nfn min_default_some() {\n    let a = MaxBlockNumber::empty();\n    let b = MaxBlockNumber::new(13);\n\n    assert_eq(MaxBlockNumber::min(a, b).unwrap(), 13);\n    assert_eq(MaxBlockNumber::min(b, a).unwrap(), 13);\n}\n\n#[test]\nfn min_some_some() {\n    let a = MaxBlockNumber::new(13);\n    let b = MaxBlockNumber::new(42);\n\n    assert_eq(MaxBlockNumber::min(a, b).unwrap(), 13);\n    assert_eq(MaxBlockNumber::min(b, a).unwrap(), 13);\n}\n\n#[test]\nfn min_with_u32_default() {\n    let a = MaxBlockNumber::empty();\n    let b = 42;\n\n    assert_eq(MaxBlockNumber::min_with_u32(a, b).unwrap(), 42);\n}\n\n#[test]\nfn min_with_u32_some() {\n    let a = MaxBlockNumber::new(13);\n    let b = 42;\n    let c = 8;\n\n    assert_eq(MaxBlockNumber::min_with_u32(a, b).unwrap(), 13);\n    assert_eq(MaxBlockNumber::min_with_u32(a, c).unwrap(), 8);\n}\n","path":"/Users/jack-sw/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.35.1/noir-projects/noir-protocol-circuits/crates/types/src/abis/max_block_number.nr"},"171":{"source":"use crate::{\n    abis::{\n    append_only_tree_snapshot::{AppendOnlyTreeSnapshot, APPEND_ONLY_TREE_SNAPSHOT_LENGTH},\n    global_variables::{GlobalVariables, GLOBAL_VARIABLES_LENGTH}\n},\n    constants::{GENERATOR_INDEX__BLOCK_HASH, HEADER_LENGTH, STATE_REFERENCE_LENGTH, CONTENT_COMMITMENT_LENGTH},\n    hash::pedersen_hash, state_reference::StateReference, traits::{Deserialize, Empty, Hash, Serialize},\n    utils::arr_copy_slice, content_commitment::ContentCommitment\n};\n\n// docs:start:header\nstruct Header {\n    last_archive: AppendOnlyTreeSnapshot,\n    content_commitment: ContentCommitment,\n    state: StateReference,\n    global_variables: GlobalVariables,\n}\n// docs:end:header\n\nimpl Eq for Header {\n    fn eq(self, other: Self) -> bool {\n        self.last_archive.eq(other.last_archive) &\n        self.content_commitment.eq(other.content_commitment) &\n        self.state.eq(other.state) &\n        self.global_variables.eq(other.global_variables)\n    }\n}\n\nimpl Serialize<HEADER_LENGTH> for Header {\n    fn serialize(self) -> [Field; HEADER_LENGTH] {\n        let mut fields: BoundedVec<Field, HEADER_LENGTH> = BoundedVec::new();\n\n        fields.extend_from_array(self.last_archive.serialize());\n        fields.extend_from_array(self.content_commitment.serialize());\n        fields.extend_from_array(self.state.serialize());\n        fields.extend_from_array(self.global_variables.serialize());\n\n        fields.storage\n    }\n}\n\nimpl Deserialize<HEADER_LENGTH> for Header {\n    fn deserialize(serialized: [Field; HEADER_LENGTH]) -> Self {\n        let mut offset = 0;\n\n        let last_archive_fields = arr_copy_slice(serialized, [0; APPEND_ONLY_TREE_SNAPSHOT_LENGTH], offset);\n        offset = offset + APPEND_ONLY_TREE_SNAPSHOT_LENGTH;\n\n        let content_commitment_fields = arr_copy_slice(serialized, [0; CONTENT_COMMITMENT_LENGTH], offset);\n        offset = offset + CONTENT_COMMITMENT_LENGTH;\n\n        let state_fields = arr_copy_slice(serialized, [0; STATE_REFERENCE_LENGTH], offset);\n        offset = offset + STATE_REFERENCE_LENGTH;\n\n        let global_variables_fields = arr_copy_slice(serialized, [0; GLOBAL_VARIABLES_LENGTH], offset);\n\n        Header {\n            last_archive: AppendOnlyTreeSnapshot::deserialize(last_archive_fields),\n            content_commitment: ContentCommitment::deserialize(content_commitment_fields),\n            state: StateReference::deserialize(state_fields),\n            global_variables: GlobalVariables::deserialize(global_variables_fields),\n        }\n    }\n}\n\nimpl Empty for Header {\n    fn empty() -> Self {\n        Self {\n            last_archive: AppendOnlyTreeSnapshot::zero(),\n            content_commitment: ContentCommitment::empty(),\n            state: StateReference::empty(),\n            global_variables: GlobalVariables::empty(),\n        }\n    }\n}\n\nimpl Hash for Header {\n    fn hash(self) -> Field {\n        pedersen_hash(self.serialize(), GENERATOR_INDEX__BLOCK_HASH)\n    }\n}\n\n#[test]\nfn serialization_of_empty() {\n    let header = Header::empty();\n    let serialized = header.serialize();\n    let deserialized = Header::deserialize(serialized);\n    assert(header.eq(deserialized));\n}\n\n#[test]\nfn hash_smoke() {\n    let header = Header::empty();\n    let _hashed = header.hash();\n}\n\n#[test]\nfn empty_hash_is_zero() {\n    let header = Header::empty();\n    let hash = header.hash();\n\n    // Value from new_contract_data.test.ts \"computes empty hash\" test\n    let test_data_empty_hash = 0x124e8c40a6eca2e3ad10c04050b01a3fad00df3cea47b13592c7571b6914c7a7;\n    assert_eq(hash, test_data_empty_hash);\n}\n","path":"/Users/jack-sw/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.35.1/noir-projects/noir-protocol-circuits/crates/types/src/header.nr"},"198":{"source":"pub fn field_from_bytes<N>(bytes: [u8; N], big_endian: bool) -> Field {\n    assert(bytes.len() < 32, \"field_from_bytes: N must be less than 32\");\n    let mut as_field = 0;\n    let mut offset = 1;\n    for i in 0..N {\n        let mut index = i;\n        if big_endian {\n            index = N - i - 1;\n        }\n        as_field += (bytes[index] as Field) * offset;\n        offset *= 256;\n    }\n\n    as_field\n}\n\n// Convert a 32 byte array to a field element by truncating the final byte\npub fn field_from_bytes_32_trunc(bytes32: [u8; 32]) -> Field {\n    // Convert it to a field element\n    let mut v = 1;\n    let mut high = 0 as Field;\n    let mut low = 0 as Field;\n\n    for i in 0..15 {\n        // covers bytes 16..30 (31 is truncated and ignored)\n        low = low + (bytes32[15 + 15 - i] as Field) * v;\n        v = v * 256;\n        // covers bytes 0..14\n        high = high + (bytes32[14 - i] as Field) * v;\n    }\n    // covers byte 15\n    low = low + (bytes32[15] as Field) * v;\n\n    low + high * v\n}\n\n// TODO to radix returns u8, so we cannot use bigger radixes. It'd be ideal to use a radix of the maximum range-constrained integer noir supports\npub fn full_field_less_than(lhs: Field, rhs: Field) -> bool {\n    lhs.lt(rhs)\n}\n\npub fn full_field_greater_than(lhs: Field, rhs: Field) -> bool {\n    rhs.lt(lhs)\n}\n\n#[test]\nunconstrained fn bytes_field_test() {\n    // Tests correctness of field_from_bytes_32_trunc against existing methods\n    // Bytes representing 0x543e0a6642ffeb8039296861765a53407bba62bd1c97ca43374de950bbe0a7\n    let inputs = [\n        84, 62, 10, 102, 66, 255, 235, 128, 57, 41, 104, 97, 118, 90, 83, 64, 123, 186, 98, 189, 28, 151, 202, 67, 55, 77, 233, 80, 187, 224, 167\n    ];\n    let field = field_from_bytes(inputs, true);\n    let return_bytes = field.to_be_bytes(31);\n    for i in 0..31 {\n        assert_eq(inputs[i], return_bytes[i]);\n    }\n    // 32 bytes - we remove the final byte, and check it matches the field\n    let inputs2 = [\n        84, 62, 10, 102, 66, 255, 235, 128, 57, 41, 104, 97, 118, 90, 83, 64, 123, 186, 98, 189, 28, 151, 202, 67, 55, 77, 233, 80, 187, 224, 167, 158\n    ];\n    let field2 = field_from_bytes_32_trunc(inputs2);\n    let return_bytes2 = field.to_be_bytes(31);\n\n    for i in 0..31 {\n        assert_eq(return_bytes2[i], return_bytes[i]);\n    }\n    assert_eq(field2, field);\n}\n","path":"/Users/jack-sw/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.35.1/noir-projects/noir-protocol-circuits/crates/types/src/utils/field.nr"},"200":{"source":"struct Reader<N> {\n    data: [Field; N],\n    offset: u64,\n}\n\nimpl<N> Reader<N> {\n    pub fn new(data: [Field; N]) -> Self {\n        Self { data, offset: 0 }\n    }\n\n    pub fn read(&mut self) -> Field {\n        let result = self.data[self.offset];\n        self.offset += 1;\n        result\n    }\n\n    pub fn read_array<K>(&mut self, mut result: [Field; K]) -> [Field; K] {\n        for i in 0..K {\n            result[i] = self.data[self.offset + i];\n        }\n        self.offset += K;\n        result\n    }\n\n    // TODO(#4394)\n    pub fn read_struct<T, K>(&mut self, deserialise: fn([Field; K]) -> T) -> T {\n        let result = deserialise(self.read_array([0; K]));\n        result\n    }\n\n    pub fn read_struct_array<T, K, C>(&mut self, deserialise: fn([Field; K]) -> T, mut result: [T; C]) -> [T; C] {\n        for i in 0..C {\n            result[i] = self.read_struct(deserialise);\n        }\n        result\n    }\n\n    pub fn finish(self) {\n        assert(self.offset == self.data.len(), \"Reader did not read all data\");\n    }\n}\n","path":"/Users/jack-sw/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.35.1/noir-projects/noir-protocol-circuits/crates/types/src/utils/reader.nr"},"202":{"source":"use crate::traits::{Empty, Hash};\n\nstruct PublicDataTreeLeafPreimage {\n    slot : Field,\n    value: Field,\n    next_slot :Field,\n    next_index : u64,\n}\n\nimpl Empty for PublicDataTreeLeafPreimage {\n    fn empty() -> Self {\n        Self {\n            slot: 0,\n            value: 0,\n            next_slot: 0,\n            next_index: 0,\n        }\n    }\n}\n\nimpl Hash for PublicDataTreeLeafPreimage {\n    fn hash(self) -> Field {\n        if self.is_empty() {\n            0\n        } else {\n            dep::std::hash::pedersen_hash([self.slot, self.value, (self.next_index as Field), self.next_slot])\n        }\n    }\n}\n\nimpl PublicDataTreeLeafPreimage {\n    pub fn is_empty(self) -> bool {\n        (self.slot == 0) & (self.value == 0) & (self.next_slot == 0) & (self.next_index == 0)\n    }\n}\n","path":"/Users/jack-sw/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.35.1/noir-projects/noir-protocol-circuits/crates/types/src/public_data_tree_leaf_preimage.nr"},"204":{"source":"use dep::std::cmp::Eq;\n\n// Trait: is_empty\n//\n// The general is_empty trait checks if a data type is is empty,\n// and it defines empty for the basic data types as 0.\n//\n// If a Field is equal to zero, then it is regarded as zero.\n// We will go with this definition for now, however it can be problematic \n// if a value can actually be zero. In a future refactor, we can \n// use the optional type for safety. Doing it now would lead to a worse devex\n// and would make it harder to sync up with the cpp code.\n// Preferred over Default trait to convey intent, as default doesn't necessarily mean empty.\ntrait Empty {\n    fn empty() -> Self;\n}\n\nimpl Empty for Field { fn empty() -> Self {0} }\n\nimpl Empty for u1 { fn empty() -> Self {0} }\nimpl Empty for u8 { fn empty() -> Self {0} }\nimpl Empty for u32 { fn empty() -> Self {0} }\nimpl Empty for u64 { fn empty() -> Self {0} }\nimpl Empty for U128 { fn empty() -> Self {U128::from_integer(0)} }\n\npub fn is_empty<T>(item: T) -> bool where T: Empty + Eq {\n    item.eq(T::empty())\n}\n\npub fn is_empty_array<T, N>(array: [T; N]) -> bool where T: Empty + Eq {\n    array.all(|elem| is_empty(elem))\n}\n\ntrait Hash {\n    fn hash(self) -> Field;\n}\n\ntrait ToField {\n    fn to_field(self) -> Field;\n}\n\nimpl ToField for Field {\n    fn to_field(self) -> Field {\n        self\n    }\n}\n\nimpl ToField for bool { fn to_field(self) -> Field { self as Field } }\nimpl ToField for u1 { fn to_field(self) -> Field { self as Field } }\nimpl ToField for u8 { fn to_field(self) -> Field { self as Field } }\nimpl ToField for u32 { fn to_field(self) -> Field { self as Field } }\nimpl ToField for u64 { fn to_field(self) -> Field { self as Field } }\nimpl ToField for U128 {\n    fn to_field(self) -> Field {\n        self.to_integer()\n    }\n}\n\ntrait FromField {\n    fn from_field(value: Field) -> Self;\n}\n\nimpl FromField for Field {\n    fn from_field(value: Field) -> Self {\n        value\n    }\n}\n\nimpl FromField for bool { fn from_field(value: Field) -> Self { value as bool } }\nimpl FromField for u1 { fn from_field(value: Field) -> Self { value as u1 } }\nimpl FromField for u8 { fn from_field(value: Field) -> Self { value as u8 } }\nimpl FromField for u32 { fn from_field(value: Field) -> Self { value as u32 } }\nimpl FromField for u64 { fn from_field(value: Field) -> Self { value as u64 } }\nimpl FromField for U128 {\n    fn from_field(value: Field) -> Self {\n        U128::from_integer(value)\n    }\n}\n\n// docs:start:serialize\ntrait Serialize<N> {\n    fn serialize(self) -> [Field; N];\n}\n// docs:end:serialize\n\n// docs:start:deserialize\ntrait Deserialize<N> {\n    fn deserialize(fields: [Field; N]) -> Self;\n}\n// docs:end:deserialize\n","path":"/Users/jack-sw/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.35.1/noir-projects/noir-protocol-circuits/crates/types/src/traits.nr"},"205":{"source":"use crate::traits::{Serialize, Deserialize};\n\nglobal BOOL_SERIALIZED_LEN: Field = 1;\nglobal U8_SERIALIZED_LEN: Field = 1;\nglobal U32_SERIALIZED_LEN: Field = 1;\nglobal U64_SERIALIZED_LEN: Field = 1;\nglobal U128_SERIALIZED_LEN: Field = 1;\nglobal FIELD_SERIALIZED_LEN: Field = 1;\n\nimpl Serialize<BOOL_SERIALIZED_LEN> for bool {\n    fn serialize(self) -> [Field; BOOL_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<BOOL_SERIALIZED_LEN> for bool {\n    fn deserialize(fields: [Field; BOOL_SERIALIZED_LEN]) -> bool {\n        fields[0] as bool\n    }\n}\n\nimpl Serialize<U8_SERIALIZED_LEN> for u8 {\n    fn serialize(self) -> [Field; U32_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<U8_SERIALIZED_LEN> for u8 {\n    fn deserialize(fields: [Field; U8_SERIALIZED_LEN]) -> Self {\n        fields[0] as u8\n    }\n}\n\nimpl Serialize<U32_SERIALIZED_LEN> for u32 {\n    fn serialize(self) -> [Field; U32_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<U32_SERIALIZED_LEN> for u32 {\n    fn deserialize(fields: [Field; U32_SERIALIZED_LEN]) -> Self {\n        fields[0] as u32\n    }\n}\n\nimpl Serialize<U64_SERIALIZED_LEN> for u64 {\n    fn serialize(self) -> [Field; U64_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<U64_SERIALIZED_LEN> for u64 {\n    fn deserialize(fields: [Field; U64_SERIALIZED_LEN]) -> Self {\n        fields[0] as u64\n    }\n}\n\nimpl Serialize<U128_SERIALIZED_LEN> for U128 {\n    fn serialize(self) -> [Field; 1] {\n        [self.to_integer()]\n    }\n\n}\n\nimpl Deserialize<U128_SERIALIZED_LEN> for U128 {\n    fn deserialize(fields: [Field; U128_SERIALIZED_LEN]) -> Self {\n        U128::from_integer(fields[0])\n    }\n}\n\nimpl Serialize<FIELD_SERIALIZED_LEN> for Field {\n    fn serialize(self) -> [Field; U32_SERIALIZED_LEN] {\n        [self]\n    }\n}\n\nimpl Deserialize<FIELD_SERIALIZED_LEN> for Field {\n    fn deserialize(fields: [Field; FIELD_SERIALIZED_LEN]) -> Self {\n        fields[0]\n    }\n}\n","path":"/Users/jack-sw/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.35.1/noir-projects/noir-protocol-circuits/crates/types/src/type_serialization.nr"},"206":{"source":"use crate::{\n    abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot, constants::PARTIAL_STATE_REFERENCE_LENGTH,\n    traits::{Deserialize, Empty, Hash, Serialize}\n};\n\nstruct PartialStateReference {\n    note_hash_tree: AppendOnlyTreeSnapshot,\n    nullifier_tree: AppendOnlyTreeSnapshot,\n    public_data_tree: AppendOnlyTreeSnapshot,\n}\n\nimpl Eq for PartialStateReference {\n    fn eq(self, other: PartialStateReference) -> bool {\n        self.note_hash_tree.eq(other.note_hash_tree) &\n        self.nullifier_tree.eq(other.nullifier_tree) &\n        self.public_data_tree.eq(other.public_data_tree)\n    }\n}\n\nimpl Serialize<PARTIAL_STATE_REFERENCE_LENGTH> for PartialStateReference {\n    fn serialize(self) -> [Field; PARTIAL_STATE_REFERENCE_LENGTH] {\n        let serialized_note_hash_tree = self.note_hash_tree.serialize();\n        let serialized_nullifier_tree = self.nullifier_tree.serialize();\n        let serialized_public_data_tree = self.public_data_tree.serialize();\n\n        [\n            serialized_note_hash_tree[0], \n            serialized_note_hash_tree[1],\n            serialized_nullifier_tree[0],\n            serialized_nullifier_tree[1],\n            serialized_public_data_tree[0],\n            serialized_public_data_tree[1],\n        ]\n    }\n}\n\nimpl Deserialize<PARTIAL_STATE_REFERENCE_LENGTH> for PartialStateReference {\n    fn deserialize(serialized: [Field; PARTIAL_STATE_REFERENCE_LENGTH]) -> PartialStateReference {\n        PartialStateReference {\n            note_hash_tree: AppendOnlyTreeSnapshot::deserialize(\n                [serialized[0], serialized[1]]\n            ),\n            nullifier_tree: AppendOnlyTreeSnapshot::deserialize(\n                [serialized[2], serialized[3]]\n            ),\n            public_data_tree: AppendOnlyTreeSnapshot::deserialize(\n                [serialized[4], serialized[5]]\n            ),\n        }\n    }\n}\n\nimpl Empty for PartialStateReference {\n    fn empty() -> Self {\n        Self {\n            note_hash_tree: AppendOnlyTreeSnapshot::zero(),\n            nullifier_tree: AppendOnlyTreeSnapshot::zero(),\n            public_data_tree: AppendOnlyTreeSnapshot::zero(),\n        }\n    }\n}\n\n#[test]\nfn serialization_of_empty() {\n    let partial = PartialStateReference::empty();\n    let _serialized = partial.serialize();\n    let _deserialized = PartialStateReference::deserialize(_serialized);\n}\n","path":"/Users/jack-sw/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.35.1/noir-projects/noir-protocol-circuits/crates/types/src/partial_state_reference.nr"},"208":{"source":"use crate::{\n    constants::CONTENT_COMMITMENT_LENGTH, traits::{Deserialize, Empty, Hash, Serialize},\n    utils::arr_copy_slice\n};\n\nstruct ContentCommitment {\n  tx_tree_height: Field,\n  txs_effects_hash: Field,\n  in_hash: Field,\n  out_hash: Field,\n}\n\nimpl Serialize<CONTENT_COMMITMENT_LENGTH> for ContentCommitment {\n  fn serialize(self) -> [Field; CONTENT_COMMITMENT_LENGTH] {\n    let mut fields: BoundedVec<Field, CONTENT_COMMITMENT_LENGTH> = BoundedVec::new();\n\n    fields.push(self.tx_tree_height);\n    fields.push(self.txs_effects_hash);\n    fields.push(self.in_hash);\n    fields.push(self.out_hash);\n\n    fields.storage\n  }\n}\n\nimpl Deserialize<CONTENT_COMMITMENT_LENGTH> for ContentCommitment {\n  fn deserialize(serialized: [Field; CONTENT_COMMITMENT_LENGTH]) -> Self {\n    let tx_tree_height = serialized[0];\n\n    let txs_effects_hash = serialized[1];\n\n    let in_hash = serialized[2];\n\n    let out_hash = serialized[3];\n\n    Self {\n      tx_tree_height,\n      txs_effects_hash,\n      in_hash,\n      out_hash,\n    }\n  }\n}\n\nimpl Empty for ContentCommitment {\n  fn empty() -> Self {\n    Self {\n      tx_tree_height: 0,\n      txs_effects_hash: 0,\n      in_hash: 0,\n      out_hash: 0,\n    }\n  }\n}\n\nimpl Eq for ContentCommitment {\n  fn eq(self, other: Self) -> bool {\n    (self.tx_tree_height == other.tx_tree_height)\n      & (self.txs_effects_hash == other.txs_effects_hash)\n      & (self.in_hash == other.in_hash)\n      & (self.out_hash == other.out_hash)\n  }\n}\n\n#[test]\nfn serialization_of_empty() {\n    let empty = ContentCommitment::empty();\n    let serialized = empty.serialize();\n    let deserialized = ContentCommitment::deserialize(serialized);\n\n    assert(empty.eq(deserialized));\n}\n","path":"/Users/jack-sw/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.35.1/noir-projects/noir-protocol-circuits/crates/types/src/content_commitment.nr"},"209":{"source":"use crate::{\n    address::{\n    aztec_address::AztecAddress, eth_address::EthAddress, partial_address::PartialAddress,\n    public_keys_hash::PublicKeysHash\n},\n    contract_class_id::ContractClassId,\n    constants::{GENERATOR_INDEX__CONTRACT_DEPLOYMENT_DATA, CONTRACT_INSTANCE_LENGTH},\n    traits::{Deserialize, Hash, Serialize}\n};\n\nstruct ContractInstance {\n    salt : Field,\n    deployer: AztecAddress,\n    contract_class_id : ContractClassId,\n    initialization_hash : Field,\n    portal_contract_address : EthAddress,\n    public_keys_hash : PublicKeysHash,\n}\n\nimpl Eq for ContractInstance {\n    fn eq(self, other: Self) -> bool {\n        self.public_keys_hash.eq(other.public_keys_hash) &\n        self.initialization_hash.eq(other.initialization_hash) &\n        self.contract_class_id.eq(other.contract_class_id) &\n        self.salt.eq(other.salt) &\n        self.portal_contract_address.eq(other.portal_contract_address)\n    }\n}\n\nimpl Serialize<CONTRACT_INSTANCE_LENGTH> for ContractInstance {\n    fn serialize(self) -> [Field; CONTRACT_INSTANCE_LENGTH] {\n        [\n            self.salt,\n            self.deployer.to_field(),\n            self.contract_class_id.to_field(),\n            self.initialization_hash,\n            self.portal_contract_address.to_field(),\n            self.public_keys_hash.to_field()\n        ]\n    }\n}\n\nimpl Deserialize<CONTRACT_INSTANCE_LENGTH> for ContractInstance {\n    fn deserialize(serialized: [Field; CONTRACT_INSTANCE_LENGTH]) -> Self {\n        Self {\n            salt: serialized[0],\n            deployer: AztecAddress::from_field(serialized[1]),\n            contract_class_id: ContractClassId::from_field(serialized[2]),\n            initialization_hash: serialized[3],\n            portal_contract_address: EthAddress::from_field(serialized[4]),\n            public_keys_hash: PublicKeysHash::from_field(serialized[5]),\n        }\n    }\n}\n\nimpl Hash for ContractInstance {\n    fn hash(self) -> Field {\n        self.to_address().to_field()\n    }\n}\n\nimpl ContractInstance {\n    fn to_address(self) -> AztecAddress {\n        AztecAddress::compute(\n            self.public_keys_hash,\n            PartialAddress::compute(\n                self.contract_class_id,\n                self.salt,\n                self.initialization_hash,\n                self.portal_contract_address,\n                self.deployer\n            )\n        )\n    }\n}\n","path":"/Users/jack-sw/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.35.1/noir-projects/noir-protocol-circuits/crates/types/src/contract_instance.nr"},"210":{"source":"// general util packages/modules are usually bad practice\n// because there is no criteria for what we should not put in here.\n// Reducing the size of this package would be welcome.\n\nmod arrays;\nmod field;\nmod reader;\nmod uint256;\n\n// if predicate == true then return lhs, else return rhs\npub fn conditional_assign(predicate: bool, lhs: Field, rhs: Field) -> Field {\n    if predicate { lhs } else { rhs }\n}\n\npub fn arr_copy_slice<T, N, M>(src: [T; N], mut dst: [T; M], offset: u64) -> [T; M] {\n    for i in 0..dst.len() {\n        dst[i] = src[i + offset];\n    }\n    dst\n}\n","path":"/Users/jack-sw/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.35.1/noir-projects/noir-protocol-circuits/crates/types/src/utils.nr"},"211":{"source":"use crate::{\n    crate::address::{eth_address::EthAddress, partial_address::PartialAddress, public_keys_hash::PublicKeysHash},\n    constants::{AZTEC_ADDRESS_LENGTH, GENERATOR_INDEX__CONTRACT_ADDRESS},\n    contract_class_id::ContractClassId, hash::pedersen_hash, grumpkin_point::GrumpkinPoint,\n    traits::{Empty, FromField, ToField, Serialize, Deserialize}, utils\n};\n\n// Aztec address\nstruct AztecAddress {\n    inner : Field\n}\n\nimpl Eq for AztecAddress {\n    fn eq(self, other : Self) -> bool {\n        self.to_field() == other.to_field()\n    }\n}\n\nimpl Empty for AztecAddress {\n    fn empty() -> Self {\n        Self {\n            inner : 0\n        }\n    }\n}\n\nimpl ToField for AztecAddress {\n    fn to_field(self) -> Field {\n        self.inner\n    }\n}\n\nimpl FromField for AztecAddress {\n    fn from_field(value: Field) -> AztecAddress {\n        AztecAddress { inner: value }\n    }\n}\n\nimpl Serialize<AZTEC_ADDRESS_LENGTH> for AztecAddress {\n    fn serialize(self: Self) -> [Field; AZTEC_ADDRESS_LENGTH] {\n        [self.to_field()]\n    }\n}\n\nimpl Deserialize<AZTEC_ADDRESS_LENGTH> for AztecAddress {\n    fn deserialize(fields: [Field; AZTEC_ADDRESS_LENGTH]) -> Self {\n        FromField::from_field(fields[0])\n    }\n}\n\nimpl AztecAddress {\n    pub fn zero() -> Self {\n        Self { inner: 0 }\n    }\n\n    pub fn compute_from_public_key(\n        pub_key: GrumpkinPoint,\n        contract_class_id: ContractClassId,\n        salt: Field,\n        initialization_hash: Field,\n        portal_contract_address: EthAddress,\n        deployer: AztecAddress\n    ) -> AztecAddress {\n        AztecAddress::compute(\n            PublicKeysHash::compute(pub_key),\n            PartialAddress::compute(\n                contract_class_id,\n                salt,\n                initialization_hash,\n                portal_contract_address,\n                deployer\n            )\n        )\n    }\n\n    pub fn compute(pub_keys_hash: PublicKeysHash, partial_address: PartialAddress) -> AztecAddress {\n        AztecAddress::from_field(\n            pedersen_hash(\n                [pub_keys_hash.to_field(), partial_address.to_field()],\n                GENERATOR_INDEX__CONTRACT_ADDRESS\n            )\n        )\n    }\n\n    pub fn is_zero(self) -> bool {\n        self.inner == 0\n    }\n\n    pub fn assert_is_zero(self) {\n        assert(self.to_field() == 0);\n    }\n\n    pub fn conditional_assign(predicate: bool, lhs: Self, rhs: Self) -> Self {\n        let result = utils::conditional_assign(predicate, rhs.to_field(), lhs.to_field());\n        Self { inner: result }\n    }\n}\n\n#[test]\nfn compute_address() {\n    let point = GrumpkinPoint { x: 1, y: 2 };\n    let contract_address_salt = 3;\n    let contract_class_id = ContractClassId::from_field(4);\n    let initialization_hash = 5;\n    let portal_contract_address = EthAddress::from_field(6);\n    let deployer = AztecAddress::from_field(7);\n\n    let address = AztecAddress::compute_from_public_key(\n        point,\n        contract_class_id,\n        contract_address_salt,\n        initialization_hash,\n        portal_contract_address,\n        deployer\n    );\n\n    let expected_computed_address_from_preimage = 0x027ea2b41ced2ec9a98305984e96dd28518536a4628883ccdc06e38aa8997220;\n    assert(address.to_field() == expected_computed_address_from_preimage);\n}\n\n#[test]\nfn compute_address_from_partial_and_pubkey() {\n    let point = GrumpkinPoint { x: 1, y: 2 };\n    let partial_address = PartialAddress::from_field(3);\n\n    let address = AztecAddress::compute(PublicKeysHash::compute(point), partial_address);\n    let expected_computed_address_from_partial_and_pubkey = 0x0447f893197175723deb223696e2e96dbba1e707ee8507766373558877e74197;\n    assert(address.to_field() == expected_computed_address_from_partial_and_pubkey);\n}\n\n#[test]\nfn from_field_to_field() {\n    let address = AztecAddress { inner: 37 };\n    assert_eq(FromField::from_field(address.to_field()), address);\n}\n\n#[test]\nfn serde() {\n    let address = AztecAddress { inner: 37 };\n    assert_eq(Deserialize::deserialize(address.serialize()), address);\n}\n","path":"/Users/jack-sw/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.35.1/noir-projects/noir-protocol-circuits/crates/types/src/address/aztec_address.nr"},"212":{"source":"use crate::{\n    constants::GENERATOR_INDEX__PARTIAL_ADDRESS, hash::pedersen_hash, grumpkin_point::GrumpkinPoint,\n    traits::{ToField, Serialize, Deserialize}\n};\n\n// Public keys hash. Used in the computation of an address.\nstruct PublicKeysHash {\n    inner: Field\n}\n\nimpl ToField for PublicKeysHash {\n    fn to_field(self) -> Field {\n        self.inner\n    }\n}\n\nimpl Serialize<1> for PublicKeysHash {\n    fn serialize(self: Self) -> [Field; 1] {\n        [self.to_field()]\n    }\n}\n\nimpl Deserialize<1> for PublicKeysHash {\n    fn deserialize(fields: [Field; 1]) -> Self {\n        PublicKeysHash::from_field(fields[0])\n    }\n}\n\nimpl Eq for PublicKeysHash {\n    fn eq(self, other: Self) -> bool {\n        self.inner == other.inner\n    }\n}\n\nimpl PublicKeysHash {\n    pub fn from_field(field: Field) -> Self {\n        Self { inner: field }\n    }\n\n    pub fn compute(public_key: GrumpkinPoint) -> Self {\n        PublicKeysHash::from_field(\n            pedersen_hash(\n                [\n            public_key.x,\n            public_key.y\n        ],\n                GENERATOR_INDEX__PARTIAL_ADDRESS\n            )\n        )\n    }\n\n    pub fn to_field(self) -> Field {\n        self.inner\n    }\n\n    pub fn assert_is_zero(self) {\n        assert(self.to_field() == 0);\n    }\n}\n\n#[test]\nfn compute_public_keys_hash() {\n    let point = GrumpkinPoint { x: 1, y: 2 };\n    let actual = PublicKeysHash::compute(point);\n    let expected_public_keys_hash = 0x1923a6246e305720b6aaf751fde0342613e93c82e455c3831e28375c16dd40d8;\n    assert(actual.to_field() == expected_public_keys_hash);\n}\n","path":"/Users/jack-sw/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.35.1/noir-projects/noir-protocol-circuits/crates/types/src/address/public_keys_hash.nr"},"213":{"source":"use crate::{\n    address::{eth_address::EthAddress, aztec_address::AztecAddress},\n    constants::GENERATOR_INDEX__PARTIAL_ADDRESS, hash::pedersen_hash, traits::ToField\n};\n\n// Salted initialization hash. Used in the computation of a partial address.\nstruct SaltedInitializationHash {\n    inner: Field\n}\n\nimpl ToField for SaltedInitializationHash {\n    fn to_field(self) -> Field {\n        self.inner\n    }\n}\n\nimpl SaltedInitializationHash {\n    pub fn from_field(field: Field) -> Self {\n        Self { inner: field }\n    }\n\n    pub fn compute(\n        salt: Field,\n        initialization_hash: Field,\n        portal_contract_address: EthAddress,\n        deployer: AztecAddress\n    ) -> Self {\n        SaltedInitializationHash::from_field(\n            pedersen_hash(\n                [\n            salt,\n            initialization_hash,\n            deployer.to_field(),\n            portal_contract_address.to_field()\n        ],\n                GENERATOR_INDEX__PARTIAL_ADDRESS\n            )\n        )\n    }\n\n    pub fn assert_is_zero(self) {\n        assert(self.to_field() == 0);\n    }\n}\n","path":"/Users/jack-sw/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.35.1/noir-projects/noir-protocol-circuits/crates/types/src/address/salted_initialization_hash.nr"},"214":{"source":"use crate::{\n    address::{\n    eth_address::EthAddress, salted_initialization_hash::SaltedInitializationHash,\n    aztec_address::AztecAddress\n},\n    constants::GENERATOR_INDEX__PARTIAL_ADDRESS, contract_class_id::ContractClassId,\n    hash::pedersen_hash, traits::ToField\n};\n\n// Partial address\nstruct PartialAddress {\n    inner : Field\n}\n\nimpl ToField for PartialAddress {\n    fn to_field(self) -> Field {\n        self.inner\n    }\n}\n\nimpl PartialAddress {\n    pub fn from_field(field: Field) -> Self {\n        Self { inner: field }\n    }\n\n    pub fn compute(\n        contract_class_id: ContractClassId,\n        salt: Field,\n        initialization_hash: Field,\n        portal_contract_address: EthAddress,\n        deployer: AztecAddress\n    ) -> Self {\n        PartialAddress::compute_from_salted_initialization_hash(\n            contract_class_id,\n            SaltedInitializationHash::compute(salt, initialization_hash, portal_contract_address, deployer)\n        )\n    }\n\n    pub fn compute_from_salted_initialization_hash(\n        contract_class_id: ContractClassId,\n        salted_initialization_hash: SaltedInitializationHash\n    ) -> Self {\n        PartialAddress::from_field(\n            pedersen_hash(\n                [\n            contract_class_id.to_field(),\n            salted_initialization_hash.to_field()\n        ],\n                GENERATOR_INDEX__PARTIAL_ADDRESS\n            )\n        )\n    }\n\n    pub fn to_field(self) -> Field {\n        self.inner\n    }\n\n    pub fn assert_is_zero(self) {\n        assert(self.to_field() == 0);\n    }\n}\n","path":"/Users/jack-sw/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.35.1/noir-projects/noir-protocol-circuits/crates/types/src/address/partial_address.nr"},"215":{"source":"use crate::{\n    constants::ETH_ADDRESS_LENGTH, hash::pedersen_hash,\n    traits::{Empty, ToField, Serialize, Deserialize}, utils\n};\n\nstruct EthAddress{\n    inner : Field\n}\n\nimpl Eq for EthAddress {\n    fn eq(self, other : Self) -> bool {\n        self.to_field() == other.to_field()\n    }\n}\n\nimpl Empty for EthAddress {\n    fn empty() -> Self {\n        Self {\n            inner : 0\n        }\n    }\n}\n\nimpl ToField for EthAddress {\n    fn to_field(self) -> Field {\n        self.inner\n    }\n}\n\nimpl Serialize<ETH_ADDRESS_LENGTH> for EthAddress {\n    fn serialize(self: Self) -> [Field; ETH_ADDRESS_LENGTH] {\n        [self.inner]\n    }\n}\n\nimpl Deserialize<ETH_ADDRESS_LENGTH> for EthAddress {\n    fn deserialize(fields: [Field; ETH_ADDRESS_LENGTH]) -> Self {\n        EthAddress::from_field(fields[0])\n    }\n}\n\nimpl EthAddress {\n    pub fn zero() -> Self {\n        Self { inner: 0 }\n    }\n\n    pub fn from_field(field: Field) -> Self {\n        field.assert_max_bit_size(160);\n        Self { inner: field }\n    }\n\n    pub fn is_zero(self) -> bool {\n        self.inner == 0\n    }\n\n    pub fn assert_is_zero(self) {\n        assert(self.to_field() == 0);\n    }\n\n    pub fn conditional_assign(predicate: bool, lhs: Self, rhs: Self) -> Self {\n        let result = utils::conditional_assign(predicate, rhs.to_field(), lhs.to_field());\n        Self { inner: result }\n    }\n}\n","path":"/Users/jack-sw/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.35.1/noir-projects/noir-protocol-circuits/crates/types/src/address/eth_address.nr"},"217":{"source":"use crate::address::{AztecAddress, EthAddress};\nuse crate::mocked::VerificationKey;\nuse crate::abis::function_selector::FunctionSelector;\nuse crate::abis::contract_class_function_leaf_preimage::ContractClassFunctionLeafPreimage;\nuse crate::contract_class_id::ContractClassId;\nuse crate::utils::{uint256::U256, field::field_from_bytes_32_trunc};\nuse crate::constants::{\n    FUNCTION_TREE_HEIGHT, GENERATOR_INDEX__SILOED_NOTE_HASH, GENERATOR_INDEX__OUTER_NULLIFIER,\n    GENERATOR_INDEX__VK, GENERATOR_INDEX__CONSTRUCTOR, GENERATOR_INDEX__PARTIAL_ADDRESS,\n    GENERATOR_INDEX__CONTRACT_ADDRESS, GENERATOR_INDEX__NOTE_HASH_NONCE,\n    GENERATOR_INDEX__UNIQUE_NOTE_HASH\n};\nuse crate::traits::Hash;\nuse crate::messaging::l2_to_l1_message::L2ToL1Message;\nuse crate::merkle_tree::root::root_from_sibling_path;\nuse dep::std::hash::{pedersen_hash_with_separator, sha256};\n\npub fn sha256_to_field<N>(bytes_to_hash: [u8; N]) -> Field {\n    let sha256_hashed = sha256(bytes_to_hash);\n    let hash_in_a_field = field_from_bytes_32_trunc(sha256_hashed);\n\n    hash_in_a_field\n}\n\npub fn private_functions_root_from_siblings(\n    selector: FunctionSelector,\n    vk_hash: Field,\n    function_leaf_index: Field,\n    function_leaf_sibling_path: [Field; FUNCTION_TREE_HEIGHT]\n) -> Field {\n    let function_leaf_preimage = ContractClassFunctionLeafPreimage { selector, vk_hash };\n    let function_leaf = function_leaf_preimage.hash();\n    root_from_sibling_path(function_leaf, function_leaf_index, function_leaf_sibling_path)\n}\n\npub fn silo_note_hash(address: AztecAddress, inner_commitment: Field) -> Field {\n    pedersen_hash(\n        [\n        address.to_field(),\n        inner_commitment\n    ],\n        GENERATOR_INDEX__SILOED_NOTE_HASH\n    )\n}\n\npub fn silo_nullifier(address: AztecAddress, nullifier: Field) -> Field {\n    pedersen_hash(\n        [\n        address.to_field(),\n        nullifier\n    ],\n        GENERATOR_INDEX__OUTER_NULLIFIER\n    )\n}\n\npub fn merkle_hash(left: Field, right: Field) -> Field {\n    pedersen_hash([left, right], 0)\n}\n\npub fn stdlib_recursion_verification_key_compress_native_vk(_vk: VerificationKey) -> Field {\n    // Original cpp code\n    // stdlib::recursion::verification_key<CT::bn254>::compress_native(private_call.vk, GeneratorIndex::VK);\n    // The above cpp method is only ever called on verification key, so it has been special cased here\n    let _hash_index = GENERATOR_INDEX__VK;\n    0\n}\n\npub fn compute_l2_to_l1_hash(\n    contract_address: AztecAddress,\n    rollup_version_id: Field,\n    chain_id: Field,\n    message: L2ToL1Message\n) -> Field {\n    let mut bytes: BoundedVec<u8, 160> = BoundedVec::new();\n\n    let inputs = [\n        contract_address.to_field(), rollup_version_id, message.recipient.to_field(), chain_id, message.content\n    ];\n    for i in 0..inputs.len() {\n        // TODO are bytes be in fr.to_buffer() ?\n        let item_bytes = inputs[i].to_be_bytes(32);\n        for j in 0..32 {\n            bytes.push(item_bytes[j]);\n        }\n    }\n\n    sha256_to_field(bytes.storage)\n}\n\n// Computes sha256 hash of 2 input hashes.\n//\n// NB: This method now takes in two 31 byte fields - it assumes that any input\n// is the result of a sha_to_field hash and => is truncated\n//\n// TODO(Jan and David): This is used for the encrypted_log hashes.\n// Can we check to see if we can just use hash_to_field or pedersen_compress here?\n//\npub fn accumulate_sha256(input: [Field; 2]) -> Field {\n    // This is a note about the cpp code, since it takes an array of Fields\n    // instead of a U128.\n    // 4 Field elements when converted to bytes will usually \n    // occupy 4 * 32 = 128 bytes.\n    // However, this function is making the assumption that each Field \n    // only occupies 128 bits.\n    //\n    // TODO(David): This does not seem to be getting guaranteed anywhere in the code?\n\n    // Concatentate two fields into 32x2 = 64 bytes\n    // accumulate_sha256 assumes that the inputs are pre-truncated 31 byte numbers\n    let mut hash_input_flattened = [0; 64];\n    for offset in 0..input.len() {\n        let input_as_bytes = input[offset].to_be_bytes(32);\n        for byte_index in 0..32 {\n            hash_input_flattened[offset * 32 + byte_index] = input_as_bytes[byte_index];\n        }\n    }\n\n    sha256_to_field(hash_input_flattened)\n}\n\npub fn compute_logs_hash(previous_log_hash: Field, current_log_hash: Field) -> Field {\n    accumulate_sha256(\n        [\n        previous_log_hash,\n        current_log_hash\n    ]\n    )\n}\n\npub fn compute_note_hash_nonce(first_nullifier: Field, commitment_index: u64) -> Field {\n    pedersen_hash(\n        [\n        first_nullifier,\n        commitment_index as Field\n    ],\n        GENERATOR_INDEX__NOTE_HASH_NONCE\n    )\n}\n\npub fn compute_unique_siloed_note_hash(nonce: Field, siloed_note_hash: Field) -> Field {\n    pedersen_hash(\n        [\n        nonce,\n        siloed_note_hash\n    ],\n        GENERATOR_INDEX__UNIQUE_NOTE_HASH\n    )\n}\n\npub fn pedersen_hash<N>(inputs: [Field; N], hash_index: u32) -> Field {\n    dep::std::hash::pedersen_hash_with_separator(inputs, hash_index)\n}\n\n#[test]\nfn smoke_sha256_to_field() {\n    let full_buffer = [\n        0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19,\n        20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39,\n        40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59,\n        60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79,\n        80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99,\n        100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119,\n        120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139,\n        140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159\n    ];\n    let result = sha256_to_field(full_buffer);\n\n    assert(result == 0x448ebbc9e1a31220a2f3830c18eef61b9bd070e5084b7fa2a359fe729184c7);\n\n    // to show correctness of the current ver (truncate one byte) vs old ver (mod full bytes):\n    let result_bytes = sha256(full_buffer);\n    let truncated_field = crate::utils::field::field_from_bytes_32_trunc(result_bytes);\n    assert(truncated_field == result);\n    let mod_res = result + (result_bytes[31] as Field);\n    assert(mod_res == 0x448ebbc9e1a31220a2f3830c18eef61b9bd070e5084b7fa2a359fe729184e0);\n}\n\n#[test]\nfn compute_l2_l1_hash() {\n    // All zeroes\n    let hash_result = compute_l2_to_l1_hash(AztecAddress::from_field(0), 0, 0, L2ToL1Message::empty());\n    assert(hash_result == 0xb393978842a0fa3d3e1470196f098f473f9678e72463cb65ec4ab5581856c2);\n\n    // Non-zero case\n    let message = L2ToL1Message { recipient: EthAddress::from_field(3), content: 5 };\n    let hash_result = compute_l2_to_l1_hash(AztecAddress::from_field(1), 2, 4, message);\n    assert(hash_result == 0x3f88c1044a05e5340ed20466276500f6d45ca5603913b9091e957161734e16);\n}\n","path":"/Users/jack-sw/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.35.1/noir-projects/noir-protocol-circuits/crates/types/src/hash.nr"},"221":{"source":"use crate::{address::EthAddress, constants::L2_TO_L1_MESSAGE_LENGTH, traits::{Deserialize, Empty, Serialize}};\n\n// Note: Not to be confused with L2ToL1Msg in Solidity\nstruct L2ToL1Message {\n    recipient: EthAddress,\n    content: Field,\n}\n\nimpl Empty for L2ToL1Message {\n    fn empty() -> Self {\n        Self {\n            recipient: EthAddress::empty(),\n            content: 0,\n        }\n    }\n}\n\nimpl Eq for L2ToL1Message {\n    fn eq(self, other: Self) -> bool {\n        (self.recipient == other.recipient) & (self.content == other.content)\n    }\n}\n\nimpl Serialize<L2_TO_L1_MESSAGE_LENGTH> for L2ToL1Message {\n    fn serialize(self) -> [Field; L2_TO_L1_MESSAGE_LENGTH] {\n        [self.recipient.to_field(), self.content]\n    }\n}\n\nimpl Deserialize<L2_TO_L1_MESSAGE_LENGTH> for L2ToL1Message {\n    fn deserialize(values: [Field; L2_TO_L1_MESSAGE_LENGTH]) -> Self {\n        Self {\n            recipient: EthAddress::from_field(values[0]),\n            content: values[1],\n        }\n    }\n}\n","path":"/Users/jack-sw/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.35.1/noir-projects/noir-protocol-circuits/crates/types/src/messaging/l2_to_l1_message.nr"},"223":{"source":"use crate::{\n    abis::append_only_tree_snapshot::{AppendOnlyTreeSnapshot, APPEND_ONLY_TREE_SNAPSHOT_LENGTH},\n    constants::{PARTIAL_STATE_REFERENCE_LENGTH, STATE_REFERENCE_LENGTH},\n    partial_state_reference::PartialStateReference, traits::{Deserialize, Empty, Hash, Serialize},\n    utils::arr_copy_slice\n};\n\nstruct StateReference {\n    l1_to_l2_message_tree: AppendOnlyTreeSnapshot,\n    partial: PartialStateReference,\n}\n\nimpl Eq for StateReference {\n    fn eq(self, other: StateReference) -> bool {\n        self.l1_to_l2_message_tree.eq(other.l1_to_l2_message_tree) &\n        self.partial.eq(other.partial)\n    }\n}\n\nimpl Serialize<STATE_REFERENCE_LENGTH> for StateReference {\n    fn serialize(self) -> [Field; STATE_REFERENCE_LENGTH] {\n        let mut fields: BoundedVec<Field, STATE_REFERENCE_LENGTH> = BoundedVec::new();\n\n        fields.extend_from_array(self.l1_to_l2_message_tree.serialize());\n        fields.extend_from_array(self.partial.serialize());\n\n        fields.storage\n    }\n}\n\nimpl Deserialize<STATE_REFERENCE_LENGTH> for StateReference {\n    fn deserialize(serialized: [Field; STATE_REFERENCE_LENGTH]) -> StateReference {\n        let mut offset = 0;\n\n        let l1_to_l2_message_tree_fields = arr_copy_slice(serialized, [0; APPEND_ONLY_TREE_SNAPSHOT_LENGTH], offset);\n        offset = offset + APPEND_ONLY_TREE_SNAPSHOT_LENGTH;\n\n        let partial_fields = arr_copy_slice(serialized, [0; PARTIAL_STATE_REFERENCE_LENGTH], offset);\n\n        StateReference {\n            l1_to_l2_message_tree: AppendOnlyTreeSnapshot::deserialize(l1_to_l2_message_tree_fields),\n            partial: PartialStateReference::deserialize(partial_fields),\n        }\n    }\n}\n\nimpl Empty for StateReference {\n    fn empty() -> Self {\n        Self {\n            l1_to_l2_message_tree: AppendOnlyTreeSnapshot::zero(),\n            partial: PartialStateReference::empty(),\n        }\n    }\n}\n\n#[test]\nfn serialization_of_empty() {\n    let state = StateReference::empty();\n    let _serialized = state.serialize();\n    let _deserialized = StateReference::deserialize(_serialized);\n}\n","path":"/Users/jack-sw/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.35.1/noir-projects/noir-protocol-circuits/crates/types/src/state_reference.nr"},"228":{"source":"use dep::std;\n/// ElGamal encryption/decryption for Field elements\n\n// Given generator gen, public key pub_key, message m and randomness r\n// Output ciphertext (c1,c2)\n// c1 = gen^r\n// c2 = m * pub_key^r\n// TODO acording to function comment assumes exponent under 32 bits. \n// It seems to work for random test values, but probably perfomance isn't optimal. \nfn single_standard_encryption_fe(\n  gen: Field, \n  pub_key: Field, \n  m: Field, \n  r: Field) -> (Field, Field) {\n\n  let c1 = gen.pow_32(r);\n  let temp = pub_key.pow_32(r);\n  let c2 = m * temp;\n  (c1, c2)\n}\n\n#[test]\nfn testsingle_standard_encryption_fe() {\n  let gen = 1094412143;\n  let g_pub_key = 6991263601630968540983226766988945904084317427113568104323967737355864696562;\n  let m = 100000;\n  let r = 1878145627;\n  let (c1, c2) = single_standard_encryption_fe(gen, g_pub_key, m, r);\n  std::println(c1);\n  std::println(c2);\n\n}\n\n// #[test]\n// fn testsingle_standard_encryption_fe() {\n//   let gen = 3618502788666131106986593281521497120414687020801267626233049500247285301248;\n//   let g_pub_key = 0x8601d0dec944deca8918a6431526acb8530afea2ffa295142b348dfbce36c20b;\n//   let m = 42830;\n//   let r = 1152000579019524719769048073517805207578464470827627862468450398349088064047;\n//   let (c1, c2) = single_standard_encryption_fe(gen, g_pub_key, m, r);\n//   std::println(c1);\n//   std::println(c2);\n\n// }\n\n// TODO assumes exponent under 32 bits?\nfn single_decryption_fe(\n  c1: Field,\n  c2: Field,\n  x: Field\n) -> Field {\n\n  // The shared secret\n  let s = c1.pow_32(x);\n  let s_inv = 1/s;\n  \n  // Check in parigp\n  // Mod(1/31250, 21888242871839275222246405745257275088548364400416034343698204186575808495617)\n  // note that this assumes field is bn254\n  \n  // Check here - works\n  // let test = s * s_inv;\n  // std::println(\"test\");\n  // std::println(test);\n\n  // recover and return m\n  c2 * s_inv\n}\n\n\n#[test]\nfn test_single_encryption_fe_1() {\n  // small values\n\n  // priv key\n  let x = 2;\n  let gen = 5;\n  // pub_key = gen^x\n  // assumes exponent fits in 32 bits\n  // 25 = 0x19\n  let pub_key = gen.pow_32(x);\n\n  let msg = 11111;\n  let randomness = 6;\n  let (c1, c2) = single_standard_encryption_fe(gen, pub_key, msg, randomness);\n  let m_decrypted =  single_decryption_fe(c1, c2, x);\n  \n  assert(msg == m_decrypted);\n}\n\n#[test]\nfn test_single_encryption_fe_2() {\n  // with generated values parigp\n  // random(21888242871839275222246405745257275088548364400416034343698204186575808495617)\n\n  // priv key\n  let x = 7115637666404682632379307215493662218327241124760828634863089038725962038957;\n  \n  // gen = 0x183227397098d014dc2822db40c0ac2e9419f4243cdcb848a1f0fac9fd2c88d0\n  let gen = 10944121435919637611123202872628637544274182200208017171849102093287991052496;\n  \n  // pub_key = gen^x\n  let pub_key = gen.pow_32(x);\n  std::println(pub_key); // 0x06c4dfa71f2a7a8810dc34ce86938764a51b6bf5bce71da90c1c5fc9407e0ebc\n\n  let msg = 11111;\n  // hex 25ea07206ae935e88e774161a280fc15ddd2cbc78d99d2123f3bd562956d466a\n  let randomness = 17149066796940759370530693659488791163567038136671713582338765584448638240362;\n  let (c1, c2) = single_standard_encryption_fe(gen, pub_key, msg, randomness);\n  let m_decrypted =  single_decryption_fe(c1, c2, x);\n\n  assert(msg == m_decrypted);\n}","path":"/Users/jack-sw/Codes/abstract/dex-build/token-bridge-uniswap/packages/aztec-contracts/noir-elgamal/src/elgamal/standard_fe.nr"}}}