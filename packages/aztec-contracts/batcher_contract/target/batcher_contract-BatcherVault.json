{"noir_version":"0.27.0+783feebcc2543497cc9a23db958af64902afa589","name":"BatcherVault","functions":[{"name":"get_batch_relayer","is_unconstrained":true,"custom_attributes":[],"abi":{"parameters":[],"param_witnesses":{},"return_type":{"abi_type":{"kind":"struct","path":"relayer::BatchRelayer","fields":[{"name":"relayer","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"bonding_token","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"bonding_amount","type":{"kind":"field"}},{"name":"he_pub_key","type":{"kind":"field"}},{"name":"sk_hash","type":{"kind":"field"}},{"name":"last_timestamp","type":{"kind":"field"}},{"name":"interval","type":{"kind":"field"}}]},"visibility":"public"},"return_witnesses":[0,1,2,3,4,5,6]},"bytecode":"H4sIAAAAAAAA/72YzW/TQBDF159x4sSpk5S2nAInOOFCSU4gI8EJTtw5BCV8XBopbSX45yPYdl/9PLGbyvV2pMjT8ezMm1/WyrqOurHw/8cxvqcK66hdQ54r8n1zDajmL+NHtD43H23ZQ+wsm4fcWJjWHhs/pjyXYo5fnkHHXL88j455fnk2HfP9Yk7EAr/ojVjolxmkVLxDfKBr2xafLJslqjCHemHevL1ep44qW04+85V5Md3n70buL83qG90PKtaEFf3gl74744cVa5lTQLPkxs8eZtecuFdOf6PfgHSEj6CHH6Fc7T7Lunen/d5ZpIrnosW6cz1Tl2bIVflZU2ZG5Dw31wO1a1wLOnlPahsQqy71sTDbqa7Zs8QsFsygv0fMkPNyD7O4hllEzMAqpnsWZnut6/YtMRsIZtDfJ2bIyfYwG9Qw6xGzmHwwszDbG103scRsKJhBf0LMkDPfw2xYw6xPnMBqSMwszHYWkc4W614zSwWzRHDxKee9uCeZpTXMEmIGVikxszDbW113ZInZWDCD/hExQ86nPczGNcwOiBlYjYmZhdlmuu7EErNDwQz6J8QMOV8EA8nssIbZiJiBFXJjoQEx9OffjCfk43pEtRE7Nv6QYifGTyn21PhjirkV+jDHhGI4M7Em6D+iGM5zxxTDOeKEYvidhKauKp/dW3xPmEekK2+xLnOB3fWeYPus21PFXrm4XG8WP1dfV4ulQ9IgtyPkOqosfUs5LsXZ9ypiW7ryduDXTdTl7e8KRLwNkd9Vu3hbfU/wVLXx/wkcI9YzQwVGtASq7Zm5Yt9/2GwWf6e/z5erP9P11eV0/WP6fX11vrzgRS+aLHrVZNGsyaJ3TRZ9bLLo830X3a74B/wQn2zwEQAA","debug_symbols":"zdrdSsNAEAXgd9nrIDOzOzu7eRXxImqFQklLGwUpeXcb22yFFMSg5tzl5wz7EcK5SPboNtunpltv24Orj47umF19f3SHXdMOFw5ds+9cLUSeK7dqnz+PNfeVe1lvVq5W6atJnJn1kmYOsYSZ7Ubam1zCgX3JJu0fqgEkaCCPBgpoIEUDRTSQoYESGiiDgYTQQGhNLWhNLWhNLWhNLWhNLWhNLX/d1OdV0r+s8judqrGsYumbh8skNqbJX00hnUme8EiMRxI8kscjBTyS4pHiAqTMJU00JRkeKeGRMhwpEB6J8UiCR1qgvdlfSeEGKeCRFI8U8UiGR0p4pAxH0gXam+OXtE5JjEcSPJLHIwU8kuKRIh5pifbOaUwL2ZSU8EgZjhQJj8R4JMEjeTzSAu0tvnymkDD9TBEVjxTxSIZHSnikDEcywiMt0N5iVEiWpyTBI3k8UsAjKR4p4pEMjpRvv95xbA5PocyMv0hzmDGjM2bijBmbMZN+NnM6eWv26+Zxsxo20Q33XtuncU/d6bR7353v9B8="},{"name":"_validate_claim_params","is_unconstrained":true,"custom_attributes":["aztec(public)","aztec(internal)"],"abi":{"parameters":[{"name":"inputs","type":{"kind":"struct","path":"aztec::context::inputs::public_context_inputs::PublicContextInputs","fields":[{"name":"call_context","type":{"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"storage_contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"portal_contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"gas_left","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l1_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}},{"name":"side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"gas_settings","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::GasSettings","fields":[{"name":"da","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::DimensionGasSettings","fields":[{"name":"gas_limit","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"teardown_gas_limit","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"max_fee_per_gas","type":{"kind":"field"}}]}},{"name":"l1","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::DimensionGasSettings","fields":[{"name":"gas_limit","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"teardown_gas_limit","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"max_fee_per_gas","type":{"kind":"field"}}]}},{"name":"l2","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::DimensionGasSettings","fields":[{"name":"gas_limit","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"teardown_gas_limit","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"max_fee_per_gas","type":{"kind":"field"}}]}},{"name":"inclusion_fee","type":{"kind":"field"}}]}},{"name":"transaction_fee","type":{"kind":"field"}}]}},{"name":"historical_header","type":{"kind":"struct","path":"aztec::protocol_types::header::Header","fields":[{"name":"last_archive","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"content_commitment","type":{"kind":"struct","path":"aztec::protocol_types::content_commitment::ContentCommitment","fields":[{"name":"tx_tree_height","type":{"kind":"field"}},{"name":"txs_effects_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}]}},{"name":"state","type":{"kind":"struct","path":"aztec::protocol_types::state_reference::StateReference","fields":[{"name":"l1_to_l2_message_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"partial","type":{"kind":"struct","path":"aztec::protocol_types::partial_state_reference::PartialStateReference","fields":[{"name":"note_hash_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"nullifier_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"public_data_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}}]}},{"name":"global_variables","type":{"kind":"struct","path":"aztec::protocol_types::abis::global_variables::GlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"fee_recipient","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"gas_fees","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l1_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}}]}}]}},{"name":"public_global_variables","type":{"kind":"struct","path":"aztec::protocol_types::abis::global_variables::GlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"fee_recipient","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"gas_fees","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l1_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}}]}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}]},"visibility":"private"},{"name":"_round","type":{"kind":"field"},"visibility":"private"},{"name":"_total_token_in","type":{"kind":"field"},"visibility":"private"},{"name":"_total_token_out","type":{"kind":"field"},"visibility":"private"}],"param_witnesses":{"_round":[{"start":54,"end":55}],"_total_token_in":[{"start":55,"end":56}],"_total_token_out":[{"start":56,"end":57}],"inputs":[{"start":0,"end":54}]},"return_type":{"abi_type":{"kind":"struct","path":"aztec::protocol_types::abis::public_circuit_public_inputs::PublicCircuitPublicInputs","fields":[{"name":"call_context","type":{"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"storage_contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"portal_contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"gas_left","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l1_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}},{"name":"side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"gas_settings","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::GasSettings","fields":[{"name":"da","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::DimensionGasSettings","fields":[{"name":"gas_limit","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"teardown_gas_limit","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"max_fee_per_gas","type":{"kind":"field"}}]}},{"name":"l1","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::DimensionGasSettings","fields":[{"name":"gas_limit","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"teardown_gas_limit","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"max_fee_per_gas","type":{"kind":"field"}}]}},{"name":"l2","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::DimensionGasSettings","fields":[{"name":"gas_limit","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"teardown_gas_limit","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"max_fee_per_gas","type":{"kind":"field"}}]}},{"name":"inclusion_fee","type":{"kind":"field"}}]}},{"name":"transaction_fee","type":{"kind":"field"}}]}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"nullifier_read_requests","type":{"kind":"array","length":2,"type":{"kind":"struct","path":"aztec::protocol_types::abis::read_request::ReadRequest","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"nullifier_non_existent_read_requests","type":{"kind":"array","length":2,"type":{"kind":"struct","path":"aztec::protocol_types::abis::read_request::ReadRequest","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"contract_storage_update_requests","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::contrakt::storage_update_request::StorageUpdateRequest","fields":[{"name":"storage_slot","type":{"kind":"field"}},{"name":"new_value","type":{"kind":"field"}}]}}},{"name":"contract_storage_reads","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::contrakt::storage_read::StorageRead","fields":[{"name":"storage_slot","type":{"kind":"field"}},{"name":"current_value","type":{"kind":"field"}}]}}},{"name":"public_call_stack_hashes","type":{"kind":"array","length":4,"type":{"kind":"field"}}},{"name":"new_note_hashes","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::abis::side_effect::SideEffect","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"new_nullifiers","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::abis::side_effect::SideEffectLinkedToNoteHash","fields":[{"name":"value","type":{"kind":"field"}},{"name":"note_hash","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"new_l2_to_l1_msgs","type":{"kind":"array","length":2,"type":{"kind":"struct","path":"aztec::protocol_types::messaging::l2_to_l1_message::L2ToL1Message","fields":[{"name":"recipient","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"content","type":{"kind":"field"}}]}}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"unencrypted_logs_hash","type":{"kind":"field"}},{"name":"unencrypted_log_preimages_length","type":{"kind":"field"}},{"name":"historical_header","type":{"kind":"struct","path":"aztec::protocol_types::header::Header","fields":[{"name":"last_archive","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"content_commitment","type":{"kind":"struct","path":"aztec::protocol_types::content_commitment::ContentCommitment","fields":[{"name":"tx_tree_height","type":{"kind":"field"}},{"name":"txs_effects_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}]}},{"name":"state","type":{"kind":"struct","path":"aztec::protocol_types::state_reference::StateReference","fields":[{"name":"l1_to_l2_message_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"partial","type":{"kind":"struct","path":"aztec::protocol_types::partial_state_reference::PartialStateReference","fields":[{"name":"note_hash_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"nullifier_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"public_data_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}}]}},{"name":"global_variables","type":{"kind":"struct","path":"aztec::protocol_types::abis::global_variables::GlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"fee_recipient","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"gas_fees","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l1_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}}]}}]}},{"name":"prover_address","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"revert_code","type":{"kind":"integer","sign":"unsigned","width":8}},{"name":"gas_left","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l1_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]},"visibility":"public"},"return_witnesses":[57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271]},"bytecode":"","debug_symbols":"5Z3fzizXcV/fhddC0FW7/uytVwlyoTgKIECgDIsJEAh69zRhznck+KPIGnJ+XINzZcmanq5xzaw+3F7r6G/f/Pkv//aH7/70l2//+s3v//bN9d88zje//+9/++av//6Hb7//3/z1uz/8x3ff/P763Td//PZ/3f/z77/75n//6c9//Ob36X//H7/7/oK8phfY9AKfXrCmF8T0gvzZF/zuv7zM/aofXum+4uPFdvXj7eu1b9+vffv92rc/L337ul779vbat/fXvv167dvHa9/+tb/aeu2vtl77q63X/mrrtb/afu2vtl/7q+3X/mr7tb/afu2vtl/7q+3X/mr7tb/afu2vtl/7q92v/dXu1/5q92t/tfsX/Wqv9XilX9+/4h/e/pNX1/kYpk5/NkyQhknSMEUapknDbNIwBzTMuUjDGGkYJw1DIvAhEfiQCHxIBD4kAh8SgQ+IwOsCEXhdIAKvC0TgdYEIvC4QgdcFIvC6QAReF4jA6wIReF0kAhuJwEYisJEIbCQCG4nARiKwkQhsJAIbicBGIrCTCOwkAjuJwE4isJMI7CQCO4nATiKwkwjsJAIvEoEXicCLROBFIvAiEXiRCLxIBF4kAi8SgReJwEEicJAIHCQCB4nAQSJwkAgcJAIHicBBInCQCJwkAieJwEkicJIInCQCJ4nASSJwkgicJAInicBFInCRCFwkAheJwEUicJEIXCQCF4nARSJwkQjcJAI3icBNInCTCNwkAjeJwE0icJMI3CQCN4nAm0TgTSLwJhGY1MQtUhO3SE3cIjVxi9TELVITt0hN3CI1cYvUxC1SE7dITdwiNXGL1MQtUhO3SE3cIjVxi9TEBamJC1ITF6QmLkhNXFwgAgepiQtSExekJi5ITVyQmrggNXFBauKC1MQFqYkLUhMXpCYuSE1ckJq4IDVxQWrigtTEBamJC1ITF6QmLkhNXJCauCA1cUFq4oLUxAWpiQtSExekJi5ITVyQmrggNXFBauKC1MQFqYkLUhMXpCYuSE1ckJq4IDVxQWrigtTEBamJC1ITF6QmLkhNXJCauCA1cUFq4oLUxAWpiQtSExekJi5ITVyQmrggNXFBauKC1MQFqYkLUhMXpCYuSE1ckJq4IDVxQWrigtTEBamJC1ITF6QmLkhNXJCauCA1cUFq4oLUxAWpiQtSExekJi5ITVyQmrggNXFBauKC1MQFqYkLUhMXpCYuSE1ckJq4IDVxQWrigtTEBamJC1ITF6QmLkhNXJCauCA1cUFq4pLUxCWpiUtSE5ekJi4vEIGT1MQlqYlLUhOXpCYuSU1ckpq4JDVxSWriktTEJamJS1ITl6QmLklNXJKauCQ1cUlq4pLUxCWpiUtSE5ekJi5JTVySmrgkNXFJauKS1MQlqYlLUhOXpCYuSU1ckpq4JDVxSWriktTEJamJS1ITl6QmLklNXJKauCQ1cUlq4pLUxCWpiUtSE5ekJi5JTVySmrgkNXFJauJS2cR1rceru+KzYYI0TJKGKdIwTRpmk4Y5oGGUTdxPD2OkYZw0DInARSJwkQhcJAIXicBFInCRCNwkAjeJwE0icJMI3CQCN4nATSJwkwjcJAI3icCbROBNIvAmEXiTCLxJBN4kAm8SgTeJwJtE4E0i8CER+JAIfEgEPiQCHxKBD4nAh0TgQyLwIRH4gAhcF4jAdYEIXBeIwHWBCFwXiMB1gQhcF4jAdYEIXBeIwHWRCGwkAhuJwEYisJEIbCQCG4nARiKwkQhsJAIbicBOIrCTCOwkAjuJwE4isJMI7CQCO4nATiKwkwi8SAReJAIvEoEXicCLROBFIvAiEXiRCLxIBF4kAgeJwEEicJAIHCQCB4nAQSJwkAgcJAIHicBBInCSCJwkAieJwKQmrkhNXJGauCI1cUVq4orUxBWpiStSE1ekJq5ITVyRmrgiNXFFauKK1MQVqYkrUhNXpCauSE1ckZq4IjVxRWriitTEFamJK1ITV6QmrkhNXJGauCI1cUVq4orUxBWpiStSE1ekJq5ITVyRmrgiNXFFauKK1MQVqYkrUhNXpCauSE1ckZq4IjVxRWriitTEFamJa1IT16QmrklNXJOauL5ABG5SE9ekJq5JTVyTmrgmNXFNauKa1MQ1qYlrUhPXpCauSU1ck5q4JjVxTWrimtTENamJa1IT16QmrklNXJOauCY1cU1q4prUxDWpiWtSE9ekJq5JTVyTmrgmNXFNauKa1MQ1qYlrUhPXpCauSU1ck5q4JjVxTWrimtTENamJa1IT16QmrklNXJOauCY1cU1q4prUxDWpiWtSE9ekJq5JTVyTmrgmNXFNauKa1MQ1qYlrUhPXpCauSU1ck5q4JjVxTWrimtTENamJa1IT16QmrklNXJOauCY1cU1q4prUxDWpiWtSE9ekJq5JTVyTmrgmNXFNauKa1MQ1qYlrUhPXpCauSU1ck5q4JjVxTWrimtTENamJa1IT16QmrklNXJOauCY1cU1q4prUxG1SE7dJTdwmNXGb1MTtC0TgTWriNqmJ26QmbpOauE1q4japidukJm6TmrhNauI2qYnbpCZuk5q4TWriNqmJ26QmbpOauE1q4rayidtfXr2XfTbMIg0TpGGSNIyQwLv3xzB9PhumScNs0jAHNIyyifvpYYScOZc9Xn3ss1+Tsvz66WF0v6a1On549f0v87NhdL+mFeaPYSL8s2EOaBhhxfMzhlmkYYI0TJKGKdIwTRqGxJkgcUZY8fyMYYw0DInAqSTw+XhqZ9lPvDrOfrx3XvHlnz/dPkaP9x0933f0Qoz+wzDKZ0H2x0/pfDrMJg1zQMPURRrGSMM4aZhFGiZIwyRpmCINQyJwkQhcJAI3icBNInCTCNwkAjeJwE0icJMI3CQCN4nATSLwJhF4kwi8SQTeJAJvEoE3icCbROBNIvAmEXiTCHxIBD4k6B0S9A4JeocEvUOCnjDhWbkf7sGq+OVH2MLg51cf/bzr6GeQzPxwwZpeENMLcnpBTS/o6QV7esEZXjBICn64wKYXTDdt003bdNM23bRNN23TTdt00zbdtE837dNN+3TTPt20Tzft0037dNM+3bRPN+3TTa/pptd002u66TXd9Jpuek03vaabXtNNr+mm13TTMd10TDcd003HdNMx3XRMNx3TTcd00zHddEw3ndNN53TTOd10Tjed003ndNM53XRON53TTed00zXddE03XdNN13TTNd10TTdd003XdNM13XRNN93TTfd00z3ddE833dNN93TTPd10Tzfd0033dNN7uuk93fSebnpPN72nm97TTe/ppvd003u66T3d9Jlu+kw3faabPtNNn+mmz3TTZ7rpM930mW76DDdt13WNr7DxFT6+Yo2viPEVOb6ixlf0+Io9vmK8cxvv3MY7t/HObbxzG+/cxju38c5tvHMb79zGO/fxzn28cx/v3Mc79/HOfbxzH+/cxzv38c59vPM13vka73yNd77GO1/jna/xztd452u88zXe+RrvPMY7j/HOY7zzGO88xjuP8c5jvPMY7zzGO4/xznO88xzvPMc7z/HOc7zzHO88xzvP8c5zvPMc77zGO6/xzmu88xrvvMY7r/HOa7zzGu+8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9ydxvfuTuN79SVzv/iSud38S17s/ievnPIn3T9zFzPLxaov6p/v811evj78cPezLTDs/RmreSJs30sGN1BdvJOON5LyRFm+k4I2UvJF49G4evZtH7+bRe/PovXn03jx6bx69N4/em0fvzaP35tF78+i9efQ+PHofHr0Pj96HR+/Do/fh0fvw6H149D48eh8cvc+Fo/e5cPQ+F47e58LR+1w4ep8LR+9z4eh9Lhy9z4Wj97l49DYevY1Hb+PR23j0Nh69jUdv49HbePQ2Hr2NR2/n0dt59HYevZ1Hb+fR23n0dh69nUdv59HbefRePHovHr0Xj96LR+/Fo/fi0Xvx6L149F48ei8evYNH7+DRO3j0Dh69g0fv4NE7ePQOHr2DR+/g0Tt59E4evZNH7+TRO3n0Th69k0fv5NE7efROHr2LR+/i0bt49C4evYtH7+LRm9daHl5reXit5eG1lofXWh5ea3l4reXhtZaH11oeXmt5eK3l4bWWh9daHl5reXit5eG1lofXWh5ea3l4reXhtZaH11oeXmt5eK3l4bWWh9daHl5reXit5eG1lofXWh5ea3l4reXhtZaH11oeXGvpF661vEei0fseiUbveyQave+RaPS+R6LR+x6JRu97JBq975Fo9L5H4tEb11reI/HojWst75F49Ma1lvdIPHrjWst7JB69ca3lPRKP3rjW8h6JR29ca3mPxKM3rrW8R+LRG9da3iPx6I1rLe+RePTGtZb3SDx641rLeyQevXGt5T0Sj9641vIeiUdvXGt5j8SjN661vEfi0RvXWt4j8eiNay3vkXj0xrWW90g8euNay3skHr1xreU9Eo/euNbyHolHb1xreY/EozeutbxH4tEb11reI/HojWst75F49Ma1lvdIPHrjWst7JB69ca3lPRKP3rjW8h6JR29ca3mPxKM3rrW8R+LRG9da3iPx6I1rLe+RePTGtZb3SDx641rLeyQevXGt5T0Sj9641vIeiUdvXGt5j8SjN661vEfi0RvXWt4j8eiNay3vkXj0xrWW90g8euNay3skHr1xreU9Eo7exmstjddaGq+1NF5raReO3sZrLY3XWhqvtTRea2m81tJ4raXxWkvjtZbGay2N11oar7U0XmtpvNbSeK2l8VpL47WWxmstjddaGq+1NF5rabzW0nitpfFaS+O1lsZrLY3XWhqvtTRe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"},{"name":"get_token_out","is_unconstrained":true,"custom_attributes":[],"abi":{"parameters":[],"param_witnesses":{},"return_type":{"abi_type":{"kind":"field"},"visibility":"public"},"return_witnesses":[0]},"bytecode":"H4sIAAAAAAAA/72UTU7DMBCFnd+mREWwRLAIexaO4ADmCtwgKAGxaaS0leDyERh56CfHu5o+KZrxeOx5fh4nUUckzmaBmODB2Qox4z4LfQqedFvaTXIVxOrnK5xfIy91sWvEEvCU+TkWT60fL9VSowramXi1Wv8ODPwMevh5NeZTxFJvrdX1HvNFYE0ZqCc+70SurgyspU4FzmKcr0/Dr06sZTCWehvwKM/Ah61sMC5QexW/tq7U8Y3GPtMaZzDgL/Vy5Nw5e6WW4F7Ckz1psYFWklsHdGRf58jnm4z4/lu7bwnesfbl2aiT8nQS/HcPXzhtLXb7cereh5eh6xNQyz2atKQ+Y5wiTj8LxGZY/k6kro1Ju4Tagb8iv73Wailv1LeSqTCSgM/YrbM3zj5PU/fVfGz74bMZD/tmfGtex8O23/2t+AbXU+RoygcAAA==","debug_symbols":"zZdBasMwFETvorUpmi/JknyV0oWaumAwTojdQjG+e+3EcRYJhJgkzE4fzfAfWjxQr+rtJnXVtmlV0Sv95lTx3qt2l5ppbru071SBGBAyVTZfh7ONQ6a+q7pUhZMhu4gLvJ3TItotYeBa2niZwxZmyQY3fGQjT07G48l4AhlPJOOBZgMCG5CwARk2IMsGxGZpsGkabJ4Gm6jBZmphM7U829THLfKSLQ9xqsAtW4y/8bhAPDFB9Pl5BZiZLCGTI2TKCZk8IVMgZIp8TOaqCyT3c8toe+FCY1d03IpOvqLjV3TCfZ1x+E37Kn3W5fRRnu5+ms3p3zyO3d/ueDP8Aw=="},{"name":"cancel_batch_and_claim","is_unconstrained":false,"custom_attributes":["aztec(private)"],"abi":{"parameters":[{"name":"inputs","type":{"kind":"struct","path":"aztec::context::inputs::private_context_inputs::PrivateContextInputs","fields":[{"name":"call_context","type":{"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"storage_contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"portal_contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"gas_left","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l1_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}},{"name":"side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"gas_settings","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::GasSettings","fields":[{"name":"da","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::DimensionGasSettings","fields":[{"name":"gas_limit","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"teardown_gas_limit","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"max_fee_per_gas","type":{"kind":"field"}}]}},{"name":"l1","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::DimensionGasSettings","fields":[{"name":"gas_limit","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"teardown_gas_limit","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"max_fee_per_gas","type":{"kind":"field"}}]}},{"name":"l2","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::DimensionGasSettings","fields":[{"name":"gas_limit","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"teardown_gas_limit","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"max_fee_per_gas","type":{"kind":"field"}}]}},{"name":"inclusion_fee","type":{"kind":"field"}}]}},{"name":"transaction_fee","type":{"kind":"field"}}]}},{"name":"historical_header","type":{"kind":"struct","path":"aztec::protocol_types::header::Header","fields":[{"name":"last_archive","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"content_commitment","type":{"kind":"struct","path":"aztec::protocol_types::content_commitment::ContentCommitment","fields":[{"name":"tx_tree_height","type":{"kind":"field"}},{"name":"txs_effects_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}]}},{"name":"state","type":{"kind":"struct","path":"aztec::protocol_types::state_reference::StateReference","fields":[{"name":"l1_to_l2_message_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"partial","type":{"kind":"struct","path":"aztec::protocol_types::partial_state_reference::PartialStateReference","fields":[{"name":"note_hash_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"nullifier_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"public_data_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}}]}},{"name":"global_variables","type":{"kind":"struct","path":"aztec::protocol_types::abis::global_variables::GlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"fee_recipient","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"gas_fees","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l1_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}}]}}]}},{"name":"private_global_variables","type":{"kind":"struct","path":"aztec::context::globals::private_global_variables::PrivateGlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}}]}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}]},"visibility":"private"},{"name":"current_round","type":{"kind":"field"},"visibility":"private"},{"name":"secret_hash","type":{"kind":"field"},"visibility":"private"}],"param_witnesses":{"current_round":[{"start":47,"end":48}],"inputs":[{"start":0,"end":47}],"secret_hash":[{"start":48,"end":49}]},"return_type":{"abi_type":{"kind":"struct","path":"aztec::protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs","fields":[{"name":"call_context","type":{"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"storage_contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"portal_contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"gas_left","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l1_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}},{"name":"side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"gas_settings","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::GasSettings","fields":[{"name":"da","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::DimensionGasSettings","fields":[{"name":"gas_limit","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"teardown_gas_limit","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"max_fee_per_gas","type":{"kind":"field"}}]}},{"name":"l1","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::DimensionGasSettings","fields":[{"name":"gas_limit","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"teardown_gas_limit","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"max_fee_per_gas","type":{"kind":"field"}}]}},{"name":"l2","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::DimensionGasSettings","fields":[{"name":"gas_limit","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"teardown_gas_limit","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"max_fee_per_gas","type":{"kind":"field"}}]}},{"name":"inclusion_fee","type":{"kind":"field"}}]}},{"name":"transaction_fee","type":{"kind":"field"}}]}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"min_revertible_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"max_block_number","type":{"kind":"struct","path":"aztec::protocol_types::abis::max_block_number::MaxBlockNumber","fields":[{"name":"_opt","type":{"kind":"struct","path":"std::option::Option","fields":[{"name":"_is_some","type":{"kind":"boolean"}},{"name":"_value","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}},{"name":"note_hash_read_requests","type":{"kind":"array","length":32,"type":{"kind":"struct","path":"aztec::protocol_types::abis::side_effect::SideEffect","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"nullifier_read_requests","type":{"kind":"array","length":2,"type":{"kind":"struct","path":"aztec::protocol_types::abis::read_request::ReadRequest","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"nullifier_key_validation_requests","type":{"kind":"array","length":1,"type":{"kind":"struct","path":"aztec::protocol_types::abis::nullifier_key_validation_request::NullifierKeyValidationRequest","fields":[{"name":"public_key","type":{"kind":"struct","path":"aztec::protocol_types::grumpkin_point::GrumpkinPoint","fields":[{"name":"x","type":{"kind":"field"}},{"name":"y","type":{"kind":"field"}}]}},{"name":"secret_key","type":{"kind":"struct","path":"aztec::protocol_types::grumpkin_private_key::GrumpkinPrivateKey","fields":[{"name":"high","type":{"kind":"field"}},{"name":"low","type":{"kind":"field"}}]}}]}}},{"name":"new_note_hashes","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::abis::side_effect::SideEffect","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"new_nullifiers","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::abis::side_effect::SideEffectLinkedToNoteHash","fields":[{"name":"value","type":{"kind":"field"}},{"name":"note_hash","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"private_call_stack_hashes","type":{"kind":"array","length":4,"type":{"kind":"field"}}},{"name":"public_call_stack_hashes","type":{"kind":"array","length":4,"type":{"kind":"field"}}},{"name":"new_l2_to_l1_msgs","type":{"kind":"array","length":2,"type":{"kind":"struct","path":"aztec::protocol_types::messaging::l2_to_l1_message::L2ToL1Message","fields":[{"name":"recipient","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"content","type":{"kind":"field"}}]}}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"encrypted_logs_hash","type":{"kind":"field"}},{"name":"unencrypted_logs_hash","type":{"kind":"field"}},{"name":"encrypted_log_preimages_length","type":{"kind":"field"}},{"name":"unencrypted_log_preimages_length","type":{"kind":"field"}},{"name":"historical_header","type":{"kind":"struct","path":"aztec::protocol_types::header::Header","fields":[{"name":"last_archive","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"content_commitment","type":{"kind":"struct","path":"aztec::protocol_types::content_commitment::ContentCommitment","fields":[{"name":"tx_tree_height","type":{"kind":"field"}},{"name":"txs_effects_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}]}},{"name":"state","type":{"kind":"struct","path":"aztec::protocol_types::state_reference::StateReference","fields":[{"name":"l1_to_l2_message_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"partial","type":{"kind":"struct","path":"aztec::protocol_types::partial_state_reference::PartialStateReference","fields":[{"name":"note_hash_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"nullifier_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"public_data_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}}]}},{"name":"global_variables","type":{"kind":"struct","path":"aztec::protocol_types::abis::global_variables::GlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"fee_recipient","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"gas_fees","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l1_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}}]}}]}},{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}}]},"visibility":"public"},"return_witnesses":[1047,1048,1049,1050,1051,1052,1053,1054,1055,1056,1057,1058,1059,1060,1061,1062,1063,1064,1065,1066,1067,1068,1069,1070,1071,1072,1073,1074,1075,1076,1077,1078,1079,1080,1081,1082,1083,1084,1085,1086,1087,1088,1089,1090,1091,1092,1093,1094,1095,1096,1097,1098,1099,1100,1101,1102,1103,1104,1105,1106,1107,1108,1109,1110,1111,1112,1113,1114,1115,1116,1117,1118,1119,1120,1121,1122,1123,1124,1125,1126,1127,1128,1129,1130,1131,1132,1133,1134,1135,1136,1137,1138,1139,1140,1141,1142,1143,1144,1145,1146,1147,1148,1149,1150,1151,1152,1153,1154,1155,1156,1157,1158,1159,1160,1161,1162,1163,1164,1165,1166,1167,1168,1169,1170,1171,1172,1173,1174,1175,1176,1177,1178,1179,1180,1181,1182,1183,1184,1185,1186,1187,1188,1189,1190,1191,1192,1193,1194,1195,1196,1197,1198,1199,1200,1201,1202,1203,1204,1205,1206,1207,1208,1209,1210,1211,1212,1213,1214,1215,1216,1217,1218,1219,1220,1221,1222,1223,1224,1225,1226,1227,1228,1229,1230,1231,1232,1233,1234,1235,1236,1237,1238,1239,1240,1241,1242,1243,1244,1245,1246,1247,1248,1249,1250,1251,1252,1253,1254,1255,1256,1257,1258,1259,1260,1261,1262,1263,1264,1265,1266,1267]},"bytecode":"","debug_symbols":""},{"name":"deposit_to_batch","is_unconstrained":false,"custom_attributes":["aztec(private)"],"abi":{"parameters":[{"name":"inputs","type":{"kind":"struct","path":"aztec::context::inputs::private_context_inputs::PrivateContextInputs","fields":[{"name":"call_context","type":{"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"storage_contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"portal_contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"gas_left","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l1_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}},{"name":"side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"gas_settings","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::GasSettings","fields":[{"name":"da","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::DimensionGasSettings","fields":[{"name":"gas_limit","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"teardown_gas_limit","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"max_fee_per_gas","type":{"kind":"field"}}]}},{"name":"l1","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::DimensionGasSettings","fields":[{"name":"gas_limit","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"teardown_gas_limit","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"max_fee_per_gas","type":{"kind":"field"}}]}},{"name":"l2","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::DimensionGasSettings","fields":[{"name":"gas_limit","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"teardown_gas_limit","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"max_fee_per_gas","type":{"kind":"field"}}]}},{"name":"inclusion_fee","type":{"kind":"field"}}]}},{"name":"transaction_fee","type":{"kind":"field"}}]}},{"name":"historical_header","type":{"kind":"struct","path":"aztec::protocol_types::header::Header","fields":[{"name":"last_archive","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"content_commitment","type":{"kind":"struct","path":"aztec::protocol_types::content_commitment::ContentCommitment","fields":[{"name":"tx_tree_height","type":{"kind":"field"}},{"name":"txs_effects_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}]}},{"name":"state","type":{"kind":"struct","path":"aztec::protocol_types::state_reference::StateReference","fields":[{"name":"l1_to_l2_message_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"partial","type":{"kind":"struct","path":"aztec::protocol_types::partial_state_reference::PartialStateReference","fields":[{"name":"note_hash_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"nullifier_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"public_data_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}}]}},{"name":"global_variables","type":{"kind":"struct","path":"aztec::protocol_types::abis::global_variables::GlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"fee_recipient","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"gas_fees","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l1_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}}]}}]}},{"name":"private_global_variables","type":{"kind":"struct","path":"aztec::context::globals::private_global_variables::PrivateGlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}}]}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}]},"visibility":"private"},{"name":"current_round","type":{"kind":"field"},"visibility":"private"},{"name":"amount_out","type":{"kind":"field"},"visibility":"private"},{"name":"relayer_he_pubkey","type":{"kind":"field"},"visibility":"private"},{"name":"he_add_rand","type":{"kind":"field"},"visibility":"private"},{"name":"nonce","type":{"kind":"field"},"visibility":"private"}],"param_witnesses":{"amount_out":[{"start":48,"end":49}],"current_round":[{"start":47,"end":48}],"he_add_rand":[{"start":50,"end":51}],"inputs":[{"start":0,"end":47}],"nonce":[{"start":51,"end":52}],"relayer_he_pubkey":[{"start":49,"end":50}]},"return_type":{"abi_type":{"kind":"struct","path":"aztec::protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs","fields":[{"name":"call_context","type":{"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"storage_contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"portal_contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"gas_left","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l1_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}},{"name":"side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"gas_settings","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::GasSettings","fields":[{"name":"da","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::DimensionGasSettings","fields":[{"name":"gas_limit","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"teardown_gas_limit","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"max_fee_per_gas","type":{"kind":"field"}}]}},{"name":"l1","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::DimensionGasSettings","fields":[{"name":"gas_limit","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"teardown_gas_limit","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"max_fee_per_gas","type":{"kind":"field"}}]}},{"name":"l2","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::DimensionGasSettings","fields":[{"name":"gas_limit","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"teardown_gas_limit","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"max_fee_per_gas","type":{"kind":"field"}}]}},{"name":"inclusion_fee","type":{"kind":"field"}}]}},{"name":"transaction_fee","type":{"kind":"field"}}]}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"min_revertible_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"max_block_number","type":{"kind":"struct","path":"aztec::protocol_types::abis::max_block_number::MaxBlockNumber","fields":[{"name":"_opt","type":{"kind":"struct","path":"std::option::Option","fields":[{"name":"_is_some","type":{"kind":"boolean"}},{"name":"_value","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}},{"name":"note_hash_read_requests","type":{"kind":"array","length":32,"type":{"kind":"struct","path":"aztec::protocol_types::abis::side_effect::SideEffect","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"nullifier_read_requests","type":{"kind":"array","length":2,"type":{"kind":"struct","path":"aztec::protocol_types::abis::read_request::ReadRequest","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"nullifier_key_validation_requests","type":{"kind":"array","length":1,"type":{"kind":"struct","path":"aztec::protocol_types::abis::nullifier_key_validation_request::NullifierKeyValidationRequest","fields":[{"name":"public_key","type":{"kind":"struct","path":"aztec::protocol_types::grumpkin_point::GrumpkinPoint","fields":[{"name":"x","type":{"kind":"field"}},{"name":"y","type":{"kind":"field"}}]}},{"name":"secret_key","type":{"kind":"struct","path":"aztec::protocol_types::grumpkin_private_key::GrumpkinPrivateKey","fields":[{"name":"high","type":{"kind":"field"}},{"name":"low","type":{"kind":"field"}}]}}]}}},{"name":"new_note_hashes","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::abis::side_effect::SideEffect","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"new_nullifiers","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::abis::side_effect::SideEffectLinkedToNoteHash","fields":[{"name":"value","type":{"kind":"field"}},{"name":"note_hash","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"private_call_stack_hashes","type":{"kind":"array","length":4,"type":{"kind":"field"}}},{"name":"public_call_stack_hashes","type":{"kind":"array","length":4,"type":{"kind":"field"}}},{"name":"new_l2_to_l1_msgs","type":{"kind":"array","length":2,"type":{"kind":"struct","path":"aztec::protocol_types::messaging::l2_to_l1_message::L2ToL1Message","fields":[{"name":"recipient","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"content","type":{"kind":"field"}}]}}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"encrypted_logs_hash","type":{"kind":"field"}},{"name":"unencrypted_logs_hash","type":{"kind":"field"}},{"name":"encrypted_log_preimages_length","type":{"kind":"field"}},{"name":"unencrypted_log_preimages_length","type":{"kind":"field"}},{"name":"historical_header","type":{"kind":"struct","path":"aztec::protocol_types::header::Header","fields":[{"name":"last_archive","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"content_commitment","type":{"kind":"struct","path":"aztec::protocol_types::content_commitment::ContentCommitment","fields":[{"name":"tx_tree_height","type":{"kind":"field"}},{"name":"txs_effects_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}]}},{"name":"state","type":{"kind":"struct","path":"aztec::protocol_types::state_reference::StateReference","fields":[{"name":"l1_to_l2_message_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"partial","type":{"kind":"struct","path":"aztec::protocol_types::partial_state_reference::PartialStateReference","fields":[{"name":"note_hash_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"nullifier_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"public_data_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}}]}},{"name":"global_variables","type":{"kind":"struct","path":"aztec::protocol_types::abis::global_variables::GlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"fee_recipient","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"gas_fees","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l1_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}}]}}]}},{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}}]},"visibility":"public"},"return_witnesses":[1265,1266,1267,1268,1269,1270,1271,1272,1273,1274,1275,1276,1277,1278,1279,1280,1281,1282,1283,1284,1285,1286,1287,1288,1289,1290,1291,1292,1293,1294,1295,1296,1297,1298,1299,1300,1301,1302,1303,1304,1305,1306,1307,1308,1309,1310,1311,1312,1313,1314,1315,1316,1317,1318,1319,1320,1321,1322,1323,1324,1325,1326,1327,1328,1329,1330,1331,1332,1333,1334,1335,1336,1337,1338,1339,1340,1341,1342,1343,1344,1345,1346,1347,1348,1349,1350,1351,1352,1353,1354,1355,1356,1357,1358,1359,1360,1361,1362,1363,1364,1365,1366,1367,1368,1369,1370,1371,1372,1373,1374,1375,1376,1377,1378,1379,1380,1381,1382,1383,1384,1385,1386,1387,1388,1389,1390,1391,1392,1393,1394,1395,1396,1397,1398,1399,1400,1401,1402,1403,1404,1405,1406,1407,1408,1409,1410,1411,1412,1413,1414,1415,1416,1417,1418,1419,1420,1421,1422,1423,1424,1425,1426,1427,1428,1429,1430,1431,1432,1433,1434,1435,1436,1437,1438,1439,1440,1441,1442,1443,1444,1445,1446,1447,1448,1449,1450,1451,1452,1453,1454,1455,1456,1457,1458,1459,1460,1461,1462,1463,1464,1465,1466,1467,1468,1469,1470,1471,1472,1473,1474,1475,1476,1477,1478,1479,1480,1481,1482,1483,1484,1485]},"bytecode":"","debug_symbols":""},{"name":"get_sk_hash","is_unconstrained":true,"custom_attributes":[],"abi":{"parameters":[{"name":"he_secret_key","type":{"kind":"field"},"visibility":"private"}],"param_witnesses":{"he_secret_key":[{"start":0,"end":1}]},"return_type":{"abi_type":{"kind":"field"},"visibility":"public"},"return_witnesses":[1]},"bytecode":"H4sIAAAAAAAA/7VU0QrDIAw0tY0dg4097H2f4MY+wP//qumawDUtfWkMSOMZLnepSGEJktUiQo6hWJFvPhdvR65MRudT8hnw4tXvmz/cSMb1XDSudQ26kZpUF8M5Ca51D8AItE/e2uvcW/9oNFsPBfIJ9Iwd9HTy+b8TbDxF4+kGNQP45A4+Cfoqt+4Zeiv28uudG2/q4OleOS4w12Tmi3d+3sFw5kG4Nm9PcfwBKvTogds7Cz/RdEw2KgUAAA==","debug_symbols":"vdTBCsMgDAbgd8lZhrF1db7K2MF1DgSxpbrBEN99utGeem1u+ckP3ynJ4KfRJDeFCDoDP51BXzPE2YSWYzJLAi14j8jAhsdvlkNh8HTegpaisJ264msbUW3ljpcbq8ZAYCgC40JgIKdAkAIRFEhHgfQUiKRAKM4dj773Gt5mcebubftibfcK4/rUakyf+b8pXw=="},{"name":"compute_note_hash_and_nullifier","is_unconstrained":true,"custom_attributes":[],"abi":{"parameters":[{"name":"contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]},"visibility":"private"},{"name":"nonce","type":{"kind":"field"},"visibility":"private"},{"name":"storage_slot","type":{"kind":"field"},"visibility":"private"},{"name":"note_type_id","type":{"kind":"field"},"visibility":"private"},{"name":"serialized_note","type":{"kind":"array","length":20,"type":{"kind":"field"}},"visibility":"private"}],"param_witnesses":{"contract_address":[{"start":0,"end":1}],"nonce":[{"start":1,"end":2}],"note_type_id":[{"start":3,"end":4}],"serialized_note":[{"start":4,"end":24}],"storage_slot":[{"start":2,"end":3}]},"return_type":{"abi_type":{"kind":"array","length":4,"type":{"kind":"field"}},"visibility":"public"},"return_witnesses":[24,25,26,27]},"bytecode":"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","debug_symbols":"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"},{"name":"dipute_relayer","is_unconstrained":false,"custom_attributes":["aztec(private)"],"abi":{"parameters":[{"name":"inputs","type":{"kind":"struct","path":"aztec::context::inputs::private_context_inputs::PrivateContextInputs","fields":[{"name":"call_context","type":{"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"storage_contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"portal_contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"gas_left","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l1_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}},{"name":"side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"gas_settings","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::GasSettings","fields":[{"name":"da","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::DimensionGasSettings","fields":[{"name":"gas_limit","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"teardown_gas_limit","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"max_fee_per_gas","type":{"kind":"field"}}]}},{"name":"l1","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::DimensionGasSettings","fields":[{"name":"gas_limit","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"teardown_gas_limit","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"max_fee_per_gas","type":{"kind":"field"}}]}},{"name":"l2","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::DimensionGasSettings","fields":[{"name":"gas_limit","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"teardown_gas_limit","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"max_fee_per_gas","type":{"kind":"field"}}]}},{"name":"inclusion_fee","type":{"kind":"field"}}]}},{"name":"transaction_fee","type":{"kind":"field"}}]}},{"name":"historical_header","type":{"kind":"struct","path":"aztec::protocol_types::header::Header","fields":[{"name":"last_archive","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"content_commitment","type":{"kind":"struct","path":"aztec::protocol_types::content_commitment::ContentCommitment","fields":[{"name":"tx_tree_height","type":{"kind":"field"}},{"name":"txs_effects_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}]}},{"name":"state","type":{"kind":"struct","path":"aztec::protocol_types::state_reference::StateReference","fields":[{"name":"l1_to_l2_message_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"partial","type":{"kind":"struct","path":"aztec::protocol_types::partial_state_reference::PartialStateReference","fields":[{"name":"note_hash_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"nullifier_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"public_data_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}}]}},{"name":"global_variables","type":{"kind":"struct","path":"aztec::protocol_types::abis::global_variables::GlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"fee_recipient","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"gas_fees","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l1_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}}]}}]}},{"name":"private_global_variables","type":{"kind":"struct","path":"aztec::context::globals::private_global_variables::PrivateGlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}}]}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}]},"visibility":"private"},{"name":"he_secret_key","type":{"kind":"field"},"visibility":"private"},{"name":"new_sk_hash","type":{"kind":"field"},"visibility":"private"},{"name":"new_he_pub_key","type":{"kind":"field"},"visibility":"private"},{"name":"new_he_secret_key","type":{"kind":"field"},"visibility":"private"},{"name":"new_relayer","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]},"visibility":"private"},{"name":"secret_hash","type":{"kind":"field"},"visibility":"private"},{"name":"nonce","type":{"kind":"field"},"visibility":"private"}],"param_witnesses":{"he_secret_key":[{"start":47,"end":48}],"inputs":[{"start":0,"end":47}],"new_he_pub_key":[{"start":49,"end":50}],"new_he_secret_key":[{"start":50,"end":51}],"new_relayer":[{"start":51,"end":52}],"new_sk_hash":[{"start":48,"end":49}],"nonce":[{"start":53,"end":54}],"secret_hash":[{"start":52,"end":53}]},"return_type":{"abi_type":{"kind":"struct","path":"aztec::protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs","fields":[{"name":"call_context","type":{"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"storage_contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"portal_contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"gas_left","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l1_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}},{"name":"side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"gas_settings","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::GasSettings","fields":[{"name":"da","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::DimensionGasSettings","fields":[{"name":"gas_limit","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"teardown_gas_limit","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"max_fee_per_gas","type":{"kind":"field"}}]}},{"name":"l1","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::DimensionGasSettings","fields":[{"name":"gas_limit","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"teardown_gas_limit","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"max_fee_per_gas","type":{"kind":"field"}}]}},{"name":"l2","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::DimensionGasSettings","fields":[{"name":"gas_limit","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"teardown_gas_limit","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"max_fee_per_gas","type":{"kind":"field"}}]}},{"name":"inclusion_fee","type":{"kind":"field"}}]}},{"name":"transaction_fee","type":{"kind":"field"}}]}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"min_revertible_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"max_block_number","type":{"kind":"struct","path":"aztec::protocol_types::abis::max_block_number::MaxBlockNumber","fields":[{"name":"_opt","type":{"kind":"struct","path":"std::option::Option","fields":[{"name":"_is_some","type":{"kind":"boolean"}},{"name":"_value","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}},{"name":"note_hash_read_requests","type":{"kind":"array","length":32,"type":{"kind":"struct","path":"aztec::protocol_types::abis::side_effect::SideEffect","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"nullifier_read_requests","type":{"kind":"array","length":2,"type":{"kind":"struct","path":"aztec::protocol_types::abis::read_request::ReadRequest","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"nullifier_key_validation_requests","type":{"kind":"array","length":1,"type":{"kind":"struct","path":"aztec::protocol_types::abis::nullifier_key_validation_request::NullifierKeyValidationRequest","fields":[{"name":"public_key","type":{"kind":"struct","path":"aztec::protocol_types::grumpkin_point::GrumpkinPoint","fields":[{"name":"x","type":{"kind":"field"}},{"name":"y","type":{"kind":"field"}}]}},{"name":"secret_key","type":{"kind":"struct","path":"aztec::protocol_types::grumpkin_private_key::GrumpkinPrivateKey","fields":[{"name":"high","type":{"kind":"field"}},{"name":"low","type":{"kind":"field"}}]}}]}}},{"name":"new_note_hashes","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::abis::side_effect::SideEffect","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"new_nullifiers","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::abis::side_effect::SideEffectLinkedToNoteHash","fields":[{"name":"value","type":{"kind":"field"}},{"name":"note_hash","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"private_call_stack_hashes","type":{"kind":"array","length":4,"type":{"kind":"field"}}},{"name":"public_call_stack_hashes","type":{"kind":"array","length":4,"type":{"kind":"field"}}},{"name":"new_l2_to_l1_msgs","type":{"kind":"array","length":2,"type":{"kind":"struct","path":"aztec::protocol_types::messaging::l2_to_l1_message::L2ToL1Message","fields":[{"name":"recipient","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"content","type":{"kind":"field"}}]}}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"encrypted_logs_hash","type":{"kind":"field"}},{"name":"unencrypted_logs_hash","type":{"kind":"field"}},{"name":"encrypted_log_preimages_length","type":{"kind":"field"}},{"name":"unencrypted_log_preimages_length","type":{"kind":"field"}},{"name":"historical_header","type":{"kind":"struct","path":"aztec::protocol_types::header::Header","fields":[{"name":"last_archive","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"content_commitment","type":{"kind":"struct","path":"aztec::protocol_types::content_commitment::ContentCommitment","fields":[{"name":"tx_tree_height","type":{"kind":"field"}},{"name":"txs_effects_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}]}},{"name":"state","type":{"kind":"struct","path":"aztec::protocol_types::state_reference::StateReference","fields":[{"name":"l1_to_l2_message_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"partial","type":{"kind":"struct","path":"aztec::protocol_types::partial_state_reference::PartialStateReference","fields":[{"name":"note_hash_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"nullifier_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"public_data_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}}]}},{"name":"global_variables","type":{"kind":"struct","path":"aztec::protocol_types::abis::global_variables::GlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"fee_recipient","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"gas_fees","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l1_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}}]}}]}},{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}}]},"visibility":"public"},"return_witnesses":[605,606,607,608,609,610,611,612,613,614,615,616,617,618,619,620,621,622,623,624,625,626,627,628,629,630,631,632,633,634,635,636,637,638,639,640,641,642,643,644,645,646,647,648,649,650,651,652,653,654,655,656,657,658,659,660,661,662,663,664,665,666,667,668,669,670,671,672,673,674,675,676,677,678,679,680,681,682,683,684,685,686,687,688,689,690,691,692,693,694,695,696,697,698,699,700,701,702,703,704,705,706,707,708,709,710,711,712,713,714,715,716,717,718,719,720,721,722,723,724,725,726,727,728,729,730,731,732,733,734,735,736,737,738,739,740,741,742,743,744,745,746,747,748,749,750,751,752,753,754,755,756,757,758,759,760,761,762,763,764,765,766,767,768,769,770,771,772,773,774,775,776,777,778,779,780,781,782,783,784,785,786,787,788,789,790,791,792,793,794,795,796,797,798,799,800,801,802,803,804,805,806,807,808,809,810,811,812,813,814,815,816,817,818,819,820,821,822,823,824,825]},"bytecode":"","debug_symbols":""},{"name":"claim_token_in","is_unconstrained":false,"custom_attributes":["aztec(private)"],"abi":{"parameters":[{"name":"inputs","type":{"kind":"struct","path":"aztec::context::inputs::private_context_inputs::PrivateContextInputs","fields":[{"name":"call_context","type":{"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"storage_contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"portal_contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"gas_left","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l1_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}},{"name":"side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"gas_settings","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::GasSettings","fields":[{"name":"da","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::DimensionGasSettings","fields":[{"name":"gas_limit","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"teardown_gas_limit","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"max_fee_per_gas","type":{"kind":"field"}}]}},{"name":"l1","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::DimensionGasSettings","fields":[{"name":"gas_limit","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"teardown_gas_limit","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"max_fee_per_gas","type":{"kind":"field"}}]}},{"name":"l2","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::DimensionGasSettings","fields":[{"name":"gas_limit","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"teardown_gas_limit","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"max_fee_per_gas","type":{"kind":"field"}}]}},{"name":"inclusion_fee","type":{"kind":"field"}}]}},{"name":"transaction_fee","type":{"kind":"field"}}]}},{"name":"historical_header","type":{"kind":"struct","path":"aztec::protocol_types::header::Header","fields":[{"name":"last_archive","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"content_commitment","type":{"kind":"struct","path":"aztec::protocol_types::content_commitment::ContentCommitment","fields":[{"name":"tx_tree_height","type":{"kind":"field"}},{"name":"txs_effects_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}]}},{"name":"state","type":{"kind":"struct","path":"aztec::protocol_types::state_reference::StateReference","fields":[{"name":"l1_to_l2_message_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"partial","type":{"kind":"struct","path":"aztec::protocol_types::partial_state_reference::PartialStateReference","fields":[{"name":"note_hash_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"nullifier_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"public_data_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}}]}},{"name":"global_variables","type":{"kind":"struct","path":"aztec::protocol_types::abis::global_variables::GlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"fee_recipient","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"gas_fees","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l1_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}}]}}]}},{"name":"private_global_variables","type":{"kind":"struct","path":"aztec::context::globals::private_global_variables::PrivateGlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}}]}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}]},"visibility":"private"},{"name":"round","type":{"kind":"field"},"visibility":"private"},{"name":"total_token_in","type":{"kind":"field"},"visibility":"private"},{"name":"total_token_out","type":{"kind":"field"},"visibility":"private"}],"param_witnesses":{"inputs":[{"start":0,"end":47}],"round":[{"start":47,"end":48}],"total_token_in":[{"start":48,"end":49}],"total_token_out":[{"start":49,"end":50}]},"return_type":{"abi_type":{"kind":"struct","path":"aztec::protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs","fields":[{"name":"call_context","type":{"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"storage_contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"portal_contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"gas_left","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l1_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}},{"name":"side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"gas_settings","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::GasSettings","fields":[{"name":"da","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::DimensionGasSettings","fields":[{"name":"gas_limit","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"teardown_gas_limit","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"max_fee_per_gas","type":{"kind":"field"}}]}},{"name":"l1","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::DimensionGasSettings","fields":[{"name":"gas_limit","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"teardown_gas_limit","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"max_fee_per_gas","type":{"kind":"field"}}]}},{"name":"l2","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::DimensionGasSettings","fields":[{"name":"gas_limit","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"teardown_gas_limit","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"max_fee_per_gas","type":{"kind":"field"}}]}},{"name":"inclusion_fee","type":{"kind":"field"}}]}},{"name":"transaction_fee","type":{"kind":"field"}}]}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"min_revertible_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"max_block_number","type":{"kind":"struct","path":"aztec::protocol_types::abis::max_block_number::MaxBlockNumber","fields":[{"name":"_opt","type":{"kind":"struct","path":"std::option::Option","fields":[{"name":"_is_some","type":{"kind":"boolean"}},{"name":"_value","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}},{"name":"note_hash_read_requests","type":{"kind":"array","length":32,"type":{"kind":"struct","path":"aztec::protocol_types::abis::side_effect::SideEffect","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"nullifier_read_requests","type":{"kind":"array","length":2,"type":{"kind":"struct","path":"aztec::protocol_types::abis::read_request::ReadRequest","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"nullifier_key_validation_requests","type":{"kind":"array","length":1,"type":{"kind":"struct","path":"aztec::protocol_types::abis::nullifier_key_validation_request::NullifierKeyValidationRequest","fields":[{"name":"public_key","type":{"kind":"struct","path":"aztec::protocol_types::grumpkin_point::GrumpkinPoint","fields":[{"name":"x","type":{"kind":"field"}},{"name":"y","type":{"kind":"field"}}]}},{"name":"secret_key","type":{"kind":"struct","path":"aztec::protocol_types::grumpkin_private_key::GrumpkinPrivateKey","fields":[{"name":"high","type":{"kind":"field"}},{"name":"low","type":{"kind":"field"}}]}}]}}},{"name":"new_note_hashes","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::abis::side_effect::SideEffect","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"new_nullifiers","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::abis::side_effect::SideEffectLinkedToNoteHash","fields":[{"name":"value","type":{"kind":"field"}},{"name":"note_hash","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"private_call_stack_hashes","type":{"kind":"array","length":4,"type":{"kind":"field"}}},{"name":"public_call_stack_hashes","type":{"kind":"array","length":4,"type":{"kind":"field"}}},{"name":"new_l2_to_l1_msgs","type":{"kind":"array","length":2,"type":{"kind":"struct","path":"aztec::protocol_types::messaging::l2_to_l1_message::L2ToL1Message","fields":[{"name":"recipient","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"content","type":{"kind":"field"}}]}}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"encrypted_logs_hash","type":{"kind":"field"}},{"name":"unencrypted_logs_hash","type":{"kind":"field"}},{"name":"encrypted_log_preimages_length","type":{"kind":"field"}},{"name":"unencrypted_log_preimages_length","type":{"kind":"field"}},{"name":"historical_header","type":{"kind":"struct","path":"aztec::protocol_types::header::Header","fields":[{"name":"last_archive","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"content_commitment","type":{"kind":"struct","path":"aztec::protocol_types::content_commitment::ContentCommitment","fields":[{"name":"tx_tree_height","type":{"kind":"field"}},{"name":"txs_effects_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}]}},{"name":"state","type":{"kind":"struct","path":"aztec::protocol_types::state_reference::StateReference","fields":[{"name":"l1_to_l2_message_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"partial","type":{"kind":"struct","path":"aztec::protocol_types::partial_state_reference::PartialStateReference","fields":[{"name":"note_hash_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"nullifier_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"public_data_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}}]}},{"name":"global_variables","type":{"kind":"struct","path":"aztec::protocol_types::abis::global_variables::GlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"fee_recipient","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"gas_fees","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l1_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}}]}}]}},{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}}]},"visibility":"public"},"return_witnesses":[990,991,992,993,994,995,996,997,998,999,1000,1001,1002,1003,1004,1005,1006,1007,1008,1009,1010,1011,1012,1013,1014,1015,1016,1017,1018,1019,1020,1021,1022,1023,1024,1025,1026,1027,1028,1029,1030,1031,1032,1033,1034,1035,1036,1037,1038,1039,1040,1041,1042,1043,1044,1045,1046,1047,1048,1049,1050,1051,1052,1053,1054,1055,1056,1057,1058,1059,1060,1061,1062,1063,1064,1065,1066,1067,1068,1069,1070,1071,1072,1073,1074,1075,1076,1077,1078,1079,1080,1081,1082,1083,1084,1085,1086,1087,1088,1089,1090,1091,1092,1093,1094,1095,1096,1097,1098,1099,1100,1101,1102,1103,1104,1105,1106,1107,1108,1109,1110,1111,1112,1113,1114,1115,1116,1117,1118,1119,1120,1121,1122,1123,1124,1125,1126,1127,1128,1129,1130,1131,1132,1133,1134,1135,1136,1137,1138,1139,1140,1141,1142,1143,1144,1145,1146,1147,1148,1149,1150,1151,1152,1153,1154,1155,1156,1157,1158,1159,1160,1161,1162,1163,1164,1165,1166,1167,1168,1169,1170,1171,1172,1173,1174,1175,1176,1177,1178,1179,1180,1181,1182,1183,1184,1185,1186,1187,1188,1189,1190,1191,1192,1193,1194,1195,1196,1197,1198,1199,1200,1201,1202,1203,1204,1205,1206,1207,1208,1209,1210]},"bytecode":"","debug_symbols":""},{"name":"get_encrypted_sum","is_unconstrained":true,"custom_attributes":[],"abi":{"parameters":[{"name":"current_round","type":{"kind":"field"},"visibility":"private"}],"param_witnesses":{"current_round":[{"start":0,"end":1}]},"return_type":{"abi_type":{"kind":"array","length":2,"type":{"kind":"field"}},"visibility":"public"},"return_witnesses":[1,2]},"bytecode":"H4sIAAAAAAAA/81ayW7bMBClJK9R7MRO99Xd91beux3UX+gfpLVT9BIDWYD22J7aj+i9Xxk0ZDjNM6MEDfIGNQFBFEU9vnmcGdmkInNQ4v0j8vUE6likLffn7GylS8TKIuAYB/Xf/roGtuSssQdZv2JBSvMaSUmBj/Sp7h9rwKnE59S1uGU2bpb1ap4/GdfNn8xP2eNW4Vq0qptDnUljd3HsyB91GFOmTupt6Cv9RA+Za+He2D8qvl4/4blS8FwT+lQK7M8N1/5qwKcacC5DW8va4AnHwE3D32z8JGa+hDGWQx19hR5XmVpcZRZX5nmPhzsumtsk0KoJfdDXFOLc+Vo54CPXMt5pOccLwBn9omO4flHj29RbMQexnQB/c4xdS75O9MvMmOLcsgTjLvs6Mde790zqsUpmPhcvQ7v02QA+Buo5hc+wXzOH+YyHOx5YrJiOO9qwWAmfbw/zNZHvXL4m4o4xXxNxh5jDeLi9uTxCnLc+/iYh6vAR8w7bf1O+DgPMV+x5a9Bx+w63qcR3hT9vU4u1quQPLSV/aCvpu8bXweXJc3xcF8fnlXAvKPnDRb4/uPfFJT5f9764zMd1/nuF778ujq8qxcU1Ou7B77PrfH9w+t5Q8t+bfL7u91mHz9flnVt8XBdvt/m4Lt7uKPnvXf68Of+9x9fB5d/7Sv77gK+Di7eHSvo+UvKHx3x9JxbrCV8HFxdPlfR9puQPz5Xm7YWSDpmSDl2+n7m83uPzde+hvpIOAyV/GPL1HVmskZK+Yz5fl9df8nFdPnulNG+v6bh9Fxdv+Hyn8t/Ylrf+3IQ2XFPS2kPCkkO9XsAnWgA+qSner60HmuEeLt77BfdljSaGNrE3KcBuQJusRzULnkWdGmBL7uvZ2YrTCcfK4boB5yjg+L/5VAv4aO39yPwItlxXdbUY4FoaEXdkbZJ8IXvtwl/GK0Gf7/6MOUZKFLTn5qiP43zhGp6CbUNczyPiOs3agWbCvwWaSZ+fgb2hZu1jNFsBzeRZXEds823rYQ5CjibgaAr4aORuJTvd3l8rsCkNbGpCH4xvBZ/qFvmBXLdgHk7DeXUBOKfQlsJZ7uP7Nw5swe89sH8N2on70CPcxyPqNLJ2yH6mlJNiCvcSFb4v6S6Zw7nY3pltrX+avp+uT/CzuVJABe8h9T3oE0M71pOCtj04p4Ah49q28JMvdJEKtAk+fqZ05JPF3J+zsxXn8wmIEZYY7sXBtZRv/ixr9e+2tta/dj5vTqZfOrPdnc5so/Nhtrs52caHfvzrQ3+f+APh8rafzykAAA==","debug_symbols":"1ZzNbtpAFIXfxWtUzZ2Z+8erVF3QlEpIiESBVqoQ715obdKKUNoojc7ZYXyu57MX5/NmvB/W93eL3ep+sx3m+6G8kxzm7/fD9mGxOf2x3S0ed8O8llpiNiw3n3787uUwGz6v1sthrvUwu4intDGcZueoSHsm2zPKGNbS+zldxQ8fZkeiWuCIBI6owhE1OKIOR6RwRAZH5HBEAUcE19kNrrMbXGc3uM5ucJ3d4Dq7wXV2e43OltJlTEvJuMEk4dMNSBb786XNbcxatl8uPOE7N35w4yc1fi/c+MKNX7nxGzd+58ZXbnxu63Zu63Zu63Zu6yq3dZXbusptXeW2rnJbV7mtq9zWVW7rKrd1ldu6xm1d47aucVvXuK1r3NY1busat3WN27rGbV3jtq5zW9e5revc1nVu6zq3dZ3bus5tXee2rnNb17mtG9zWDW7rBrd1g9u6wW3d4LZucFs3uK0b3NYNbusmt3WT27rJbd3ktm5yWze5rZvc1k1u6ya3dZPbulK4tSuF27tS/kq8foNfRCci6fbbMpfp5nUMd3lCCp2IGhxRhyNSOCKDI3I4ooAjSjQiKXBEAkcE19kC19kC19kC19kC19kC19kC19kC19kVrrMrXGdXuM6u/7uzx2X62yzzOu2qdl7G48bzdZuY3J+2pmuZiAyOyOGIAo4o0YhagSMSOKL65kQhUziqPkPU4Ig6HJHCERkckcMRBRrRlZ1l5uNQK/3y9efKfq4bQ/mCoSt7l24MyUuG6r8NHQ++Lh5Xi4/r5ekLiKdzXzZ30wcRj4e7bw8/zxy+Aw=="},{"name":"execute_batch","is_unconstrained":false,"custom_attributes":["aztec(private)"],"abi":{"parameters":[{"name":"inputs","type":{"kind":"struct","path":"aztec::context::inputs::private_context_inputs::PrivateContextInputs","fields":[{"name":"call_context","type":{"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"storage_contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"portal_contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"gas_left","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l1_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}},{"name":"side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"gas_settings","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::GasSettings","fields":[{"name":"da","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::DimensionGasSettings","fields":[{"name":"gas_limit","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"teardown_gas_limit","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"max_fee_per_gas","type":{"kind":"field"}}]}},{"name":"l1","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::DimensionGasSettings","fields":[{"name":"gas_limit","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"teardown_gas_limit","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"max_fee_per_gas","type":{"kind":"field"}}]}},{"name":"l2","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::DimensionGasSettings","fields":[{"name":"gas_limit","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"teardown_gas_limit","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"max_fee_per_gas","type":{"kind":"field"}}]}},{"name":"inclusion_fee","type":{"kind":"field"}}]}},{"name":"transaction_fee","type":{"kind":"field"}}]}},{"name":"historical_header","type":{"kind":"struct","path":"aztec::protocol_types::header::Header","fields":[{"name":"last_archive","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"content_commitment","type":{"kind":"struct","path":"aztec::protocol_types::content_commitment::ContentCommitment","fields":[{"name":"tx_tree_height","type":{"kind":"field"}},{"name":"txs_effects_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}]}},{"name":"state","type":{"kind":"struct","path":"aztec::protocol_types::state_reference::StateReference","fields":[{"name":"l1_to_l2_message_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"partial","type":{"kind":"struct","path":"aztec::protocol_types::partial_state_reference::PartialStateReference","fields":[{"name":"note_hash_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"nullifier_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"public_data_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}}]}},{"name":"global_variables","type":{"kind":"struct","path":"aztec::protocol_types::abis::global_variables::GlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"fee_recipient","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"gas_fees","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l1_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}}]}}]}},{"name":"private_global_variables","type":{"kind":"struct","path":"aztec::context::globals::private_global_variables::PrivateGlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}}]}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}]},"visibility":"private"},{"name":"encrypted_amount","type":{"kind":"array","length":2,"type":{"kind":"field"}},"visibility":"private"},{"name":"secret_key","type":{"kind":"field"},"visibility":"private"},{"name":"token_out_amount_cancelled","type":{"kind":"field"},"visibility":"private"},{"name":"input_asset_bridge","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]},"visibility":"private"},{"name":"output_asset_bridge","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]},"visibility":"private"},{"name":"nonce_for_transfer_approval","type":{"kind":"field"},"visibility":"private"},{"name":"uniswap_fee_tier","type":{"kind":"field"},"visibility":"private"},{"name":"minimum_output_amount","type":{"kind":"field"},"visibility":"private"},{"name":"secret_hash_for_L1_to_l2_message","type":{"kind":"field"},"visibility":"private"},{"name":"caller_on_L1","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]},"visibility":"private"},{"name":"nonce_for_swap_approval","type":{"kind":"field"},"visibility":"private"}],"param_witnesses":{"caller_on_L1":[{"start":57,"end":58}],"encrypted_amount":[{"start":47,"end":49}],"input_asset_bridge":[{"start":51,"end":52}],"inputs":[{"start":0,"end":47}],"minimum_output_amount":[{"start":55,"end":56}],"nonce_for_swap_approval":[{"start":58,"end":59}],"nonce_for_transfer_approval":[{"start":53,"end":54}],"output_asset_bridge":[{"start":52,"end":53}],"secret_hash_for_L1_to_l2_message":[{"start":56,"end":57}],"secret_key":[{"start":49,"end":50}],"token_out_amount_cancelled":[{"start":50,"end":51}],"uniswap_fee_tier":[{"start":54,"end":55}]},"return_type":{"abi_type":{"kind":"struct","path":"aztec::protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs","fields":[{"name":"call_context","type":{"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"storage_contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"portal_contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"gas_left","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l1_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}},{"name":"side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"gas_settings","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::GasSettings","fields":[{"name":"da","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::DimensionGasSettings","fields":[{"name":"gas_limit","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"teardown_gas_limit","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"max_fee_per_gas","type":{"kind":"field"}}]}},{"name":"l1","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::DimensionGasSettings","fields":[{"name":"gas_limit","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"teardown_gas_limit","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"max_fee_per_gas","type":{"kind":"field"}}]}},{"name":"l2","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::DimensionGasSettings","fields":[{"name":"gas_limit","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"teardown_gas_limit","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"max_fee_per_gas","type":{"kind":"field"}}]}},{"name":"inclusion_fee","type":{"kind":"field"}}]}},{"name":"transaction_fee","type":{"kind":"field"}}]}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"min_revertible_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"max_block_number","type":{"kind":"struct","path":"aztec::protocol_types::abis::max_block_number::MaxBlockNumber","fields":[{"name":"_opt","type":{"kind":"struct","path":"std::option::Option","fields":[{"name":"_is_some","type":{"kind":"boolean"}},{"name":"_value","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}},{"name":"note_hash_read_requests","type":{"kind":"array","length":32,"type":{"kind":"struct","path":"aztec::protocol_types::abis::side_effect::SideEffect","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"nullifier_read_requests","type":{"kind":"array","length":2,"type":{"kind":"struct","path":"aztec::protocol_types::abis::read_request::ReadRequest","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"nullifier_key_validation_requests","type":{"kind":"array","length":1,"type":{"kind":"struct","path":"aztec::protocol_types::abis::nullifier_key_validation_request::NullifierKeyValidationRequest","fields":[{"name":"public_key","type":{"kind":"struct","path":"aztec::protocol_types::grumpkin_point::GrumpkinPoint","fields":[{"name":"x","type":{"kind":"field"}},{"name":"y","type":{"kind":"field"}}]}},{"name":"secret_key","type":{"kind":"struct","path":"aztec::protocol_types::grumpkin_private_key::GrumpkinPrivateKey","fields":[{"name":"high","type":{"kind":"field"}},{"name":"low","type":{"kind":"field"}}]}}]}}},{"name":"new_note_hashes","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::abis::side_effect::SideEffect","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"new_nullifiers","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::abis::side_effect::SideEffectLinkedToNoteHash","fields":[{"name":"value","type":{"kind":"field"}},{"name":"note_hash","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"private_call_stack_hashes","type":{"kind":"array","length":4,"type":{"kind":"field"}}},{"name":"public_call_stack_hashes","type":{"kind":"array","length":4,"type":{"kind":"field"}}},{"name":"new_l2_to_l1_msgs","type":{"kind":"array","length":2,"type":{"kind":"struct","path":"aztec::protocol_types::messaging::l2_to_l1_message::L2ToL1Message","fields":[{"name":"recipient","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"content","type":{"kind":"field"}}]}}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"encrypted_logs_hash","type":{"kind":"field"}},{"name":"unencrypted_logs_hash","type":{"kind":"field"}},{"name":"encrypted_log_preimages_length","type":{"kind":"field"}},{"name":"unencrypted_log_preimages_length","type":{"kind":"field"}},{"name":"historical_header","type":{"kind":"struct","path":"aztec::protocol_types::header::Header","fields":[{"name":"last_archive","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"content_commitment","type":{"kind":"struct","path":"aztec::protocol_types::content_commitment::ContentCommitment","fields":[{"name":"tx_tree_height","type":{"kind":"field"}},{"name":"txs_effects_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}]}},{"name":"state","type":{"kind":"struct","path":"aztec::protocol_types::state_reference::StateReference","fields":[{"name":"l1_to_l2_message_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"partial","type":{"kind":"struct","path":"aztec::protocol_types::partial_state_reference::PartialStateReference","fields":[{"name":"note_hash_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"nullifier_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"public_data_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}}]}},{"name":"global_variables","type":{"kind":"struct","path":"aztec::protocol_types::abis::global_variables::GlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"fee_recipient","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"gas_fees","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l1_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}}]}}]}},{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}}]},"visibility":"public"},"return_witnesses":[488,489,490,491,492,493,494,495,496,497,498,499,500,501,502,503,504,505,506,507,508,509,510,511,512,513,514,515,516,517,518,519,520,521,522,523,524,525,526,527,528,529,530,531,532,533,534,535,536,537,538,539,540,541,542,543,544,545,546,547,548,549,550,551,552,553,554,555,556,557,558,559,560,561,562,563,564,565,566,567,568,569,570,571,572,573,574,575,576,577,578,579,580,581,582,583,584,585,586,587,588,589,590,591,592,593,594,595,596,597,598,599,600,601,602,603,604,605,606,607,608,609,610,611,612,613,614,615,616,617,618,619,620,621,622,623,624,625,626,627,628,629,630,631,632,633,634,635,636,637,638,639,640,641,642,643,644,645,646,647,648,649,650,651,652,653,654,655,656,657,658,659,660,661,662,663,664,665,666,667,668,669,670,671,672,673,674,675,676,677,678,679,680,681,682,683,684,685,686,687,688,689,690,691,692,693,694,695,696,697,698,699,700,701,702,703,704,705,706,707,708]},"bytecode":"","debug_symbols":"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"},{"name":"spend_public_authwit","is_unconstrained":true,"custom_attributes":["aztec(public)"],"abi":{"parameters":[{"name":"inputs","type":{"kind":"struct","path":"aztec::context::inputs::public_context_inputs::PublicContextInputs","fields":[{"name":"call_context","type":{"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"storage_contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"portal_contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"gas_left","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l1_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}},{"name":"side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"gas_settings","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::GasSettings","fields":[{"name":"da","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::DimensionGasSettings","fields":[{"name":"gas_limit","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"teardown_gas_limit","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"max_fee_per_gas","type":{"kind":"field"}}]}},{"name":"l1","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::DimensionGasSettings","fields":[{"name":"gas_limit","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"teardown_gas_limit","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"max_fee_per_gas","type":{"kind":"field"}}]}},{"name":"l2","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::DimensionGasSettings","fields":[{"name":"gas_limit","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"teardown_gas_limit","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"max_fee_per_gas","type":{"kind":"field"}}]}},{"name":"inclusion_fee","type":{"kind":"field"}}]}},{"name":"transaction_fee","type":{"kind":"field"}}]}},{"name":"historical_header","type":{"kind":"struct","path":"aztec::protocol_types::header::Header","fields":[{"name":"last_archive","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"content_commitment","type":{"kind":"struct","path":"aztec::protocol_types::content_commitment::ContentCommitment","fields":[{"name":"tx_tree_height","type":{"kind":"field"}},{"name":"txs_effects_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}]}},{"name":"state","type":{"kind":"struct","path":"aztec::protocol_types::state_reference::StateReference","fields":[{"name":"l1_to_l2_message_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"partial","type":{"kind":"struct","path":"aztec::protocol_types::partial_state_reference::PartialStateReference","fields":[{"name":"note_hash_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"nullifier_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"public_data_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}}]}},{"name":"global_variables","type":{"kind":"struct","path":"aztec::protocol_types::abis::global_variables::GlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"fee_recipient","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"gas_fees","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l1_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}}]}}]}},{"name":"public_global_variables","type":{"kind":"struct","path":"aztec::protocol_types::abis::global_variables::GlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"fee_recipient","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"gas_fees","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l1_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}}]}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}]},"visibility":"private"},{"name":"inner_hash","type":{"kind":"field"},"visibility":"private"}],"param_witnesses":{"inner_hash":[{"start":54,"end":55}],"inputs":[{"start":0,"end":54}]},"return_type":{"abi_type":{"kind":"struct","path":"aztec::protocol_types::abis::public_circuit_public_inputs::PublicCircuitPublicInputs","fields":[{"name":"call_context","type":{"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"storage_contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"portal_contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"gas_left","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l1_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}},{"name":"side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"gas_settings","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::GasSettings","fields":[{"name":"da","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::DimensionGasSettings","fields":[{"name":"gas_limit","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"teardown_gas_limit","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"max_fee_per_gas","type":{"kind":"field"}}]}},{"name":"l1","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::DimensionGasSettings","fields":[{"name":"gas_limit","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"teardown_gas_limit","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"max_fee_per_gas","type":{"kind":"field"}}]}},{"name":"l2","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::DimensionGasSettings","fields":[{"name":"gas_limit","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"teardown_gas_limit","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"max_fee_per_gas","type":{"kind":"field"}}]}},{"name":"inclusion_fee","type":{"kind":"field"}}]}},{"name":"transaction_fee","type":{"kind":"field"}}]}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"nullifier_read_requests","type":{"kind":"array","length":2,"type":{"kind":"struct","path":"aztec::protocol_types::abis::read_request::ReadRequest","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"nullifier_non_existent_read_requests","type":{"kind":"array","length":2,"type":{"kind":"struct","path":"aztec::protocol_types::abis::read_request::ReadRequest","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"contract_storage_update_requests","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::contrakt::storage_update_request::StorageUpdateRequest","fields":[{"name":"storage_slot","type":{"kind":"field"}},{"name":"new_value","type":{"kind":"field"}}]}}},{"name":"contract_storage_reads","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::contrakt::storage_read::StorageRead","fields":[{"name":"storage_slot","type":{"kind":"field"}},{"name":"current_value","type":{"kind":"field"}}]}}},{"name":"public_call_stack_hashes","type":{"kind":"array","length":4,"type":{"kind":"field"}}},{"name":"new_note_hashes","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::abis::side_effect::SideEffect","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"new_nullifiers","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::abis::side_effect::SideEffectLinkedToNoteHash","fields":[{"name":"value","type":{"kind":"field"}},{"name":"note_hash","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"new_l2_to_l1_msgs","type":{"kind":"array","length":2,"type":{"kind":"struct","path":"aztec::protocol_types::messaging::l2_to_l1_message::L2ToL1Message","fields":[{"name":"recipient","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"content","type":{"kind":"field"}}]}}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"unencrypted_logs_hash","type":{"kind":"field"}},{"name":"unencrypted_log_preimages_length","type":{"kind":"field"}},{"name":"historical_header","type":{"kind":"struct","path":"aztec::protocol_types::header::Header","fields":[{"name":"last_archive","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"content_commitment","type":{"kind":"struct","path":"aztec::protocol_types::content_commitment::ContentCommitment","fields":[{"name":"tx_tree_height","type":{"kind":"field"}},{"name":"txs_effects_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}]}},{"name":"state","type":{"kind":"struct","path":"aztec::protocol_types::state_reference::StateReference","fields":[{"name":"l1_to_l2_message_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"partial","type":{"kind":"struct","path":"aztec::protocol_types::partial_state_reference::PartialStateReference","fields":[{"name":"note_hash_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"nullifier_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"public_data_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}}]}},{"name":"global_variables","type":{"kind":"struct","path":"aztec::protocol_types::abis::global_variables::GlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"fee_recipient","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"gas_fees","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l1_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}}]}}]}},{"name":"prover_address","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"revert_code","type":{"kind":"integer","sign":"unsigned","width":8}},{"name":"gas_left","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l1_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]},"visibility":"public"},"return_witnesses":[55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269]},"bytecode":"","debug_symbols":""},{"name":"finalize_execute","is_unconstrained":true,"custom_attributes":["aztec(public)"],"abi":{"parameters":[{"name":"inputs","type":{"kind":"struct","path":"aztec::context::inputs::public_context_inputs::PublicContextInputs","fields":[{"name":"call_context","type":{"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"storage_contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"portal_contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"gas_left","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l1_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}},{"name":"side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"gas_settings","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::GasSettings","fields":[{"name":"da","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::DimensionGasSettings","fields":[{"name":"gas_limit","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"teardown_gas_limit","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"max_fee_per_gas","type":{"kind":"field"}}]}},{"name":"l1","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::DimensionGasSettings","fields":[{"name":"gas_limit","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"teardown_gas_limit","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"max_fee_per_gas","type":{"kind":"field"}}]}},{"name":"l2","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::DimensionGasSettings","fields":[{"name":"gas_limit","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"teardown_gas_limit","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"max_fee_per_gas","type":{"kind":"field"}}]}},{"name":"inclusion_fee","type":{"kind":"field"}}]}},{"name":"transaction_fee","type":{"kind":"field"}}]}},{"name":"historical_header","type":{"kind":"struct","path":"aztec::protocol_types::header::Header","fields":[{"name":"last_archive","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"content_commitment","type":{"kind":"struct","path":"aztec::protocol_types::content_commitment::ContentCommitment","fields":[{"name":"tx_tree_height","type":{"kind":"field"}},{"name":"txs_effects_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}]}},{"name":"state","type":{"kind":"struct","path":"aztec::protocol_types::state_reference::StateReference","fields":[{"name":"l1_to_l2_message_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"partial","type":{"kind":"struct","path":"aztec::protocol_types::partial_state_reference::PartialStateReference","fields":[{"name":"note_hash_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"nullifier_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"public_data_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}}]}},{"name":"global_variables","type":{"kind":"struct","path":"aztec::protocol_types::abis::global_variables::GlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"fee_recipient","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"gas_fees","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l1_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}}]}}]}},{"name":"public_global_variables","type":{"kind":"struct","path":"aztec::protocol_types::abis::global_variables::GlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"fee_recipient","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"gas_fees","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l1_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}}]}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}]},"visibility":"private"},{"name":"secret_hash_for_redeeming_minted_notes","type":{"kind":"field"},"visibility":"private"},{"name":"amount","type":{"kind":"field"},"visibility":"private"},{"name":"secret_for_L1_to_L2_message_consumption","type":{"kind":"field"},"visibility":"private"}],"param_witnesses":{"amount":[{"start":55,"end":56}],"inputs":[{"start":0,"end":54}],"secret_for_L1_to_L2_message_consumption":[{"start":56,"end":57}],"secret_hash_for_redeeming_minted_notes":[{"start":54,"end":55}]},"return_type":{"abi_type":{"kind":"struct","path":"aztec::protocol_types::abis::public_circuit_public_inputs::PublicCircuitPublicInputs","fields":[{"name":"call_context","type":{"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"storage_contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"portal_contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"gas_left","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l1_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}},{"name":"side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"gas_settings","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::GasSettings","fields":[{"name":"da","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::DimensionGasSettings","fields":[{"name":"gas_limit","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"teardown_gas_limit","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"max_fee_per_gas","type":{"kind":"field"}}]}},{"name":"l1","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::DimensionGasSettings","fields":[{"name":"gas_limit","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"teardown_gas_limit","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"max_fee_per_gas","type":{"kind":"field"}}]}},{"name":"l2","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::DimensionGasSettings","fields":[{"name":"gas_limit","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"teardown_gas_limit","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"max_fee_per_gas","type":{"kind":"field"}}]}},{"name":"inclusion_fee","type":{"kind":"field"}}]}},{"name":"transaction_fee","type":{"kind":"field"}}]}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"nullifier_read_requests","type":{"kind":"array","length":2,"type":{"kind":"struct","path":"aztec::protocol_types::abis::read_request::ReadRequest","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"nullifier_non_existent_read_requests","type":{"kind":"array","length":2,"type":{"kind":"struct","path":"aztec::protocol_types::abis::read_request::ReadRequest","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"contract_storage_update_requests","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::contrakt::storage_update_request::StorageUpdateRequest","fields":[{"name":"storage_slot","type":{"kind":"field"}},{"name":"new_value","type":{"kind":"field"}}]}}},{"name":"contract_storage_reads","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::contrakt::storage_read::StorageRead","fields":[{"name":"storage_slot","type":{"kind":"field"}},{"name":"current_value","type":{"kind":"field"}}]}}},{"name":"public_call_stack_hashes","type":{"kind":"array","length":4,"type":{"kind":"field"}}},{"name":"new_note_hashes","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::abis::side_effect::SideEffect","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"new_nullifiers","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::abis::side_effect::SideEffectLinkedToNoteHash","fields":[{"name":"value","type":{"kind":"field"}},{"name":"note_hash","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"new_l2_to_l1_msgs","type":{"kind":"array","length":2,"type":{"kind":"struct","path":"aztec::protocol_types::messaging::l2_to_l1_message::L2ToL1Message","fields":[{"name":"recipient","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"content","type":{"kind":"field"}}]}}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"unencrypted_logs_hash","type":{"kind":"field"}},{"name":"unencrypted_log_preimages_length","type":{"kind":"field"}},{"name":"historical_header","type":{"kind":"struct","path":"aztec::protocol_types::header::Header","fields":[{"name":"last_archive","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"content_commitment","type":{"kind":"struct","path":"aztec::protocol_types::content_commitment::ContentCommitment","fields":[{"name":"tx_tree_height","type":{"kind":"field"}},{"name":"txs_effects_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}]}},{"name":"state","type":{"kind":"struct","path":"aztec::protocol_types::state_reference::StateReference","fields":[{"name":"l1_to_l2_message_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"partial","type":{"kind":"struct","path":"aztec::protocol_types::partial_state_reference::PartialStateReference","fields":[{"name":"note_hash_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"nullifier_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"public_data_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}}]}},{"name":"global_variables","type":{"kind":"struct","path":"aztec::protocol_types::abis::global_variables::GlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"fee_recipient","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"gas_fees","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l1_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}}]}}]}},{"name":"prover_address","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"revert_code","type":{"kind":"integer","sign":"unsigned","width":8}},{"name":"gas_left","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l1_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]},"visibility":"public"},"return_witnesses":[57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271]},"bytecode":"","debug_symbols":""},{"name":"_add_token_out_amount","is_unconstrained":true,"custom_attributes":["aztec(public)","aztec(internal)"],"abi":{"parameters":[{"name":"inputs","type":{"kind":"struct","path":"aztec::context::inputs::public_context_inputs::PublicContextInputs","fields":[{"name":"call_context","type":{"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"storage_contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"portal_contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"gas_left","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l1_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}},{"name":"side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"gas_settings","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::GasSettings","fields":[{"name":"da","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::DimensionGasSettings","fields":[{"name":"gas_limit","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"teardown_gas_limit","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"max_fee_per_gas","type":{"kind":"field"}}]}},{"name":"l1","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::DimensionGasSettings","fields":[{"name":"gas_limit","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"teardown_gas_limit","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"max_fee_per_gas","type":{"kind":"field"}}]}},{"name":"l2","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::DimensionGasSettings","fields":[{"name":"gas_limit","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"teardown_gas_limit","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"max_fee_per_gas","type":{"kind":"field"}}]}},{"name":"inclusion_fee","type":{"kind":"field"}}]}},{"name":"transaction_fee","type":{"kind":"field"}}]}},{"name":"historical_header","type":{"kind":"struct","path":"aztec::protocol_types::header::Header","fields":[{"name":"last_archive","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"content_commitment","type":{"kind":"struct","path":"aztec::protocol_types::content_commitment::ContentCommitment","fields":[{"name":"tx_tree_height","type":{"kind":"field"}},{"name":"txs_effects_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}]}},{"name":"state","type":{"kind":"struct","path":"aztec::protocol_types::state_reference::StateReference","fields":[{"name":"l1_to_l2_message_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"partial","type":{"kind":"struct","path":"aztec::protocol_types::partial_state_reference::PartialStateReference","fields":[{"name":"note_hash_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"nullifier_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"public_data_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}}]}},{"name":"global_variables","type":{"kind":"struct","path":"aztec::protocol_types::abis::global_variables::GlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"fee_recipient","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"gas_fees","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l1_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}}]}}]}},{"name":"public_global_variables","type":{"kind":"struct","path":"aztec::protocol_types::abis::global_variables::GlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"fee_recipient","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"gas_fees","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l1_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}}]}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}]},"visibility":"private"},{"name":"enc_c1","type":{"kind":"field"},"visibility":"private"},{"name":"enc_c2","type":{"kind":"field"},"visibility":"private"}],"param_witnesses":{"enc_c1":[{"start":54,"end":55}],"enc_c2":[{"start":55,"end":56}],"inputs":[{"start":0,"end":54}]},"return_type":{"abi_type":{"kind":"struct","path":"aztec::protocol_types::abis::public_circuit_public_inputs::PublicCircuitPublicInputs","fields":[{"name":"call_context","type":{"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"storage_contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"portal_contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"gas_left","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l1_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}},{"name":"side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"gas_settings","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::GasSettings","fields":[{"name":"da","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::DimensionGasSettings","fields":[{"name":"gas_limit","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"teardown_gas_limit","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"max_fee_per_gas","type":{"kind":"field"}}]}},{"name":"l1","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::DimensionGasSettings","fields":[{"name":"gas_limit","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"teardown_gas_limit","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"max_fee_per_gas","type":{"kind":"field"}}]}},{"name":"l2","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::DimensionGasSettings","fields":[{"name":"gas_limit","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"teardown_gas_limit","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"max_fee_per_gas","type":{"kind":"field"}}]}},{"name":"inclusion_fee","type":{"kind":"field"}}]}},{"name":"transaction_fee","type":{"kind":"field"}}]}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"nullifier_read_requests","type":{"kind":"array","length":2,"type":{"kind":"struct","path":"aztec::protocol_types::abis::read_request::ReadRequest","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"nullifier_non_existent_read_requests","type":{"kind":"array","length":2,"type":{"kind":"struct","path":"aztec::protocol_types::abis::read_request::ReadRequest","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"contract_storage_update_requests","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::contrakt::storage_update_request::StorageUpdateRequest","fields":[{"name":"storage_slot","type":{"kind":"field"}},{"name":"new_value","type":{"kind":"field"}}]}}},{"name":"contract_storage_reads","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::contrakt::storage_read::StorageRead","fields":[{"name":"storage_slot","type":{"kind":"field"}},{"name":"current_value","type":{"kind":"field"}}]}}},{"name":"public_call_stack_hashes","type":{"kind":"array","length":4,"type":{"kind":"field"}}},{"name":"new_note_hashes","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::abis::side_effect::SideEffect","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"new_nullifiers","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::abis::side_effect::SideEffectLinkedToNoteHash","fields":[{"name":"value","type":{"kind":"field"}},{"name":"note_hash","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"new_l2_to_l1_msgs","type":{"kind":"array","length":2,"type":{"kind":"struct","path":"aztec::protocol_types::messaging::l2_to_l1_message::L2ToL1Message","fields":[{"name":"recipient","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"content","type":{"kind":"field"}}]}}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"unencrypted_logs_hash","type":{"kind":"field"}},{"name":"unencrypted_log_preimages_length","type":{"kind":"field"}},{"name":"historical_header","type":{"kind":"struct","path":"aztec::protocol_types::header::Header","fields":[{"name":"last_archive","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"content_commitment","type":{"kind":"struct","path":"aztec::protocol_types::content_commitment::ContentCommitment","fields":[{"name":"tx_tree_height","type":{"kind":"field"}},{"name":"txs_effects_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}]}},{"name":"state","type":{"kind":"struct","path":"aztec::protocol_types::state_reference::StateReference","fields":[{"name":"l1_to_l2_message_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"partial","type":{"kind":"struct","path":"aztec::protocol_types::partial_state_reference::PartialStateReference","fields":[{"name":"note_hash_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"nullifier_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"public_data_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}}]}},{"name":"global_variables","type":{"kind":"struct","path":"aztec::protocol_types::abis::global_variables::GlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"fee_recipient","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"gas_fees","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l1_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}}]}}]}},{"name":"prover_address","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"revert_code","type":{"kind":"integer","sign":"unsigned","width":8}},{"name":"gas_left","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l1_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]},"visibility":"public"},"return_witnesses":[56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270]},"bytecode":"","debug_symbols":""},{"name":"check_sk_hash","is_unconstrained":true,"custom_attributes":["aztec(public)"],"abi":{"parameters":[{"name":"inputs","type":{"kind":"struct","path":"aztec::context::inputs::public_context_inputs::PublicContextInputs","fields":[{"name":"call_context","type":{"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"storage_contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"portal_contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"gas_left","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l1_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}},{"name":"side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"gas_settings","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::GasSettings","fields":[{"name":"da","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::DimensionGasSettings","fields":[{"name":"gas_limit","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"teardown_gas_limit","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"max_fee_per_gas","type":{"kind":"field"}}]}},{"name":"l1","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::DimensionGasSettings","fields":[{"name":"gas_limit","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"teardown_gas_limit","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"max_fee_per_gas","type":{"kind":"field"}}]}},{"name":"l2","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::DimensionGasSettings","fields":[{"name":"gas_limit","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"teardown_gas_limit","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"max_fee_per_gas","type":{"kind":"field"}}]}},{"name":"inclusion_fee","type":{"kind":"field"}}]}},{"name":"transaction_fee","type":{"kind":"field"}}]}},{"name":"historical_header","type":{"kind":"struct","path":"aztec::protocol_types::header::Header","fields":[{"name":"last_archive","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"content_commitment","type":{"kind":"struct","path":"aztec::protocol_types::content_commitment::ContentCommitment","fields":[{"name":"tx_tree_height","type":{"kind":"field"}},{"name":"txs_effects_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}]}},{"name":"state","type":{"kind":"struct","path":"aztec::protocol_types::state_reference::StateReference","fields":[{"name":"l1_to_l2_message_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"partial","type":{"kind":"struct","path":"aztec::protocol_types::partial_state_reference::PartialStateReference","fields":[{"name":"note_hash_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"nullifier_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"public_data_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}}]}},{"name":"global_variables","type":{"kind":"struct","path":"aztec::protocol_types::abis::global_variables::GlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"fee_recipient","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"gas_fees","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l1_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}}]}}]}},{"name":"public_global_variables","type":{"kind":"struct","path":"aztec::protocol_types::abis::global_variables::GlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"fee_recipient","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"gas_fees","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l1_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}}]}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}]},"visibility":"private"},{"name":"sk_hash","type":{"kind":"field"},"visibility":"private"}],"param_witnesses":{"inputs":[{"start":0,"end":54}],"sk_hash":[{"start":54,"end":55}]},"return_type":{"abi_type":{"kind":"struct","path":"aztec::protocol_types::abis::public_circuit_public_inputs::PublicCircuitPublicInputs","fields":[{"name":"call_context","type":{"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"storage_contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"portal_contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"gas_left","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l1_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}},{"name":"side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"gas_settings","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::GasSettings","fields":[{"name":"da","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::DimensionGasSettings","fields":[{"name":"gas_limit","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"teardown_gas_limit","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"max_fee_per_gas","type":{"kind":"field"}}]}},{"name":"l1","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::DimensionGasSettings","fields":[{"name":"gas_limit","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"teardown_gas_limit","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"max_fee_per_gas","type":{"kind":"field"}}]}},{"name":"l2","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::DimensionGasSettings","fields":[{"name":"gas_limit","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"teardown_gas_limit","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"max_fee_per_gas","type":{"kind":"field"}}]}},{"name":"inclusion_fee","type":{"kind":"field"}}]}},{"name":"transaction_fee","type":{"kind":"field"}}]}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"nullifier_read_requests","type":{"kind":"array","length":2,"type":{"kind":"struct","path":"aztec::protocol_types::abis::read_request::ReadRequest","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"nullifier_non_existent_read_requests","type":{"kind":"array","length":2,"type":{"kind":"struct","path":"aztec::protocol_types::abis::read_request::ReadRequest","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"contract_storage_update_requests","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::contrakt::storage_update_request::StorageUpdateRequest","fields":[{"name":"storage_slot","type":{"kind":"field"}},{"name":"new_value","type":{"kind":"field"}}]}}},{"name":"contract_storage_reads","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::contrakt::storage_read::StorageRead","fields":[{"name":"storage_slot","type":{"kind":"field"}},{"name":"current_value","type":{"kind":"field"}}]}}},{"name":"public_call_stack_hashes","type":{"kind":"array","length":4,"type":{"kind":"field"}}},{"name":"new_note_hashes","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::abis::side_effect::SideEffect","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"new_nullifiers","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::abis::side_effect::SideEffectLinkedToNoteHash","fields":[{"name":"value","type":{"kind":"field"}},{"name":"note_hash","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"new_l2_to_l1_msgs","type":{"kind":"array","length":2,"type":{"kind":"struct","path":"aztec::protocol_types::messaging::l2_to_l1_message::L2ToL1Message","fields":[{"name":"recipient","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"content","type":{"kind":"field"}}]}}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"unencrypted_logs_hash","type":{"kind":"field"}},{"name":"unencrypted_log_preimages_length","type":{"kind":"field"}},{"name":"historical_header","type":{"kind":"struct","path":"aztec::protocol_types::header::Header","fields":[{"name":"last_archive","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"content_commitment","type":{"kind":"struct","path":"aztec::protocol_types::content_commitment::ContentCommitment","fields":[{"name":"tx_tree_height","type":{"kind":"field"}},{"name":"txs_effects_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}]}},{"name":"state","type":{"kind":"struct","path":"aztec::protocol_types::state_reference::StateReference","fields":[{"name":"l1_to_l2_message_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"partial","type":{"kind":"struct","path":"aztec::protocol_types::partial_state_reference::PartialStateReference","fields":[{"name":"note_hash_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"nullifier_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"public_data_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}}]}},{"name":"global_variables","type":{"kind":"struct","path":"aztec::protocol_types::abis::global_variables::GlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"fee_recipient","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"gas_fees","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l1_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}}]}}]}},{"name":"prover_address","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"revert_code","type":{"kind":"integer","sign":"unsigned","width":8}},{"name":"gas_left","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l1_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]},"visibility":"public"},"return_witnesses":[55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269]},"bytecode":"","debug_symbols":""},{"name":"_validate_round","is_unconstrained":true,"custom_attributes":["aztec(public)","aztec(internal)"],"abi":{"parameters":[{"name":"inputs","type":{"kind":"struct","path":"aztec::context::inputs::public_context_inputs::PublicContextInputs","fields":[{"name":"call_context","type":{"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"storage_contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"portal_contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"gas_left","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l1_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}},{"name":"side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"gas_settings","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::GasSettings","fields":[{"name":"da","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::DimensionGasSettings","fields":[{"name":"gas_limit","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"teardown_gas_limit","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"max_fee_per_gas","type":{"kind":"field"}}]}},{"name":"l1","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::DimensionGasSettings","fields":[{"name":"gas_limit","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"teardown_gas_limit","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"max_fee_per_gas","type":{"kind":"field"}}]}},{"name":"l2","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::DimensionGasSettings","fields":[{"name":"gas_limit","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"teardown_gas_limit","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"max_fee_per_gas","type":{"kind":"field"}}]}},{"name":"inclusion_fee","type":{"kind":"field"}}]}},{"name":"transaction_fee","type":{"kind":"field"}}]}},{"name":"historical_header","type":{"kind":"struct","path":"aztec::protocol_types::header::Header","fields":[{"name":"last_archive","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"content_commitment","type":{"kind":"struct","path":"aztec::protocol_types::content_commitment::ContentCommitment","fields":[{"name":"tx_tree_height","type":{"kind":"field"}},{"name":"txs_effects_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}]}},{"name":"state","type":{"kind":"struct","path":"aztec::protocol_types::state_reference::StateReference","fields":[{"name":"l1_to_l2_message_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"partial","type":{"kind":"struct","path":"aztec::protocol_types::partial_state_reference::PartialStateReference","fields":[{"name":"note_hash_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"nullifier_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"public_data_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}}]}},{"name":"global_variables","type":{"kind":"struct","path":"aztec::protocol_types::abis::global_variables::GlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"fee_recipient","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"gas_fees","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l1_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}}]}}]}},{"name":"public_global_variables","type":{"kind":"struct","path":"aztec::protocol_types::abis::global_variables::GlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"fee_recipient","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"gas_fees","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l1_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}}]}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}]},"visibility":"private"},{"name":"round","type":{"kind":"field"},"visibility":"private"}],"param_witnesses":{"inputs":[{"start":0,"end":54}],"round":[{"start":54,"end":55}]},"return_type":{"abi_type":{"kind":"struct","path":"aztec::protocol_types::abis::public_circuit_public_inputs::PublicCircuitPublicInputs","fields":[{"name":"call_context","type":{"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"storage_contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"portal_contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"gas_left","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l1_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}},{"name":"side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"gas_settings","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::GasSettings","fields":[{"name":"da","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::DimensionGasSettings","fields":[{"name":"gas_limit","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"teardown_gas_limit","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"max_fee_per_gas","type":{"kind":"field"}}]}},{"name":"l1","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::DimensionGasSettings","fields":[{"name":"gas_limit","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"teardown_gas_limit","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"max_fee_per_gas","type":{"kind":"field"}}]}},{"name":"l2","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::DimensionGasSettings","fields":[{"name":"gas_limit","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"teardown_gas_limit","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"max_fee_per_gas","type":{"kind":"field"}}]}},{"name":"inclusion_fee","type":{"kind":"field"}}]}},{"name":"transaction_fee","type":{"kind":"field"}}]}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"nullifier_read_requests","type":{"kind":"array","length":2,"type":{"kind":"struct","path":"aztec::protocol_types::abis::read_request::ReadRequest","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"nullifier_non_existent_read_requests","type":{"kind":"array","length":2,"type":{"kind":"struct","path":"aztec::protocol_types::abis::read_request::ReadRequest","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"contract_storage_update_requests","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::contrakt::storage_update_request::StorageUpdateRequest","fields":[{"name":"storage_slot","type":{"kind":"field"}},{"name":"new_value","type":{"kind":"field"}}]}}},{"name":"contract_storage_reads","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::contrakt::storage_read::StorageRead","fields":[{"name":"storage_slot","type":{"kind":"field"}},{"name":"current_value","type":{"kind":"field"}}]}}},{"name":"public_call_stack_hashes","type":{"kind":"array","length":4,"type":{"kind":"field"}}},{"name":"new_note_hashes","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::abis::side_effect::SideEffect","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"new_nullifiers","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::abis::side_effect::SideEffectLinkedToNoteHash","fields":[{"name":"value","type":{"kind":"field"}},{"name":"note_hash","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"new_l2_to_l1_msgs","type":{"kind":"array","length":2,"type":{"kind":"struct","path":"aztec::protocol_types::messaging::l2_to_l1_message::L2ToL1Message","fields":[{"name":"recipient","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"content","type":{"kind":"field"}}]}}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"unencrypted_logs_hash","type":{"kind":"field"}},{"name":"unencrypted_log_preimages_length","type":{"kind":"field"}},{"name":"historical_header","type":{"kind":"struct","path":"aztec::protocol_types::header::Header","fields":[{"name":"last_archive","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"content_commitment","type":{"kind":"struct","path":"aztec::protocol_types::content_commitment::ContentCommitment","fields":[{"name":"tx_tree_height","type":{"kind":"field"}},{"name":"txs_effects_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}]}},{"name":"state","type":{"kind":"struct","path":"aztec::protocol_types::state_reference::StateReference","fields":[{"name":"l1_to_l2_message_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"partial","type":{"kind":"struct","path":"aztec::protocol_types::partial_state_reference::PartialStateReference","fields":[{"name":"note_hash_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"nullifier_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"public_data_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}}]}},{"name":"global_variables","type":{"kind":"struct","path":"aztec::protocol_types::abis::global_variables::GlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"fee_recipient","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"gas_fees","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l1_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}}]}}]}},{"name":"prover_address","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"revert_code","type":{"kind":"integer","sign":"unsigned","width":8}},{"name":"gas_left","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l1_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]},"visibility":"public"},"return_witnesses":[55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269]},"bytecode":"","debug_symbols":"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G1ITN6QmbkhN3JCauCE1cUNq4obUxA2piRtSEzekJm5ITdyQmrghNXFDauKG1MQNqYkbUhM3pCZuSE3ckJq4ITVxQ2riDqmJO6Qm7pCauENq4s4DIvAhNXGH1MQdUhN3SE3cITVxh9TEHVITd5RN3Pnu0yfso2GCNEyShinSMEICnznvw8z9aJghDXNIw1zQMMom7oeHEXLmPvb26Wsf/TQpy68fHkb30xQx+e2nX/+wPhpG99MUaf42TKZ/NMwFDSOseH7EMEEaJknDFGmYJg0zpGFInAkSZ4QVz48YxkjDkAicSgLf9//UrrYf+HTe8/bd9eR3//en2/vo+esdvX69ozdi9G+HUf5nQc37j9L9cJhDGuaChqmHNIyRhnHSMEEaJknDFGmYJg1DInCRCFwkAjeJwE0icJMI3CQCN4nATSJwkwjcJAI3icBNIvCQCDwkAg+JwEMi8JAIPCQCD4nAQyLwkAg8JAIfEoEPCXqHBL1Dgt4hQe+QoCdMeKLOm3sQnT/9hC0Mfn720e+vdvRFMvPtA7F9ILcP1PaB3j4w2wfO9oG7e+AukoJvH7DtA759ILYP5PaB2j7Q2wdm+8DZPrDdtG03bdtN23bTtt20bTdt203bdtO23bRtN23bTft2077dtG837dtN+3bTvt20bzft2037dtO+3XRsNx3bTcd207HddGw3HdtNx3bTsd10bDcd203ndtO53XRuN53bTed207nddG43ndtN53bTud10bTdd203XdtO13XRtN13bTdd207XddG03XdtN93bTvd10bzfd2033dtO93XRvN93bTfd2073d9Gw3PdtNz3bTs930bDc9203PdtOz3fRsNz3bTZ/tps9202e76bPd9Nlu+mw3fbabPttNn+2mz3bTd7vpu9309kZ2tzeyu72R3e2N7G5vZHd7I7vbG9nd3sjs2R7JXk/Y+glfPxHrJ3L9RK2f6PUTs37irJ9Y79zWO7f1zm29c1vv3NY7t/XObb1zW+/c1ju39c59vXNf79zXO/f1zn29c1/v3Nc79/XOfb1zX+881juP9c5jvfNY7zzWO4/1zmO981jvPNY7j/XOc73zXO881zvP9c5zvfNc7zzXO8/1znO981zvvNY7r/XOa73zWu+81juv9c5rvfNa77zWO6/1znu9817vvNc77/XOe73zXu+81zvv9c57vfNe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11oeXmt5eK3l5bWWl9daXl5reXmt5X1w9L681vLyWsvLay0vr7W8vNby8lrLy2stL6+1vLzW8vJay8trLS+vtby81vLyWsvLay0vr7W8vNby8lrLy2stL6+1vLzW8vJay8trLS+vtby81vLyWsvLay0vr7W8vNby8lrLy2stL6+1vLzW8vJay8trLS+vtby81vLyWsvLay0vr7W8vNby8lrLy2stL6+1vLzW8vJay8trLS+vtby81vLyWsvLay0vr7W8vNby8lrLy2stL6+1vLzW8vJay8trLS+vtby81vLyWsvLay0vr7W8vNby8lrLy2stL6+1vLzW8vJay8trLS+vtby81vLyWsvLay0vr7W8vNby8lrLy2stL6+1vLzW8vJay8trLS+vtby81vLyWsvLay0vr7W8vNby8lrLy2stL6+1vLzW8vJay4trLf3BtZavkWj0fo1Eo/drJBq9XyPR6P0aiUbv10g0er9GotH7NRKN3q+RePTGtZavkXj0xrWWr5F49Ma1lq+RePTGtZavkXj0xrWWr5F49Ma1lq+RePTGtZavkXj0xrWWr5F49Ma1lq+RePTGtZavkXj0xrWWr5F49Ma1lq+RePTGtZavkXj0xrWWr5F49Ma1lq+RePTGtZavkXj0xrWWr5F49Ma1lq+RePTGtZavkXj0xrWWr5F49Ma1lq+RePTGtZavkXj0xrWWr5F49Ma1lq+RePTGtZavkXj0xrWWr5F49Ma1lq+RePTGtZavkXj0xrWWr5F49Ma1lq+RePTGtZavkXj0xrWWr5F49Ma1lq+RePTGtZavkXj0xrWWr5F49Ma1lq+RePTGtZavkXj0xrWWr5F49Ma1lq+RePTGtZavkXj0xrWWr5F49Ma1lq+RePTGtZavkXj0xrWWr5F49Ma1lq+RcPQ2XmtpvNbSeK2l8VpLe3D0Nl5rabzW0nitpfFaS+O1lsZrLY3XWhqvtTRea2m81tJ4raXxWkvjtZbGay2N11oar7U0XmtpvNbSeK2l8VpL47WWxmstjddaGq+1NF5rabzW0nitpfFaS+O1lsZrLY3XWhqvtTRea2m81tJ4raXxWkvjtZbGay2N11oar7U0XmtpvNbSeK2l8VpL47WWxmstjddaGq+1NF5rabzW0nitpfFaS+O1lsZrLY3XWhqvtTRea2m81tJ4raXxWkvjtZbG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"},{"name":"_initialize","is_unconstrained":true,"custom_attributes":["aztec(public)","aztec(internal)","aztec(noinitcheck)"],"abi":{"parameters":[{"name":"inputs","type":{"kind":"struct","path":"aztec::context::inputs::public_context_inputs::PublicContextInputs","fields":[{"name":"call_context","type":{"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"storage_contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"portal_contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"gas_left","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l1_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}},{"name":"side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"gas_settings","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::GasSettings","fields":[{"name":"da","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::DimensionGasSettings","fields":[{"name":"gas_limit","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"teardown_gas_limit","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"max_fee_per_gas","type":{"kind":"field"}}]}},{"name":"l1","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::DimensionGasSettings","fields":[{"name":"gas_limit","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"teardown_gas_limit","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"max_fee_per_gas","type":{"kind":"field"}}]}},{"name":"l2","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::DimensionGasSettings","fields":[{"name":"gas_limit","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"teardown_gas_limit","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"max_fee_per_gas","type":{"kind":"field"}}]}},{"name":"inclusion_fee","type":{"kind":"field"}}]}},{"name":"transaction_fee","type":{"kind":"field"}}]}},{"name":"historical_header","type":{"kind":"struct","path":"aztec::protocol_types::header::Header","fields":[{"name":"last_archive","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"content_commitment","type":{"kind":"struct","path":"aztec::protocol_types::content_commitment::ContentCommitment","fields":[{"name":"tx_tree_height","type":{"kind":"field"}},{"name":"txs_effects_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}]}},{"name":"state","type":{"kind":"struct","path":"aztec::protocol_types::state_reference::StateReference","fields":[{"name":"l1_to_l2_message_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"partial","type":{"kind":"struct","path":"aztec::protocol_types::partial_state_reference::PartialStateReference","fields":[{"name":"note_hash_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"nullifier_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"public_data_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}}]}},{"name":"global_variables","type":{"kind":"struct","path":"aztec::protocol_types::abis::global_variables::GlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"fee_recipient","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"gas_fees","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l1_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}}]}}]}},{"name":"public_global_variables","type":{"kind":"struct","path":"aztec::protocol_types::abis::global_variables::GlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"fee_recipient","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"gas_fees","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l1_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}}]}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}]},"visibility":"private"},{"name":"admin","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]},"visibility":"private"},{"name":"target","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]},"visibility":"private"},{"name":"token_in","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]},"visibility":"private"},{"name":"token_out","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]},"visibility":"private"},{"name":"relayer","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]},"visibility":"private"},{"name":"bonding_token","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]},"visibility":"private"},{"name":"bonding_amount","type":{"kind":"field"},"visibility":"private"},{"name":"he_pub_key","type":{"kind":"field"},"visibility":"private"},{"name":"sk_hash","type":{"kind":"field"},"visibility":"private"},{"name":"interval","type":{"kind":"field"},"visibility":"private"}],"param_witnesses":{"admin":[{"start":54,"end":55}],"bonding_amount":[{"start":60,"end":61}],"bonding_token":[{"start":59,"end":60}],"he_pub_key":[{"start":61,"end":62}],"inputs":[{"start":0,"end":54}],"interval":[{"start":63,"end":64}],"relayer":[{"start":58,"end":59}],"sk_hash":[{"start":62,"end":63}],"target":[{"start":55,"end":56}],"token_in":[{"start":56,"end":57}],"token_out":[{"start":57,"end":58}]},"return_type":{"abi_type":{"kind":"struct","path":"aztec::protocol_types::abis::public_circuit_public_inputs::PublicCircuitPublicInputs","fields":[{"name":"call_context","type":{"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"storage_contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"portal_contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"gas_left","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l1_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}},{"name":"side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"gas_settings","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::GasSettings","fields":[{"name":"da","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::DimensionGasSettings","fields":[{"name":"gas_limit","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"teardown_gas_limit","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"max_fee_per_gas","type":{"kind":"field"}}]}},{"name":"l1","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::DimensionGasSettings","fields":[{"name":"gas_limit","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"teardown_gas_limit","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"max_fee_per_gas","type":{"kind":"field"}}]}},{"name":"l2","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::DimensionGasSettings","fields":[{"name":"gas_limit","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"teardown_gas_limit","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"max_fee_per_gas","type":{"kind":"field"}}]}},{"name":"inclusion_fee","type":{"kind":"field"}}]}},{"name":"transaction_fee","type":{"kind":"field"}}]}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"nullifier_read_requests","type":{"kind":"array","length":2,"type":{"kind":"struct","path":"aztec::protocol_types::abis::read_request::ReadRequest","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"nullifier_non_existent_read_requests","type":{"kind":"array","length":2,"type":{"kind":"struct","path":"aztec::protocol_types::abis::read_request::ReadRequest","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"contract_storage_update_requests","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::contrakt::storage_update_request::StorageUpdateRequest","fields":[{"name":"storage_slot","type":{"kind":"field"}},{"name":"new_value","type":{"kind":"field"}}]}}},{"name":"contract_storage_reads","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::contrakt::storage_read::StorageRead","fields":[{"name":"storage_slot","type":{"kind":"field"}},{"name":"current_value","type":{"kind":"field"}}]}}},{"name":"public_call_stack_hashes","type":{"kind":"array","length":4,"type":{"kind":"field"}}},{"name":"new_note_hashes","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::abis::side_effect::SideEffect","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"new_nullifiers","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::abis::side_effect::SideEffectLinkedToNoteHash","fields":[{"name":"value","type":{"kind":"field"}},{"name":"note_hash","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"new_l2_to_l1_msgs","type":{"kind":"array","length":2,"type":{"kind":"struct","path":"aztec::protocol_types::messaging::l2_to_l1_message::L2ToL1Message","fields":[{"name":"recipient","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"content","type":{"kind":"field"}}]}}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"unencrypted_logs_hash","type":{"kind":"field"}},{"name":"unencrypted_log_preimages_length","type":{"kind":"field"}},{"name":"historical_header","type":{"kind":"struct","path":"aztec::protocol_types::header::Header","fields":[{"name":"last_archive","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"content_commitment","type":{"kind":"struct","path":"aztec::protocol_types::content_commitment::ContentCommitment","fields":[{"name":"tx_tree_height","type":{"kind":"field"}},{"name":"txs_effects_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}]}},{"name":"state","type":{"kind":"struct","path":"aztec::protocol_types::state_reference::StateReference","fields":[{"name":"l1_to_l2_message_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"partial","type":{"kind":"struct","path":"aztec::protocol_types::partial_state_reference::PartialStateReference","fields":[{"name":"note_hash_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"nullifier_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"public_data_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}}]}},{"name":"global_variables","type":{"kind":"struct","path":"aztec::protocol_types::abis::global_variables::GlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"fee_recipient","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"gas_fees","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l1_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}}]}}]}},{"name":"prover_address","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"revert_code","type":{"kind":"integer","sign":"unsigned","width":8}},{"name":"gas_left","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l1_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]},"visibility":"public"},"return_witnesses":[64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278]},"bytecode":"","debug_symbols":""},{"name":"get_round","is_unconstrained":true,"custom_attributes":[],"abi":{"parameters":[],"param_witnesses":{},"return_type":{"abi_type":{"kind":"field"},"visibility":"public"},"return_witnesses":[0]},"bytecode":"H4sIAAAAAAAA/72UTU7DMBCFnd+mREWwRLAIexaOBHtzBW4QlIDYNFLaSnD5CIw89JPjXU2fFM14PPY8P4+TqCMSZ7NATPDgbIWYcZ+FPgWPui3tJrkKYvXzFc6vkZe62DViCXjK/ByLp9ZPl2qpUQXtTLxarX8HBn4GPfy8GvMpYqm31up6j/kisKYM1BOfdyJXVwbWUqcCZzHO16fhVyfWMhhLvQ14lGfgw1Y2GBeovYpfW1fq+EZjn2mNMxjwl3o5cu6cvVJLcC/hyZ602EArya0DOrKvc+TzTUZ8/63dtwTvWPvybNRJeToJ/ruHL5y2Frv9OHXvw8vQ9Qmo5R5NWlKfMU4Rp58FYjMsfydS18akXULtwF+R315rtZQ36lvJVBhJwGfs1tkbZ5+nqftqPrb98NmMh30zvjWv42Hb7/5WfAM0U4cnygcAAA==","debug_symbols":"zZfLasMwEEX/ZdameEYaPfwrpQs1dcFgnBC7hWL877WbWJsESkwS7k6D7mUOWhzQSO1+l4Zm3/VUjVS+KFWvI/WH1C1zP6TjQBXHKLaguvv4O6tMBX02bU3VcryMM+uaZutymNlfSRsv57Blk7NBp7di5nFgPB6MJ4DxRDAeLtGAGA1I0IAMGpBFA0KzNKNpmtE8zWiiZjRTC5qp5dGmPm2Rp2y5j1PV5S0+/PO4HG1OR9WclnJ9XwvIpIBMDpDJAzIFQKaIx2SuukCcP7dMaS9caOyGjm7ouA0dv6ETbuvMw3c6Num9rZeP8nL31e3Wf/M8Dj+H0830Cw=="},{"name":"replace_relayer_and_slash_stake","is_unconstrained":true,"custom_attributes":["aztec(public)","aztec(internal)"],"abi":{"parameters":[{"name":"inputs","type":{"kind":"struct","path":"aztec::context::inputs::public_context_inputs::PublicContextInputs","fields":[{"name":"call_context","type":{"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"storage_contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"portal_contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"gas_left","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l1_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}},{"name":"side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"gas_settings","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::GasSettings","fields":[{"name":"da","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::DimensionGasSettings","fields":[{"name":"gas_limit","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"teardown_gas_limit","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"max_fee_per_gas","type":{"kind":"field"}}]}},{"name":"l1","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::DimensionGasSettings","fields":[{"name":"gas_limit","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"teardown_gas_limit","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"max_fee_per_gas","type":{"kind":"field"}}]}},{"name":"l2","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::DimensionGasSettings","fields":[{"name":"gas_limit","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"teardown_gas_limit","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"max_fee_per_gas","type":{"kind":"field"}}]}},{"name":"inclusion_fee","type":{"kind":"field"}}]}},{"name":"transaction_fee","type":{"kind":"field"}}]}},{"name":"historical_header","type":{"kind":"struct","path":"aztec::protocol_types::header::Header","fields":[{"name":"last_archive","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"content_commitment","type":{"kind":"struct","path":"aztec::protocol_types::content_commitment::ContentCommitment","fields":[{"name":"tx_tree_height","type":{"kind":"field"}},{"name":"txs_effects_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}]}},{"name":"state","type":{"kind":"struct","path":"aztec::protocol_types::state_reference::StateReference","fields":[{"name":"l1_to_l2_message_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"partial","type":{"kind":"struct","path":"aztec::protocol_types::partial_state_reference::PartialStateReference","fields":[{"name":"note_hash_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"nullifier_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"public_data_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}}]}},{"name":"global_variables","type":{"kind":"struct","path":"aztec::protocol_types::abis::global_variables::GlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"fee_recipient","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"gas_fees","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l1_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}}]}}]}},{"name":"public_global_variables","type":{"kind":"struct","path":"aztec::protocol_types::abis::global_variables::GlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"fee_recipient","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"gas_fees","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l1_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}}]}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}]},"visibility":"private"},{"name":"sk_hash","type":{"kind":"field"},"visibility":"private"},{"name":"new_he_pub_key","type":{"kind":"field"},"visibility":"private"},{"name":"new_relayer","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]},"visibility":"private"},{"name":"secret_hash","type":{"kind":"field"},"visibility":"private"},{"name":"nonce","type":{"kind":"field"},"visibility":"private"}],"param_witnesses":{"inputs":[{"start":0,"end":54}],"new_he_pub_key":[{"start":55,"end":56}],"new_relayer":[{"start":56,"end":57}],"nonce":[{"start":58,"end":59}],"secret_hash":[{"start":57,"end":58}],"sk_hash":[{"start":54,"end":55}]},"return_type":{"abi_type":{"kind":"struct","path":"aztec::protocol_types::abis::public_circuit_public_inputs::PublicCircuitPublicInputs","fields":[{"name":"call_context","type":{"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"storage_contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"portal_contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"gas_left","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l1_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}},{"name":"side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"gas_settings","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::GasSettings","fields":[{"name":"da","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::DimensionGasSettings","fields":[{"name":"gas_limit","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"teardown_gas_limit","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"max_fee_per_gas","type":{"kind":"field"}}]}},{"name":"l1","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::DimensionGasSettings","fields":[{"name":"gas_limit","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"teardown_gas_limit","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"max_fee_per_gas","type":{"kind":"field"}}]}},{"name":"l2","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::DimensionGasSettings","fields":[{"name":"gas_limit","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"teardown_gas_limit","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"max_fee_per_gas","type":{"kind":"field"}}]}},{"name":"inclusion_fee","type":{"kind":"field"}}]}},{"name":"transaction_fee","type":{"kind":"field"}}]}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"nullifier_read_requests","type":{"kind":"array","length":2,"type":{"kind":"struct","path":"aztec::protocol_types::abis::read_request::ReadRequest","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"nullifier_non_existent_read_requests","type":{"kind":"array","length":2,"type":{"kind":"struct","path":"aztec::protocol_types::abis::read_request::ReadRequest","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"contract_storage_update_requests","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::contrakt::storage_update_request::StorageUpdateRequest","fields":[{"name":"storage_slot","type":{"kind":"field"}},{"name":"new_value","type":{"kind":"field"}}]}}},{"name":"contract_storage_reads","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::contrakt::storage_read::StorageRead","fields":[{"name":"storage_slot","type":{"kind":"field"}},{"name":"current_value","type":{"kind":"field"}}]}}},{"name":"public_call_stack_hashes","type":{"kind":"array","length":4,"type":{"kind":"field"}}},{"name":"new_note_hashes","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::abis::side_effect::SideEffect","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"new_nullifiers","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::abis::side_effect::SideEffectLinkedToNoteHash","fields":[{"name":"value","type":{"kind":"field"}},{"name":"note_hash","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"new_l2_to_l1_msgs","type":{"kind":"array","length":2,"type":{"kind":"struct","path":"aztec::protocol_types::messaging::l2_to_l1_message::L2ToL1Message","fields":[{"name":"recipient","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"content","type":{"kind":"field"}}]}}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"unencrypted_logs_hash","type":{"kind":"field"}},{"name":"unencrypted_log_preimages_length","type":{"kind":"field"}},{"name":"historical_header","type":{"kind":"struct","path":"aztec::protocol_types::header::Header","fields":[{"name":"last_archive","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"content_commitment","type":{"kind":"struct","path":"aztec::protocol_types::content_commitment::ContentCommitment","fields":[{"name":"tx_tree_height","type":{"kind":"field"}},{"name":"txs_effects_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}]}},{"name":"state","type":{"kind":"struct","path":"aztec::protocol_types::state_reference::StateReference","fields":[{"name":"l1_to_l2_message_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"partial","type":{"kind":"struct","path":"aztec::protocol_types::partial_state_reference::PartialStateReference","fields":[{"name":"note_hash_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"nullifier_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"public_data_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}}]}},{"name":"global_variables","type":{"kind":"struct","path":"aztec::protocol_types::abis::global_variables::GlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"fee_recipient","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"gas_fees","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l1_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}}]}}]}},{"name":"prover_address","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"revert_code","type":{"kind":"integer","sign":"unsigned","width":8}},{"name":"gas_left","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l1_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]},"visibility":"public"},"return_witnesses":[59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273]},"bytecode":"","debug_symbols":""},{"name":"_sub_token_out_amount","is_unconstrained":true,"custom_attributes":["aztec(public)","aztec(internal)"],"abi":{"parameters":[{"name":"inputs","type":{"kind":"struct","path":"aztec::context::inputs::public_context_inputs::PublicContextInputs","fields":[{"name":"call_context","type":{"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"storage_contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"portal_contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"gas_left","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l1_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}},{"name":"side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"gas_settings","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::GasSettings","fields":[{"name":"da","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::DimensionGasSettings","fields":[{"name":"gas_limit","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"teardown_gas_limit","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"max_fee_per_gas","type":{"kind":"field"}}]}},{"name":"l1","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::DimensionGasSettings","fields":[{"name":"gas_limit","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"teardown_gas_limit","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"max_fee_per_gas","type":{"kind":"field"}}]}},{"name":"l2","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::DimensionGasSettings","fields":[{"name":"gas_limit","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"teardown_gas_limit","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"max_fee_per_gas","type":{"kind":"field"}}]}},{"name":"inclusion_fee","type":{"kind":"field"}}]}},{"name":"transaction_fee","type":{"kind":"field"}}]}},{"name":"historical_header","type":{"kind":"struct","path":"aztec::protocol_types::header::Header","fields":[{"name":"last_archive","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"content_commitment","type":{"kind":"struct","path":"aztec::protocol_types::content_commitment::ContentCommitment","fields":[{"name":"tx_tree_height","type":{"kind":"field"}},{"name":"txs_effects_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}]}},{"name":"state","type":{"kind":"struct","path":"aztec::protocol_types::state_reference::StateReference","fields":[{"name":"l1_to_l2_message_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"partial","type":{"kind":"struct","path":"aztec::protocol_types::partial_state_reference::PartialStateReference","fields":[{"name":"note_hash_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"nullifier_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"public_data_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}}]}},{"name":"global_variables","type":{"kind":"struct","path":"aztec::protocol_types::abis::global_variables::GlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"fee_recipient","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"gas_fees","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l1_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}}]}}]}},{"name":"public_global_variables","type":{"kind":"struct","path":"aztec::protocol_types::abis::global_variables::GlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"fee_recipient","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"gas_fees","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l1_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}}]}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}]},"visibility":"private"},{"name":"amount","type":{"kind":"field"},"visibility":"private"},{"name":"_round","type":{"kind":"field"},"visibility":"private"}],"param_witnesses":{"_round":[{"start":55,"end":56}],"amount":[{"start":54,"end":55}],"inputs":[{"start":0,"end":54}]},"return_type":{"abi_type":{"kind":"struct","path":"aztec::protocol_types::abis::public_circuit_public_inputs::PublicCircuitPublicInputs","fields":[{"name":"call_context","type":{"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"storage_contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"portal_contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"gas_left","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l1_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}},{"name":"side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"gas_settings","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::GasSettings","fields":[{"name":"da","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::DimensionGasSettings","fields":[{"name":"gas_limit","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"teardown_gas_limit","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"max_fee_per_gas","type":{"kind":"field"}}]}},{"name":"l1","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::DimensionGasSettings","fields":[{"name":"gas_limit","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"teardown_gas_limit","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"max_fee_per_gas","type":{"kind":"field"}}]}},{"name":"l2","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::DimensionGasSettings","fields":[{"name":"gas_limit","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"teardown_gas_limit","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"max_fee_per_gas","type":{"kind":"field"}}]}},{"name":"inclusion_fee","type":{"kind":"field"}}]}},{"name":"transaction_fee","type":{"kind":"field"}}]}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"nullifier_read_requests","type":{"kind":"array","length":2,"type":{"kind":"struct","path":"aztec::protocol_types::abis::read_request::ReadRequest","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"nullifier_non_existent_read_requests","type":{"kind":"array","length":2,"type":{"kind":"struct","path":"aztec::protocol_types::abis::read_request::ReadRequest","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"contract_storage_update_requests","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::contrakt::storage_update_request::StorageUpdateRequest","fields":[{"name":"storage_slot","type":{"kind":"field"}},{"name":"new_value","type":{"kind":"field"}}]}}},{"name":"contract_storage_reads","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::contrakt::storage_read::StorageRead","fields":[{"name":"storage_slot","type":{"kind":"field"}},{"name":"current_value","type":{"kind":"field"}}]}}},{"name":"public_call_stack_hashes","type":{"kind":"array","length":4,"type":{"kind":"field"}}},{"name":"new_note_hashes","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::abis::side_effect::SideEffect","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"new_nullifiers","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::abis::side_effect::SideEffectLinkedToNoteHash","fields":[{"name":"value","type":{"kind":"field"}},{"name":"note_hash","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"new_l2_to_l1_msgs","type":{"kind":"array","length":2,"type":{"kind":"struct","path":"aztec::protocol_types::messaging::l2_to_l1_message::L2ToL1Message","fields":[{"name":"recipient","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"content","type":{"kind":"field"}}]}}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"unencrypted_logs_hash","type":{"kind":"field"}},{"name":"unencrypted_log_preimages_length","type":{"kind":"field"}},{"name":"historical_header","type":{"kind":"struct","path":"aztec::protocol_types::header::Header","fields":[{"name":"last_archive","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"content_commitment","type":{"kind":"struct","path":"aztec::protocol_types::content_commitment::ContentCommitment","fields":[{"name":"tx_tree_height","type":{"kind":"field"}},{"name":"txs_effects_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}]}},{"name":"state","type":{"kind":"struct","path":"aztec::protocol_types::state_reference::StateReference","fields":[{"name":"l1_to_l2_message_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"partial","type":{"kind":"struct","path":"aztec::protocol_types::partial_state_reference::PartialStateReference","fields":[{"name":"note_hash_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"nullifier_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"public_data_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}}]}},{"name":"global_variables","type":{"kind":"struct","path":"aztec::protocol_types::abis::global_variables::GlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"fee_recipient","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"gas_fees","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l1_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}}]}}]}},{"name":"prover_address","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"revert_code","type":{"kind":"integer","sign":"unsigned","width":8}},{"name":"gas_left","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l1_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]},"visibility":"public"},"return_witnesses":[56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270]},"bytecode":"","debug_symbols":""},{"name":"stake","is_unconstrained":true,"custom_attributes":["aztec(public)"],"abi":{"parameters":[{"name":"inputs","type":{"kind":"struct","path":"aztec::context::inputs::public_context_inputs::PublicContextInputs","fields":[{"name":"call_context","type":{"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"storage_contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"portal_contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"gas_left","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l1_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}},{"name":"side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"gas_settings","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::GasSettings","fields":[{"name":"da","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::DimensionGasSettings","fields":[{"name":"gas_limit","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"teardown_gas_limit","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"max_fee_per_gas","type":{"kind":"field"}}]}},{"name":"l1","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::DimensionGasSettings","fields":[{"name":"gas_limit","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"teardown_gas_limit","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"max_fee_per_gas","type":{"kind":"field"}}]}},{"name":"l2","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::DimensionGasSettings","fields":[{"name":"gas_limit","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"teardown_gas_limit","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"max_fee_per_gas","type":{"kind":"field"}}]}},{"name":"inclusion_fee","type":{"kind":"field"}}]}},{"name":"transaction_fee","type":{"kind":"field"}}]}},{"name":"historical_header","type":{"kind":"struct","path":"aztec::protocol_types::header::Header","fields":[{"name":"last_archive","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"content_commitment","type":{"kind":"struct","path":"aztec::protocol_types::content_commitment::ContentCommitment","fields":[{"name":"tx_tree_height","type":{"kind":"field"}},{"name":"txs_effects_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}]}},{"name":"state","type":{"kind":"struct","path":"aztec::protocol_types::state_reference::StateReference","fields":[{"name":"l1_to_l2_message_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"partial","type":{"kind":"struct","path":"aztec::protocol_types::partial_state_reference::PartialStateReference","fields":[{"name":"note_hash_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"nullifier_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"public_data_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}}]}},{"name":"global_variables","type":{"kind":"struct","path":"aztec::protocol_types::abis::global_variables::GlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"fee_recipient","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"gas_fees","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l1_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}}]}}]}},{"name":"public_global_variables","type":{"kind":"struct","path":"aztec::protocol_types::abis::global_variables::GlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"fee_recipient","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"gas_fees","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l1_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}}]}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}]},"visibility":"private"},{"name":"relayer","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]},"visibility":"private"},{"name":"token","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]},"visibility":"private"},{"name":"amount","type":{"kind":"field"},"visibility":"private"},{"name":"nonce","type":{"kind":"field"},"visibility":"private"}],"param_witnesses":{"amount":[{"start":56,"end":57}],"inputs":[{"start":0,"end":54}],"nonce":[{"start":57,"end":58}],"relayer":[{"start":54,"end":55}],"token":[{"start":55,"end":56}]},"return_type":{"abi_type":{"kind":"struct","path":"aztec::protocol_types::abis::public_circuit_public_inputs::PublicCircuitPublicInputs","fields":[{"name":"call_context","type":{"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"storage_contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"portal_contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"gas_left","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l1_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}},{"name":"side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"gas_settings","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::GasSettings","fields":[{"name":"da","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::DimensionGasSettings","fields":[{"name":"gas_limit","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"teardown_gas_limit","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"max_fee_per_gas","type":{"kind":"field"}}]}},{"name":"l1","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::DimensionGasSettings","fields":[{"name":"gas_limit","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"teardown_gas_limit","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"max_fee_per_gas","type":{"kind":"field"}}]}},{"name":"l2","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::DimensionGasSettings","fields":[{"name":"gas_limit","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"teardown_gas_limit","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"max_fee_per_gas","type":{"kind":"field"}}]}},{"name":"inclusion_fee","type":{"kind":"field"}}]}},{"name":"transaction_fee","type":{"kind":"field"}}]}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"nullifier_read_requests","type":{"kind":"array","length":2,"type":{"kind":"struct","path":"aztec::protocol_types::abis::read_request::ReadRequest","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"nullifier_non_existent_read_requests","type":{"kind":"array","length":2,"type":{"kind":"struct","path":"aztec::protocol_types::abis::read_request::ReadRequest","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"contract_storage_update_requests","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::contrakt::storage_update_request::StorageUpdateRequest","fields":[{"name":"storage_slot","type":{"kind":"field"}},{"name":"new_value","type":{"kind":"field"}}]}}},{"name":"contract_storage_reads","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::contrakt::storage_read::StorageRead","fields":[{"name":"storage_slot","type":{"kind":"field"}},{"name":"current_value","type":{"kind":"field"}}]}}},{"name":"public_call_stack_hashes","type":{"kind":"array","length":4,"type":{"kind":"field"}}},{"name":"new_note_hashes","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::abis::side_effect::SideEffect","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"new_nullifiers","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::abis::side_effect::SideEffectLinkedToNoteHash","fields":[{"name":"value","type":{"kind":"field"}},{"name":"note_hash","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"new_l2_to_l1_msgs","type":{"kind":"array","length":2,"type":{"kind":"struct","path":"aztec::protocol_types::messaging::l2_to_l1_message::L2ToL1Message","fields":[{"name":"recipient","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"content","type":{"kind":"field"}}]}}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"unencrypted_logs_hash","type":{"kind":"field"}},{"name":"unencrypted_log_preimages_length","type":{"kind":"field"}},{"name":"historical_header","type":{"kind":"struct","path":"aztec::protocol_types::header::Header","fields":[{"name":"last_archive","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"content_commitment","type":{"kind":"struct","path":"aztec::protocol_types::content_commitment::ContentCommitment","fields":[{"name":"tx_tree_height","type":{"kind":"field"}},{"name":"txs_effects_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}]}},{"name":"state","type":{"kind":"struct","path":"aztec::protocol_types::state_reference::StateReference","fields":[{"name":"l1_to_l2_message_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"partial","type":{"kind":"struct","path":"aztec::protocol_types::partial_state_reference::PartialStateReference","fields":[{"name":"note_hash_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"nullifier_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"public_data_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}}]}},{"name":"global_variables","type":{"kind":"struct","path":"aztec::protocol_types::abis::global_variables::GlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"fee_recipient","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"gas_fees","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l1_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}}]}}]}},{"name":"prover_address","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"revert_code","type":{"kind":"integer","sign":"unsigned","width":8}},{"name":"gas_left","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l1_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]},"visibility":"public"},"return_witnesses":[58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272]},"bytecode":"","debug_symbols":""},{"name":"get_admin","is_unconstrained":true,"custom_attributes":[],"abi":{"parameters":[],"param_witnesses":{},"return_type":{"abi_type":{"kind":"field"},"visibility":"public"},"return_witnesses":[0]},"bytecode":"H4sIAAAAAAAA/72UTU7DMBCFnT83JSqCJYJF2LNwJQ5grsANghIQm0ZKWwkuH4GRh35yvKvhSdGMx2PP8/M4mToh87aIxAQP3taIWf85mHPwaLbabVKqKFbfX+X9Bnm5j10jloGnzM+peBqzvVRLjWpoZxPWCu/Awi+gR5jXYD5HLA/WOl3vMV9F1uhIPfF5J3J1OrKWOlU4i/W+OQ8/OrGWxVjqbcBD/wMftrLFuELtVfraplanN5r6TGucwYK/1CuRc+ftlVqCewlP9qTDBlpJbhPRkX1dIp9vMuX7d/tq8E61L89GnVSgk+Cve/jCa+uwP4xT9zY8D12fgVoZ0KQl9RnjHHH6RSQ2w/J3InVdTNol1g78FYXttVZLeZO+lULFkUV8xm69vfH2aZq6z/Z91w8f7Xg8tONr+zIed/3+d8UXdqw6UsoHAAA=","debug_symbols":"zZfBisIwFEX/5a3LkPeSNEl/ZZhFxulAoVSxVZDSf7fBti4UwaJydwm5N++QxYH0VG83sau2TUtFT+rLUvHdU7uLTdq3Xdx3VHAwIWRUNn9pbTkMGf1XdUmFlSG7iYv2c1qMqCXM7O+ktZMpbFgvWW+Hn2zkycF4HBiPB+MJYDys0IAYDUjQgDQakEEDQrM0o2ma0TzNaKJmNFMLmqnl3aa+TJGPTHmJU41Wy5SUePi4PN4+3y3q+rzCPDEZQCYLyJQDMjlAJg/IFPCY9F0XSO6mllbmxoXarOjYFZ18Rcet6PjnOuPmGPdV/K3L9FFOZ4dmM/+bx2132l1OhjM="},{"name":"get_target_address","is_unconstrained":true,"custom_attributes":[],"abi":{"parameters":[],"param_witnesses":{},"return_type":{"abi_type":{"kind":"field"},"visibility":"public"},"return_witnesses":[0]},"bytecode":"H4sIAAAAAAAA/72UTU7DMBCFnd+mREWwRLAIexYO4gDmCtwgKAGxaaS0leDyERh56CfHu5o+KZrxeOx5fh4nUUckzmaBmODB2Qox4z4LfQqedFvaTXIVxOrnK5xfIy91sWvEEvCU+TkWT60fL9VSowramXi1Wv8ODPwMevh5NeZTxFJvrdX1HvNFYE0ZqCc+70SurgyspU4FzmKcr0/Dr06sZTCWehvwKM/Ah61sMC5QexW/tq7U8Y3GPtMaZzDgL/Vy5Nw5e6WW4F7Ckz1psYFWklsHdGRf58jnm4z4/lu7bwnesfbl2aiT8nQS/HcPXzhtLXb7cereh5eh6xNQyz2atKQ+Y5wiTj8LxGZY/k6kro1Ju4Tagb8iv73Wailv1LeSqTCSgM/YrbM3zj5PU/fVfGz74bMZD/tmfGtex8O23/2t+AYnrzOYygcAAA==","debug_symbols":"zZfNaoNAFIXfZdZS5tw7P+qrlC6mqQVBTIi2UMR3rzbGLhIolSSc3VzmHO7HLD6YwTT7XerrfduZcjD2yZvyeTDdIbXz3PXp2JsSRbCamap9+zkrxsy8101lSi9jdhEXRLekRaxfw8C1tEZZwg66ZnM/vmQTTyDjiWQ8ORlPQcYDywYENiBhA1I2IMcGxGZpsGkabJ4Gm6jBZmphM7Xc29SnLfKQLTdxqsCvWzT+8bhAcWaC2N/nFWBhcoRMnpApEDJFQqackKngY9KrLpAQl5Zad+FCdRs6fkMnbOjEDZ38f51p+EzHOr021fxRnu8+2t353zyN/dfhdDN+Aw=="},{"name":"constructor","is_unconstrained":false,"custom_attributes":["aztec(private)","aztec(initializer)"],"abi":{"parameters":[{"name":"inputs","type":{"kind":"struct","path":"aztec::context::inputs::private_context_inputs::PrivateContextInputs","fields":[{"name":"call_context","type":{"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"storage_contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"portal_contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"gas_left","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l1_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}},{"name":"side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"gas_settings","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::GasSettings","fields":[{"name":"da","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::DimensionGasSettings","fields":[{"name":"gas_limit","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"teardown_gas_limit","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"max_fee_per_gas","type":{"kind":"field"}}]}},{"name":"l1","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::DimensionGasSettings","fields":[{"name":"gas_limit","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"teardown_gas_limit","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"max_fee_per_gas","type":{"kind":"field"}}]}},{"name":"l2","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::DimensionGasSettings","fields":[{"name":"gas_limit","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"teardown_gas_limit","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"max_fee_per_gas","type":{"kind":"field"}}]}},{"name":"inclusion_fee","type":{"kind":"field"}}]}},{"name":"transaction_fee","type":{"kind":"field"}}]}},{"name":"historical_header","type":{"kind":"struct","path":"aztec::protocol_types::header::Header","fields":[{"name":"last_archive","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"content_commitment","type":{"kind":"struct","path":"aztec::protocol_types::content_commitment::ContentCommitment","fields":[{"name":"tx_tree_height","type":{"kind":"field"}},{"name":"txs_effects_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}]}},{"name":"state","type":{"kind":"struct","path":"aztec::protocol_types::state_reference::StateReference","fields":[{"name":"l1_to_l2_message_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"partial","type":{"kind":"struct","path":"aztec::protocol_types::partial_state_reference::PartialStateReference","fields":[{"name":"note_hash_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"nullifier_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"public_data_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}}]}},{"name":"global_variables","type":{"kind":"struct","path":"aztec::protocol_types::abis::global_variables::GlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"fee_recipient","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"gas_fees","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l1_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}}]}}]}},{"name":"private_global_variables","type":{"kind":"struct","path":"aztec::context::globals::private_global_variables::PrivateGlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}}]}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}]},"visibility":"private"},{"name":"admin","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]},"visibility":"private"},{"name":"target","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]},"visibility":"private"},{"name":"token_in","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]},"visibility":"private"},{"name":"token_out","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]},"visibility":"private"},{"name":"relayer","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]},"visibility":"private"},{"name":"bonding_token","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]},"visibility":"private"},{"name":"bonding_amount","type":{"kind":"field"},"visibility":"private"},{"name":"he_pub_key","type":{"kind":"field"},"visibility":"private"},{"name":"sk_hash","type":{"kind":"field"},"visibility":"private"},{"name":"interval","type":{"kind":"field"},"visibility":"private"},{"name":"he_secret_key","type":{"kind":"field"},"visibility":"private"}],"param_witnesses":{"admin":[{"start":47,"end":48}],"bonding_amount":[{"start":53,"end":54}],"bonding_token":[{"start":52,"end":53}],"he_pub_key":[{"start":54,"end":55}],"he_secret_key":[{"start":57,"end":58}],"inputs":[{"start":0,"end":47}],"interval":[{"start":56,"end":57}],"relayer":[{"start":51,"end":52}],"sk_hash":[{"start":55,"end":56}],"target":[{"start":48,"end":49}],"token_in":[{"start":49,"end":50}],"token_out":[{"start":50,"end":51}]},"return_type":{"abi_type":{"kind":"struct","path":"aztec::protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs","fields":[{"name":"call_context","type":{"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"storage_contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"portal_contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"gas_left","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l1_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}},{"name":"side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"gas_settings","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::GasSettings","fields":[{"name":"da","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::DimensionGasSettings","fields":[{"name":"gas_limit","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"teardown_gas_limit","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"max_fee_per_gas","type":{"kind":"field"}}]}},{"name":"l1","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::DimensionGasSettings","fields":[{"name":"gas_limit","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"teardown_gas_limit","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"max_fee_per_gas","type":{"kind":"field"}}]}},{"name":"l2","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::DimensionGasSettings","fields":[{"name":"gas_limit","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"teardown_gas_limit","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"max_fee_per_gas","type":{"kind":"field"}}]}},{"name":"inclusion_fee","type":{"kind":"field"}}]}},{"name":"transaction_fee","type":{"kind":"field"}}]}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"min_revertible_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"max_block_number","type":{"kind":"struct","path":"aztec::protocol_types::abis::max_block_number::MaxBlockNumber","fields":[{"name":"_opt","type":{"kind":"struct","path":"std::option::Option","fields":[{"name":"_is_some","type":{"kind":"boolean"}},{"name":"_value","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}},{"name":"note_hash_read_requests","type":{"kind":"array","length":32,"type":{"kind":"struct","path":"aztec::protocol_types::abis::side_effect::SideEffect","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"nullifier_read_requests","type":{"kind":"array","length":2,"type":{"kind":"struct","path":"aztec::protocol_types::abis::read_request::ReadRequest","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"nullifier_key_validation_requests","type":{"kind":"array","length":1,"type":{"kind":"struct","path":"aztec::protocol_types::abis::nullifier_key_validation_request::NullifierKeyValidationRequest","fields":[{"name":"public_key","type":{"kind":"struct","path":"aztec::protocol_types::grumpkin_point::GrumpkinPoint","fields":[{"name":"x","type":{"kind":"field"}},{"name":"y","type":{"kind":"field"}}]}},{"name":"secret_key","type":{"kind":"struct","path":"aztec::protocol_types::grumpkin_private_key::GrumpkinPrivateKey","fields":[{"name":"high","type":{"kind":"field"}},{"name":"low","type":{"kind":"field"}}]}}]}}},{"name":"new_note_hashes","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::abis::side_effect::SideEffect","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"new_nullifiers","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::abis::side_effect::SideEffectLinkedToNoteHash","fields":[{"name":"value","type":{"kind":"field"}},{"name":"note_hash","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"private_call_stack_hashes","type":{"kind":"array","length":4,"type":{"kind":"field"}}},{"name":"public_call_stack_hashes","type":{"kind":"array","length":4,"type":{"kind":"field"}}},{"name":"new_l2_to_l1_msgs","type":{"kind":"array","length":2,"type":{"kind":"struct","path":"aztec::protocol_types::messaging::l2_to_l1_message::L2ToL1Message","fields":[{"name":"recipient","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"content","type":{"kind":"field"}}]}}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"encrypted_logs_hash","type":{"kind":"field"}},{"name":"unencrypted_logs_hash","type":{"kind":"field"}},{"name":"encrypted_log_preimages_length","type":{"kind":"field"}},{"name":"unencrypted_log_preimages_length","type":{"kind":"field"}},{"name":"historical_header","type":{"kind":"struct","path":"aztec::protocol_types::header::Header","fields":[{"name":"last_archive","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"content_commitment","type":{"kind":"struct","path":"aztec::protocol_types::content_commitment::ContentCommitment","fields":[{"name":"tx_tree_height","type":{"kind":"field"}},{"name":"txs_effects_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}]}},{"name":"state","type":{"kind":"struct","path":"aztec::protocol_types::state_reference::StateReference","fields":[{"name":"l1_to_l2_message_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"partial","type":{"kind":"struct","path":"aztec::protocol_types::partial_state_reference::PartialStateReference","fields":[{"name":"note_hash_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"nullifier_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"public_data_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}}]}},{"name":"global_variables","type":{"kind":"struct","path":"aztec::protocol_types::abis::global_variables::GlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"fee_recipient","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"gas_fees","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l1_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}}]}}]}},{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}}]},"visibility":"public"},"return_witnesses":[204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,376,377,378,379,380,381,382,383,384,385,386,387,388,389,390,391,392,393,394,395,396,397,398,399,400,401,402,403,404,405,406,407,408,409,410,411,412,413,414,415,416,417,418,419,420,421,422,423,424]},"bytecode":"H4sIAAAAAAAA/+2dB5Qb1dXH71ZvwZ1mbECmpUCMpG1a00zHDsX0jpG0WnvxetfsygUTDAQDwUAwzfRmIJjwAeEDwgeED6f3nkAq6b33ipP7177ZfTso5CS6T0dPd9459zyNVvvm/u7cefOfmTdvamikbKkZMRRUtWx1bDFruT603BBabgwtTzCfg+Wm0HJz6PctoeXW0PLE0PKk0PKU0PLU0PL2oeVZoeVdQsux0PJuoeW92OZZy3PM3+1iQlr4HUpbvLO9PdeVzCXaEul4sjuT6oi3d2Q6U4lUoiPV0ZNMtbXlUu2pru5Md1e8O9Helkv0dnS39cZHylyrrXiJpcZsk6C9fdm2ol1TJ0ydNHWbqdtN3WHqTlN3mTpl6m5Tz41qL+p92PajkZy182K/KD7q82J/GjkeBP2ZXcJ9XLy0khBsK277ewCNHJNQGov4HxTkfq35vFXQFzIxRGmw1hesq976e6PlS428Lwmbt9h2nVokPq/Z9vMEnXGRRAc4aPdAkjuYu+I+UH4bxcu189eQ/M6POtihDjLtH8x2CNuhbIex7Wz+3hSKnYgv7fGuwvrrx8csKBC6QScQ/AYd1XTLp3p5nxJot0G63Xi8s4nGOlrBdkcFKxm/51nrabBi1UxjcRZad8Jed3AS02ytM9h0wedp1m+D3wXxCLZ14DtObIL8bH6d/6sP/d8k6zeNRfjnkSz/hJA/E0I+N1jf4QBSU/9a31zkG/afOhpfwvvYPOuznSvi+xXHCieywb67OJc/dHAgP5TO5ucPDOfTA9mc3S2Fj/f232yErUV+g1Jb5Dv8ttXCDNbRarVRb31XGwpLaxG/msnh8T84gUZffC+NnYAETh5koA6hMRG01fwe9Uy2w63/C4AONn8/3PrdEUV+d5j5+xGmnsx2ZIi1NsRc6rFfsm86kuT72IC3zsRkf1Ojrzrq38QmXlpJHCIY56MEY1MuDTSPZLdnUOZTdAJkSvWfAKGd+Q7aXUCVfQKEdhbIb6M4hRJGevtLxXSeYFtvJf86T0mfbX+PpqjzNKX6O08k0dEO2j2GKrvzBPcx8tuoqK+l8i8wvkqrzwUVur0DZR7EMbi9hnIsjS/SMekS5DiWZDtol7cwo1tA/t2qOo5eewvzuCg+6vNiIY0XK6hbaHyRPp7uS/InINI+xj3wMeGBj0kPfGzzwMd2D3zs8MDHTg987PLAxxTJ6tWgHE8jV9NRHN11zth3ncPHOvtCheA642i3Trpd3g6tYyijftu3r+y7o83W31vqx//PVOu7YHu0WNtieTq79OChxSuW5Qbyw/YGC1YQvtdmC4paq0Gi17+f12I52RBaR7H7ck7vwdltSp89LiS5s8fj5fwqXJJspNeWSh7TUsTdkttuT2TbkplMt8sYLHQUA2k/53jiZxNVdk4Fxe4AZ5jPJ7CdyHYS28lsp7CdynYa2+lsZ7CdyXYW29ls57AtYjuXLc2WYcuy9bDl2HrZFrMtYetjO49GBuejuDmyJnrtI2u4D0H/GYx9CeqY+b7OLNeFvq83y/XWkQnfN5jlBuv7YuPF7EEbNdZ3o0dM67vRgSHWd6MDQ6zvRsdWWWPSZpnvHI1J63QzRijRHY1JGxn/QqHfBfEI8qkax6RNMZ+h/BqNwzMs31rEfUt0t9L4vieIH4X8DUqL41i1WMy5gfNX5FbkFq7I9Pdlj1gxkM33DQ4cmu7vtzvrwPkZIeeLKdngN3ZHWGt9tgfn1Vuf7fuY9v8Wu8+61dSxf7Fs+1eQ/WY54Gg1hmKfHoQVu92R2r93przraHywKAQktZ4TqaIVQyL4YMdiqan7aSwZ/lWShb+rLxJL+3MtFR8+WfM637UWWc/UIt85HyqJwLwSWof0qBQ7Yf7L07akOW1LLC29rdFTwH5yk8jSp72SzMuKtJWJZ3s6EpnOnq5ELt2Ryma72xKJZLoz3ZlJpnpzmY5EqiPFbWbTyRSvLpnOJnLxdGeuXCNxlsm1Ne7C2QBFI3FMqf6ROEiiAQftDpLczumKe1B+GzkZidNvfJVu9+EaNx291IEy8FMyl5aTXA5Jxi8QHvBvtolhOVTrSeQmB0jWz6Qdi/NNPUSRakUZVa0IzKs0dnFrqMhKpVWsnUD/7c6Z6x0p55Pcjj5EbhJbWsVKMg9bbSVSbclkVxt+l+rhu/492WQqmezJtMez8XQ2metuT3T3tifb27I92Qy3mU70xnvT2e7e1Ihf5VKxwyTbiQYlT5GKNaX6VSySKO+g3RVU2SoW3Cvkt5ETFTtkfJVudyXJdiDYQVeaOljG3bN7qXyq7DRyc/ASypOi1xJXmXo1RaqsEKQgeRCYV2gsmRCgWGid0qrMTqBSry2uIrmddTW5SWxpVSbJfAH5d23xApLtVIOyhiJVZkr1qzIk0RoH7V5Ila3KwH2h/DZyospWG1+l233Ek2uLkrn0NpLLIcn4BcID/s2m8qnY08lNDpCMn0VV7EWmXkuRii0EKUgeBMZWsQhQLLROaRVrJ1CpKvYiktvR15KbxJZWsZLMF5N/KvZiku1Eg3IJRSrWlOpXsUiiSxy0eylVtooF96Xy28iJil1rfJVu91FPVKxkLr2d5HLoUQcqFv6VU8WeQW5ygGT8LKpiLzP1OopUbCFIQfIgMLaKRYBioXVKq1g7gUpVsZeR3I6+jtwktrSKlWS+nPxTsZeTbCcalCsoUrGmVL+KRRJd4aDdK6myVSy4r5TfRk5U7Drjq3S7j3uiYiVz6R0kl0OPO1Cx8K+cKvZMcpMDJONnURV7lanXU6RiC0EKkgeBsVUsAhQLrVNaxdoJVKqKvYrkdvT15CaxpVWsJPPV5J+KvZpkO9GgXEORijWl+lUskugaB+1eS5WtYsF9rfw2cqJi1xtfpdt9whMVK5lL7yS5HHrCgYqFf+VUsWeRmxwgWT/HPa10nak3UKRiUUZVLALzamgd0qrVTphSn066juR27A3kJpGlVask8/VWW748nXQ9yXaaQbmBItVqSvWrViTRDQ7avZEqW7WC+0b5beREtW4wvkq3exPJdiDYQW8ydblU19nk5mAlnBfjVNfNpt5IkepCGVVdCIz9jPhGcv+MuJ1Apaqwm0lu59xIbhJbWoVJMt9C/qmwW0i2Ew3KrRSpMFOqX4UhiW510O5tVNkqDNy3yW8jJypso/FVut3bSbYDwQ56O5VXhZ1Dbg5WQnlR9A7uHaa+kyIVVghSkDwIjH0HFwGKhdYprcLsBCr1Du4dJLdz3kluEltahUky30X+3cG9i2Q70aDcTZEKM6X6VRiS6G4H7d5Dla3CwH2P/DZyosLuNL5Kt/ukJ3dwJXPpXpLLIcn4BcID/s2m8qnYReQmB0jGz6Iq9j5Tb6JIxRaCFCQPAmOrWAQoFlqntIq1E6hUFXsfye3om8hNYkurWEnm+8k/FXs/yXaiQXmAIhVrSvWrWCTRAw7afZAqW8WC+0H5beRExW4yvkq3+7QnKlYyl95Fcjn0tAMVC//KqWLPJTc5QDJ+FlWxD5l6M0UqthCkIHkQGFvFIkCx0DqlVey5JKdiHyK5HX0zuUlsaRUryfww+adiHybZTjQo76ZIxZpS/SoWSfRuB+0+QpWtYsH9iPw2cqJiNxtfpdt9xhMVK5lL/0NyOfSMAxUL/8qpYjPkJgdIxs+iKvZRUz9GkYotBClIHgTGVrEIUCy0TmkVaydQqSr2UZLb0R8jN4ktrWIlmR8n/1Ts4yTbiQblPRSpWFOqX8Uiid7joN0nqLJVLLifkN9GTlTsY8ZX6Xaf9UTFSubS/5JcDj3rQMXCv3Kq2Cy5yQGS8bOoin3S1E9RpGILQQqSB4GxVSwCFAutU1rF2glUqop9kuR29KfITWJLq1hJ5qfJPxX7NMl2okF5L0Uq1pTqV7FIovc6aPcZqmwVC+5n5LeRExX7lPFVut3nPVGxkrn0fySXQ887ULHwr5wqNkducoBk/CyqYp819XMUqdhCkILkQWBsFYsAxULrlFaxdgKVqmKfJbkd/Tlyk9jSKlaS+XnyT8U+T7KdaFDeR5GKNaX6VSyS6H0O2n2BKlvFgvsF+W3kRMU+Z3yVbvcFT1SsZC79PwnmuAMVC//KqWJ7yU0OkIyfRVXsi6beQpGKLQQpSB4ExlaxW8i9irUTqFQV+yLJ7ehbyE1iS6tYSeb3k38q9v0k24kG5QMUqVhTql/FIok+4KDdD1Jlq1hwf1B+GzlRsVuMr9LtvuiJipXMpQ+R4AHIgYqFf7NpfJE+cNYIxvMEcpND0vt7vwBzOteW7WlvT73etik1nnMEmX2ZbGqOYPw+LLyfgBVtxmh8kY7BQsEYnEd+7JMbqDz5WWo8mwSZyzUNb6nMNYLMpyhkPpnKsw+WyvwRAT/bE9m2ZCbTDd/sk0K0jZOxIVO3sH3UMOB3L1tMW636VFOvNvVaU68z9XpTzzV1k6nnmHqTqTebOm3qx0z9lKl7TP2cqbeYerGpl5i6z9QLQ+uN6qiO6qiOap313mwfo7HjWXDdIziOfdTUHzP1NLaP0/gifR5hn/+Uqg0+QfLnUmgzZsVJkh3H/wNJXiN9ksqjX+OllYQk86c8YZa8lvVpT5hrBZk/4wlznSDzZz1hrhdk/pwnzA2CzJ/3hLlRkPkLnjBPEGT+oifMTYLMX/KEuVmQ+cueMLcIMr/kCXOrIPPLnjBvI8j8FU+YJwoyf9UT5kmCzF/zhHmyIPPXPWGeIsj8DU+Ypwoyf9MT5mmCzK94wjxdkPlbnjBvK8j8bU+Y9xdk/o4nzHMFmb/rCfMnBZm/p3A7f18h8w8UMv9QIfOPFDL/WCHzTxQy/1Qh888UMv9cIfMvFDL/UiHzrxQy/1oh828UMv9WIfPvFDL/XiHzHxQy/1Eh858UMv9ZIfNfFDL/VSHz3xQy/10h86sKmbcqZP6HQmaq0cdco5C5ViFznULmeoXMDQqZGxUyT1DI3KSQuVkhc4tC5laFzNsoZJ6okHmSQubJCpmnKGSeqpB5mkLm6QqZt1XIvJ1C5u0VMu+gkHlHhcwzFDLvpJB5pkLmWQqZd1bIvItC5l0VMscUMs9WyLybQubdFTLvoZB5T4XMeylkfoNC5jcqZH6TQuY3K2TeWyHzPgqZ36KQeY5C5n0VMscVMicUMicVMrcpZG5XyNyhkLlTIXOXQuaUQuZuhcxzFTLvp5B5f4XMByhkPlAh80EKmecpZD5YIfMhCpkPVch8mELmwxUyH6GQ+UiFzEcpZJ6vkHmBQua3KmQ+WiHzMZ4wS77z+liF2/k4T5g/LMi8UOF2Pl4h8wkKmU9UyHySQuaTFTKfopD5VIXMpylkPl0h8xkKmc9UyHyWQuazFTKfo5B5kULmcxUypxUyZxQyZxUy9yhkzilk7lXIvFgh8xKFzH0Kmc9TyLxUIXO/QuZlCpkHFDIPKmRerpD5fIXMQwqZhxUy5xUyr1DIvFIh8yqFzKsVMl+gkHmNQuYLFTK/TSHzRQqZ1ypkvlgh8yUKmS/1hPnjgsxvV7idL1PIvE4h8+UKma9QyHylQuZ3KGS+yhPmOYLM6z1h/oQg89UKc/sahczXKmR+p0Lm6zxh3k6QeYMnzNsLMl/vCfMOgsw3eMK8oyDzjZ4wzxBkvskT5p0EmW/2hHmmIPNGT5hnCTLf4gnzzoLMt3rCvIsg822eMO8qyHy7J8wxQeY7PGGeLch8pyfMuwky3+UJ8+6CzHd7wryHIPM9njDvKch8ryfMewky3+cJ8xsEmTd5wvxGQeb7PWF+kyDzA54wv1mQ+UFPmPcWZH6XJ8z7CDI/5AnzWwSZNwsyY37ZOtPWXIu/xsQAf6tna2BrZJvA1sTWzNbC1sq2DdtEtklsk9mmsE1lm8Y2nW1bNlzfx/VuXP/F9VBcH8T1Mlw/wvUUXF/A+TbOP2NsOD+BXod+hZ6DvsHxHsc/HA/QP6K/wP6DfEJ8ce93X8SELcGWRKzZ2tk62DrZuthSbN0W6zdN/Sm2T7N9hu2zbJ9j+zzbF9i+yPYlti+zvcT2MttX2L7K9jW2r7N9w7T1Ctu32L7N9h2277J9j+37bD9g+yHbj9h+zPYTtp+y/Yzt52y/YPsl26/Yfs32G7bfsv2O7fdsf2D7I9uf2P7M9he2v7L9je3vbK+ybWX7B41sxBq2WrY6tnq2BrZGtglsTWzNbC1srWzbsE1km8Q2mW0K21S2aWzT2bZl245te7Yd2HZkm8G2E9tMtllsO7PtwrYrW4xtNttubLuz7cG2JxveU4/3tuM95nivN95zjfc+4z3IeC8w3pOL98YiOTEBMt6zifdO4j2MeC8h3tOH99bhPW54rxne84X3XuE9UHgvEt4TVHhvDhveq4L3jOC9G3gPBd7LgPcUYN5+zGOPed0xzznm/cY82JgXGvMkY95gzKOLeWUxzyrmHcU8nJiXEvM0Yt5CzOOHee0wzxvmPcM8YJgXC/NEYd4kzCOEeXUwzwzmXcE8JJiXA/NUYN4GzGOA5/rxnDue+8Zz0HguGM/J4rlRPEeJ5wrxnB2eO8NzWHguCc/p4LkVPMeB5xowzh/j3jEOHOOiMU4Y42YxjhTjKjHOEOPuMA4N47IwTgnjdjCOBeM6MM4B9/1xHxz3hXGfFPcNcR8N95VwnwX3HXAdHtelcZ0W1y1xHQ/XtXCdB9c9cB0A58U4T8R5E84joKuhM6G7oENwXMZxCv02+rEJ1n44M1Rn0/39sfxgLD08nBvKL1qWXr0o05dfNNy3JkemiyDTTaDMH+jL96X7+9ak832DA7El6eElsZ7B3HBsYDAfW5bOZ5eQ6TjIdBLj/is3FEv39AzlhodjfSP/k1+Si2UHB/JD6Ww+1pNb3j94QW6ITKeDMtnUfQMruYWe2PDSRVgrvjr8P2N5yfxslqnT+Xxu2fJ84T96emKr+vJLYoMrc0O9/YOryHQr/8nvC+WfO3u91rW/AQA=","debug_symbols":"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"},{"name":"validate_execute_batch","is_unconstrained":true,"custom_attributes":["aztec(public)","aztec(internal)"],"abi":{"parameters":[{"name":"inputs","type":{"kind":"struct","path":"aztec::context::inputs::public_context_inputs::PublicContextInputs","fields":[{"name":"call_context","type":{"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"storage_contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"portal_contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"gas_left","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l1_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}},{"name":"side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"gas_settings","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::GasSettings","fields":[{"name":"da","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::DimensionGasSettings","fields":[{"name":"gas_limit","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"teardown_gas_limit","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"max_fee_per_gas","type":{"kind":"field"}}]}},{"name":"l1","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::DimensionGasSettings","fields":[{"name":"gas_limit","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"teardown_gas_limit","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"max_fee_per_gas","type":{"kind":"field"}}]}},{"name":"l2","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::DimensionGasSettings","fields":[{"name":"gas_limit","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"teardown_gas_limit","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"max_fee_per_gas","type":{"kind":"field"}}]}},{"name":"inclusion_fee","type":{"kind":"field"}}]}},{"name":"transaction_fee","type":{"kind":"field"}}]}},{"name":"historical_header","type":{"kind":"struct","path":"aztec::protocol_types::header::Header","fields":[{"name":"last_archive","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"content_commitment","type":{"kind":"struct","path":"aztec::protocol_types::content_commitment::ContentCommitment","fields":[{"name":"tx_tree_height","type":{"kind":"field"}},{"name":"txs_effects_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}]}},{"name":"state","type":{"kind":"struct","path":"aztec::protocol_types::state_reference::StateReference","fields":[{"name":"l1_to_l2_message_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"partial","type":{"kind":"struct","path":"aztec::protocol_types::partial_state_reference::PartialStateReference","fields":[{"name":"note_hash_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"nullifier_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"public_data_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}}]}},{"name":"global_variables","type":{"kind":"struct","path":"aztec::protocol_types::abis::global_variables::GlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"fee_recipient","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"gas_fees","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l1_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}}]}}]}},{"name":"public_global_variables","type":{"kind":"struct","path":"aztec::protocol_types::abis::global_variables::GlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"fee_recipient","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"gas_fees","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l1_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}}]}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}]},"visibility":"private"},{"name":"sender","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]},"visibility":"private"},{"name":"c1","type":{"kind":"field"},"visibility":"private"},{"name":"c2","type":{"kind":"field"},"visibility":"private"},{"name":"amount_out","type":{"kind":"field"},"visibility":"private"},{"name":"amount_out_sub_cancelled","type":{"kind":"field"},"visibility":"private"}],"param_witnesses":{"amount_out":[{"start":57,"end":58}],"amount_out_sub_cancelled":[{"start":58,"end":59}],"c1":[{"start":55,"end":56}],"c2":[{"start":56,"end":57}],"inputs":[{"start":0,"end":54}],"sender":[{"start":54,"end":55}]},"return_type":{"abi_type":{"kind":"struct","path":"aztec::protocol_types::abis::public_circuit_public_inputs::PublicCircuitPublicInputs","fields":[{"name":"call_context","type":{"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"storage_contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"portal_contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"gas_left","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l1_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}},{"name":"side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"gas_settings","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::GasSettings","fields":[{"name":"da","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::DimensionGasSettings","fields":[{"name":"gas_limit","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"teardown_gas_limit","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"max_fee_per_gas","type":{"kind":"field"}}]}},{"name":"l1","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::DimensionGasSettings","fields":[{"name":"gas_limit","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"teardown_gas_limit","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"max_fee_per_gas","type":{"kind":"field"}}]}},{"name":"l2","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::DimensionGasSettings","fields":[{"name":"gas_limit","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"teardown_gas_limit","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"max_fee_per_gas","type":{"kind":"field"}}]}},{"name":"inclusion_fee","type":{"kind":"field"}}]}},{"name":"transaction_fee","type":{"kind":"field"}}]}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"nullifier_read_requests","type":{"kind":"array","length":2,"type":{"kind":"struct","path":"aztec::protocol_types::abis::read_request::ReadRequest","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"nullifier_non_existent_read_requests","type":{"kind":"array","length":2,"type":{"kind":"struct","path":"aztec::protocol_types::abis::read_request::ReadRequest","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"contract_storage_update_requests","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::contrakt::storage_update_request::StorageUpdateRequest","fields":[{"name":"storage_slot","type":{"kind":"field"}},{"name":"new_value","type":{"kind":"field"}}]}}},{"name":"contract_storage_reads","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::contrakt::storage_read::StorageRead","fields":[{"name":"storage_slot","type":{"kind":"field"}},{"name":"current_value","type":{"kind":"field"}}]}}},{"name":"public_call_stack_hashes","type":{"kind":"array","length":4,"type":{"kind":"field"}}},{"name":"new_note_hashes","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::abis::side_effect::SideEffect","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"new_nullifiers","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::abis::side_effect::SideEffectLinkedToNoteHash","fields":[{"name":"value","type":{"kind":"field"}},{"name":"note_hash","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"new_l2_to_l1_msgs","type":{"kind":"array","length":2,"type":{"kind":"struct","path":"aztec::protocol_types::messaging::l2_to_l1_message::L2ToL1Message","fields":[{"name":"recipient","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"content","type":{"kind":"field"}}]}}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"unencrypted_logs_hash","type":{"kind":"field"}},{"name":"unencrypted_log_preimages_length","type":{"kind":"field"}},{"name":"historical_header","type":{"kind":"struct","path":"aztec::protocol_types::header::Header","fields":[{"name":"last_archive","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"content_commitment","type":{"kind":"struct","path":"aztec::protocol_types::content_commitment::ContentCommitment","fields":[{"name":"tx_tree_height","type":{"kind":"field"}},{"name":"txs_effects_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}]}},{"name":"state","type":{"kind":"struct","path":"aztec::protocol_types::state_reference::StateReference","fields":[{"name":"l1_to_l2_message_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"partial","type":{"kind":"struct","path":"aztec::protocol_types::partial_state_reference::PartialStateReference","fields":[{"name":"note_hash_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"nullifier_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"public_data_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}}]}},{"name":"global_variables","type":{"kind":"struct","path":"aztec::protocol_types::abis::global_variables::GlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"fee_recipient","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"gas_fees","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l1_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}}]}}]}},{"name":"prover_address","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"revert_code","type":{"kind":"integer","sign":"unsigned","width":8}},{"name":"gas_left","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l1_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]},"visibility":"public"},"return_witnesses":[59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273]},"bytecode":"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","debug_symbols":""},{"name":"get_token_in","is_unconstrained":true,"custom_attributes":[],"abi":{"parameters":[],"param_witnesses":{},"return_type":{"abi_type":{"kind":"field"},"visibility":"public"},"return_witnesses":[0]},"bytecode":"H4sIAAAAAAAA/72UTU7DMBCFnT83JSqCJYJF2LNIJA5grsANghIQm0ZKWwkuH1EjD/3keFfTJ0UzHo89z8/jJOqExNksEBM8OVsiZtxn0ZyD56bVdpNcBbE6foXzK+SlLnaLWAKeMj/H4nlkeq2WGpXQzsSr1fp3YOBn0MPPqzCfIpZ6a62uj5gvAmt0oJ74vBO5Oh1YS50KnMU4vzkPvzqxlsFY6m3AQ1+AD1vZYFyg9ip+7aZUpzca+0xrnMGAv9TLkfPg7I1agnsJT/akxQZaSW4V0JF9nSOfbzLi+2/tvhq8Y+3Ls1En5ekk+O8evnLaWuz249R9DK9D1yeglns0aUl9xjhFnH4WiM2w/J1IXRuTdgm1A39Ffnut1VLeqG8lU2EkAZ+xe2fvnH2Zpu67/tz2w1c9Hvb1+F6/jYdtv/tb8QPEr1DXygcAAA==","debug_symbols":"zZfBasMwEET/Zc+maFaSZflXSg9q6oLBOCF2C8X432s3jntIoNQkYW5aNMM+dHigQZr9LvX1vu2kHMQ8eSmfB+kOqZ3nrk/HXkrEYGImVfv2c7ZxzOS9biopvY7ZRVwR3JJWNX4NA9fSNugSdrBrtvDjSzbx5GQ8gYynIOOJZDwwbEBgA1I2IMsG5NiA2CwNNk2DzdNgEzXYTK1sptZ7m/q0RR+y5SZOVfh1iw1/PC4Qz0xQ8/u8CixMjpDJEzLlhEyBkKkgZIp8TPaqCzQPS8sad+FC6zZ0/IZOvqETNnSK/3Wm4TMd6/TaVPNHeb77aHfnf/M09l+H0834DQ=="}],"outputs":{"structs":{"functions":[{"kind":"struct","path":"BatcherVault::_initialize_abi","fields":[{"name":"parameters","type":{"kind":"struct","path":"BatcherVault::_initialize_parameters","fields":[{"name":"admin","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"target","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"token_in","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"token_out","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"relayer","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"bonding_token","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"bonding_amount","type":{"kind":"field"}},{"name":"he_pub_key","type":{"kind":"field"}},{"name":"sk_hash","type":{"kind":"field"}},{"name":"interval","type":{"kind":"field"}}]}}]},{"kind":"struct","path":"BatcherVault::check_sk_hash_abi","fields":[{"name":"parameters","type":{"kind":"struct","path":"BatcherVault::check_sk_hash_parameters","fields":[{"name":"sk_hash","type":{"kind":"field"}}]}}]},{"kind":"struct","path":"BatcherVault::finalize_execute_abi","fields":[{"name":"parameters","type":{"kind":"struct","path":"BatcherVault::finalize_execute_parameters","fields":[{"name":"secret_hash_for_redeeming_minted_notes","type":{"kind":"field"}},{"name":"amount","type":{"kind":"field"}},{"name":"secret_for_L1_to_L2_message_consumption","type":{"kind":"field"}}]}}]},{"kind":"struct","path":"BatcherVault::replace_relayer_and_slash_stake_abi","fields":[{"name":"parameters","type":{"kind":"struct","path":"BatcherVault::replace_relayer_and_slash_stake_parameters","fields":[{"name":"sk_hash","type":{"kind":"field"}},{"name":"new_he_pub_key","type":{"kind":"field"}},{"name":"new_relayer","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"secret_hash","type":{"kind":"field"}},{"name":"nonce","type":{"kind":"field"}}]}}]},{"kind":"struct","path":"BatcherVault::_validate_claim_params_abi","fields":[{"name":"parameters","type":{"kind":"struct","path":"BatcherVault::_validate_claim_params_parameters","fields":[{"name":"_round","type":{"kind":"field"}},{"name":"_total_token_in","type":{"kind":"field"}},{"name":"_total_token_out","type":{"kind":"field"}}]}}]},{"kind":"struct","path":"BatcherVault::_add_token_out_amount_abi","fields":[{"name":"parameters","type":{"kind":"struct","path":"BatcherVault::_add_token_out_amount_parameters","fields":[{"name":"enc_c1","type":{"kind":"field"}},{"name":"enc_c2","type":{"kind":"field"}}]}}]},{"kind":"struct","path":"BatcherVault::_sub_token_out_amount_abi","fields":[{"name":"parameters","type":{"kind":"struct","path":"BatcherVault::_sub_token_out_amount_parameters","fields":[{"name":"amount","type":{"kind":"field"}},{"name":"_round","type":{"kind":"field"}}]}}]},{"kind":"struct","path":"BatcherVault::execute_batch_abi","fields":[{"name":"parameters","type":{"kind":"struct","path":"BatcherVault::execute_batch_parameters","fields":[{"name":"encrypted_amount","type":{"kind":"array","length":2,"type":{"kind":"field"}}},{"name":"secret_key","type":{"kind":"field"}},{"name":"token_out_amount_cancelled","type":{"kind":"field"}},{"name":"input_asset_bridge","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"output_asset_bridge","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"nonce_for_transfer_approval","type":{"kind":"field"}},{"name":"uniswap_fee_tier","type":{"kind":"field"}},{"name":"minimum_output_amount","type":{"kind":"field"}},{"name":"secret_hash_for_L1_to_l2_message","type":{"kind":"field"}},{"name":"caller_on_L1","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"nonce_for_swap_approval","type":{"kind":"field"}}]}}]},{"kind":"struct","path":"BatcherVault::constructor_abi","fields":[{"name":"parameters","type":{"kind":"struct","path":"BatcherVault::constructor_parameters","fields":[{"name":"admin","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"target","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"token_in","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"token_out","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"relayer","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"bonding_token","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"bonding_amount","type":{"kind":"field"}},{"name":"he_pub_key","type":{"kind":"field"}},{"name":"sk_hash","type":{"kind":"field"}},{"name":"interval","type":{"kind":"field"}},{"name":"he_secret_key","type":{"kind":"field"}}]}}]},{"kind":"struct","path":"BatcherVault::validate_execute_batch_abi","fields":[{"name":"parameters","type":{"kind":"struct","path":"BatcherVault::validate_execute_batch_parameters","fields":[{"name":"sender","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"c1","type":{"kind":"field"}},{"name":"c2","type":{"kind":"field"}},{"name":"amount_out","type":{"kind":"field"}},{"name":"amount_out_sub_cancelled","type":{"kind":"field"}}]}}]},{"kind":"struct","path":"BatcherVault::spend_public_authwit_abi","fields":[{"name":"parameters","type":{"kind":"struct","path":"BatcherVault::spend_public_authwit_parameters","fields":[{"name":"inner_hash","type":{"kind":"field"}}]}},{"name":"return_type","type":{"kind":"field"}}]},{"kind":"struct","path":"BatcherVault::stake_abi","fields":[{"name":"parameters","type":{"kind":"struct","path":"BatcherVault::stake_parameters","fields":[{"name":"relayer","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"token","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"amount","type":{"kind":"field"}},{"name":"nonce","type":{"kind":"field"}}]}}]},{"kind":"struct","path":"BatcherVault::cancel_batch_and_claim_abi","fields":[{"name":"parameters","type":{"kind":"struct","path":"BatcherVault::cancel_batch_and_claim_parameters","fields":[{"name":"current_round","type":{"kind":"field"}},{"name":"secret_hash","type":{"kind":"field"}}]}}]},{"kind":"struct","path":"BatcherVault::_validate_round_abi","fields":[{"name":"parameters","type":{"kind":"struct","path":"BatcherVault::_validate_round_parameters","fields":[{"name":"round","type":{"kind":"field"}}]}}]},{"kind":"struct","path":"BatcherVault::claim_token_in_abi","fields":[{"name":"parameters","type":{"kind":"struct","path":"BatcherVault::claim_token_in_parameters","fields":[{"name":"round","type":{"kind":"field"}},{"name":"total_token_in","type":{"kind":"field"}},{"name":"total_token_out","type":{"kind":"field"}}]}}]},{"kind":"struct","path":"BatcherVault::deposit_to_batch_abi","fields":[{"name":"parameters","type":{"kind":"struct","path":"BatcherVault::deposit_to_batch_parameters","fields":[{"name":"current_round","type":{"kind":"field"}},{"name":"amount_out","type":{"kind":"field"}},{"name":"relayer_he_pubkey","type":{"kind":"field"}},{"name":"he_add_rand","type":{"kind":"field"}},{"name":"nonce","type":{"kind":"field"}}]}}]},{"kind":"struct","path":"BatcherVault::dipute_relayer_abi","fields":[{"name":"parameters","type":{"kind":"struct","path":"BatcherVault::dipute_relayer_parameters","fields":[{"name":"he_secret_key","type":{"kind":"field"}},{"name":"new_sk_hash","type":{"kind":"field"}},{"name":"new_he_pub_key","type":{"kind":"field"}},{"name":"new_he_secret_key","type":{"kind":"field"}},{"name":"new_relayer","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"secret_hash","type":{"kind":"field"}},{"name":"nonce","type":{"kind":"field"}}]}}]}]},"globals":{"storage":[{"kind":"struct","fields":[{"name":"admin","value":{"kind":"struct","fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"1"}},{"name":"typ","value":{"kind":"string","value":"PublicImmutable<AztecAddress>"}}]}},{"name":"target","value":{"kind":"struct","fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"2"}},{"name":"typ","value":{"kind":"string","value":"SharedImmutable<AztecAddress>"}}]}},{"name":"token_out","value":{"kind":"struct","fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"3"}},{"name":"typ","value":{"kind":"string","value":"SharedImmutable<AztecAddress>"}}]}},{"name":"token_in","value":{"kind":"struct","fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"4"}},{"name":"typ","value":{"kind":"string","value":"SharedImmutable<AztecAddress>"}}]}},{"name":"current_round","value":{"kind":"struct","fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"5"}},{"name":"typ","value":{"kind":"string","value":"PublicMutable<Field>"}}]}},{"name":"batch_relayer","value":{"kind":"struct","fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"6"}},{"name":"typ","value":{"kind":"string","value":"PublicMutable<BatchRelayer>"}}]}},{"name":"rounds","value":{"kind":"struct","fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"7"}},{"name":"typ","value":{"kind":"string","value":"Map<Field, PublicMutable<Round>>"}}]}},{"name":"deposit_notes","value":{"kind":"struct","fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"8"}},{"name":"typ","value":{"kind":"string","value":"Map<AztecAddress, PrivateMutable<DepositNote>>"}}]}}]}],"notes":[{"kind":"tuple","fields":[{"kind":"integer","sign":false,"value":"6810111211111510511678111116101"},{"kind":"string","value":"DepositNote"}]}]}},"file_map":{"2":{"source":"// docs:start:eq-trait\ntrait Eq {\n    fn eq(self, other: Self) -> bool;\n}\n// docs:end:eq-trait\n\nimpl Eq for Field { fn eq(self, other: Field) -> bool { self == other } }\n\nimpl Eq for u64 { fn eq(self, other: u64) -> bool { self == other } }\nimpl Eq for u32 { fn eq(self, other: u32) -> bool { self == other } }\nimpl Eq for u8 { fn eq(self, other: u8) -> bool { self == other } }\nimpl Eq for u1 { fn eq(self, other: u1) -> bool { self == other } }\n\nimpl Eq for i8 { fn eq(self, other: i8) -> bool { self == other } }\nimpl Eq for i32 { fn eq(self, other: i32) -> bool { self == other } }\nimpl Eq for i64 { fn eq(self, other: i64) -> bool { self == other } }\n\nimpl Eq for () { fn eq(_self: Self, _other: ()) -> bool { true } }\nimpl Eq for bool { fn eq(self, other: bool) -> bool { self == other } }\n\nimpl<T, N> Eq for [T; N] where T: Eq {\n    fn eq(self, other: [T; N]) -> bool {\n        let mut result = true;\n        for i in 0 .. self.len() {\n            result &= self[i].eq(other[i]);\n        }\n        result\n    }\n}\n\nimpl<T> Eq for [T] where T: Eq {\n    fn eq(self, other: [T]) -> bool {\n        let mut result = self.len() == other.len();\n        for i in 0 .. self.len() {\n            result &= self[i].eq(other[i]);\n        }\n        result\n    }\n}\n\nimpl<N> Eq for str<N> {\n    fn eq(self, other: str<N>) -> bool {\n        let self_bytes = self.as_bytes();\n        let other_bytes = other.as_bytes();\n        self_bytes == other_bytes\n    }\n}\n\nimpl<A, B> Eq for (A, B) where A: Eq, B: Eq {\n    fn eq(self, other: (A, B)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1)\n    }\n}\n\nimpl<A, B, C> Eq for (A, B, C) where A: Eq, B: Eq, C: Eq {\n    fn eq(self, other: (A, B, C)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1) & self.2.eq(other.2)\n    }\n}\n\nimpl<A, B, C, D> Eq for (A, B, C, D) where A: Eq, B: Eq, C: Eq, D: Eq {\n    fn eq(self, other: (A, B, C, D)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1) & self.2.eq(other.2) & self.3.eq(other.3)\n    }\n}\n\nimpl<A, B, C, D, E> Eq for (A, B, C, D, E) where A: Eq, B: Eq, C: Eq, D: Eq, E: Eq {\n    fn eq(self, other: (A, B, C, D, E)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1) & self.2.eq(other.2) & self.3.eq(other.3) & self.4.eq(other.4)\n    }\n}\n\nimpl Eq for Ordering {\n    fn eq(self, other: Ordering) -> bool {\n        self.result == other.result\n    }\n}\n\n// Noir doesn't have enums yet so we emulate (Lt | Eq | Gt) with a struct\n// that has 3 public functions for constructing the struct.\nstruct Ordering {\n    result: Field,\n}\n\nimpl Ordering {\n    // Implementation note: 0, 1, and 2 for Lt, Eq, and Gt are built\n    // into the compiler, do not change these without also updating\n    // the compiler itself!\n    pub fn less() -> Ordering {\n        Ordering { result: 0 }\n    }\n\n    pub fn equal() -> Ordering {\n        Ordering { result: 1 }\n    }\n\n    pub fn greater() -> Ordering {\n        Ordering { result: 2 }\n    }\n}\n\n// docs:start:ord-trait\ntrait Ord {\n    fn cmp(self, other: Self) -> Ordering;\n}\n// docs:end:ord-trait\n\n// Note: Field deliberately does not implement Ord\n\nimpl Ord for u64 {\n    fn cmp(self, other: u64) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for u32 {\n    fn cmp(self, other: u32) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for u8 {\n    fn cmp(self, other: u8) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i8 {\n    fn cmp(self, other: i8) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i32 {\n    fn cmp(self, other: i32) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i64 {\n    fn cmp(self, other: i64) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for () {\n    fn cmp(_self: Self, _other: ()) -> Ordering {\n        Ordering::equal()\n    }\n}\n\nimpl Ord for bool {\n    fn cmp(self, other: bool) -> Ordering {\n        if self {\n            if other {\n                Ordering::equal()\n            } else {\n                Ordering::greater()\n            }\n        } else {\n            if other {\n                Ordering::less()\n            } else {\n                Ordering::equal()\n            }\n        }\n    }\n}\n\nimpl<T, N> Ord for [T; N] where T: Ord {\n    // The first non-equal element of both arrays determines\n    // the ordering for the whole array.\n    fn cmp(self, other: [T; N]) -> Ordering {\n        let mut result = Ordering::equal();\n        for i in 0 .. self.len() {\n            if result == Ordering::equal() {\n                let result_i = self[i].cmp(other[i]);\n\n                if result_i == Ordering::less() {\n                    result = result_i;\n                } else if result_i == Ordering::greater() {\n                    result = result_i;\n                }\n            }\n        }\n        result\n    }\n}\n\nimpl<T> Ord for [T] where T: Ord {\n    // The first non-equal element of both arrays determines\n    // the ordering for the whole array.\n    fn cmp(self, other: [T]) -> Ordering {\n        let mut result = self.len().cmp(other.len());\n        for i in 0 .. self.len() {\n            if result == Ordering::equal() {\n                let result_i = self[i].cmp(other[i]);\n\n                if result_i == Ordering::less() {\n                    result = result_i;\n                } else if result_i == Ordering::greater() {\n                    result = result_i;\n                }\n            }\n        }\n        result\n    }\n}\n\nimpl<A, B> Ord for (A, B) where A: Ord, B: Ord {\n    fn cmp(self, other: (A, B)) -> Ordering {\n        let result = self.0.cmp(other.0);\n\n        if result != Ordering::equal() {\n            result\n        } else {\n            self.1.cmp(other.1)\n        }\n    }\n}\n\nimpl<A, B, C> Ord for (A, B, C) where A: Ord, B: Ord, C: Ord {\n    fn cmp(self, other: (A, B, C)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        result\n    }\n}\n\nimpl<A, B, C, D> Ord for (A, B, C, D) where A: Ord, B: Ord, C: Ord, D: Ord {\n    fn cmp(self, other: (A, B, C, D)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        if result == Ordering::equal() {\n            result = self.3.cmp(other.3);\n        }\n\n        result\n    }\n}\n\nimpl<A, B, C, D, E> Ord for (A, B, C, D, E) where A: Ord, B: Ord, C: Ord, D: Ord, E: Ord {\n    fn cmp(self, other: (A, B, C, D, E)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        if result == Ordering::equal() {\n            result = self.3.cmp(other.3);\n        }\n\n        if result == Ordering::equal() {\n            result = self.4.cmp(other.4);\n        }\n\n        result\n    }\n}\n","path":"std/cmp.nr"},"3":{"source":"struct BoundedVec<T, MaxLen> {\n    storage: [T; MaxLen],\n    len: u64,\n}\n\nimpl<T, MaxLen> BoundedVec<T, MaxLen> {\n    pub fn new() -> Self {\n        let zeroed = crate::unsafe::zeroed();\n        BoundedVec { storage: [zeroed; MaxLen], len: 0 }\n    }\n\n    pub fn get(mut self: Self, index: u64) -> T {\n        assert(index as u64 < self.len);\n        self.storage[index]\n    }\n\n    pub fn get_unchecked(mut self: Self, index: u64) -> T {\n        self.storage[index]\n    }\n\n    pub fn push(&mut self, elem: T) {\n        assert(self.len < MaxLen as u64, \"push out of bounds\");\n\n        self.storage[self.len] = elem;\n        self.len += 1;\n    }\n\n    pub fn len(self) -> u64 {\n        self.len\n    }\n\n    pub fn max_len(_self: BoundedVec<T, MaxLen>) -> u64 {\n        MaxLen\n    }\n\n    // This is a intermediate method, while we don't have an\n    // .extend method\n    pub fn storage(self) -> [T; MaxLen] {\n        self.storage\n    }\n\n    pub fn extend_from_array<Len>(&mut self, array: [T; Len]) {\n        let new_len = self.len + array.len();\n        assert(new_len as u64 <= MaxLen as u64, \"extend_from_array out of bounds\");\n        for i in 0..array.len() {\n            self.storage[self.len + i] = array[i];\n        }\n        self.len = new_len;\n    }\n\n    pub fn extend_from_slice(&mut self, slice: [T]) {\n        let new_len = self.len + slice.len();\n        assert(new_len as u64 <= MaxLen as u64, \"extend_from_slice out of bounds\");\n        for i in 0..slice.len() {\n            self.storage[self.len + i] = slice[i];\n        }\n        self.len = new_len;\n    }\n\n    pub fn extend_from_bounded_vec<Len>(&mut self, vec: BoundedVec<T, Len>) {\n        let append_len = vec.len();\n        let new_len = self.len + append_len;\n        assert(new_len as u64 <= MaxLen as u64, \"extend_from_bounded_vec out of bounds\");\n\n        let mut exceeded_len = false;\n        for i in 0..Len {\n            exceeded_len |= i == append_len;\n            if !exceeded_len {\n                self.storage[self.len + i] = vec.get_unchecked(i);\n            }\n        }\n        self.len = new_len;\n    }\n\n    pub fn pop(&mut self) -> T {\n        assert(self.len as u64 > 0);\n        self.len -= 1;\n\n        let elem = self.storage[self.len];\n        self.storage[self.len] = crate::unsafe::zeroed();\n        elem\n    }\n\n    pub fn any<Env>(self, predicate: fn[Env](T) -> bool) -> bool {\n        let mut ret = false;\n        let mut exceeded_len = false;\n        for i in 0..MaxLen {\n            exceeded_len |= i == self.len;\n            if !exceeded_len {\n                ret |= predicate(self.storage[i]);\n            }\n        }\n        ret\n    }\n}\n","path":"std/collections/bounded_vec.nr"},"19":{"source":"// The low and high decomposition of the field modulus\nglobal PLO: Field = 53438638232309528389504892708671455233;\nglobal PHI: Field = 64323764613183177041862057485226039389;\n\nglobal TWO_POW_128: Field = 0x100000000000000000000000000000000;\n\n/// A hint for decomposing a single field into two 16 byte fields.\nunconstrained fn decompose_unsafe(x: Field) -> (Field, Field) {\n    let x_bytes = x.to_le_bytes(32);\n\n    let mut low: Field = 0;\n    let mut high: Field = 0;\n\n    let mut offset = 1;\n    for i in 0..16 {\n        low += (x_bytes[i] as Field) * offset;\n        high += (x_bytes[i + 16] as Field) * offset;\n        offset *= 256;\n    }\n\n    (low, high)\n}\n\n// Assert that (alo > blo && ahi >= bhi) || (alo <= blo && ahi > bhi)\nfn assert_gt_limbs(a: (Field, Field), b: (Field, Field)) {\n    let (alo, ahi) = a;\n    let (blo, bhi) = b;\n    let borrow = lte_unsafe(alo, blo, 16);\n\n    let rlo = alo - blo - 1 + (borrow as Field) * TWO_POW_128;\n    let rhi = ahi - bhi - (borrow as Field);\n\n    rlo.assert_max_bit_size(128);\n    rhi.assert_max_bit_size(128);\n}\n\n/// Decompose a single field into two 16 byte fields.\npub fn decompose(x: Field) -> (Field, Field) {\n    // Take hints of the decomposition\n    let (xlo, xhi) = decompose_unsafe(x);\n\n    // Range check the limbs\n    xlo.assert_max_bit_size(128);\n    xhi.assert_max_bit_size(128);\n\n    // Check that the decomposition is correct\n    assert_eq(x, xlo + TWO_POW_128 * xhi);\n\n    // Assert that the decomposition of P is greater than the decomposition of x\n    assert_gt_limbs((PLO, PHI), (xlo, xhi));\n    (xlo, xhi)\n}\n\nunconstrained fn lt_unsafe(x: Field, y: Field, num_bytes: u32) -> bool {\n    let x_bytes = x.__to_le_radix(256, num_bytes);\n    let y_bytes = y.__to_le_radix(256, num_bytes);\n    let mut x_is_lt = false;\n    let mut done = false;\n    for i in 0..num_bytes {\n        if (!done) {\n            let x_byte = x_bytes[num_bytes - 1 - i];\n            let y_byte = y_bytes[num_bytes - 1 - i];\n            let bytes_match = x_byte == y_byte;\n            if !bytes_match {\n                x_is_lt = x_byte < y_byte;\n                done = true;\n            }\n        }\n    }\n    x_is_lt\n}\n\nunconstrained fn lte_unsafe(x: Field, y: Field, num_bytes: u32) -> bool {\n    lt_unsafe(x, y, num_bytes) | (x == y)\n}\n\npub fn assert_gt(a: Field, b: Field) {\n    // Decompose a and b\n    let a_limbs = decompose(a);\n    let b_limbs = decompose(b);\n\n    // Assert that a_limbs is greater than b_limbs\n    assert_gt_limbs(a_limbs, b_limbs)\n}\n\npub fn assert_lt(a: Field, b: Field) {\n    assert_gt(b, a);\n}\n\npub fn gt(a: Field, b: Field) -> bool {\n    if a == b {\n        false\n    } else if lt_unsafe(a, b, 32) {\n        assert_gt(b, a);\n        false\n    } else {\n        assert_gt(a, b);\n        true\n    }\n}\n\npub fn lt(a: Field, b: Field) -> bool {\n    gt(b, a)\n}\n\nmod tests {\n    // TODO: Allow imports from \"super\"\n    use crate::field::bn254::{decompose_unsafe, decompose, lt_unsafe, assert_gt, gt, lt, TWO_POW_128, lte_unsafe, PLO, PHI};\n\n    #[test]\n    fn check_decompose_unsafe() {\n        assert_eq(decompose_unsafe(TWO_POW_128), (0, 1));\n        assert_eq(decompose_unsafe(TWO_POW_128 + 0x1234567890), (0x1234567890, 1));\n        assert_eq(decompose_unsafe(0x1234567890), (0x1234567890, 0));\n    }\n\n    #[test]\n    fn check_decompose() {\n        assert_eq(decompose(TWO_POW_128), (0, 1));\n        assert_eq(decompose(TWO_POW_128 + 0x1234567890), (0x1234567890, 1));\n        assert_eq(decompose(0x1234567890), (0x1234567890, 0));\n    }\n\n    #[test]\n    fn check_lt_unsafe() {\n        assert(lt_unsafe(0, 1, 16));\n        assert(lt_unsafe(0, 0x100, 16));\n        assert(lt_unsafe(0x100, TWO_POW_128 - 1, 16));\n        assert(!lt_unsafe(0, TWO_POW_128, 16));\n    }\n\n    #[test]\n    fn check_lte_unsafe() {\n        assert(lte_unsafe(0, 1, 16));\n        assert(lte_unsafe(0, 0x100, 16));\n        assert(lte_unsafe(0x100, TWO_POW_128 - 1, 16));\n        assert(!lte_unsafe(0, TWO_POW_128, 16));\n\n        assert(lte_unsafe(0, 0, 16));\n        assert(lte_unsafe(0x100, 0x100, 16));\n        assert(lte_unsafe(TWO_POW_128 - 1, TWO_POW_128 - 1, 16));\n        assert(lte_unsafe(TWO_POW_128, TWO_POW_128, 16));\n    }\n\n    #[test]\n    fn check_assert_gt() {\n        assert_gt(1, 0);\n        assert_gt(0x100, 0);\n        assert_gt((0 - 1), (0 - 2));\n        assert_gt(TWO_POW_128, 0);\n        assert_gt(0 - 1, 0);\n    }\n\n    #[test]\n    fn check_gt() {\n        assert(gt(1, 0));\n        assert(gt(0x100, 0));\n        assert(gt((0 - 1), (0 - 2)));\n        assert(gt(TWO_POW_128, 0));\n        assert(!gt(0, 0));\n        assert(!gt(0, 0x100));\n        assert(gt(0 - 1, 0 - 2));\n        assert(!gt(0 - 2, 0 - 1));\n    }\n\n    #[test]\n    fn check_plo_phi() {\n        assert_eq(PLO + PHI * TWO_POW_128, 0);\n        let p_bytes = crate::field::modulus_le_bytes();\n        let mut p_low: Field = 0;\n        let mut p_high: Field = 0;\n\n        let mut offset = 1;\n        for i in 0..16 {\n            p_low += (p_bytes[i] as Field) * offset;\n            p_high += (p_bytes[i + 16] as Field) * offset;\n            offset *= 256;\n        }\n        assert_eq(p_low, PLO);\n        assert_eq(p_high, PHI);\n    }\n}\n","path":"std/field/bn254.nr"},"20":{"source":"mod bn254;\nuse bn254::lt as bn254_lt;\n\nimpl Field {\n    pub fn to_le_bits(self: Self, bit_size: u32) -> [u1] {\n        crate::assert_constant(bit_size);\n        self.__to_le_bits(bit_size)\n    }\n\n    pub fn to_be_bits(self: Self, bit_size: u32) -> [u1] {\n        crate::assert_constant(bit_size);\n        self.__to_be_bits(bit_size)\n    }\n\n    #[builtin(to_le_bits)]\n    fn __to_le_bits(self, _bit_size: u32) -> [u1] {}\n\n    #[builtin(to_be_bits)]\n    fn __to_be_bits(self, bit_size: u32) -> [u1] {}\n\n    #[builtin(apply_range_constraint)]\n    fn __assert_max_bit_size(self, bit_size: u32) {}\n\n    pub fn assert_max_bit_size(self: Self, bit_size: u32) {\n        crate::assert_constant(bit_size);\n        assert(bit_size < modulus_num_bits() as u32);\n        self.__assert_max_bit_size(bit_size);\n    }\n\n    pub fn to_le_bytes(self: Self, byte_size: u32) -> [u8] {\n        self.to_le_radix(256, byte_size)\n    }\n\n    pub fn to_be_bytes(self: Self, byte_size: u32) -> [u8] {\n        self.to_be_radix(256, byte_size)\n    }\n\n    pub fn to_le_radix(self: Self, radix: u32, result_len: u32) -> [u8] {\n        crate::assert_constant(radix);\n        crate::assert_constant(result_len);\n        self.__to_le_radix(radix, result_len)\n    }\n\n    pub fn to_be_radix(self: Self, radix: u32, result_len: u32) -> [u8] {\n        crate::assert_constant(radix);\n        crate::assert_constant(result_len);\n        self.__to_be_radix(radix, result_len)\n    }\n\n    // decompose `_self` into a `_result_len` vector over the `_radix` basis\n    // `_radix` must be less than 256\n    #[builtin(to_le_radix)]\n    fn __to_le_radix(self, radix: u32, result_len: u32) -> [u8] {}\n\n    #[builtin(to_be_radix)]\n    fn __to_be_radix(self, radix: u32, result_len: u32) -> [u8] {}\n\n    // Returns self to the power of the given exponent value.\n    // Caution: we assume the exponent fits into 32 bits\n    // using a bigger bit size impacts negatively the performance and should be done only if the exponent does not fit in 32 bits\n    pub fn pow_32(self, exponent: Field) -> Field {\n        let mut r: Field = 1;\n        let b = exponent.to_le_bits(32);\n\n        for i in 1..33 {\n            r *= r;\n            r = (b[32-i] as Field) * (r * self) + (1 - b[32-i] as Field) * r;\n        }\n        r\n    }\n\n    // Parity of (prime) Field element, i.e. sgn0(x mod p) = 0 if x ∈ {0, ..., p-1} is even, otherwise sgn0(x mod p) = 1.\n    pub fn sgn0(self) -> u1 {\n        self as u1\n    }\n\n    pub fn lt(self, another: Field) -> bool {\n        if crate::compat::is_bn254() {\n            bn254_lt(self, another)\n        } else {\n            lt_fallback(self, another)\n        }\n    }\n}\n\n#[builtin(modulus_num_bits)]\npub fn modulus_num_bits() -> u64 {}\n\n#[builtin(modulus_be_bits)]\npub fn modulus_be_bits() -> [u1] {}\n\n#[builtin(modulus_le_bits)]\npub fn modulus_le_bits() -> [u1] {}\n\n#[builtin(modulus_be_bytes)]\npub fn modulus_be_bytes() -> [u8] {}\n\n#[builtin(modulus_le_bytes)]\npub fn modulus_le_bytes() -> [u8] {}\n// Convert a 32 byte array to a field element by modding\npub fn bytes32_to_field(bytes32: [u8; 32]) -> Field {\n    // Convert it to a field element\n    let mut v = 1;\n    let mut high = 0 as Field;\n    let mut low = 0 as Field;\n\n    for i in 0..16 {\n        high = high + (bytes32[15 - i] as Field) * v;\n        low = low + (bytes32[16 + 15 - i] as Field) * v;\n        v = v * 256;\n    }\n    // Abuse that a % p + b % p = (a + b) % p and that low < p\n    low + high * v\n}\n\nfn lt_fallback(x: Field, y: Field) -> bool {\n    let num_bytes = (modulus_num_bits() as u32 + 7) / 8;\n    let x_bytes = x.to_le_bytes(num_bytes);\n    let y_bytes = y.to_le_bytes(num_bytes);\n    let mut x_is_lt = false;\n    let mut done = false;\n    for i in 0..num_bytes {\n        if (!done) {\n            let x_byte = x_bytes[num_bytes - 1 - i] as u8;\n            let y_byte = y_bytes[num_bytes - 1 - i] as u8;\n            let bytes_match = x_byte == y_byte;\n            if !bytes_match {\n                x_is_lt = x_byte < y_byte;\n                done = true;\n            }\n        }\n    }\n    x_is_lt\n}\n\n","path":"std/field.nr"},"30":{"source":"mod poseidon;\nmod mimc;\nmod poseidon2;\nmod pedersen;\n\nuse crate::default::Default;\nuse crate::uint128::U128;\n\n#[foreign(sha256)]\n// docs:start:sha256\npub fn sha256<N>(input: [u8; N]) -> [u8; 32]\n// docs:end:sha256\n{}\n\n#[foreign(sha256)]\n// docs:start:sha256_slice\npub fn sha256_slice(input: [u8]) -> [u8; 32]\n// docs:end:sha256_slice\n{}\n\n#[foreign(blake2s)]\n// docs:start:blake2s\npub fn blake2s<N>(input: [u8; N]) -> [u8; 32]\n// docs:end:blake2s\n{}\n\n#[foreign(blake2s)]\n// docs:start:blake2s_slice\npub fn blake2s_slice(input: [u8]) -> [u8; 32]\n// docs:end:blake2s_slice\n{}\n\n#[foreign(blake3)]\n// docs:start:blake3\npub fn blake3<N>(input: [u8; N]) -> [u8; 32]\n// docs:end:blake3\n{}\n\n#[foreign(blake3)]\n// docs:start:blake3_slice\npub fn blake3_slice(input: [u8]) -> [u8; 32]\n// docs:end:blake3_slice\n{}\n\n// docs:start:pedersen_commitment\nstruct PedersenPoint {\n   x : Field,\n   y : Field,\n}\n\npub fn pedersen_commitment<N>(input: [Field; N]) -> PedersenPoint {\n    // docs:end:pedersen_commitment\n    pedersen_commitment_with_separator(input, 0)\n}\n\n// docs:start:pedersen_commitment_slice\npub fn pedersen_commitment_slice(input: [Field]) -> PedersenPoint {\n    pedersen_commitment_with_separator_slice(input, 0)\n}\n// docs:end:pedersen_commitment_slice\n\n#[foreign(pedersen_commitment)]\npub fn __pedersen_commitment_with_separator<N>(input: [Field; N], separator: u32) -> [Field; 2] {}\n\n#[foreign(pedersen_commitment)]\npub fn __pedersen_commitment_with_separator_slice(input: [Field], separator: u32) -> [Field; 2] {}\n\npub fn pedersen_commitment_with_separator<N>(input: [Field; N], separator: u32) -> PedersenPoint {\n    let values = __pedersen_commitment_with_separator(input, separator);\n    PedersenPoint { x: values[0], y: values[1] }\n}\n\npub fn pedersen_commitment_with_separator_slice(input: [Field], separator: u32) -> PedersenPoint {\n    let values = __pedersen_commitment_with_separator_slice(input, separator);\n    PedersenPoint { x: values[0], y: values[1] }\n}\n\n// docs:start:pedersen_hash\npub fn pedersen_hash<N>(input: [Field; N]) -> Field\n// docs:end:pedersen_hash\n{\n    pedersen_hash_with_separator(input, 0)\n}\n\n// docs:start:pedersen_hash_slice\npub fn pedersen_hash_slice(input: [Field]) -> Field\n// docs:end:pedersen_hash_slice\n{\n    pedersen_hash_with_separator_slice(input, 0)\n}\n\n#[foreign(pedersen_hash)]\npub fn pedersen_hash_with_separator<N>(input: [Field; N], separator: u32) -> Field {}\n\n#[foreign(pedersen_hash)]\npub fn pedersen_hash_with_separator_slice(input: [Field], separator: u32) -> Field {}\n\npub fn hash_to_field(inputs: [Field]) -> Field {\n    let mut inputs_as_bytes = &[];\n\n    for input in inputs {\n        let input_bytes = input.to_le_bytes(32);\n        for i in 0..32 {\n            inputs_as_bytes = inputs_as_bytes.push_back(input_bytes[i]);\n        }\n    }\n\n    let hashed_input = blake2s_slice(inputs_as_bytes);\n    crate::field::bytes32_to_field(hashed_input)\n}\n\n#[foreign(keccak256)]\n// docs:start:keccak256\npub fn keccak256<N>(input: [u8; N], message_size: u32) -> [u8; 32]\n// docs:end:keccak256\n{}\n\n#[foreign(keccak256)]\n// docs:start:keccak256_slice\npub fn keccak256_slice(input: [u8], message_size: u32) -> [u8; 32]\n// docs:end:keccak256_slice\n{}\n\n#[foreign(poseidon2_permutation)]\npub fn poseidon2_permutation<N>(_input: [Field; N], _state_length: u32) -> [Field; N] {}\n\n#[foreign(sha256_compression)]\npub fn sha256_compression(_input: [u32; 16], _state: [u32; 8]) -> [u32; 8] {}\n\n// Generic hashing support. \n// Partially ported and impacted by rust.\n\n// Hash trait shall be implemented per type.\ntrait Hash{\n    fn hash<H>(self, state: &mut H) where H: Hasher;\n}\n\n// Hasher trait shall be implemented by algorithms to provide hash-agnostic means.\n// TODO: consider making the types generic here ([u8], [Field], etc.)\ntrait Hasher{\n    fn finish(self) -> Field;\n    \n    fn write(&mut self, input: [Field]);\n}\n\n// BuildHasher is a factory trait, responsible for production of specific Hasher.\ntrait BuildHasher<H> where H: Hasher{\n    fn build_hasher(self) -> H;\n}\n\nstruct BuildHasherDefault<H>;\n\nimpl<H> BuildHasher<H> for BuildHasherDefault<H>\nwhere \n    H: Hasher + Default\n{\n    fn build_hasher(_self: Self) -> H{\n        H::default()\n    }\n}\n\nimpl<H> Default for BuildHasherDefault<H>\nwhere \n    H: Hasher + Default\n{\n    fn default() -> Self{\n        BuildHasherDefault{}\n    }    \n}\n\nimpl Hash for Field {\n    fn hash<H>(self, state: &mut H) where H: Hasher{\n        H::write(state, &[self]);\n    }\n}\n\nimpl Hash for u8 {\n    fn hash<H>(self, state: &mut H) where H: Hasher{\n        H::write(state, &[self as Field]);\n    }\n}\n\nimpl Hash for u32 {\n    fn hash<H>(self, state: &mut H) where H: Hasher{\n        H::write(state, &[self as Field]);\n    }\n}\n\nimpl Hash for u64 {\n    fn hash<H>(self, state: &mut H) where H: Hasher{\n        H::write(state, &[self as Field]);\n    }\n}\n\nimpl Hash for i8 {\n    fn hash<H>(self, state: &mut H) where H: Hasher{\n        H::write(state, &[self as Field]);\n    }\n}\n\nimpl Hash for i32 {\n    fn hash<H>(self, state: &mut H) where H: Hasher{\n        H::write(state, &[self as Field]);\n    }\n}\n\nimpl Hash for i64 {\n    fn hash<H>(self, state: &mut H) where H: Hasher{\n        H::write(state, &[self as Field]);\n    }\n}\n\nimpl Hash for bool {\n    fn hash<H>(self, state: &mut H) where H: Hasher{\n        H::write(state, &[self as Field]);\n    }\n}\n\nimpl Hash for () {\n    fn hash<H>(_self: Self, _state: &mut H) where H: Hasher {}\n}\n\nimpl Hash for U128 {\n    fn hash<H>(self, state: &mut H) where H: Hasher{\n        H::write(state, &[self.lo as Field, self.hi as Field]);\n    }\n}\n\nimpl<T, N> Hash for [T; N] where T: Hash {\n    fn hash<H>(self, state: &mut H) where H: Hasher{\n        for elem in self {\n            elem.hash(state);\n        }\n    }\n}\n\nimpl<T> Hash for [T] where T: Hash {\n    fn hash<H>(self, state: &mut H) where H: Hasher{\n        self.len().hash(state);\n        for elem in self {\n            elem.hash(state);\n        }\n    }\n}\n\nimpl<A, B> Hash for (A, B) where A: Hash, B: Hash {\n    fn hash<H>(self, state: &mut H) where H: Hasher{\n        self.0.hash(state);\n        self.1.hash(state);\n    }\n}\n\nimpl<A, B, C> Hash for (A, B, C) where A: Hash, B: Hash, C: Hash {\n    fn hash<H>(self, state: &mut H) where H: Hasher{\n        self.0.hash(state);\n        self.1.hash(state);\n        self.2.hash(state);\n    }\n}\n\nimpl<A, B, C, D> Hash for (A, B, C, D) where A: Hash, B: Hash, C: Hash, D: Hash {\n    fn hash<H>(self, state: &mut H) where H: Hasher{\n        self.0.hash(state);\n        self.1.hash(state);\n        self.2.hash(state);\n        self.3.hash(state);\n    }\n}\n\nimpl<A, B, C, D, E> Hash for (A, B, C, D, E) where A: Hash, B: Hash, C: Hash, D: Hash, E: Hash {\n    fn hash<H>(self, state: &mut H) where H: Hasher{\n        self.0.hash(state);\n        self.1.hash(state);\n        self.2.hash(state);\n        self.3.hash(state);\n        self.4.hash(state);\n    }\n}\n","path":"std/hash.nr"},"33":{"source":"// Regular merkle tree means a append-only merkle tree (Explain why this is the only way to have privacy and alternatives if you don't want it)\n// Currently we assume that it is a binary tree, so depth k implies a width of 2^k\n// XXX: In the future we can add an arity parameter\n// Returns the merkle root of the tree from the provided leaf, its hashpath, using a pedersen hash function.\npub fn compute_merkle_root<N>(leaf: Field, index: Field, hash_path: [Field; N]) -> Field {\n    let n = hash_path.len();\n    let index_bits = index.to_le_bits(n as u32);\n    let mut current = leaf;\n    for i in 0..n {\n        let path_bit = index_bits[i] as bool;\n        let (hash_left, hash_right) = if path_bit {\n            (hash_path[i], current)\n        } else {\n            (current, hash_path[i])\n        };\n        current = crate::hash::pedersen_hash([hash_left, hash_right]);\n    }\n    current\n}\n","path":"std/merkle.nr"},"35":{"source":"use crate::hash::{Hash, Hasher};\nuse crate::cmp::{Ordering, Ord, Eq};\nuse crate::default::Default;\n\nstruct Option<T> {\n    _is_some: bool,\n    _value: T,\n}\n\nimpl<T> Option<T> {\n    /// Constructs a None value\n    pub fn none() -> Self {\n        Self { _is_some: false, _value: crate::unsafe::zeroed() }\n    }\n\n    /// Constructs a Some wrapper around the given value\n    pub fn some(_value: T) -> Self {\n        Self { _is_some: true, _value }\n    }\n\n    /// True if this Option is None\n    pub fn is_none(self) -> bool {\n        !self._is_some\n    }\n\n    /// True if this Option is Some\n    pub fn is_some(self) -> bool {\n        self._is_some\n    }\n\n    /// Asserts `self.is_some()` and returns the wrapped value.\n    pub fn unwrap(self) -> T {\n        assert(self._is_some);\n        self._value\n    }\n\n    /// Returns the inner value without asserting `self.is_some()`\n    /// Note that if `self` is `None`, there is no guarantee what value will be returned,\n    /// only that it will be of type `T`.\n    pub fn unwrap_unchecked(self) -> T {\n        self._value\n    }\n\n    /// Returns the wrapped value if `self.is_some()`. Otherwise, returns the given default value.\n    pub fn unwrap_or(self, default: T) -> T {\n        if self._is_some { self._value } else { default }\n    }\n\n    /// Returns the wrapped value if `self.is_some()`. Otherwise, calls the given function to return\n    /// a default value.\n    pub fn unwrap_or_else<Env>(self, default: fn[Env]() -> T) -> T {\n        if self._is_some {\n            self._value\n        } else {\n            default()\n        }\n    }\n\n    /// Asserts `self.is_some()` with a provided custom message and returns the contained `Some` value\n    fn expect<N, MessageTypes>(self, message: fmtstr<N, MessageTypes>) -> T {\n        assert(self.is_some(), message);\n        self._value\n    }\n\n    /// If self is `Some(x)`, this returns `Some(f(x))`. Otherwise, this returns `None`.\n    pub fn map<U, Env>(self, f: fn[Env](T) -> U) -> Option<U> {\n        if self._is_some {\n            Option::some(f(self._value))\n        } else {\n            Option::none()\n        }\n    }\n\n    /// If self is `Some(x)`, this returns `f(x)`. Otherwise, this returns the given default value.\n    pub fn map_or<U, Env>(self, default: U, f: fn[Env](T) -> U) -> U {\n        if self._is_some {\n            f(self._value)\n        } else {\n            default\n        }\n    }\n\n    /// If self is `Some(x)`, this returns `f(x)`. Otherwise, this returns `default()`.\n    pub fn map_or_else<U, Env1, Env2>(self, default: fn[Env1]() -> U, f: fn[Env2](T) -> U) -> U {\n        if self._is_some {\n            f(self._value)\n        } else {\n            default()\n        }\n    }\n\n    /// Returns None if self is None. Otherwise, this returns `other`.\n    pub fn and(self, other: Self) -> Self {\n        if self.is_none() {\n            Option::none()\n        } else {\n            other\n        }\n    }\n\n    /// If self is None, this returns None. Otherwise, this calls the given function\n    /// with the Some value contained within self, and returns the result of that call.\n    ///\n    /// In some languages this function is called `flat_map` or `bind`.\n    pub fn and_then<U, Env>(self, f: fn[Env](T) -> Option<U>) -> Option<U> {\n        if self._is_some {\n            f(self._value)\n        } else {\n            Option::none()\n        }\n    }\n\n    /// If self is Some, return self. Otherwise, return `other`.\n    pub fn or(self, other: Self) -> Self {\n        if self._is_some { self } else { other }\n    }\n\n    /// If self is Some, return self. Otherwise, return `default()`.\n    pub fn or_else<U, Env>(self, default: fn[Env]() -> Self) -> Self {\n        if self._is_some { self } else { default() }\n    }\n\n    // If only one of the two Options is Some, return that option.\n    // Otherwise, if both options are Some or both are None, None is returned.\n    pub fn xor(self, other: Self) -> Self {\n        if self._is_some {\n            if other._is_some { Option::none() } else { self }\n        } else if other._is_some {\n            other\n        } else {\n            Option::none()\n        }\n    }\n\n    /// Returns `Some(x)` if self is `Some(x)` and `predicate(x)` is true.\n    /// Otherwise, this returns `None`\n    pub fn filter<Env>(self, predicate: fn[Env](T) -> bool) -> Self {\n        if self._is_some {\n            if predicate(self._value) {\n                self\n            } else {\n                Option::none()\n            }\n        } else {\n            Option::none()\n        }\n    }\n\n    /// Flattens an Option<Option<T>> into a Option<T>.\n    /// This returns None if the outer Option is None. Otherwise, this returns the inner Option.\n    pub fn flatten(option: Option<Option<T>>) -> Option<T> {\n        if option._is_some {\n            option._value\n        } else {\n            Option::none()\n        }\n    }\n}\n\nimpl<T> Default for Option<T> {\n    fn default() -> Self {\n        Option::none()\n    }\n}\n\nimpl<T> Eq for Option<T> where T: Eq {\n    fn eq(self, other: Self) -> bool {\n        if self._is_some == other._is_some {\n            if self._is_some {\n                self._value == other._value\n            } else {\n                true\n            }\n        } else {\n            false\n        }\n    }\n}\n\nimpl<T> Hash for Option<T> where T: Hash {\n    fn hash<H>(self, state: &mut H) where H: Hasher {\n        self._is_some.hash(state);\n        if self._is_some {\n            self._value.hash(state);\n        }\n    }\n}\n\n// For this impl we're declaring Option::none < Option::some\nimpl<T> Ord for Option<T> where T: Ord {\n    fn cmp(self, other: Self) -> Ordering {\n        if self._is_some {\n            if other._is_some {\n                self._value.cmp(other._value)\n            } else {\n                Ordering::greater()\n            }\n        } else {\n            if other._is_some {\n                Ordering::less()\n            } else {\n                Ordering::equal()\n            }\n        }\n    }\n}\n","path":"std/option.nr"},"44":{"source":"use crate::ops::{Add, Sub, Mul, Div, Rem, BitOr, BitAnd, BitXor, Shl, Shr};\nuse crate::cmp::{Eq, Ord, Ordering};\n\nglobal pow64 : Field = 18446744073709551616; //2^64;\n\nstruct U128 {\n    lo: Field,\n    hi: Field,\n}\n\nimpl U128 {\n\n    pub fn from_u64s_le(lo: u64, hi: u64) -> U128 {\n        // in order to handle multiplication, we need to represent the product of two u64 without overflow\n        assert(crate::field::modulus_num_bits() as u32 > 128);\n        U128 { lo: lo as Field, hi: hi as Field }\n    }\n\n    pub fn from_u64s_be(hi: u64, lo: u64) -> U128 {\n        U128::from_u64s_le(lo, hi)\n    }\n\n    pub fn from_le_bytes(bytes: [u8; 16]) -> U128 {\n        let mut lo = 0;\n        let mut base = 1;\n        for i in 0..8 {\n            lo += (bytes[i] as Field)*base;\n            base *= 256;\n        }\n        let mut hi = 0;\n        base = 1;\n        for i in 8..16 {\n            hi += (bytes[i] as Field)*base;\n            base *= 256;\n        }\n        U128 { lo, hi }\n    }\n\n    pub fn to_be_bytes(self: Self) -> [u8; 16] {\n        let lo = self.lo.to_be_bytes(8);\n        let hi = self.hi.to_be_bytes(8);\n        let mut bytes = [0; 16];\n        for i in 0..8 {\n            bytes[i] = hi[i];\n            bytes[i+8] = lo[i];\n        }\n        bytes\n    }\n\n    pub fn to_le_bytes(self: Self) -> [u8; 16] {\n        let lo = self.lo.to_le_bytes(8);\n        let hi = self.hi.to_le_bytes(8);\n        let mut bytes = [0; 16];\n        for i in 0..8 {\n            bytes[i] = lo[i];\n            bytes[i+8] = hi[i];\n        }\n        bytes\n    }\n\n    pub fn from_hex<N>(hex: str<N>) -> U128 {\n        let N = N as u32;\n        let bytes = hex.as_bytes();\n        // string must starts with \"0x\"\n        assert((bytes[0] == 48) & (bytes[1] == 120), \"Invalid hexadecimal string\");\n        assert(N < 35, \"Input does not fit into a U128\");\n\n        let mut lo = 0;\n        let mut hi = 0;\n        let mut base = 1;\n        if N <= 18 {\n            for i in 0..N - 2 {\n                lo += U128::decode_ascii(bytes[N-i-1])*base;\n                base = base*16;\n            }\n        } else {\n            for i in 0..16 {\n                lo += U128::decode_ascii(bytes[N-i-1])*base;\n                base = base*16;\n            }\n            base = 1;\n            for i in 17..N - 1 {\n                hi += U128::decode_ascii(bytes[N-i])*base;\n                base = base*16;\n            }\n        }\n        U128 { lo: lo as Field, hi: hi as Field }\n    }\n\n    fn decode_ascii(ascii: u8) -> Field {\n        if ascii < 58 {\n            ascii - 48\n        } else if ascii < 71 {\n            ascii - 55\n        } else {\n            ascii - 87\n        } as Field\n    }\n\n    unconstrained fn unconstrained_div(self: Self, b: U128) -> (U128, U128) {\n        if self < b {\n            (U128::from_u64s_le(0, 0), self)\n        } else {\n            //TODO check if this can overflow?\n            let (q,r) = self.unconstrained_div(b * U128::from_u64s_le(2, 0));\n            let q_mul_2 = q * U128::from_u64s_le(2, 0);\n            if r < b {\n                (q_mul_2, r)\n            } else {\n                (q_mul_2 + U128::from_u64s_le(1, 0), r - b)\n            }\n        }\n    }\n\n    pub fn from_integer<T>(i: T) -> U128 {\n        let f = crate::as_field(i);\n        // Reject values which would overflow a u128\n        f.assert_max_bit_size(128);\n        let lo = f as u64 as Field;\n        let hi = (f - lo) / pow64;\n        U128 { lo, hi }\n    }\n\n    pub fn to_integer<T>(self) -> T {\n        crate::from_field(self.lo + self.hi * pow64)\n    }\n\n    fn wrapping_mul(self: Self, b: U128) -> U128 {\n        let low = self.lo * b.lo;\n        let lo = low as u64 as Field;\n        let carry = (low - lo) / pow64;\n        let high = if crate::field::modulus_num_bits() as u32 > 196 {\n            (self.lo + self.hi) * (b.lo + b.hi) - low + carry\n        } else {\n            self.lo * b.hi + self.hi * b.lo + carry\n        };\n        let hi = high as u64 as Field;\n        U128 { lo, hi }\n    }\n}\n\nimpl Add for U128 {\n    fn add(self: Self, b: U128) -> U128 {\n        let low = self.lo + b.lo;\n        let lo = low as u64 as Field;\n        let carry = (low - lo) / pow64;  \n        let high = self.hi + b.hi + carry;\n        let hi = high as u64 as Field;\n        assert(hi == high, \"attempt to add with overflow\");\n        U128 {\n            lo,\n            hi,\n        }\n    }\n}\n\nimpl Sub for U128 {\n    fn sub(self: Self, b: U128) -> U128 {\n        let low = pow64 + self.lo - b.lo;\n        let lo = low as u64 as Field;\n        let borrow = (low == lo) as Field;\n        let high = self.hi - b.hi - borrow;\n        let hi = high as u64 as Field;\n        assert(hi == high, \"attempt to subtract with underflow\");\n        U128 {\n            lo,\n            hi,\n        }\n    }\n}\n\nimpl Mul for U128 {\n    fn mul(self: Self, b: U128) -> U128 {\n        assert(self.hi*b.hi == 0, \"attempt to multiply with overflow\");\n        let low = self.lo*b.lo;\n        let lo = low as u64 as Field;\n        let carry = (low - lo) / pow64;\n        let high = if crate::field::modulus_num_bits() as u32 > 196 {\n            (self.lo+self.hi)*(b.lo+b.hi) - low + carry\n        } else {\n            self.lo*b.hi + self.hi*b.lo + carry\n        };\n        let hi = high as u64 as Field;\n        assert(hi == high, \"attempt to multiply with overflow\");\n        U128 {\n            lo,\n            hi,\n        }\n    }\n}\n\nimpl Div for U128 {\n    fn div(self: Self, b: U128) -> U128 {\n        let (q,r) = self.unconstrained_div(b);\n        let a = b * q + r;\n        assert_eq(self, a);\n        assert(r < b);\n        q\n    }\n}\n\nimpl Rem for U128 {\n    fn rem(self: Self, b: U128) -> U128 {\n        let (q,r) = self.unconstrained_div(b);\n        let a = b * q + r;\n        assert_eq(self, a);\n        assert(r < b);\n        r\n    }\n}\n\nimpl Eq for U128 {\n    fn eq(self: Self, b: U128) -> bool {\n        (self.lo == b.lo) & (self.hi == b.hi)\n    }\n}\n\nimpl Ord for U128 {\n    fn cmp(self, other: Self) -> Ordering {\n        let hi_ordering = (self.hi as u64).cmp((other.hi as u64));\n        let lo_ordering = (self.lo as u64).cmp((other.lo as u64));\n        \n        if hi_ordering == Ordering::equal() {\n            lo_ordering\n        } else {\n            hi_ordering\n        }\n    }\n}\n\nimpl BitOr for U128 { \n    fn bitor(self, other: U128) -> U128 {\n        U128 {\n            lo: ((self.lo as u64) | (other.lo as u64)) as Field,\n            hi: ((self.hi as u64) | (other.hi as u64))as Field\n        }\n    }\n}\n\nimpl BitAnd for U128 {\n    fn bitand(self, other: U128) -> U128 { \n        U128 {\n            lo: ((self.lo as u64) & (other.lo as u64)) as Field,\n            hi: ((self.hi as u64) & (other.hi as u64)) as Field\n        }\n    }\n}\n\nimpl BitXor for U128 {\n    fn bitxor(self, other: U128) -> U128 { \n        U128 {\n            lo: ((self.lo as u64) ^ (other.lo as u64)) as Field,\n            hi: ((self.hi as u64) ^ (other.hi as u64)) as Field\n        }\n    }\n}\n\nimpl Shl for U128 { \n    fn shl(self, other: U128) -> U128 { \n        assert(other < U128::from_u64s_le(128,0), \"attempt to shift left with overflow\");\n        let exp_bits = other.lo.to_be_bits(7);\n\n        let mut r: Field = 2;\n        let mut y: Field = 1;\n        for i in 1..8 {\n            y = (exp_bits[7-i] as Field) * (r * y) + (1 - exp_bits[7-i] as Field) * y;\n            r *= r;\n        }\n        self.wrapping_mul(U128::from_integer(y))\n    } \n}\n\nimpl Shr for U128 { \n    fn shr(self, other: U128) -> U128 { \n        assert(other < U128::from_u64s_le(128,0), \"attempt to shift right with overflow\");\n        let exp_bits = other.lo.to_be_bits(7);\n\n        let mut r: Field = 2;\n        let mut y: Field = 1;\n        for i in 1..8 {\n            y = (exp_bits[7-i] as Field) * (r * y) + (1 - exp_bits[7-i] as Field) * y;\n            r *= r;\n        }\n        self / U128::from_integer(y)\n    } \n}\n","path":"std/uint128.nr"},"47":{"source":"// docs:start:interfaces\nuse dep::aztec::prelude::{FunctionSelector, AztecAddress, EthAddress, PrivateContext};\nuse dep::aztec::context::{PublicContext, gas::GasOpts};\n\nstruct Token {\n  address: AztecAddress,\n}\n\nimpl Token {\n    pub fn at(address: AztecAddress) -> Self {\n        Self { address }\n    }\n\n    pub fn transfer_public(\n        self: Self,\n        context: &mut PublicContext,\n        from: AztecAddress,\n        to: AztecAddress,\n        amount: Field,\n        nonce: Field\n    ) {\n        context.call_public_function(\n            self.address,\n            FunctionSelector::from_signature(\"transfer_public((Field),(Field),Field,Field)\"),\n            [from.to_field(), to.to_field(), amount, nonce],\n            GasOpts::default()\n        ).assert_empty();\n    }\n\n    pub fn shield(\n        self: Self,\n        context: &mut PublicContext,\n        from: AztecAddress,\n        amount: Field,\n        secret_hash: Field,\n        nonce: Field\n    ) {\n        context.call_public_function(\n            self.address,\n            FunctionSelector::from_signature(\"shield((Field),Field,Field,Field)\"),\n            [from.to_field(), amount, secret_hash, nonce],\n            GasOpts::default()\n        ).assert_empty();\n    }\n    \n    pub fn unshield(\n        self: Self,\n        context: &mut PrivateContext,\n        from: AztecAddress,\n        to: AztecAddress,\n        amount: Field,\n        nonce: Field\n    ) {\n        let _ = context.call_private_function(\n            self.address,\n            FunctionSelector::from_signature(\"unshield((Field),(Field),Field,Field)\"),\n            [from.to_field(), to.to_field(), amount, nonce]\n        );\n    }\n\n    pub fn transfer(\n        self: Self,\n        context: &mut PrivateContext,\n        from: AztecAddress,\n        to: AztecAddress,\n        amount: Field,\n        nonce: Field\n    ) {\n        let _ret = context.call_private_function(\n            self.address,\n            FunctionSelector::from_signature(\"transfer((Field),(Field),Field,Field)\"),\n            [from.to_field(), to.to_field(), amount, nonce]\n        );\n    }\n\n    // pub fn balance_of_public(\n    //     self: Self,\n    //     context: &mut PublicContext,\n    //     owner: AztecAddress\n    // ) -> Field {\n    //     let _ret = context.call_public_function(\n    //         self.address,\n    //         FunctionSelector::from_signature(\"balance_of_public((Field))\"),\n    //         [owner.to_field()],\n    //          GasOpts::default()\n    //     );\n    //     _ret[0]\n    // }\n}\n\nstruct Uniswap {\n  address: AztecAddress,\n}\n\nimpl Uniswap {\n    pub fn at(address: AztecAddress) -> Self {\n        Self { address }\n    }\n\n    pub fn swap_public(\n        self: Self,\n        context: &mut PublicContext,\n        sender: AztecAddress,\n        input_asset_bridge: AztecAddress,\n        input_amount: Field,\n        output_asset_bridge: AztecAddress,\n        nonce_for_transfer_approval: Field,\n        uniswap_fee_tier: Field,\n        minimum_output_amount: Field,\n        recipient: AztecAddress,\n        secret_hash_for_L1_to_l2_message: Field,\n        caller_on_L1: EthAddress,\n        nonce_for_swap_approval: Field\n    ) {\n        let _ = context.call_public_function(\n            self.address,\n            FunctionSelector::from_signature(\"swap_public((Field),(Field),Field,(Field),Field,Field,Field,(Field),Field,(Field),Field)\"),\n            [\n                sender.to_field(), \n                input_asset_bridge.to_field(), \n                input_amount, \n                output_asset_bridge.to_field(), \n                nonce_for_transfer_approval,\n                uniswap_fee_tier,\n                minimum_output_amount,\n                recipient.to_field(),\n                secret_hash_for_L1_to_l2_message,\n                caller_on_L1.to_field(),\n                nonce_for_swap_approval\n            ],\n             GasOpts::default()\n        );\n    }\n\n    // pub fn swap_public(\n    //     self: Self,\n    //     context: &mut PrivateContext,\n    //     sender: AztecAddress,\n    //     input_asset_bridge: AztecAddress,\n    //     input_amount: Field,\n    //     output_asset_bridge: AztecAddress,\n    //     nonce_for_transfer_approval: Field,\n    //     uniswap_fee_tier: Field,\n    //     minimum_output_amount: Field,\n    //     recipient: AztecAddress,\n    //     secret_hash_for_L1_to_l2_message: Field,\n    //     caller_on_L1: EthAddress,\n    //     nonce_for_swap_approval: Field\n    // ) {\n    //     let _ = context.call_public_function(\n    //         self.address,\n    //         FunctionSelector::from_signature(\"swap_public((Field),(Field),Field,(Field),Field,Field,Field,(Field),Field,(Field),Field)\"),\n    //         [\n    //             sender.to_field(), \n    //             input_asset_bridge.to_field(), \n    //             input_amount, \n    //             output_asset_bridge.to_field(), \n    //             nonce_for_transfer_approval,\n    //             uniswap_fee_tier,\n    //             minimum_output_amount,\n    //             recipient.to_field(),\n    //             secret_hash_for_L1_to_l2_message,\n    //             caller_on_L1.to_field(),\n    //             nonce_for_swap_approval\n    //         ],\n    //          GasOpts::default()\n    //     );\n    // }\n\n    // pub fn claim_public(\n\n    // ) {\n    //     let _ = context.call_public_function(\n    //         self.address,\n    //         FunctionSelector::from_signature(\"claim_public((Field),(Field),Field,(Field),Field,Field,Field,(Field),Field,(Field),Field)\"),\n    //         [\n    //             sender.to_field(), \n    //             input_asset_bridge.to_field(), \n    //             input_amount, \n    //             output_asset_bridge.to_field(), \n    //             nonce_for_transfer_approval,\n    //             uniswap_fee_tier,\n    //             minimum_output_amount,\n    //             recipient.to_field(),\n    //             secret_hash_for_L1_to_l2_message,\n    //             caller_on_L1.to_field(),\n    //             nonce_for_swap_approval\n    //         ],\n    //          GasOpts::default()\n    //     );  \n    // }\n}\n// docs:end:interfaces\n","path":"/Users/jack-sw/Codes/abstract/dex-build/token-bridge-uniswap/packages/aztec-contracts/batcher_contract/src/interfaces.nr"},"48":{"source":"use dep::aztec::protocol_types::{address::AztecAddress, traits::{Serialize, Deserialize}};\n\nglobal RELAYER_SERIALIZED_LEN: Field = 7;\n\nstruct BatchRelayer {\n    relayer: AztecAddress, \n    bonding_token: AztecAddress, \n    bonding_amount: Field, // say 50-100k dai\n    he_pub_key: Field,\n    sk_hash: Field,\n    last_timestamp: Field,\n    interval: Field,\n}\n\nimpl BatchRelayer {\n    fn new(\n        relayer: AztecAddress, \n        bonding_token: AztecAddress,\n        bonding_amount: Field,\n        he_pub_key: Field,\n        sk_hash: Field, \n        last_timestamp: Field,\n        interval: Field,\n    ) -> Self {\n        BatchRelayer {\n            relayer,\n            bonding_token,\n            bonding_amount,\n            he_pub_key,\n            sk_hash,\n            last_timestamp,\n            interval\n        }\n    }\n}\n\nimpl Deserialize<RELAYER_SERIALIZED_LEN> for BatchRelayer {\n    fn deserialize(fields: [Field; RELAYER_SERIALIZED_LEN]) -> Self {\n        BatchRelayer { \n            relayer: AztecAddress::from_field(fields[0]),\n            bonding_token: AztecAddress::from_field(fields[1]),\n            bonding_amount: fields[2],\n            he_pub_key: fields[3],\n            sk_hash: fields[4],\n            last_timestamp: fields[5],\n            interval: fields[6],\n         }\n    }\n}\n\nimpl Serialize<RELAYER_SERIALIZED_LEN> for BatchRelayer {\n    fn serialize(self) -> [Field; RELAYER_SERIALIZED_LEN] {\n        [\n            self.relayer.to_field(), \n            self.bonding_token.to_field(),\n            self.bonding_amount,\n            self.he_pub_key,\n            self.sk_hash,\n            self.last_timestamp,\n            self.interval,\n        ]\n    }\n}\n","path":"/Users/jack-sw/Codes/abstract/dex-build/token-bridge-uniswap/packages/aztec-contracts/batcher_contract/src/relayer.nr"},"49":{"source":"use dep::noir_elgamal::elgamal::standard_fe;\n\n// global gen: Field = 10944121435919637611123202872628637544274182200208017171849102093287991052496;\nglobal gen: Field = 1094412143;\n\n    fn encrypt(\n        amount: Field,\n        pub_key: Field,\n        rand: Field\n    ) -> (Field, Field) {\n\n        let (c1, c2) = standard_fe::single_standard_encryption_fe(\n            gen, \n            pub_key, \n            amount,\n            rand\n        );\n\n        (c1, c2)\n    }\n\n    fn add(\n        c1_1: Field, \n        c2_1: Field,\n        c1_2: Field, \n        c2_2: Field) -> (Field, Field) \n    {\n        if ((c1_1 == 0) & (c2_1 == 0)) {\n            (c1_2, c2_2)\n        } else {\n            (c1_1*c1_2, c2_1*c2_2)\n        }\n    }\n\n    fn decrypt(\n        c1: Field,\n        c2: Field,\n        x: Field\n    ) -> Field {\n        standard_fe::single_decryption_fe(c1, c2, x)\n    }\n\n    fn validate_keypair(\n        he_pub_key:Field, \n        he_secret_key:Field\n    ) -> pub bool {\n        let computed_pubkey = gen.pow_32(he_secret_key);\n        // dep::std::println(computed_pubkey);\n        let ret = computed_pubkey.eq(he_pub_key);\n        ret\n    }\n\n\n    #[test]\n    fn test_validate_keypair() {\n        let pubkey = 3061722711224745108837506421211829939949377330929128360282042230364241268412;\n        let sk = 7115637666404682632379307215493662218327241124760828634863089038725962038957;\n        let ret = validate_keypair(pubkey, sk);\n        dep::std::println(ret);\n    }","path":"/Users/jack-sw/Codes/abstract/dex-build/token-bridge-uniswap/packages/aztec-contracts/batcher_contract/src/he_add.nr"},"50":{"source":"use dep::aztec::protocol_types::{address::AztecAddress, traits::{Serialize, Deserialize}};\n\n\nglobal ROUND_SERIALIZED_LEN: Field = 6;\n\nstruct Round {\n    token_in_amount: Field,\n    token_out_amount_cancelled: Field,\n    token_out_amount: Field,\n    encrypted_token_out_amount: [Field; 2], // [c1, c2]\n    executed: bool,\n    // minimum batch count\n}\n\nimpl Round {\n    fn get_encrypted_amount(self) -> (Field, Field) {\n        (\n            self.encrypted_token_out_amount[0],\n            self.encrypted_token_out_amount[1]\n        )\n    }\n}\n\n\nimpl Deserialize<ROUND_SERIALIZED_LEN> for Round {\n    fn deserialize(fields: [Field; ROUND_SERIALIZED_LEN]) -> Self {\n        let mut encrypted_token_out_amount: [Field;2] = [0;2];\n        encrypted_token_out_amount[0] = fields[4];\n        encrypted_token_out_amount[1] = fields[5];\n\n        Round { \n            token_in_amount: fields[0],\n            token_out_amount_cancelled: fields[1],\n            token_out_amount: fields[2],\n            encrypted_token_out_amount,\n            executed: fields[5] as bool\n         }\n    }\n}\n\nimpl Serialize<ROUND_SERIALIZED_LEN> for Round {\n    fn serialize(self) -> [Field; ROUND_SERIALIZED_LEN] {\n        [\n            self.token_in_amount,\n            self.token_out_amount_cancelled,\n            self.token_out_amount,\n            self.encrypted_token_out_amount[0],\n            self.encrypted_token_out_amount[1],\n            self.executed as Field,\n        ]\n    }\n}\n\n","path":"/Users/jack-sw/Codes/abstract/dex-build/token-bridge-uniswap/packages/aztec-contracts/batcher_contract/src/round.nr"},"51":{"source":"use dep::aztec::prelude::{AztecAddress, NoteInterface, NoteHeader, PrivateContext, emit_encrypted_log};\nuse dep::aztec::{\n    note::{utils::compute_note_hash_for_consumption},\n    oracle::{nullifier_key::get_nullifier_secret_key, get_public_key::get_public_key},\n    hash::pedersen_hash, protocol_types::traits::Empty\n};\n\nglobal DEPOSIT_NOTE_LEN: Field = 3;\n\n#[aztec(note)]\nstruct DepositNote {\n    round: Field,\n    amount_out: Field,\n    owner: AztecAddress,\n}\n\nimpl DepositNote {\n    pub fn new(\n        round: Field,\n        amount_out: Field,\n        owner: AztecAddress\n    ) -> Self {\n        DepositNote { \n            round,\n            amount_out, \n            owner,\n            header: NoteHeader::empty()\n        }\n    }\n\n    pub fn empty() -> Self {\n        DepositNote::new(\n            0,\n            0,\n            AztecAddress::from_field(0),\n        )\n    }\n}\n\nimpl NoteInterface<DEPOSIT_NOTE_LEN> for DepositNote {\n    fn compute_nullifier(self, context: &mut PrivateContext) -> Field {\n        let note_hash_for_nullify = compute_note_hash_for_consumption(self);\n        let secret = context.request_nullifier_secret_key(self.owner);\n        pedersen_hash([\n            note_hash_for_nullify,\n            secret.high,\n            secret.low,\n        ],0)\n    }\n\n    fn compute_nullifier_without_context(self) -> Field {\n        let note_hash_for_nullify = compute_note_hash_for_consumption(self);\n        let secret = get_nullifier_secret_key(self.owner);\n        pedersen_hash([\n            note_hash_for_nullify,\n            secret.high,\n            secret.low,\n        ],0)\n    }\n\n    // Broadcasts the note as an encrypted log on L1.\n    fn broadcast(self, context: &mut PrivateContext, slot: Field) {\n        let encryption_pub_key = get_public_key(self.owner);\n        emit_encrypted_log(\n            context,\n            (*context).this_address(),\n            slot,\n            Self::get_note_type_id(),\n            encryption_pub_key,\n            self.serialize_content(),\n        );\n    }\n}\n","path":"/Users/jack-sw/Codes/abstract/dex-build/token-bridge-uniswap/packages/aztec-contracts/batcher_contract/src/deposit_note.nr"},"52":{"source":"mod deposit_note;\nmod interfaces;\nmod relayer;\nmod round;\nmod he_add;\n\n// aztec-cli codegen ./target/ -o ../../test/artifacts --ts\n\n\n\ncontract BatcherVault {\n    use dep::aztec::prelude::{\n        AztecAddress, EthAddress, FunctionSelector, NoteHeader, NoteGetterOptions, NoteViewerOptions,\n        Map, PublicMutable, PublicImmutable, PrivateMutable, SharedImmutable\n    };\n    use dep::aztec::{note::note_getter_options::Comparator, \n        context::{Context, PrivateContext, PublicContext, gas::GasOpts}\n    };\n    \n    // interfaces\n    use crate::interfaces::{Token, Uniswap};\n\n    // note\n    use crate::deposit_note::{DepositNote, DEPOSIT_NOTE_LEN};\n\n    // type \n    use crate::relayer::{BatchRelayer, RELAYER_SERIALIZED_LEN};\n    use crate::round::{Round, ROUND_SERIALIZED_LEN};\n    \n    // libs\n    use crate::he_add;\n\n    #[aztec(storage)]\n    struct Storage {\n        admin: PublicImmutable<AztecAddress>, // admin\n        target: SharedImmutable<AztecAddress>, // amm or uniswap connect\n        token_out: SharedImmutable<AztecAddress>, // token sold e.g. dai\n        token_in: SharedImmutable<AztecAddress>, // token purchased e.g. eth\n        current_round: PublicMutable<Field>,\n        batch_relayer: PublicMutable<BatchRelayer>,\n        rounds: Map<Field, PublicMutable<Round>>,\n        deposit_notes: Map<AztecAddress, PrivateMutable<DepositNote>>, \n    }\n\n    impl Storage {\n      fn init(context: Context) -> Self {\n        Storage {\n            admin: PublicImmutable::new(context, 1),\n            target: SharedImmutable::new(context, 2),\n            token_out: SharedImmutable::new(context, 3),\n            token_in: SharedImmutable::new(context, 4),\n            current_round: PublicMutable::new(context, 5),\n            batch_relayer: PublicMutable::new(context, 6),\n            rounds: Map::new(context, 7, |context, slot| {\n                    PublicMutable::new(context, slot)\n                },\n            ),\n            deposit_notes: Map::new(context, 8,|context, slot| {\n                    PrivateMutable::new(context, slot)\n               },\n            ),\n        }\n      }\n    }\n\n    #[aztec(private)]\n    #[aztec(initializer)]\n    fn constructor(\n        admin: AztecAddress, \n        target:AztecAddress, \n        token_in:AztecAddress, \n        token_out:AztecAddress, \n        relayer: AztecAddress,\n        bonding_token: AztecAddress, \n        bonding_amount: Field,\n        he_pub_key: Field,\n        sk_hash: Field,\n        interval: Field,\n        he_secret_key: Field\n    ) {\n\n        // validate that hash(new_he_secret_key) == sk_hash\n        let computed_sk_hash = dep::std::hash::pedersen_hash([he_secret_key]);\n        assert(sk_hash == computed_sk_hash, \"invalid sk_hash\");\n\n        // TODO: fail w/ \"Cannot satisfy constraint 'self.__to_le_bits(bit_size)'\"\n        // validate that new_he_pub_key corresponds to new_he_secret_key\n        // assert(he_add::validate_keypair(he_pub_key, he_secret_key), \"invalid he_pub_key\");\n\n        context.call_public_function(\n            context.this_address(),\n            FunctionSelector::from_signature(\"_initialize((Field),(Field),(Field),(Field),(Field),(Field),Field,Field,Field,Field)\"), \n            [\n                admin.to_field(),\n                target.to_field(),\n                token_in.to_field(),\n                token_out.to_field(),\n                relayer.to_field(), \n                bonding_token.to_field(), \n                bonding_amount,\n                he_pub_key,\n                sk_hash,\n                interval\n            ]\n        );\n    }\n\n    #[aztec(public)]\n    #[aztec(internal)]\n    #[aztec(noinitcheck)]\n    fn _initialize(\n        admin: AztecAddress, \n        target:AztecAddress, \n        token_in:AztecAddress, \n        token_out:AztecAddress, \n        relayer: AztecAddress,\n        bonding_token: AztecAddress, \n        bonding_amount: Field,\n        he_pub_key: Field,\n        sk_hash: Field,\n        interval: Field\n    ) {\n        // should put asserts to validate params\n        storage.admin.initialize(admin);\n        storage.target.initialize(target);\n        storage.token_in.initialize(token_in);\n        storage.token_out.initialize(token_out);\n\n        storage.current_round.write(1);\n\n        // initialize BatchRelayer\n        let batch_relayer = BatchRelayer::new(\n            relayer,\n            bonding_token,\n            bonding_amount,\n            he_pub_key,\n            sk_hash,\n            0, // TODO:  context.timestamp(),\n            interval\n        );\n\n        // store BatchRelayer\n        storage.batch_relayer.write(batch_relayer);\n\n        // // relayer stakes bonding\n        // context.call_public_function(\n        //     context.this_address(),\n        //     FunctionSelector::from_signature(\"stake((Field),(Field),Field,Field)\"), \n        //     [relayer.to_field(), bonding_token.to_field(), bonding_amount, nonce],\n        //      GasOpts::default()\n        // ).assert_empty();\n    }\n\n    /************************************************************************\n     * Admin's Operations\n     ************************************************************************/\n\n     // set_relayer(): set a new relayer\n     // set_relayer_params: set new relayer params, e.g. bonding_token, bonding_amount, etc...\n\n\n    /************************************************************************\n     * Users' Operations : Deposit, Withdraw, and Claim\n     ************************************************************************/\n\n    // TODO: some checks if relayer has already made a deposit before users depositing\n    #[aztec(private)]\n    fn deposit_to_batch(\n        current_round: Field,\n        amount_out: Field, \n        relayer_he_pubkey: Field,\n        he_add_rand: Field,\n        nonce: Field\n    ) {\n        // TODO: validate current_round\n\n        let sender = context.msg_sender();\n        let mut deposit_note = DepositNote::empty();\n\n        deposit_note = DepositNote::new(current_round, amount_out, sender);\n        storage.deposit_notes.at(sender).initialize(\n            &mut deposit_note,\n            true\n        );\n\n        let asset = storage.token_out.read_private();\n        Token::at(asset).transfer(\n            &mut context,\n            sender,\n            context.this_address(),\n            amount_out,\n            nonce\n        );\n\n        // TODO: validate relayer pubkey here\n\n        let (enc_c1, enc_c2) = he_add::encrypt(\n            amount_out,\n            relayer_he_pubkey, \n            he_add_rand\n        );\n\n        context.call_public_function(\n            context.this_address(),\n            FunctionSelector::from_signature(\"_add_token_out_amount(Field,Field)\"),\n            [enc_c1, enc_c2]\n        );\n    }\n\n    // TODO: this func or another func should let users withdraw in the case of relayer failure\n    // partial removal be a bit tricker but complete cancelling might be quite easy to implement\n    #[aztec(private)]\n    fn cancel_batch_and_claim(\n        current_round: Field, \n        secret_hash:Field\n    ) {\n        \n        let deposit_note = storage.deposit_notes.at(context.msg_sender()).get_note(false);\n\n        // transfer cancelled amount to the sender\n        let asset = storage.token_out.read_private();\n        Token::at(asset).transfer(\n            &mut context, \n            context.this_address(), \n            context.msg_sender(),\n            deposit_note.amount_out,\n            0\n        );\n\n        // report cancelled amount\n        context.call_public_function(\n            context.this_address(),\n            FunctionSelector::from_signature(\"_sub_token_out_amount((Field),Field)\"),\n            [deposit_note.amount_out, current_round]\n        ); \n\n        // make note empty\n        let mut empty_deposit_note = DepositNote::empty();\n        storage.deposit_notes.at(context.msg_sender()).replace(&mut empty_deposit_note, true);\n    }\n\n    // from user\n    #[aztec(private)]\n    fn claim_token_in(round: Field, total_token_in:Field, total_token_out: Field) {\n\n        // get msg_sender's note\n        let mut deposit_note = storage.deposit_notes.at(context.msg_sender()).get_note(false);\n\n        context.call_public_function(\n            context.this_address(),\n            FunctionSelector::from_signature(\"_validate_claim_params(Field[])\"), \n            [deposit_note.round, total_token_in, total_token_out]\n        ); \n\n        // calculate total token_in purchased at a specificed round\n        let token_in_amount = (total_token_in * deposit_note.amount_out / total_token_out);\n\n        // individual users can execute private transfer from this address to them with no permission..?\n        let _callStackItem = context.call_private_function(\n            storage.token_out.read_private(),\n            FunctionSelector::from_signature(\"transfer((Field),(Field),Field,Field)\"),\n            [context.this_address().to_field(), context.msg_sender().to_field(), token_in_amount, 0]\n        );\n\n        // TODO: note should be destroyed\n    }\n\n    /************************************************************************\n     * Relayer's Public Operations\n     ************************************************************************/\n\n    // from relayer or amind controlled by L1 contract with timestamp checkers\n    // minimum_output_amount should be calculated based on target twap\n    #[aztec(private)]\n    fn execute_batch(\n        encrypted_amount: [Field;2],\n        secret_key: Field,\n        token_out_amount_cancelled: Field,\n        input_asset_bridge: AztecAddress,\n        output_asset_bridge: AztecAddress,\n        nonce_for_transfer_approval: Field,\n        uniswap_fee_tier: Field,\n        minimum_output_amount: Field,\n        secret_hash_for_L1_to_l2_message: Field,\n        caller_on_L1: EthAddress,\n        nonce_for_swap_approval: Field\n    ) {\n        // caller should be an authorized relayer \n        // assert(context.msg_sender() == storage.batch_relayer.relayer, \"caller must be relayer\");\n\n        let amount_out = he_add::decrypt(encrypted_amount[0], encrypted_amount[1], secret_key);\n        let amount_out_minus_cancelled = amount_out - token_out_amount_cancelled;\n\n        context.call_public_function(\n            context.this_address(),\n            FunctionSelector::from_signature(\"validate_execute_batch((Field),Field,Field,Field,Field)\"), \n            [\n                context.msg_sender().to_field(),\n                encrypted_amount[0], \n                encrypted_amount[1], \n                amount_out_minus_cancelled, \n                token_out_amount_cancelled\n            ]\n        );  \n\n        // TODO: unshield / redeem if necessary\n        \n        // let target = storage.target.read_public();\n        // Uniswap::at(target).swap_public(\n        //     &mut context,\n        //     context.this_address(),\n        //     input_asset_bridge,\n        //     input_amount.to_field(),\n        //     output_asset_bridge,\n        //     nonce_for_transfer_approval,\n        //     uniswap_fee_tier,\n        //     minimum_output_amount,\n        //     context.this_address(),\n        //     secret_hash_for_L1_to_l2_message,\n        //     caller_on_L1,\n        //     nonce_for_swap_approval\n        // );\n    }\n\n    // TODO: this func can have conditions to be executed \n    // 1: total deposit count: how many deposits are made so far\n    // 2: time: how long did it take since last batch execute\n    #[aztec(public)]\n    #[aztec(internal)]\n    fn validate_execute_batch(\n        sender:AztecAddress, \n        c1:Field, \n        c2:Field, \n        amount_out:Field,\n        amount_out_sub_cancelled:Field\n    ) {\n        let relayer = storage.batch_relayer.read();\n        let current_time = relayer.last_timestamp + relayer.interval;\n        assert(current_time as u64 >= context.timestamp() as u64, \"time hasn't elapsed enough to update round\");\n        assert(sender == relayer.relayer, \"caller must be relayer\");\n\n        let current_round = storage.current_round.read();\n        let mut round = storage.rounds.at(current_round).read();\n        assert(!round.executed, \"already executed\");\n        assert(round.token_out_amount_cancelled == amount_out_sub_cancelled, \"invalid_cancelled_amount_out\");\n\n        assert(\n            (round.encrypted_token_out_amount[0] == c1)\n            & (round.encrypted_token_out_amount[1] == c2), \n            \"invalid encrypted amount\"\n        );\n\n        round.token_out_amount = amount_out;\n        round.executed = true;\n        storage.rounds.at(current_round).write(round); \n\n\n    }\n\n    // here anyone can update the acquired eth reward of the latest round after eth purchase\n    // but this should only occur once each round, so...\n    #[aztec(public)]\n    fn finalize_execute(\n        secret_hash_for_redeeming_minted_notes: Field, // secret hash used to redeem minted notes at a later time. This enables anyone to call this function and mint tokens to a user on their behalf\n        amount: Field,\n        secret_for_L1_to_L2_message_consumption: Field \n    ) {\n       // assert caller == relayer\n\n        let current_round = storage.current_round.read();\n        let mut round = storage.rounds.at(current_round).read();\n        assert(round.executed, \"batch tx hasn't been executed\");\n        assert(round.token_in_amount == 0, \"already claimed\");\n\n        // store the new balance \n        round.token_in_amount = amount;\n        storage.rounds.at(current_round).write(round);\n        \n\n        // claim_private ( mint_private() )\n        // redeem_shield()\n\n        let new_round = storage.current_round.read() + 1;\n        storage.current_round.write(new_round); \n    }\n\n    // here probably there is need to implement create public auth wit\n    // so that target contract can receive(transfer) token from this cotnract.\n    #[aztec(public)] \n    fn spend_public_authwit(inner_hash: Field) -> Field {\n        // let message_hash = compute_outer_authwit_hash(\n        //     context.msg_sender(),\n        //     context.chain_id(),\n        //     context.version(),\n        //     inner_hash\n        // );\n        // let value = storage.approved_action.at(message_hash).read();\n        // if (value) {\n        //     context.push_new_nullifier(message_hash, 0);\n        //     IS_VALID_SELECTOR\n        // } else {\n        //     0\n        // }\n        0\n    }\n\n\n    /************************************************************************\n     * Functions for Relayer Dispute\n     ************************************************************************/\n\n    #[aztec(private)]\n    fn dipute_relayer(\n        he_secret_key: Field, \n        new_sk_hash: Field, \n        new_he_pub_key:Field,\n        new_he_secret_key: Field,\n        new_relayer: AztecAddress,\n        secret_hash: Field,\n        nonce:Field\n        ) {\n        let sk_hash = dep::std::hash::pedersen_hash([he_secret_key]);\n\n        context.call_public_function(\n            context.this_address(),\n            FunctionSelector::from_signature(\"check_sk_hash(Field)\"), // or (Field)[]\n            [sk_hash]\n        ); \n\n        // validate that new_sk_hash == hash(new_he_secret_key);\n        let new_computed_sk_hash = dep::std::hash::pedersen_hash([new_he_secret_key]);\n        assert(new_sk_hash == new_computed_sk_hash, \"invalid_new_sk_hash\");\n\n        // validate that new_he_pub_key corresponds to new_he_secret_key\n        assert(he_add::validate_keypair(new_he_pub_key, new_he_secret_key), \"invalid new_he_pub_key\");\n\n        context.call_public_function(\n            context.this_address(),\n            FunctionSelector::from_signature(\"replace_relayer_and_slash_stake(Field,Field,(Field),Field,Field)\"),\n            [new_sk_hash, new_he_pub_key, new_relayer.to_field(), secret_hash, nonce]\n        ); \n    }\n\n    #[aztec(public)]\n    fn check_sk_hash(sk_hash: Field) {\n        assert(sk_hash == storage.batch_relayer.read().sk_hash, \"invalid sk_hash\");\n    }\n\n\n    // register sk_hash\n\n    // replace_relayer_and_slash_stake\n    // 1: replace current relayer with a new relayer\n    // 2: slash bond token\n    // 3: make a new stake deposit from a new layer\n    #[aztec(public)]\n    #[aztec(internal)]\n    fn replace_relayer_and_slash_stake(sk_hash: Field, new_he_pub_key: Field, new_relayer:AztecAddress, secret_hash:Field, nonce:Field) {\n        // replacement from slashed relayer to a new relayer ( disputer )\n        let mut relayer = storage.batch_relayer.read();\n        relayer.relayer = new_relayer;\n        relayer.sk_hash = sk_hash;\n        relayer.he_pub_key = new_he_pub_key;\n        storage.batch_relayer.write(relayer);\n\n        // slash by shielding staked asset to new relayer\n        Token::at(relayer.bonding_token).shield(\n            &mut context, \n            context.this_address(), \n            relayer.bonding_amount,\n            secret_hash, \n            0\n        );\n\n        // new stake deposit from new relayer\n        context.call_public_function(\n            context.this_address(),\n            FunctionSelector::from_signature(\"stake((Field),(Field),Field,Field)\"), \n            [new_relayer.to_field(), relayer.bonding_token.to_field(), relayer.bonding_amount, nonce],\n            GasOpts::default()\n        ).assert_empty();  \n    }\n\n    #[aztec(public)] \n    fn stake(relayer: AztecAddress, token:AztecAddress, amount:Field, nonce:Field) {\n        let batch_relayer = storage.batch_relayer.read();\n        assert(U128::from_field(amount) >= U128::from_field(batch_relayer.bonding_amount), \"insufficient bonding amount\");\n        // TODO: also verify caller == relayer in normal situation..?\n\n        // transfer public\n        Token::at(token).transfer_public(\n            &mut context, \n            relayer,\n            context.this_address(), \n            amount,\n            nonce\n        );\n    }\n\n    /************************************************************************\n     * Public Internal Function\n     ************************************************************************/\n\n    #[aztec(public)] \n    #[aztec(internal)]\n    fn _validate_claim_params(\n        _round: Field, \n        _total_token_in: Field,\n        _total_token_out: Field\n    ) {\n        let round = storage.rounds.at(_round).read();\n        assert(round.token_in_amount == _total_token_in, \"invalid _total_token_in\");\n        assert(round.token_out_amount == _total_token_out, \"invalid _total_token_in\");\n    }\n\n    #[aztec(public)]\n    #[aztec(internal)]\n    fn _add_token_out_amount(enc_c1: Field, enc_c2:Field) {\n        let current_round = storage.current_round.read();\n        let mut round = storage.rounds.at(current_round).read();\n        let (c1, c2) = round.get_encrypted_amount();\n        let (new_c1, new_c2) = he_add::add(c1, c2, enc_c1, enc_c2);\n\n        round.encrypted_token_out_amount[0] = new_c1;\n        round.encrypted_token_out_amount[1] = new_c2;\n              \n        storage.rounds.at(current_round).write(round);\n    }\n\n    /// \"decrease\" (increase) `token_out_amount_cancelled` in rounds\n    #[aztec(public)]\n    #[aztec(internal)]\n    fn _sub_token_out_amount(amount: Field, _round: Field) {\n        let mut round = storage.rounds.at(_round).read();\n        round.token_out_amount_cancelled = amount;\n        storage.rounds.at(_round).write(round);\n    }\n\n    #[aztec(public)]\n    #[aztec(internal)]\n    fn _validate_round(round:Field) {\n        let current_round = storage.current_round.read();\n        assert(current_round == round, \"invalid_round\");\n    }\n\n    unconstrained fn get_admin() -> pub Field {\n        storage.admin.read().to_field()\n    }\n\n    unconstrained fn get_target_address() -> pub Field {\n        storage.target.read_public().to_field()\n    }\n\n    unconstrained fn get_token_in() -> pub Field {\n        storage.token_in.read_public().to_field()\n    }\n\n    unconstrained fn get_token_out() -> pub Field {\n        storage.token_out.read_public().to_field()\n    }\n\n    unconstrained fn get_round() -> pub Field {\n        storage.current_round.read()\n    }\n\n    unconstrained fn get_batch_relayer() -> pub BatchRelayer {\n        storage.batch_relayer.read()\n    }\n\n    unconstrained fn get_encrypted_sum(current_round:Field) -> pub [Field;2] {\n        let mut ret:[Field;2] = [0;2];\n        let (c1, c2) = storage.rounds.at(current_round).read().get_encrypted_amount();\n        ret[0] = c1;\n        ret[1] = c2;\n        ret\n    }\n\n    unconstrained fn get_sk_hash(he_secret_key: Field) -> pub Field {\n        dep::std::hash::pedersen_hash([he_secret_key])\n    }\n\n    #[test]\n    fn test_get_sk_hash() {\n        let sk = 711563766;\n        let ret = get_sk_hash(sk);\n        dep::std::println(ret);\n    }\n    \n}\n","path":"/Users/jack-sw/Codes/abstract/dex-build/token-bridge-uniswap/packages/aztec-contracts/batcher_contract/src/main.nr"},"53":{"source":"use crate::context::{PrivateContext, PublicContext};\nuse crate::oracle;\nuse dep::protocol_types::{address::AztecAddress, grumpkin_point::GrumpkinPoint};\n\npub fn emit_encrypted_log<N>(\n    context: &mut PrivateContext,\n    contract_address: AztecAddress,\n    storage_slot: Field,\n    note_type_id: Field,\n    encryption_pub_key: GrumpkinPoint,\n    log: [Field; N]\n) {\n    let _ = oracle::logs::emit_encrypted_log(\n        contract_address,\n        storage_slot,\n        note_type_id,\n        encryption_pub_key,\n        log\n    );\n    context.accumulate_encrypted_logs(log);\n}\n\npub fn emit_unencrypted_log<T>(context: &mut PublicContext, log: T) {\n    let contract_address = context.this_address();\n    let event_selector = 5; // TODO: compute actual event selector.\n    let _ = oracle::logs::emit_unencrypted_log(contract_address, event_selector, log);\n    // context.accumulate_unencrypted_logs(log);\n}\n\n// TODO: We might want to remove this since emitting unencrypted logs from private functions is violating privacy.\n// --> might be a better approach to force devs to make a public function call that emits the log if needed then\n// it would be less easy to accidentally leak information.\n// If we decide to keep this function around would make sense to wait for traits and then merge it with emit_unencrypted_log.\npub fn emit_unencrypted_log_from_private<T>(context: &mut PrivateContext, log: T) {\n    let contract_address = context.this_address();\n    let event_selector = 5; // TODO: compute actual event selector.\n    let _ = oracle::logs::emit_unencrypted_log(contract_address, event_selector, log);\n    // context.accumulate_unencrypted_logs(log);\n}\n","path":"/Users/jack-sw/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.35.1/noir-projects/aztec-nr/aztec/src/log.nr"},"57":{"source":"use dep::protocol_types::{\n    constants::{\n    MAX_NOTE_HASH_READ_REQUESTS_PER_CALL, GET_NOTE_ORACLE_RETURN_LENGTH, GET_NOTES_ORACLE_RETURN_LENGTH,\n    MAX_NOTES_PER_PAGE, VIEW_NOTE_ORACLE_RETURN_LENGTH\n}\n};\nuse crate::context::PrivateContext;\nuse crate::note::{\n    note_getter_options::{NoteGetterOptions, Select, Sort, SortOrder, Comparator, NoteStatus, PropertySelector},\n    note_interface::NoteInterface, note_viewer_options::NoteViewerOptions,\n    utils::compute_note_hash_for_consumption\n};\nuse crate::oracle;\n\nfn extract_property_value_from_selector<N>(serialized_note: [Field; N], selector: PropertySelector) -> Field {\n    // Selectors use PropertySelectors in order to locate note properties inside the serialized note. \n    // This allows easier packing and custom (de)serialization schemas. A note property is located\n    // inside the serialized note using the index inside the array, a byte offset and a length.\n    let value = serialized_note[selector.index].to_be_bytes(32);\n    let offset = selector.offset;\n    let length = selector.length;\n    let mut value_field = 0 as Field;\n    let mut acc: Field = 1;\n    for i in 0..32 {\n        if i < length {\n            value_field += value[31 + offset - i] as Field * acc;\n            acc = acc * 256;\n        }\n    }\n    value_field\n}\n\nfn check_note_header<Note, N>(context: PrivateContext, storage_slot: Field, note: Note) where Note: NoteInterface<N> {\n    let header = note.get_header();\n    let contract_address = context.this_address();\n    assert(header.contract_address.eq(contract_address));\n    assert(header.storage_slot == storage_slot);\n}\n\nfn check_note_fields<N>(serialized_note: [Field; N], selects: BoundedVec<Option<Select>, N>) {\n    for i in 0..selects.len {\n        let select = selects.get_unchecked(i).unwrap_unchecked();\n        let value_field = extract_property_value_from_selector(serialized_note, select.property_selector);\n\n        // Values are computed ahead of time because circuits evaluate all branches\n        let is_equal = value_field == select.value.to_field();\n        let is_lt = value_field.lt(select.value.to_field());\n\n        if (select.comparator == Comparator.EQ) {\n            assert(is_equal, \"Mismatch return note field.\");\n        } else if (select.comparator == Comparator.NEQ) {\n            assert(!is_equal, \"Mismatch return note field.\");\n        } else if (select.comparator == Comparator.LT) {\n            assert(is_lt, \"Mismatch return note field.\");\n        } else if (select.comparator == Comparator.LTE) {\n            assert(is_lt | is_equal, \"Mismatch return note field.\");\n        } else if (select.comparator == Comparator.GT) {\n            assert(!is_lt & !is_equal, \"Mismatch return note field.\");\n        } else if (select.comparator == Comparator.GTE) {\n            assert(!is_lt, \"Mismatch return note field.\");\n        }\n    }\n}\n\nfn check_notes_order<N>(\n    fields_0: [Field; N],\n    fields_1: [Field; N],\n    sorts: BoundedVec<Option<Sort>, N>\n) {\n    for i in 0..sorts.len {\n        let sort = sorts.get_unchecked(i).unwrap_unchecked();\n        let field_0 = extract_property_value_from_selector(fields_0, sort.property_selector);\n        let field_1 = extract_property_value_from_selector(fields_1, sort.property_selector);\n        let eq = field_0 == field_1;\n        let lt = field_0.lt(field_1);\n        if sort.order == SortOrder.ASC {\n            assert(eq | lt, \"Return notes not sorted in ascending order.\");\n        } else if !eq {\n            assert(!lt, \"Return notes not sorted in descending order.\");\n        }\n    }\n}\n\npub fn get_note<Note, N>(\n    context: &mut PrivateContext,\n    storage_slot: Field\n) -> Note where Note: NoteInterface<N> {\n    let note = get_note_internal(storage_slot);\n\n    check_note_header(*context, storage_slot, note);\n\n    let note_hash_for_read_request = compute_note_hash_for_consumption(note);\n\n    context.push_note_hash_read_request(note_hash_for_read_request);\n    note\n}\n\npub fn get_notes<Note, N, FILTER_ARGS>(\n    context: &mut PrivateContext,\n    storage_slot: Field,\n    options: NoteGetterOptions<Note, N, FILTER_ARGS>\n) -> [Option<Note>; MAX_NOTE_HASH_READ_REQUESTS_PER_CALL] where Note: NoteInterface<N> {\n    let opt_notes = get_notes_internal(storage_slot, options);\n\n    _get_notes_constrain_get_notes_internal(context, storage_slot, opt_notes, options)\n}\n\npub fn _get_notes_constrain_get_notes_internal<Note, N, FILTER_ARGS>(\n    context: &mut PrivateContext,\n    storage_slot: Field,\n    opt_notes: [Option<Note>; MAX_NOTE_HASH_READ_REQUESTS_PER_CALL],\n    options: NoteGetterOptions<Note, N, FILTER_ARGS>\n) -> [Option<Note>; MAX_NOTE_HASH_READ_REQUESTS_PER_CALL] where Note: NoteInterface<N> {\n    let mut returned_notes = [Option::none(); MAX_NOTE_HASH_READ_REQUESTS_PER_CALL];\n\n    let mut num_notes = 0;\n    let mut prev_fields = [0; N];\n    for i in 0..opt_notes.len() {\n        let opt_note = opt_notes[i];\n        if opt_note.is_some() {\n            let note = opt_note.unwrap_unchecked();\n            let fields = note.serialize_content();\n            check_note_header(*context, storage_slot, note);\n            check_note_fields(fields, options.selects);\n            if i != 0 {\n                check_notes_order(prev_fields, fields, options.sorts);\n            }\n            prev_fields = fields;\n\n            let note_hash_for_read_request = compute_note_hash_for_consumption(note);\n            // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1410): test to ensure\n            // failure if malicious oracle injects 0 nonce here for a \"pre-existing\" note.\n            context.push_note_hash_read_request(note_hash_for_read_request);\n\n            // The below code is used to collapse a sparse array into one where the values are guaranteed to be at the front of the array\n            // We write at returned_notes[num_notes] because num_notes is only advanced when we have a value in opt_notes\n            returned_notes[num_notes] = Option::some(note);\n            num_notes += 1;\n        };\n    }\n    if options.limit != 0 {\n        assert(num_notes <= options.limit, \"Invalid number of return notes.\");\n    }\n\n    assert(num_notes != 0, \"Cannot return zero notes\");\n\n    returned_notes\n}\n\nunconstrained fn get_note_internal<Note, N>(storage_slot: Field) -> Note where Note: NoteInterface<N> {\n    let placeholder_note = [Option::none()];\n    let placeholder_fields = [0; GET_NOTE_ORACLE_RETURN_LENGTH];\n    let placeholder_note_length = [0; N];\n    oracle::notes::get_notes(\n        storage_slot,\n        0,\n        [],\n        [],\n        [],\n        [],\n        [],\n        [],\n        [],\n        [],\n        [],\n        1, // limit\n        0, // offset\n        NoteStatus.ACTIVE,\n        placeholder_note,\n        placeholder_fields,\n        placeholder_note_length\n    )[0].unwrap() // Notice: we don't allow dummies to be returned from get_note (singular).\n}\n\nunconstrained fn get_notes_internal<Note, N, FILTER_ARGS>(\n    storage_slot: Field,\n    options: NoteGetterOptions<Note, N, FILTER_ARGS>\n) -> [Option<Note>; MAX_NOTE_HASH_READ_REQUESTS_PER_CALL] where Note: NoteInterface<N> {\n    let (num_selects, select_by_indexes, select_by_offsets, select_by_lengths, select_values, select_comparators, sort_by_indexes, sort_by_offsets, sort_by_lengths, sort_order) = flatten_options(options.selects, options.sorts);\n    let placeholder_opt_notes = [Option::none(); MAX_NOTE_HASH_READ_REQUESTS_PER_CALL];\n    let placeholder_fields = [0; GET_NOTES_ORACLE_RETURN_LENGTH];\n    let placeholder_note_length = [0; N];\n    let opt_notes = oracle::notes::get_notes(\n        storage_slot,\n        num_selects,\n        select_by_indexes,\n        select_by_offsets,\n        select_by_lengths,\n        select_values,\n        select_comparators,\n        sort_by_indexes,\n        sort_by_offsets,\n        sort_by_lengths,\n        sort_order,\n        options.limit,\n        options.offset,\n        options.status,\n        placeholder_opt_notes,\n        placeholder_fields,\n        placeholder_note_length\n    );\n\n    let filter = options.filter;\n    let filter_args = options.filter_args;\n    filter(opt_notes, filter_args)\n}\n\nunconstrained pub fn view_notes<Note, N>(\n    storage_slot: Field,\n    options: NoteViewerOptions<Note, N>\n) -> [Option<Note>; MAX_NOTES_PER_PAGE] where Note: NoteInterface<N> {\n    let (num_selects, select_by_indexes, select_by_offsets, select_by_lengths, select_values, select_comparators, sort_by_indexes, sort_by_offsets, sort_by_lengths, sort_order) = flatten_options(options.selects, options.sorts);\n    let placeholder_opt_notes = [Option::none(); MAX_NOTES_PER_PAGE];\n    let placeholder_fields = [0; VIEW_NOTE_ORACLE_RETURN_LENGTH];\n    let placeholder_note_length = [0; N];\n    oracle::notes::get_notes(\n        storage_slot,\n        num_selects,\n        select_by_indexes,\n        select_by_offsets,\n        select_by_lengths,\n        select_values,\n        select_comparators,\n        sort_by_indexes,\n        sort_by_offsets,\n        sort_by_lengths,\n        sort_order,\n        options.limit,\n        options.offset,\n        options.status,\n        placeholder_opt_notes,\n        placeholder_fields,\n        placeholder_note_length\n    )\n}\n\nunconstrained fn flatten_options<Note, N>(\n    selects: BoundedVec<Option<Select>, N>,\n    sorts: BoundedVec<Option<Sort>, N>\n) -> (u8, [u8; N], [u8; N], [u8; N], [Field; N], [u8; N], [u8; N], [u8; N], [u8; N], [u8; N]) {\n    let mut num_selects = 0;\n    let mut select_by_indexes = [0; N];\n    let mut select_by_offsets = [0; N];\n    let mut select_by_lengths = [0; N];\n    let mut select_values = [0; N];\n    let mut select_comparators = [0; N];\n\n    for i in 0..selects.len {\n        let select = selects.get(i);\n        if select.is_some() {\n            select_by_indexes[num_selects] = select.unwrap_unchecked().property_selector.index;\n            select_by_offsets[num_selects] = select.unwrap_unchecked().property_selector.offset;\n            select_by_lengths[num_selects] = select.unwrap_unchecked().property_selector.length;\n            select_values[num_selects] = select.unwrap_unchecked().value;\n            select_comparators[num_selects] = select.unwrap_unchecked().comparator;\n            num_selects += 1;\n        };\n    }\n\n    let mut sort_by_indexes = [0; N];\n    let mut sort_by_offsets = [0; N];\n    let mut sort_by_lengths = [0; N];\n    let mut sort_order = [0; N];\n    for i in 0..sorts.len {\n        let sort = sorts.get(i);\n        if sort.is_some() {\n            sort_by_indexes[i] = sort.unwrap_unchecked().property_selector.index;\n            sort_by_offsets[i] = sort.unwrap_unchecked().property_selector.offset;\n            sort_by_lengths[i] = sort.unwrap_unchecked().property_selector.length;\n            sort_order[i] = sort.unwrap_unchecked().order;\n        };\n    }\n\n    (\n        num_selects, select_by_indexes, select_by_offsets, select_by_lengths, select_values, select_comparators, sort_by_indexes, sort_by_offsets, sort_by_lengths, sort_order\n    )\n}\n","path":"/Users/jack-sw/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.35.1/noir-projects/aztec-nr/aztec/src/note/note_getter.nr"},"58":{"source":"use crate::context::{PrivateContext, PublicContext};\nuse crate::note::{\n    note_header::NoteHeader, note_interface::NoteInterface,\n    utils::{compute_note_hash_for_insertion, compute_note_hash_for_consumption}\n};\nuse crate::oracle::notes::{notify_created_note, notify_nullified_note};\n\npub fn create_note<Note, N>(\n    context: &mut PrivateContext,\n    storage_slot: Field,\n    note: &mut Note,\n    broadcast: bool\n) where Note: NoteInterface<N> {\n    let contract_address = (*context).this_address();\n\n    let header = NoteHeader { contract_address, storage_slot, nonce: 0, is_transient: true };\n    // TODO: change this to note.set_header(header) once https://github.com/noir-lang/noir/issues/4095 is fixed\n    Note::set_header(note, header);\n    // As `is_transient` is true, this will compute the inner note hsah\n    let inner_note_hash = compute_note_hash_for_insertion(*note);\n\n    // TODO: Strong typing required because of https://github.com/noir-lang/noir/issues/4088\n    let serialized_note: [Field; N] = Note::serialize_content(*note);\n    assert(\n        notify_created_note(\n        storage_slot,\n        Note::get_note_type_id(),\n        serialized_note,\n        inner_note_hash\n    )\n        == 0\n    );\n\n    context.push_new_note_hash(inner_note_hash);\n\n    if broadcast {\n        Note::broadcast(*note, context, storage_slot);\n    }\n}\n\npub fn create_note_hash_from_public<Note, N>(\n    context: &mut PublicContext,\n    storage_slot: Field,\n    note: &mut Note\n) where Note: NoteInterface<N> {\n    let contract_address = (*context).this_address();\n\n    let header = NoteHeader { contract_address, storage_slot, nonce: 0, is_transient: true };\n    // TODO: change this to note.set_header(header) once https://github.com/noir-lang/noir/issues/4095 is fixed\n    Note::set_header(note, header);\n    let inner_note_hash = compute_note_hash_for_insertion(*note);\n\n    context.push_new_note_hash(inner_note_hash);\n}\n\npub fn destroy_note<Note, N>(context: &mut PrivateContext, note: Note) where Note: NoteInterface<N> {\n    let mut nullifier = 0;\n    let mut consumed_note_hash: Field = 0;\n    nullifier = note.compute_nullifier(context);\n\n    // We also need the note hash corresponding to the \"nullifier\"\n    let header = note.get_header();\n    // `consumed_note_hash` is used to inform the kernel which pending note hash\n    // the nullifier corresponds to so they can be matched and both squashed/deleted.\n    // nonzero nonce implies \"persistable\" nullifier (nullifies a persistent/in-tree\n    // note hash) in which case `consumed_note_hash` is not used since the kernel\n    // just siloes and forwards the nullifier to its output.\n    if (header.is_transient) {\n        // TODO(1718): Can we reuse the note hash computed in `compute_nullifier`?\n        consumed_note_hash = compute_note_hash_for_consumption(note);\n    }\n    assert(notify_nullified_note(nullifier, consumed_note_hash) == 0);\n\n    context.push_new_nullifier(nullifier, consumed_note_hash)\n}\n","path":"/Users/jack-sw/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.35.1/noir-projects/aztec-nr/aztec/src/note/lifecycle.nr"},"59":{"source":"use crate::{context::PrivateContext, note::{note_header::NoteHeader, note_interface::NoteInterface}};\n\nuse dep::protocol_types::{\n    address::AztecAddress,\n    constants::{GENERATOR_INDEX__OUTER_NULLIFIER, GENERATOR_INDEX__UNIQUE_NOTE_HASH, GENERATOR_INDEX__SILOED_NOTE_HASH},\n    hash::pedersen_hash, utils::arr_copy_slice\n};\n\nfn compute_siloed_hash(contract_address: AztecAddress, inner_note_hash: Field) -> Field {\n    let inputs = [contract_address.to_field(), inner_note_hash];\n    pedersen_hash(inputs, GENERATOR_INDEX__SILOED_NOTE_HASH)\n}\n\nfn compute_unique_hash(nonce: Field, siloed_note_hash: Field) -> Field {\n    let inputs = [nonce, siloed_note_hash];\n    pedersen_hash(inputs, GENERATOR_INDEX__UNIQUE_NOTE_HASH)\n}\n\nfn compute_inner_note_hash<Note, N>(note: Note) -> Field where Note: NoteInterface<N> {\n    let header = note.get_header();\n    let note_hash = note.compute_note_content_hash();\n\n    // TODO(#1205) Do we need a generator index here?\n    pedersen_hash([header.storage_slot, note_hash], 0)\n}\n\nfn compute_siloed_note_hash<Note, N>(note_with_header: Note) -> Field where Note: NoteInterface<N> {\n    let header = note_with_header.get_header();\n\n    let inner_note_hash = compute_inner_note_hash(note_with_header);\n\n    compute_siloed_hash(header.contract_address, inner_note_hash)\n}\n\nfn compute_unique_siloed_note_hash<Note, N>(note_with_header: Note) -> Field where Note: NoteInterface<N> {\n    let header = note_with_header.get_header();\n\n    let siloed_note_hash = compute_siloed_note_hash(note_with_header);\n\n    compute_unique_hash(header.nonce, siloed_note_hash)\n}\n\npub fn compute_siloed_nullifier<Note, N>(\n    note_with_header: Note,\n    context: &mut PrivateContext\n) -> Field where Note: NoteInterface<N> {\n    let header = note_with_header.get_header();\n    let inner_nullifier = note_with_header.compute_nullifier(context);\n\n    let input = [header.contract_address.to_field(), inner_nullifier];\n    pedersen_hash(input, GENERATOR_INDEX__OUTER_NULLIFIER)\n}\n\npub fn compute_note_hash_for_insertion<Note, N>(note: Note) -> Field where Note: NoteInterface<N> {\n    compute_inner_note_hash(note)\n}\n\npub fn compute_note_hash_for_consumption<Note, N>(note: Note) -> Field where Note: NoteInterface<N> {\n    let header = note.get_header();\n    // There are 3 cases for reading a note intended for consumption:\n    // 1. The note was inserted in this transaction, and is transient.\n    // 2. The note was inserted in a previous transaction, and was inserted in public\n    // 3. The note was inserted in a previous transaction, and was inserted in private\n\n    if (header.is_transient) {\n        // If a note is transient, we just read the inner_note_hash (kernel will silo by contract address).\n        compute_inner_note_hash(note)\n    } else if (header.nonce == 0) {\n        // If not transient and nonce is zero, that means we are reading a public note.\n        compute_siloed_note_hash(note)\n    } else {\n        // When nonce is nonzero, that means we are reading a settled note (from tree) created in a\n        // previous TX. So we need the unique_siloed_note_hash which has already been hashed with\n        // contract address and then nonce. This hash will match the existing leaf in the note hash\n        // tree, so the kernel can just perform a membership check directly on this hash/leaf.\n        compute_unique_siloed_note_hash(note)\n        // IMPORTANT NOTE ON REDUNDANT SILOING BY CONTRACT ADDRESS: The note hash computed above is\n        // \"siloed\" by contract address. When a note hash is computed solely for the purpose of\n        // nullification, it is not strictly necessary to silo the note hash before computing\n        // its nullifier. In other words, it is NOT NECESSARY for protocol security that a nullifier\n        // be computed from a siloed note hash. After all, persistable note hashes and nullifiers are\n        // siloed by the kernel circuit. That being said, the siloed note hash computed above CAN be\n        // used for nullifier computation, and this achieves the (arguably unnecessary) property that\n        // nullifiers are computed from a note hash's fully-computed note hash tree leaf.\n    }\n}\n\npub fn compute_note_hash_and_nullifier<T, N, S>(\n    // docs:start:compute_note_hash_and_nullifier_args\n    deserialize_content: fn([Field; N]) -> T,\n    note_header: NoteHeader,\n    serialized_note: [Field; S] // docs:end:compute_note_hash_and_nullifier_args\n) -> [Field; 4] where T: NoteInterface<N> {\n    let mut note = deserialize_content(arr_copy_slice(serialized_note, [0; N], 0));\n    // TODO: change this to note.set_header(header) once https://github.com/noir-lang/noir/issues/4095 is fixed\n    T::set_header((&mut note), note_header);\n\n    let inner_note_hash = compute_inner_note_hash(note);\n\n    let siloed_note_hash = compute_siloed_hash(note_header.contract_address, inner_note_hash);\n\n    let unique_siloed_note_hash = compute_unique_hash(note_header.nonce, siloed_note_hash);\n\n    let inner_nullifier = note.compute_nullifier_without_context();\n    // docs:start:compute_note_hash_and_nullifier_returns\n    [inner_note_hash, siloed_note_hash, unique_siloed_note_hash, inner_nullifier]\n    // docs:end:compute_note_hash_and_nullifier_returns\n}\n","path":"/Users/jack-sw/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.35.1/noir-projects/aztec-nr/aztec/src/note/utils.nr"},"60":{"source":"use dep::protocol_types::address::AztecAddress;\nuse dep::protocol_types::traits::{Empty, Serialize};\n\nstruct NoteHeader {\n    contract_address: AztecAddress,\n    nonce: Field,\n    storage_slot: Field,\n    // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1386)\n    // Remove this and check the nonce to see whether a note is transient or not.\n    is_transient: bool,\n}\n\nimpl Empty for NoteHeader {\n    fn empty() -> Self {\n        NoteHeader { contract_address: AztecAddress::zero(), nonce: 0, storage_slot: 0, is_transient: false }\n    }\n}\n\nimpl NoteHeader {\n    pub fn new(contract_address: AztecAddress, nonce: Field, storage_slot: Field) -> Self {\n        NoteHeader { contract_address, nonce, storage_slot, is_transient: false }\n    }\n}\n\nimpl Serialize<4> for NoteHeader {\n    fn serialize(self) -> [Field; 4] {\n        [self.contract_address.to_field(), self.nonce, self.storage_slot, self.is_transient as Field]\n    }\n}\n","path":"/Users/jack-sw/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.35.1/noir-projects/aztec-nr/aztec/src/note/note_header.nr"},"70":{"source":"use crate::{\n    context::{\n    inputs::PublicContextInputs, interface::ContextInterface, interface::PublicContextInterface,\n    gas::GasOpts\n},\n    messaging::process_l1_to_l2_message,\n    oracle::{arguments, public_call::call_public_function_internal, returns},\n    hash::{hash_args_array, ArgsHasher}\n};\nuse dep::protocol_types::{\n    abis::{\n    global_variables::GlobalVariables, function_selector::FunctionSelector,\n    private_circuit_public_inputs::PrivateCircuitPublicInputs,\n    public_call_stack_item::PublicCallStackItem,\n    public_circuit_public_inputs::PublicCircuitPublicInputs, read_request::ReadRequest,\n    side_effect::{SideEffect, SideEffectLinkedToNoteHash}\n},\n    hash::silo_nullifier, address::{AztecAddress, EthAddress},\n    constants::{\n    MAX_NEW_NOTE_HASHES_PER_CALL, MAX_NEW_L2_TO_L1_MSGS_PER_CALL, MAX_NEW_NULLIFIERS_PER_CALL,\n    MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL, MAX_PUBLIC_DATA_READS_PER_CALL,\n    MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL, MAX_NOTE_HASH_READ_REQUESTS_PER_CALL,\n    MAX_NULLIFIER_READ_REQUESTS_PER_CALL, MAX_NULLIFIER_NON_EXISTENT_READ_REQUESTS_PER_CALL\n},\n    contrakt::{storage_read::StorageRead, storage_update_request::StorageUpdateRequest}, header::Header,\n    messaging::l2_to_l1_message::L2ToL1Message, utils::reader::Reader, traits::{Deserialize, Empty}\n};\n\nstruct PublicContext {\n    inputs: PublicContextInputs,\n    side_effect_counter: u32,\n\n    args_hash : Field,\n    return_hash : Field,\n\n    nullifier_read_requests: BoundedVec<ReadRequest, MAX_NULLIFIER_READ_REQUESTS_PER_CALL>,\n    nullifier_non_existent_read_requests: BoundedVec<ReadRequest, MAX_NULLIFIER_NON_EXISTENT_READ_REQUESTS_PER_CALL>,\n    contract_storage_update_requests: BoundedVec<StorageUpdateRequest, MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL>,\n    contract_storage_reads: BoundedVec<StorageRead, MAX_PUBLIC_DATA_READS_PER_CALL>,\n    public_call_stack_hashes: BoundedVec<Field, MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL>,\n\n    new_note_hashes: BoundedVec<SideEffect, MAX_NEW_NOTE_HASHES_PER_CALL>,\n    new_nullifiers: BoundedVec<SideEffectLinkedToNoteHash, MAX_NEW_NULLIFIERS_PER_CALL>,\n\n    new_l2_to_l1_msgs: BoundedVec<L2ToL1Message, MAX_NEW_L2_TO_L1_MSGS_PER_CALL>,\n\n    unencrypted_logs_hash: Field,\n    unencrypted_logs_preimages_length: Field,\n\n    // Header of a block whose state is used during public execution. Set by sequencer to be a header of a block\n    // previous to the one in which the tx is included.\n    historical_header: Header,\n    prover_address: AztecAddress,\n}\n\nimpl PublicContext {\n    pub fn new(inputs: PublicContextInputs, args_hash: Field) -> PublicContext {\n        PublicContext {\n            inputs,\n            side_effect_counter: inputs.start_side_effect_counter,\n            args_hash,\n            return_hash: 0,\n            nullifier_read_requests: BoundedVec::new(),\n            nullifier_non_existent_read_requests: BoundedVec::new(),\n            contract_storage_update_requests: BoundedVec::new(),\n            contract_storage_reads: BoundedVec::new(),\n            public_call_stack_hashes: BoundedVec::new(),\n            new_note_hashes: BoundedVec::new(),\n            new_nullifiers: BoundedVec::new(),\n            new_l2_to_l1_msgs: BoundedVec::new(),\n            unencrypted_logs_hash: 0,\n            unencrypted_logs_preimages_length: 0,\n            historical_header: inputs.historical_header,\n            prover_address: AztecAddress::zero() // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n            // encrypted_logs_preimages: Vec::new(),\n            // unencrypted_logs_preimages: Vec::new(),\n        }\n    }\n\n    pub fn call_public_function_no_args<RETURNS_COUNT>(\n        self: &mut Self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector\n    ) -> FunctionReturns<RETURNS_COUNT> {\n        self.call_public_function_with_packed_args(contract_address, function_selector, 0, false, false)\n    }\n\n    pub fn static_call_public_function_no_args<RETURNS_COUNT>(\n        self: &mut Self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector\n    ) -> FunctionReturns<RETURNS_COUNT> {\n        self.call_public_function_with_packed_args(contract_address, function_selector, 0, true, false)\n    }\n\n    pub fn delegate_call_public_function_no_args<RETURNS_COUNT>(\n        self: &mut Self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector\n    ) -> FunctionReturns<RETURNS_COUNT> {\n        self.call_public_function_with_packed_args(contract_address, function_selector, 0, false, true)\n    }\n\n    pub fn call_public_function_with_packed_args<RETURNS_COUNT>(\n        self: &mut Self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args_hash: Field,\n        is_static_call: bool,\n        is_delegate_call: bool\n    ) -> FunctionReturns<RETURNS_COUNT> {\n        let side_effect_counter = self.side_effect_counter;\n        // TODO get next value from output of `call_public_function_internal`\n        self.side_effect_counter += 1;\n\n        let raw_returns = call_public_function_internal(\n            contract_address,\n            function_selector,\n            args_hash,\n            side_effect_counter,\n            is_static_call,\n            is_delegate_call\n        );\n\n        FunctionReturns::new(raw_returns)\n    }\n\n    pub fn set_return_hash(&mut self, returns_hasher: ArgsHasher) {\n        returns::pack_returns(returns_hasher.fields);\n        self.return_hash = returns_hasher.hash();\n    }\n\n    // Keep private or ask the AVM team if you want to change it.\n    fn push_nullifier_read_request(&mut self, nullifier: Field) {\n        let request = ReadRequest { value: nullifier, counter: self.side_effect_counter };\n        self.nullifier_read_requests.push(request);\n        self.side_effect_counter = self.side_effect_counter + 1;\n    }\n\n    // Keep private or ask the AVM team if you want to change it.\n    fn push_nullifier_non_existent_read_request(&mut self, nullifier: Field) {\n        let request = ReadRequest { value: nullifier, counter: self.side_effect_counter };\n        self.nullifier_non_existent_read_requests.push(request);\n        self.side_effect_counter = self.side_effect_counter + 1;\n    }\n\n    pub fn finish(self) -> PublicCircuitPublicInputs {\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n        let unencrypted_logs_hash = 0;\n        let unencrypted_log_preimages_length = 0;\n\n        // Compute the public call stack hashes\n        let pub_circuit_pub_inputs = PublicCircuitPublicInputs {\n            call_context: self.inputs.call_context, // Done\n            args_hash: self.args_hash, // Done\n            nullifier_read_requests: self.nullifier_read_requests.storage,\n            nullifier_non_existent_read_requests: self.nullifier_non_existent_read_requests.storage,\n            contract_storage_update_requests: self.contract_storage_update_requests.storage,\n            contract_storage_reads: self.contract_storage_reads.storage,\n            returns_hash: self.return_hash,\n            new_note_hashes: self.new_note_hashes.storage,\n            new_nullifiers: self.new_nullifiers.storage,\n            public_call_stack_hashes: self.public_call_stack_hashes.storage,\n            new_l2_to_l1_msgs: self.new_l2_to_l1_msgs.storage,\n            start_side_effect_counter: self.inputs.start_side_effect_counter,\n            end_side_effect_counter: self.side_effect_counter,\n            unencrypted_logs_hash,\n            unencrypted_log_preimages_length,\n            historical_header: self.inputs.historical_header,\n            prover_address: self.prover_address,\n            revert_code: 0,\n            gas_left: self.inputs.call_context.gas_left\n        };\n        pub_circuit_pub_inputs\n    }\n}\n\nimpl ContextInterface for PublicContext {\n    fn msg_sender(self) -> AztecAddress {\n        self.inputs.call_context.msg_sender\n    }\n\n    fn this_address(self) -> AztecAddress {\n        self.inputs.call_context.storage_contract_address\n    }\n\n    fn this_portal_address(self) -> EthAddress {\n        self.inputs.call_context.portal_contract_address\n    }\n\n    fn chain_id(self) -> Field {\n        self.inputs.public_global_variables.chain_id\n    }\n\n    fn version(self) -> Field {\n        self.inputs.public_global_variables.version\n    }\n\n    fn selector(self) -> FunctionSelector {\n        self.inputs.call_context.function_selector\n    }\n\n    fn get_args_hash(self) -> Field {\n        self.args_hash\n    }\n\n    fn push_new_note_hash(&mut self, note_hash: Field) {\n        let side_effect = SideEffect { value: note_hash, counter: self.side_effect_counter };\n        self.new_note_hashes.push(side_effect);\n        self.side_effect_counter = self.side_effect_counter + 1;\n    }\n\n    fn push_new_nullifier(&mut self, nullifier: Field, _nullified_commitment: Field) {\n        let side_effect = SideEffectLinkedToNoteHash {\n            value: nullifier,\n            note_hash: 0, // cannot nullify pending notes in public context\n            counter: self.side_effect_counter\n        };\n        self.new_nullifiers.push(side_effect);\n        self.side_effect_counter = self.side_effect_counter + 1;\n    }\n}\n\nimpl PublicContextInterface for PublicContext {\n    fn block_number(self) -> Field {\n        self.inputs.public_global_variables.block_number\n    }\n\n    fn timestamp(self) -> u64 {\n        self.inputs.public_global_variables.timestamp\n    }\n\n    fn coinbase(self) -> EthAddress {\n        self.inputs.public_global_variables.coinbase\n    }\n\n    fn fee_recipient(self) -> AztecAddress {\n        self.inputs.public_global_variables.fee_recipient\n    }\n\n    fn fee_per_da_gas(self) -> Field {\n        self.inputs.public_global_variables.gas_fees.fee_per_da_gas\n    }\n\n    fn fee_per_l1_gas(self) -> Field {\n        self.inputs.public_global_variables.gas_fees.fee_per_l1_gas\n    }\n\n    fn fee_per_l2_gas(self) -> Field {\n        self.inputs.public_global_variables.gas_fees.fee_per_l2_gas\n    }\n\n    fn nullifier_exists(self, unsiloed_nullifier: Field, address: AztecAddress) -> bool {\n        // Current public can only check for settled nullifiers, so we always silo.\n        let siloed_nullifier = silo_nullifier(address, unsiloed_nullifier);\n        nullifier_exists_oracle(siloed_nullifier) == 1\n    }\n\n    fn message_portal(&mut self, recipient: EthAddress, content: Field) {\n        let message = L2ToL1Message { recipient, content };\n        self.new_l2_to_l1_msgs.push(message);\n    }\n\n    // We can consume message with a secret in public context because the message cannot be modified and therefore\n    // there is no front-running risk (e.g. somebody could front run you to claim your tokens to your address).\n    fn consume_l1_to_l2_message(&mut self, content: Field, secret: Field, sender: EthAddress) {\n        let this = (*self).this_address();\n        let nullifier = process_l1_to_l2_message(\n            self.historical_header.state.l1_to_l2_message_tree.root,\n            this,\n            sender,\n            self.chain_id(),\n            self.version(),\n            content,\n            secret\n        );\n\n        // Push nullifier (and the \"commitment\" corresponding to this can be \"empty\")\n        self.push_new_nullifier(nullifier, 0)\n    }\n\n    fn accumulate_encrypted_logs<N>(&mut self, log: [Field; N]) {\n        let _void1 = self;\n        let _void2 = log;\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n    }\n\n    fn accumulate_unencrypted_logs<T>(&mut self, log: T) {\n        let _void1 = self;\n        let _void2 = log;\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n    }\n\n    fn call_public_function<ARGS_COUNT, RETURNS_COUNT>(\n        self: &mut Self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT],\n        _gas: GasOpts\n    ) -> FunctionReturns<RETURNS_COUNT> {\n        let args_hash = hash_args_array(args);\n        assert(args_hash == arguments::pack_arguments(args));\n        self.call_public_function_with_packed_args(contract_address, function_selector, args_hash, false, false)\n    }\n\n    fn static_call_public_function<ARGS_COUNT, RETURNS_COUNT>(\n        self: &mut Self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT],\n        _gas: GasOpts\n    ) -> FunctionReturns<RETURNS_COUNT> {\n        let args_hash = hash_args_array(args);\n        assert(args_hash == arguments::pack_arguments(args));\n        self.call_public_function_with_packed_args(contract_address, function_selector, args_hash, true, false)\n    }\n\n    fn delegate_call_public_function<ARGS_COUNT, RETURNS_COUNT>(\n        self: &mut Self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT]\n    ) -> FunctionReturns<RETURNS_COUNT> {\n        let args_hash = hash_args_array(args);\n        assert(args_hash == arguments::pack_arguments(args));\n        self.call_public_function_with_packed_args(contract_address, function_selector, args_hash, false, true)\n    }\n}\n\nimpl Empty for PublicContext {\n    fn empty() -> Self {\n        PublicContext {\n            inputs: PublicContextInputs::empty(),\n            side_effect_counter: 0 as u32,\n            args_hash : 0,\n            return_hash : 0,\n            nullifier_read_requests: BoundedVec::new(),\n            nullifier_non_existent_read_requests: BoundedVec::new(),\n            contract_storage_update_requests: BoundedVec::new(),\n            contract_storage_reads: BoundedVec::new(),\n            public_call_stack_hashes: BoundedVec::new(),\n            new_note_hashes: BoundedVec::new(),\n            new_nullifiers: BoundedVec::new(),\n            new_l2_to_l1_msgs: BoundedVec::new(),\n            unencrypted_logs_hash: 0,\n            unencrypted_logs_preimages_length: 0,\n            historical_header: Header::empty(),\n            prover_address: AztecAddress::zero(),\n        }\n    }\n}\n\n#[oracle(checkNullifierExists)]\nfn nullifier_exists_oracle(nullifier: Field) -> Field {}\n\nstruct FunctionReturns<N> {\n    values: [Field; N]\n}\n\nimpl<N> FunctionReturns<N> {\n    pub fn new(values: [Field; N]) -> FunctionReturns<N> {\n        FunctionReturns { values }\n    }\n\n    pub fn assert_empty(returns: FunctionReturns<0>) {\n        assert(returns.values.len() == 0);\n    }\n\n    pub fn raw(self) -> [Field; N] {\n        self.values\n    }\n\n    pub fn deserialize_into<T>(self) -> T where T: Deserialize<N> {\n        Deserialize::deserialize(self.raw())\n    }\n}\n","path":"/Users/jack-sw/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.35.1/noir-projects/aztec-nr/aztec/src/context/public_context.nr"},"72":{"source":"use crate::{\n    context::{inputs::PrivateContextInputs, interface::ContextInterface},\n    key::nullifier_key::validate_nullifier_key_against_address, messaging::process_l1_to_l2_message,\n    hash::{hash_args_array, ArgsHasher},\n    oracle::{\n    arguments, returns, call_private_function::call_private_function_internal,\n    enqueue_public_function_call::enqueue_public_function_call_internal, context::get_portal_address,\n    header::get_header_at, nullifier_key::{get_nullifier_key_pair, NullifierKeyPair}\n}\n};\nuse dep::protocol_types::{\n    abis::{\n    gas::Gas, call_context::CallContext, function_data::FunctionData,\n    function_selector::FunctionSelector, max_block_number::MaxBlockNumber,\n    nullifier_key_validation_request::NullifierKeyValidationRequest,\n    private_call_stack_item::PrivateCallStackItem,\n    private_circuit_public_inputs::PrivateCircuitPublicInputs,\n    public_call_stack_item::PublicCallStackItem,\n    public_circuit_public_inputs::PublicCircuitPublicInputs, read_request::ReadRequest,\n    side_effect::{SideEffect, SideEffectLinkedToNoteHash}\n},\n    address::{AztecAddress, EthAddress},\n    constants::{\n    MAX_NEW_NOTE_HASHES_PER_CALL, MAX_NEW_L2_TO_L1_MSGS_PER_CALL, MAX_NEW_NULLIFIERS_PER_CALL,\n    MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL, MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL,\n    MAX_PUBLIC_DATA_READS_PER_CALL, MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL,\n    MAX_NOTE_HASH_READ_REQUESTS_PER_CALL, MAX_NULLIFIER_READ_REQUESTS_PER_CALL,\n    MAX_NULLIFIER_NON_EXISTENT_READ_REQUESTS_PER_CALL, MAX_NULLIFIER_KEY_VALIDATION_REQUESTS_PER_CALL\n},\n    contrakt::{storage_read::StorageRead, storage_update_request::StorageUpdateRequest},\n    grumpkin_private_key::GrumpkinPrivateKey, header::Header,\n    messaging::l2_to_l1_message::L2ToL1Message, utils::reader::Reader,\n    traits::{is_empty, Deserialize, Empty}\n};\n\n// TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n// use dep::std::collections::vec::Vec;\n\n// When finished, one can call .finish() to convert back to the abi\nstruct PrivateContext {\n    // docs:start:private-context\n    inputs: PrivateContextInputs,\n    side_effect_counter: u32,\n\n    min_revertible_side_effect_counter: u32,\n\n    args_hash : Field,\n    return_hash : Field,\n\n    max_block_number: MaxBlockNumber,\n\n    note_hash_read_requests: BoundedVec<SideEffect, MAX_NOTE_HASH_READ_REQUESTS_PER_CALL>,\n    nullifier_read_requests: BoundedVec<ReadRequest, MAX_NULLIFIER_READ_REQUESTS_PER_CALL>,\n    nullifier_key_validation_requests: BoundedVec<NullifierKeyValidationRequest, MAX_NULLIFIER_KEY_VALIDATION_REQUESTS_PER_CALL>,\n\n    new_note_hashes: BoundedVec<SideEffect, MAX_NEW_NOTE_HASHES_PER_CALL>,\n    new_nullifiers: BoundedVec<SideEffectLinkedToNoteHash, MAX_NEW_NULLIFIERS_PER_CALL>,\n\n    private_call_stack_hashes : BoundedVec<Field, MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL>,\n    public_call_stack_hashes : BoundedVec<Field, MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL>,\n    new_l2_to_l1_msgs : BoundedVec<L2ToL1Message, MAX_NEW_L2_TO_L1_MSGS_PER_CALL>,\n    // docs:end:private-context\n\n    // Header of a block whose state is used during private execution (not the block the transaction is included in).\n    historical_header: Header,\n\n    // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n    // encrypted_logs_preimages: Vec<Field>,\n    // unencrypted_logs_preimages: Vec<Field>,\n\n    nullifier_key: Option<NullifierKeyPair>,\n}\n\nimpl ContextInterface for PrivateContext {\n    fn msg_sender(self) -> AztecAddress {\n        self.inputs.call_context.msg_sender\n    }\n\n    fn this_address(self) -> AztecAddress {\n        self.inputs.call_context.storage_contract_address\n    }\n\n    fn this_portal_address(self) -> EthAddress {\n        self.inputs.call_context.portal_contract_address\n    }\n\n    fn chain_id(self) -> Field {\n        self.inputs.private_global_variables.chain_id\n    }\n\n    fn version(self) -> Field {\n        self.inputs.private_global_variables.version\n    }\n\n    fn selector(self) -> FunctionSelector {\n        self.inputs.call_context.function_selector\n    }\n\n    fn get_args_hash(self) -> Field {\n        self.args_hash\n    }\n\n    fn push_new_note_hash(&mut self, note_hash: Field) {\n        let side_effect = SideEffect { value: note_hash, counter: self.side_effect_counter };\n        self.new_note_hashes.push(side_effect);\n        self.side_effect_counter = self.side_effect_counter + 1;\n    }\n\n    fn push_new_nullifier(&mut self, nullifier: Field, nullified_commitment: Field) {\n        let side_effect = SideEffectLinkedToNoteHash { value: nullifier, note_hash: nullified_commitment, counter: self.side_effect_counter };\n        self.new_nullifiers.push(side_effect);\n        self.side_effect_counter = self.side_effect_counter + 1;\n    }\n}\n\nimpl PrivateContext {\n    pub fn new(inputs: PrivateContextInputs, args_hash: Field) -> PrivateContext {\n        let side_effect_counter = inputs.start_side_effect_counter;\n        let mut min_revertible_side_effect_counter = 0;\n        if is_empty(inputs.call_context.msg_sender) {\n            min_revertible_side_effect_counter = side_effect_counter;\n        }\n        PrivateContext {\n            inputs,\n            side_effect_counter,\n            min_revertible_side_effect_counter,\n            args_hash,\n            return_hash: 0,\n            max_block_number: MaxBlockNumber::empty(),\n            note_hash_read_requests: BoundedVec::new(),\n            nullifier_read_requests: BoundedVec::new(),\n            nullifier_key_validation_requests: BoundedVec::new(),\n            new_note_hashes: BoundedVec::new(),\n            new_nullifiers: BoundedVec::new(),\n            historical_header: inputs.historical_header,\n            private_call_stack_hashes: BoundedVec::new(),\n            public_call_stack_hashes: BoundedVec::new(),\n            new_l2_to_l1_msgs: BoundedVec::new(),\n            // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n            // encrypted_logs_preimages: Vec::new(),\n            // unencrypted_logs_preimages: Vec::new(),\n            nullifier_key: Option::none()\n        }\n    }\n\n    // Returns the header of a block whose state is used during private execution (not the block the transaction is\n    // included in).\n    fn get_header(self) -> Header {\n        self.historical_header\n    }\n\n    // Returns the header of an arbitrary block whose block number is less than or equal to the block number\n    // of historical header.\n    pub fn get_header_at(self, block_number: u32) -> Header {\n        get_header_at(block_number, self)\n    }\n\n    pub fn set_return_hash(&mut self, returns_hasher: ArgsHasher) {\n        returns::pack_returns(returns_hasher.fields);\n        self.return_hash = returns_hasher.hash();\n    }\n\n    pub fn finish(self) -> PrivateCircuitPublicInputs {\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n        let encrypted_logs_hash = 0;\n        let unencrypted_logs_hash = 0;\n        let encrypted_log_preimages_length = 0;\n        let unencrypted_log_preimages_length = 0;\n\n        let priv_circuit_pub_inputs = PrivateCircuitPublicInputs {\n            call_context: self.inputs.call_context,\n            args_hash: self.args_hash,\n            returns_hash: self.return_hash,\n            min_revertible_side_effect_counter: self.min_revertible_side_effect_counter,\n            max_block_number: self.max_block_number,\n            note_hash_read_requests: self.note_hash_read_requests.storage,\n            nullifier_read_requests: self.nullifier_read_requests.storage,\n            nullifier_key_validation_requests: self.nullifier_key_validation_requests.storage,\n            new_note_hashes: self.new_note_hashes.storage,\n            new_nullifiers: self.new_nullifiers.storage,\n            private_call_stack_hashes: self.private_call_stack_hashes.storage,\n            public_call_stack_hashes: self.public_call_stack_hashes.storage,\n            new_l2_to_l1_msgs: self.new_l2_to_l1_msgs.storage,\n            start_side_effect_counter: self.inputs.start_side_effect_counter,\n            end_side_effect_counter: self.side_effect_counter,\n            encrypted_logs_hash,\n            unencrypted_logs_hash,\n            encrypted_log_preimages_length,\n            unencrypted_log_preimages_length,\n            historical_header: self.historical_header,\n            chain_id: self.inputs.private_global_variables.chain_id,\n            version: self.inputs.private_global_variables.version\n        };\n\n        priv_circuit_pub_inputs\n    }\n\n    pub fn capture_min_revertible_side_effect_counter(&mut self) {\n        self.min_revertible_side_effect_counter = self.side_effect_counter;\n    }\n\n    // docs:start:max-block-number\n    pub fn set_tx_max_block_number(&mut self, max_block_number: u32) {\n        // docs:end:max-block-number\n        self.max_block_number = MaxBlockNumber::min_with_u32(self.max_block_number, max_block_number);\n    }\n\n    pub fn push_note_hash_read_request(&mut self, note_hash: Field) {\n        let side_effect = SideEffect { value: note_hash, counter: self.side_effect_counter };\n        self.note_hash_read_requests.push(side_effect);\n        self.side_effect_counter = self.side_effect_counter + 1;\n    }\n\n    pub fn push_nullifier_read_request(&mut self, nullifier: Field) {\n        let request = ReadRequest { value: nullifier, counter: self.side_effect_counter };\n        self.nullifier_read_requests.push(request);\n        self.side_effect_counter = self.side_effect_counter + 1;\n    }\n\n    pub fn request_nullifier_secret_key(&mut self, account: AztecAddress) -> GrumpkinPrivateKey {\n        let key_pair = if self.nullifier_key.is_none() {\n            let key_pair = get_nullifier_key_pair(account);\n            validate_nullifier_key_against_address(account, key_pair.public_key);\n            let request = NullifierKeyValidationRequest { public_key: key_pair.public_key, secret_key: key_pair.secret_key };\n            self.nullifier_key_validation_requests.push(request);\n            self.nullifier_key = Option::some(key_pair);\n            key_pair\n        } else {\n            let key_pair = self.nullifier_key.unwrap_unchecked();\n            // If MAX_NULLIFIER_KEY_VALIDATION_REQUESTS_PER_CALL is larger than 1, need to update the way the key pair is cached.\n            assert(MAX_NULLIFIER_KEY_VALIDATION_REQUESTS_PER_CALL == 1);\n            assert(\n                key_pair.account == account, \"Cannot query nullifier key for more than one account per call\"\n            );\n            key_pair\n        };\n        key_pair.secret_key\n    }\n\n    // docs:start:context_message_portal\n    pub fn message_portal(&mut self, recipient: EthAddress, content: Field) {\n        // docs:end:context_message_portal\n        let message = L2ToL1Message { recipient, content };\n        self.new_l2_to_l1_msgs.push(message);\n    }\n\n    // docs:start:context_consume_l1_to_l2_message\n    // docs:start:consume_l1_to_l2_message\n    pub fn consume_l1_to_l2_message(&mut self, content: Field, secret: Field, sender: EthAddress) {\n        // docs:end:context_consume_l1_to_l2_message\n        let nullifier = process_l1_to_l2_message(\n            self.historical_header.state.l1_to_l2_message_tree.root,\n            self.this_address(),\n            sender,\n            self.chain_id(),\n            self.version(),\n            content,\n            secret\n        );\n\n        // Push nullifier (and the \"commitment\" corresponding to this can be \"empty\")\n        self.push_new_nullifier(nullifier, 0)\n    }\n    // docs:end:consume_l1_to_l2_message\n\n    pub fn accumulate_encrypted_logs<N>(&mut self, log: [Field; N]) {\n        let _void1 = self.inputs;\n        let _void2 = log;\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n    }\n\n    pub fn accumulate_unencrypted_logs<T>(&mut self, log: T) {\n        let _void1 = self.inputs;\n        let _void2 = log;\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n    }\n\n    pub fn call_private_function<ARGS_COUNT>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT]\n    ) -> PackedReturns {\n        let args_hash = hash_args_array(args);\n        assert(args_hash == arguments::pack_arguments(args));\n        self.call_private_function_with_packed_args(contract_address, function_selector, args_hash, false, false)\n    }\n\n    pub fn static_call_private_function<ARGS_COUNT>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT]\n    ) -> PackedReturns {\n        let args_hash = hash_args_array(args);\n        assert(args_hash == arguments::pack_arguments(args));\n        self.call_private_function_with_packed_args(contract_address, function_selector, args_hash, true, false)\n    }\n\n    pub fn delegate_call_private_function<ARGS_COUNT>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT]\n    ) -> PackedReturns {\n        let args_hash = hash_args_array(args);\n        assert(args_hash == arguments::pack_arguments(args));\n        self.call_private_function_with_packed_args(contract_address, function_selector, args_hash, false, true)\n    }\n\n    pub fn call_private_function_no_args<RETURNS_COUNT>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector\n    ) -> PackedReturns {\n        self.call_private_function_with_packed_args(contract_address, function_selector, 0, false, false)\n    }\n\n    pub fn static_call_private_function_no_args<RETURNS_COUNT>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector\n    ) -> PackedReturns {\n        self.call_private_function_with_packed_args(contract_address, function_selector, 0, true, false)\n    }\n\n    pub fn delegate_call_private_function_no_args<ARGS_COUNT>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector\n    ) -> PackedReturns {\n        self.call_private_function_with_packed_args(contract_address, function_selector, 0, false, true)\n    }\n\n    pub fn call_private_function_with_packed_args<RETURNS_COUNT>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args_hash: Field,\n        is_static_call: bool,\n        is_delegate_call: bool\n    ) -> PackedReturns {\n        let mut is_static_call = is_static_call | self.inputs.call_context.is_static_call;\n        let item = call_private_function_internal(\n            contract_address,\n            function_selector,\n            args_hash,\n            self.side_effect_counter,\n            is_static_call,\n            is_delegate_call\n        );\n\n        assert_eq(item.public_inputs.call_context.side_effect_counter, self.side_effect_counter);\n        assert_eq(item.public_inputs.start_side_effect_counter, self.side_effect_counter);\n        self.side_effect_counter = item.public_inputs.end_side_effect_counter + 1;\n\n        // TODO (fees) figure out why this crashes the prover and enable it\n        // we need this in order to pay fees inside child call contexts\n        // assert(\n        //     (item.public_inputs.min_revertible_side_effect_counter == 0 as u32)\n        //     | (item.public_inputs.min_revertible_side_effect_counter\n        //         > self.min_revertible_side_effect_counter)\n        // );\n\n        // if item.public_inputs.min_revertible_side_effect_counter\n        //     > self.min_revertible_side_effect_counter {\n        //     self.min_revertible_side_effect_counter = item.public_inputs.min_revertible_side_effect_counter;\n        // }\n\n        assert(contract_address.eq(item.contract_address));\n        assert(function_selector.eq(item.function_data.selector));\n\n        assert(args_hash == item.public_inputs.args_hash);\n\n        // Assert that the call context of the enqueued call generated by the oracle matches our request.\n        assert(item.public_inputs.call_context.is_delegate_call == is_delegate_call);\n        assert(item.public_inputs.call_context.is_static_call == is_static_call);\n\n        if (is_delegate_call) {\n            // For delegate calls, we also constrain the execution context address for the nested call to be equal to our address.\n            assert(\n                item.public_inputs.call_context.storage_contract_address.eq(self.inputs.call_context.storage_contract_address)\n            );\n            assert(item.public_inputs.call_context.msg_sender.eq(self.inputs.call_context.msg_sender));\n        } else {\n            // For non-delegate calls, we also constrain the execution context address for the nested call to be equal to the address we called.\n            assert(item.public_inputs.call_context.storage_contract_address.eq(contract_address));\n            assert(\n                item.public_inputs.call_context.msg_sender.eq(self.inputs.call_context.storage_contract_address)\n            );\n        }\n\n        self.private_call_stack_hashes.push(item.hash());\n\n        PackedReturns::new(item.public_inputs.returns_hash)\n    }\n\n    pub fn call_public_function<ARGS_COUNT>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT]\n    ) {\n        let args_hash = hash_args_array(args);\n        assert(args_hash == arguments::pack_arguments(args));\n        self.call_public_function_with_packed_args(contract_address, function_selector, args_hash, false, false)\n    }\n\n    pub fn static_call_public_function<ARGS_COUNT>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT]\n    ) {\n        let args_hash = hash_args_array(args);\n        assert(args_hash == arguments::pack_arguments(args));\n        self.call_public_function_with_packed_args(contract_address, function_selector, args_hash, true, false)\n    }\n\n    pub fn delegate_call_public_function<ARGS_COUNT>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT]\n    ) {\n        let args_hash = hash_args_array(args);\n        assert(args_hash == arguments::pack_arguments(args));\n        self.call_public_function_with_packed_args(contract_address, function_selector, args_hash, false, true)\n    }\n\n    pub fn call_public_function_no_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector\n    ) {\n        self.call_public_function_with_packed_args(contract_address, function_selector, 0, false, false)\n    }\n\n    pub fn static_call_public_function_no_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector\n    ) {\n        self.call_public_function_with_packed_args(contract_address, function_selector, 0, true, false)\n    }\n\n    pub fn delegate_call_public_function_no_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector\n    ) {\n        self.call_public_function_with_packed_args(contract_address, function_selector, 0, false, true)\n    }\n\n    pub fn call_public_function_with_packed_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args_hash: Field,\n        is_static_call: bool,\n        is_delegate_call: bool\n    ) {\n        let mut is_static_call = is_static_call | self.inputs.call_context.is_static_call;\n        let fields = enqueue_public_function_call_internal(\n            contract_address,\n            function_selector,\n            args_hash,\n            self.side_effect_counter,\n            is_static_call,\n            is_delegate_call\n        );\n\n        let mut reader = Reader::new(fields);\n\n        // Note: Not using PublicCirclePublicInputs::deserialize here, because everything below args_hash is 0 and\n        // there is no more data in fields because there is only ENQUEUE_PUBLIC_FUNCTION_CALL_RETURN_SIZE fields!\n        let item = PublicCallStackItem {\n            contract_address: AztecAddress::from_field(reader.read()),\n            function_data: reader.read_struct(FunctionData::deserialize),\n            public_inputs: PublicCircuitPublicInputs {\n                call_context: reader.read_struct(CallContext::deserialize),\n                args_hash: reader.read(),\n                returns_hash: 0,\n                nullifier_read_requests: [ReadRequest::empty(); MAX_NULLIFIER_READ_REQUESTS_PER_CALL],\n                nullifier_non_existent_read_requests: [ReadRequest::empty(); MAX_NULLIFIER_NON_EXISTENT_READ_REQUESTS_PER_CALL],\n                contract_storage_update_requests: [StorageUpdateRequest::empty(); MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL],\n                contract_storage_reads: [StorageRead::empty(); MAX_PUBLIC_DATA_READS_PER_CALL],\n                public_call_stack_hashes: [0; MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL],\n                new_note_hashes: [SideEffect::empty(); MAX_NEW_NOTE_HASHES_PER_CALL],\n                new_nullifiers: [SideEffectLinkedToNoteHash::empty(); MAX_NEW_NULLIFIERS_PER_CALL],\n                new_l2_to_l1_msgs: [L2ToL1Message::empty(); MAX_NEW_L2_TO_L1_MSGS_PER_CALL],\n                start_side_effect_counter: 0,\n                end_side_effect_counter: 0,\n                unencrypted_logs_hash: 0,\n                unencrypted_log_preimages_length: 0,\n                historical_header: Header::empty(),\n                prover_address: AztecAddress::zero(),\n                revert_code: 0,\n                gas_left: Gas::empty()\n            },\n            is_execution_request: true\n        };\n        reader.finish();\n\n        assert(contract_address.eq(item.contract_address));\n        assert(function_selector.eq(item.function_data.selector));\n\n        assert_eq(item.public_inputs.call_context.side_effect_counter, self.side_effect_counter);\n        // We increment the sideffect counter by one, to account for the call itself being a side effect.\n        self.side_effect_counter = self.side_effect_counter + 1;\n\n        assert(args_hash == item.public_inputs.args_hash);\n\n        // Assert that the call context of the enqueued call generated by the oracle matches our request.\n        assert(item.public_inputs.call_context.is_delegate_call == is_delegate_call);\n        assert(item.public_inputs.call_context.is_static_call == is_static_call);\n\n        if (is_delegate_call) {\n            // For delegate calls, we also constrain the execution context address for the nested call to be equal to our address.\n            assert(\n                item.public_inputs.call_context.storage_contract_address.eq(self.inputs.call_context.storage_contract_address)\n            );\n            assert(item.public_inputs.call_context.msg_sender.eq(self.inputs.call_context.msg_sender));\n        } else {\n            // For non-delegate calls, we also constrain the execution context address for the nested call to be equal to the address we called.\n            assert(item.public_inputs.call_context.storage_contract_address.eq(contract_address));\n            assert(\n                item.public_inputs.call_context.msg_sender.eq(self.inputs.call_context.storage_contract_address)\n            );\n        }\n\n        self.public_call_stack_hashes.push(item.hash());\n    }\n}\n\nimpl Empty for PrivateContext {\n    fn empty() -> Self {\n        PrivateContext {\n            inputs: PrivateContextInputs::empty(),\n            side_effect_counter: 0 as u32,\n            min_revertible_side_effect_counter: 0 as u32,\n            args_hash : 0,\n            return_hash : 0,\n            max_block_number: MaxBlockNumber::empty(),\n            note_hash_read_requests: BoundedVec::new(),\n            nullifier_read_requests: BoundedVec::new(),\n            nullifier_key_validation_requests: BoundedVec::new(),\n            new_note_hashes: BoundedVec::new(),\n            new_nullifiers: BoundedVec::new(),\n            private_call_stack_hashes : BoundedVec::new(),\n            public_call_stack_hashes : BoundedVec::new(),\n            new_l2_to_l1_msgs : BoundedVec::new(),\n            historical_header: Header::empty(),\n            nullifier_key: Option::none(),\n        }\n    }\n}\n\nstruct PackedReturns {\n  packed_returns: Field,\n}\n\nimpl PackedReturns {\n    pub fn new(packed_returns: Field) -> Self {\n        PackedReturns { packed_returns }\n    }\n\n    pub fn assert_empty(self) {\n        assert_eq(self.packed_returns, 0);\n    }\n\n    pub fn raw(self) -> Field {\n        self.packed_returns\n    }\n\n    pub fn unpack<N>(self) -> [Field; N] {\n        let unpacked: [Field; N] = returns::unpack_returns(self.packed_returns);\n        assert_eq(self.packed_returns, hash_args_array(unpacked));\n        unpacked\n    }\n\n    pub fn unpack_into<T, N>(self) -> T where T: Deserialize<N> {\n        let unpacked: [Field; N] = self.unpack();\n        Deserialize::deserialize(unpacked)\n    }\n}\n","path":"/Users/jack-sw/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.35.1/noir-projects/aztec-nr/aztec/src/context/private_context.nr"},"77":{"source":"use dep::protocol_types::{abis::function_selector::FunctionSelector, address::AztecAddress};\n\n#[oracle(callPublicFunction)]\nfn call_public_function_oracle<RETURNS_COUNT>(\n    _contract_address: AztecAddress,\n    _function_selector: FunctionSelector,\n    _args_hash: Field,\n    _side_effect_counter: u32,\n    _is_static_call: bool,\n    _is_delegate_call: bool\n) -> [Field; RETURNS_COUNT] {}\n\nunconstrained pub fn call_public_function_internal<RETURNS_COUNT>(\n    contract_address: AztecAddress,\n    function_selector: FunctionSelector,\n    args_hash: Field,\n    side_effect_counter: u32,\n    is_static_call: bool,\n    is_delegate_call: bool\n) -> [Field; RETURNS_COUNT] {\n    call_public_function_oracle(\n        contract_address,\n        function_selector,\n        args_hash,\n        side_effect_counter,\n        is_static_call,\n        is_delegate_call\n    )\n}\n","path":"/Users/jack-sw/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.35.1/noir-projects/aztec-nr/aztec/src/oracle/public_call.nr"},"79":{"source":"use dep::protocol_types::{\n    abis::{function_selector::FunctionSelector, private_call_stack_item::PrivateCallStackItem},\n    address::AztecAddress, constants::PRIVATE_CALL_STACK_ITEM_LENGTH\n};\n\n#[oracle(callPrivateFunction)]\nfn call_private_function_oracle(\n    _contract_address: AztecAddress,\n    _function_selector: FunctionSelector,\n    _args_hash: Field,\n    _start_side_effect_counter: u32,\n    _is_static_call: bool,\n    _is_delegate_call: bool\n) -> [Field; PRIVATE_CALL_STACK_ITEM_LENGTH] {}\n\nunconstrained pub fn call_private_function_internal(\n    contract_address: AztecAddress,\n    function_selector: FunctionSelector,\n    args_hash: Field,\n    start_side_effect_counter: u32,\n    is_static_call: bool,\n    is_delegate_call: bool\n) -> PrivateCallStackItem {\n    let fields = call_private_function_oracle(\n        contract_address,\n        function_selector,\n        args_hash,\n        start_side_effect_counter,\n        is_static_call,\n        is_delegate_call\n    );\n\n    PrivateCallStackItem::deserialize(fields)\n}\n","path":"/Users/jack-sw/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.35.1/noir-projects/aztec-nr/aztec/src/oracle/call_private_function.nr"},"80":{"source":"use crate::note::{note_header::NoteHeader, note_interface::NoteInterface};\n\nuse dep::protocol_types::{address::AztecAddress, utils::arr_copy_slice};\n\n#[oracle(notifyCreatedNote)]\nfn notify_created_note_oracle<N>(\n    _storage_slot: Field,\n    _note_type_id: Field,\n    _serialized_note: [Field; N],\n    _inner_note_hash: Field\n) -> Field {}\n\nunconstrained pub fn notify_created_note<N>(\n    storage_slot: Field,\n    note_type_id: Field,\n    serialized_note: [Field; N],\n    inner_note_hash: Field\n) -> Field {\n    notify_created_note_oracle(storage_slot, note_type_id, serialized_note, inner_note_hash)\n}\n\n#[oracle(notifyNullifiedNote)]\nfn notify_nullified_note_oracle<N>(_nullifier: Field, _inner_note_hash: Field) -> Field {}\n\nunconstrained pub fn notify_nullified_note<N>(nullifier: Field, inner_note_hash: Field) -> Field {\n    notify_nullified_note_oracle(nullifier, inner_note_hash)\n}\n\n#[oracle(getNotes)]\nfn get_notes_oracle<N, S>(\n    _storage_slot: Field,\n    _num_selects: u8,\n    _select_by_indexes: [u8; N],\n    _select_by_offsets: [u8; N],\n    _select_by_lengths: [u8; N],\n    _select_values: [Field; N],\n    _select_comparators: [u8; N],\n    _sort_by_indexes: [u8; N],\n    _sort_by_offsets: [u8; N],\n    _sort_by_lengths: [u8; N],\n    _sort_order: [u8; N],\n    _limit: u32,\n    _offset: u32,\n    _status: u8,\n    _return_size: u32,\n    _placeholder_fields: [Field; S]\n) -> [Field; S] {}\n\nunconstrained fn get_notes_oracle_wrapper<N, S>(\n    storage_slot: Field,\n    num_selects: u8,\n    select_by_indexes: [u8; N],\n    select_by_offsets: [u8; N],\n    select_by_lengths: [u8; N],\n    select_values: [Field; N],\n    select_comparators: [u8; N],\n    sort_by_indexes: [u8; N],\n    sort_by_offsets: [u8; N],\n    sort_by_lengths: [u8; N],\n    sort_order: [u8; N],\n    limit: u32,\n    offset: u32,\n    status: u8,\n    mut placeholder_fields: [Field; S]\n) -> [Field; S] {\n    let return_size = placeholder_fields.len() as u32;\n    get_notes_oracle(\n        storage_slot,\n        num_selects,\n        select_by_indexes,\n        select_by_offsets,\n        select_by_lengths,\n        select_values,\n        select_comparators,\n        sort_by_indexes,\n        sort_by_offsets,\n        sort_by_lengths,\n        sort_order,\n        limit,\n        offset,\n        status,\n        return_size,\n        placeholder_fields\n    )\n}\n\nunconstrained pub fn get_notes<Note, N, M, S, NS>(\n    storage_slot: Field,\n    num_selects: u8,\n    select_by_indexes: [u8; M],\n    select_by_offsets: [u8; M],\n    select_by_lengths: [u8; M],\n    select_values: [Field; M],\n    select_comparators: [u8; M],\n    sort_by_indexes: [u8; M],\n    sort_by_offsets: [u8; M],\n    sort_by_lengths: [u8; M],\n    sort_order: [u8; M],\n    limit: u32,\n    offset: u32,\n    status: u8,\n    mut placeholder_opt_notes: [Option<Note>; S], // TODO: Remove it and use `limit` to initialize the note array.\n    placeholder_fields: [Field; NS], // TODO: Remove it and use `limit` to initialize the note array.\n    _placeholder_note_length: [Field; N] // Turbofish hack? Compiler breaks calculating read_offset unless we add this parameter\n) -> [Option<Note>; S] where Note: NoteInterface<N> {\n    let fields = get_notes_oracle_wrapper(\n        storage_slot,\n        num_selects,\n        select_by_indexes,\n        select_by_offsets,\n        select_by_lengths,\n        select_values,\n        select_comparators,\n        sort_by_indexes,\n        sort_by_offsets,\n        sort_by_lengths,\n        sort_order,\n        limit,\n        offset,\n        status,\n        placeholder_fields\n    );\n    let num_notes = fields[0] as u64;\n    let contract_address = AztecAddress::from_field(fields[1]);\n    for i in 0..placeholder_opt_notes.len() {\n        if i < num_notes {\n            // lengths named as per typescript.\n            let return_header_length: u64 = 2; // num_notes & contract_address.\n            let extra_preimage_length: u64 = 2; // nonce & is_transient.\n            let read_offset: u64 = return_header_length + i * (N + extra_preimage_length);\n            let nonce = fields[read_offset];\n            let is_transient = fields[read_offset + 1] as bool;\n            let header = NoteHeader { contract_address, nonce, storage_slot, is_transient };\n            let serialized_note = arr_copy_slice(fields, [0; N], read_offset + 2);\n            let mut note = Note::deserialize_content(serialized_note);\n            // TODO: change this to note.set_header(header) once https://github.com/noir-lang/noir/issues/4095 is fixed\n            Note::set_header(&mut note, header);\n            placeholder_opt_notes[i] = Option::some(note);\n        };\n    }\n    placeholder_opt_notes\n}\n\n// Only ever use this in private!\n#[oracle(checkNullifierExists)]\nfn check_nullifier_exists_oracle(_inner_nullifier: Field) -> Field {}\n\n// Only ever use this in private!\nunconstrained pub fn check_nullifier_exists(inner_nullifier: Field) -> bool {\n    check_nullifier_exists_oracle(inner_nullifier) == 1\n}\n","path":"/Users/jack-sw/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.35.1/noir-projects/aztec-nr/aztec/src/oracle/notes.nr"},"81":{"source":"#[oracle(packReturns)]\nfn pack_returns_oracle<N>(_returns: [Field]) -> Field {}\n\nunconstrained pub fn pack_returns(returns: [Field]) {\n    let _unused = pack_returns_oracle(returns);\n}\n\n#[oracle(unpackReturns)]\nfn unpack_returns_oracle<N>(_return_hash: Field) -> [Field; N] {}\n\nunconstrained pub fn unpack_returns<N>(return_hash: Field) -> [Field; N] {\n    unpack_returns_oracle(return_hash)\n}\n","path":"/Users/jack-sw/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.35.1/noir-projects/aztec-nr/aztec/src/oracle/returns.nr"},"82":{"source":"use dep::protocol_types::{\n    abis::function_selector::FunctionSelector, address::AztecAddress,\n    constants::ENQUEUE_PUBLIC_FUNCTION_CALL_RETURN_LENGTH\n};\n\n#[oracle(enqueuePublicFunctionCall)]\nfn enqueue_public_function_call_oracle(\n    _contract_address: AztecAddress,\n    _function_selector: FunctionSelector,\n    _args_hash: Field,\n    _side_effect_counter: u32,\n    _is_static_call: bool,\n    _is_delegate_call: bool\n) -> [Field; ENQUEUE_PUBLIC_FUNCTION_CALL_RETURN_LENGTH] {}\n\nunconstrained pub fn enqueue_public_function_call_internal(\n    contract_address: AztecAddress,\n    function_selector: FunctionSelector,\n    args_hash: Field,\n    side_effect_counter: u32,\n    is_static_call: bool,\n    is_delegate_call: bool\n) -> [Field; ENQUEUE_PUBLIC_FUNCTION_CALL_RETURN_LENGTH] {\n    enqueue_public_function_call_oracle(\n        contract_address,\n        function_selector,\n        args_hash,\n        side_effect_counter,\n        is_static_call,\n        is_delegate_call\n    )\n}\n","path":"/Users/jack-sw/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.35.1/noir-projects/aztec-nr/aztec/src/oracle/enqueue_public_function_call.nr"},"83":{"source":"#[oracle(packArguments)]\nfn pack_arguments_oracle<N>(_args: [Field; N]) -> Field {}\n\n/// - Pack arguments will notify the simulator that these arguments will be used later at\n///   some point in the call. \n/// - When the external call is made later, the simulator will know what the values unpack to.\n/// - This oracle will not be required in public vm functions, as the vm will keep track of arguments \n///   itself.\nunconstrained pub fn pack_arguments<N>(args: [Field; N]) -> Field {\n    pack_arguments_oracle(args)\n}\n","path":"/Users/jack-sw/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.35.1/noir-projects/aztec-nr/aztec/src/oracle/arguments.nr"},"84":{"source":"use dep::protocol_types::{address::{AztecAddress, PartialAddress, PublicKeysHash}, grumpkin_point::GrumpkinPoint};\n\n#[oracle(getPublicKeyAndPartialAddress)]\nfn get_public_key_and_partial_address_oracle(_address: AztecAddress) -> [Field; 3] {}\n\nunconstrained fn get_public_key_and_partial_address_internal(address: AztecAddress) -> [Field; 3] {\n    get_public_key_and_partial_address_oracle(address)\n}\n\npub fn get_public_key(address: AztecAddress) -> GrumpkinPoint {\n    let result = get_public_key_and_partial_address_internal(address);\n    let pub_key = GrumpkinPoint::new(result[0], result[1]);\n    let partial_address = PartialAddress::from_field(result[2]);\n\n    let calculated_address = AztecAddress::compute(PublicKeysHash::compute(pub_key), partial_address);\n    assert(calculated_address.eq(address));\n\n    pub_key\n}\n","path":"/Users/jack-sw/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.35.1/noir-projects/aztec-nr/aztec/src/oracle/get_public_key.nr"},"85":{"source":"use dep::protocol_types::traits::{Deserialize, Serialize};\n\n#[oracle(storageRead)]\nfn storage_read_oracle<N>(_storage_slot: Field, _number_of_elements: Field) -> [Field; N] {}\n\nunconstrained fn storage_read_oracle_wrapper<N>(_storage_slot: Field) -> [Field; N] {\n    storage_read_oracle(_storage_slot, N)\n}\n\npub fn storage_read<N>(storage_slot: Field) -> [Field; N] {\n    storage_read_oracle_wrapper(storage_slot)\n}\n\n#[oracle(storageWrite)]\nfn storage_write_oracle<N>(_storage_slot: Field, _values: [Field; N]) -> [Field; N] {}\n\nunconstrained pub fn storage_write<N>(storage_slot: Field, fields: [Field; N]) {\n    let _hash = storage_write_oracle(storage_slot, fields);\n}\n","path":"/Users/jack-sw/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.35.1/noir-projects/aztec-nr/aztec/src/oracle/storage.nr"},"87":{"source":"use dep::protocol_types::{address::AztecAddress, grumpkin_point::GrumpkinPoint};\n\n// TODO: Should take encrypted data.\n#[oracle(emitEncryptedLog)]\nfn emit_encrypted_log_oracle<N>(\n    _contract_address: AztecAddress,\n    _storage_slot: Field,\n    _note_type_id: Field,\n    _encryption_pub_key: GrumpkinPoint,\n    _preimage: [Field; N]\n) -> Field {}\n\nunconstrained pub fn emit_encrypted_log<N>(\n    contract_address: AztecAddress,\n    storage_slot: Field,\n    note_type_id: Field,\n    encryption_pub_key: GrumpkinPoint,\n    preimage: [Field; N]\n) -> Field {\n    emit_encrypted_log_oracle(\n        contract_address,\n        storage_slot,\n        note_type_id,\n        encryption_pub_key,\n        preimage\n    )\n}\n\n#[oracle(emitUnencryptedLog)]\nfn emit_unencrypted_log_oracle<T>(\n    _contract_address: AztecAddress,\n    _event_selector: Field,\n    _message: T\n) -> Field {}\n\nunconstrained pub fn emit_unencrypted_log<T>(\n    contract_address: AztecAddress,\n    event_selector: Field,\n    message: T\n) -> Field {\n    // https://github.com/AztecProtocol/aztec-packages/issues/885\n    emit_unencrypted_log_oracle(contract_address, event_selector, message)\n}\n","path":"/Users/jack-sw/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.35.1/noir-projects/aztec-nr/aztec/src/oracle/logs.nr"},"90":{"source":"use dep::protocol_types::{\n    constants::PUBLIC_DATA_TREE_HEIGHT, hash::pedersen_hash,\n    public_data_tree_leaf_preimage::PublicDataTreeLeafPreimage, traits::{Hash, Serialize},\n    utils::arr_copy_slice\n};\n\nglobal LEAF_PREIMAGE_LENGTH: u64 = 4;\nglobal PUBLIC_DATA_WITNESS: Field = 45;\n\nstruct PublicDataWitness {\n    index: Field,\n    leaf_preimage: PublicDataTreeLeafPreimage,\n    path: [Field; PUBLIC_DATA_TREE_HEIGHT],\n}\n\n#[oracle(getPublicDataTreeWitness)]\nfn get_public_data_witness_oracle(\n    _block_number: u32,\n    _leaf_slot: Field\n) -> [Field; PUBLIC_DATA_WITNESS] {}\n\nunconstrained pub fn get_public_data_witness(block_number: u32, leaf_slot: Field) -> PublicDataWitness {\n    let fields = get_public_data_witness_oracle(block_number, leaf_slot);\n    PublicDataWitness {\n        index: fields[0],\n        leaf_preimage: PublicDataTreeLeafPreimage { slot: fields[1], value: fields[2], next_index: fields[3] as u64, next_slot: fields[4] },\n        path: arr_copy_slice(fields, [0; PUBLIC_DATA_TREE_HEIGHT], 1 + LEAF_PREIMAGE_LENGTH)\n    }\n}\n","path":"/Users/jack-sw/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.35.1/noir-projects/aztec-nr/aztec/src/oracle/get_public_data_witness.nr"},"91":{"source":"use dep::protocol_types::{address::AztecAddress, grumpkin_point::GrumpkinPoint, grumpkin_private_key::GrumpkinPrivateKey};\n\nstruct NullifierKeyPair {\n    account: AztecAddress,\n    public_key: GrumpkinPoint,\n    secret_key: GrumpkinPrivateKey,\n}\n\n#[oracle(getNullifierKeyPair)]\nfn get_nullifier_key_pair_oracle(_account: AztecAddress) -> [Field; 4] {}\n\nunconstrained fn get_nullifier_key_pair_internal(account: AztecAddress) -> NullifierKeyPair {\n    let result = get_nullifier_key_pair_oracle(account);\n    NullifierKeyPair {\n        account,\n        public_key: GrumpkinPoint { x: result[0], y: result[1] },\n        secret_key: GrumpkinPrivateKey { high: result[2], low: result[3] }\n    }\n}\n\npub fn get_nullifier_key_pair(account: AztecAddress) -> NullifierKeyPair {\n    get_nullifier_key_pair_internal(account)\n}\n\npub fn get_nullifier_secret_key(account: AztecAddress) -> GrumpkinPrivateKey {\n    get_nullifier_key_pair_internal(account).secret_key\n}\n","path":"/Users/jack-sw/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.35.1/noir-projects/aztec-nr/aztec/src/oracle/nullifier_key.nr"},"92":{"source":"use dep::protocol_types::{\n    address::AztecAddress, contract_instance::ContractInstance, utils::arr_copy_slice,\n    constants::CONTRACT_INSTANCE_LENGTH, utils::reader::Reader\n};\n\n#[oracle(getContractInstance)]\nfn get_contract_instance_oracle(_address: AztecAddress) -> [Field; CONTRACT_INSTANCE_LENGTH] {}\n\n// Returns a ContractInstance plus a boolean indicating whether the instance was found.\n#[oracle(avmOpcodeGetContractInstance)]\nfn get_contract_instance_oracle_avm(_address: AztecAddress) -> [Field; CONTRACT_INSTANCE_LENGTH + 1] {}\n\nunconstrained fn get_contract_instance_internal(address: AztecAddress) -> [Field; CONTRACT_INSTANCE_LENGTH] {\n    get_contract_instance_oracle(address)\n}\n\nunconstrained fn get_contract_instance_internal_avm(address: AztecAddress) -> [Field; CONTRACT_INSTANCE_LENGTH + 1] {\n    get_contract_instance_oracle_avm(address)\n}\n\npub fn get_contract_instance(address: AztecAddress) -> ContractInstance {\n    let instance = ContractInstance::deserialize(get_contract_instance_internal(address));\n    assert(instance.to_address().eq(address));\n    instance\n}\n\npub fn get_contract_instance_avm(address: AztecAddress) -> Option<ContractInstance> {\n    let mut reader = Reader::new(get_contract_instance_internal_avm(address));\n    let found = reader.read();\n    if found == 0 {\n        Option::none()\n    } else {\n        Option::some(reader.read_struct(ContractInstance::deserialize))\n    }\n}\n","path":"/Users/jack-sw/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.35.1/noir-projects/aztec-nr/aztec/src/oracle/get_contract_instance.nr"},"93":{"source":"use dep::protocol_types::{\n    abis::nullifier_leaf_preimage::{NullifierLeafPreimage, NULLIFIER_LEAF_PREIMAGE_LENGTH},\n    constants::NULLIFIER_TREE_HEIGHT, hash::pedersen_hash, utils::arr_copy_slice\n};\n\n// INDEX_LENGTH + NULLIFIER_LEAF_PREIMAGE_LENGTH + NULLIFIER_TREE_HEIGHT\nglobal NULLIFIER_MEMBERSHIP_WITNESS: Field = 24;\n\nstruct NullifierMembershipWitness {\n    index: Field,\n    leaf_preimage: NullifierLeafPreimage,\n    path: [Field; NULLIFIER_TREE_HEIGHT],\n}\n\nimpl NullifierMembershipWitness {\n    pub fn deserialize(fields: [Field; NULLIFIER_MEMBERSHIP_WITNESS]) -> Self {\n        let leaf_preimage_fields = arr_copy_slice(fields, [0; NULLIFIER_LEAF_PREIMAGE_LENGTH], 1);\n        Self {\n            index: fields[0],\n            leaf_preimage: NullifierLeafPreimage::deserialize(leaf_preimage_fields),\n            path: arr_copy_slice(\n                fields,\n                [0; NULLIFIER_TREE_HEIGHT],\n                1 + NULLIFIER_LEAF_PREIMAGE_LENGTH\n            )\n        }\n    }\n}\n\n#[oracle(getLowNullifierMembershipWitness)]\nfn get_low_nullifier_membership_witness_oracle(\n    _block_number: u32,\n    _nullifier: Field\n) -> [Field; NULLIFIER_MEMBERSHIP_WITNESS] {}\n\n// Nullifier here refers to the nullifier we are looking to get non-inclusion proof for (by proving that a lower\n// nullifier's next_value is bigger than the nullifier)\nunconstrained pub fn get_low_nullifier_membership_witness(block_number: u32, nullifier: Field) -> NullifierMembershipWitness {\n    let fields = get_low_nullifier_membership_witness_oracle(block_number, nullifier);\n    NullifierMembershipWitness::deserialize(fields)\n}\n\n#[oracle(getNullifierMembershipWitness)]\nfn get_nullifier_membership_witness_oracle(\n    _block_number: u32,\n    _nullifier: Field\n) -> [Field; NULLIFIER_MEMBERSHIP_WITNESS] {}\n\n// Nullifier here refers to the nullifier we are looking to get non-inclusion proof for (by proving that a lower\n// nullifier's next_value is bigger than the nullifier)\nunconstrained pub fn get_nullifier_membership_witness(block_number: u32, nullifier: Field) -> NullifierMembershipWitness {\n    let fields = get_nullifier_membership_witness_oracle(block_number, nullifier);\n    NullifierMembershipWitness::deserialize(fields)\n}\n","path":"/Users/jack-sw/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.35.1/noir-projects/aztec-nr/aztec/src/oracle/get_nullifier_membership_witness.nr"},"99":{"source":"mod globals;\nmod inputs;\n\nmod private_context;\nmod public_context;\nmod avm_context;\nmod interface;\nmod gas;\n\nuse interface::ContextInterface;\nuse private_context::PrivateContext;\nuse private_context::PackedReturns;\nuse public_context::PublicContext;\nuse public_context::FunctionReturns;\nuse avm_context::AvmContext;\n\nstruct Context {\n    private: Option<&mut PrivateContext>,\n    public: Option<&mut PublicContext>,\n    avm: Option<&mut AvmContext>,\n}\n\nimpl Context {\n    pub fn private(context: &mut PrivateContext) -> Context {\n        Context { private: Option::some(context), public: Option::none(), avm: Option::none() }\n    }\n\n    pub fn public(context: &mut PublicContext) -> Context {\n        Context { public: Option::some(context), private: Option::none(), avm: Option::none() }\n    }\n\n    pub fn avm(context: &mut AvmContext) -> Context {\n        Context { avm: Option::some(context), public: Option::none(), private: Option::none() }\n    }\n\n    pub fn none() -> Context {\n        Context { public: Option::none(), private: Option::none(), avm: Option::none() }\n    }\n}\n","path":"/Users/jack-sw/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.35.1/noir-projects/aztec-nr/aztec/src/context.nr"},"102":{"source":"use dep::protocol_types::{\n    constants::GENERATOR_INDEX__PUBLIC_LEAF_INDEX, hash::pedersen_hash, address::AztecAddress,\n    header::Header, utils::field::full_field_less_than\n};\nuse dep::std::merkle::compute_merkle_root;\n\nuse crate::{context::PrivateContext, oracle::get_public_data_witness::get_public_data_witness};\n\nfn _public_storage_historical_read(storage_slot: Field, contract_address: AztecAddress, header: Header) -> Field {\n    // 1) Compute the leaf slot by siloing the storage slot with the contract address\n    let public_value_leaf_slot = pedersen_hash(\n        [contract_address.to_field(), storage_slot],\n        GENERATOR_INDEX__PUBLIC_LEAF_INDEX\n    );\n\n    // 2) Get the membership witness of the slot\n    let witness = get_public_data_witness(\n        header.global_variables.block_number as u32,\n        public_value_leaf_slot\n    );\n\n    // 3) Extract the value from the witness leaf and check that the storage slot is correct\n    let preimage = witness.leaf_preimage;\n\n    // Here we have two cases. Code based on same checks in `validate_public_data_reads` in `base_rollup_inputs`\n    // 1. The value is the same as the one in the witness\n    // 2. The value was never initialized and is zero\n    let is_less_than_slot = full_field_less_than(preimage.slot, public_value_leaf_slot);\n    let is_next_greater_than = full_field_less_than(public_value_leaf_slot, preimage.next_slot);\n    let is_max = ((preimage.next_index == 0) & (preimage.next_slot == 0));\n    let is_in_range = is_less_than_slot & (is_next_greater_than | is_max);\n\n    let value = if is_in_range {\n        0\n    } else {\n        assert_eq(preimage.slot, public_value_leaf_slot, \"Public data slot doesn't match witness\");\n        preimage.value\n    };\n\n    // 4) Prove that the leaf exists in the public data tree. Note that `hash` returns not just the hash of the value\n    // but also the metadata (slot, next index and next slot).\n    assert(\n        header.state.partial.public_data_tree.root\n        == compute_merkle_root(preimage.hash(), witness.index, witness.path), \"Proving public value inclusion failed\"\n    );\n\n    value\n}\n\npub fn public_storage_historical_read(\n    context: PrivateContext,\n    storage_slot: Field, // The storage slot to read\n    contract_address: AztecAddress // The contract we want to look into\n) -> Field {\n    _public_storage_historical_read(storage_slot, contract_address, context.historical_header)\n}\n\npub fn public_storage_historical_read_at(\n    context: PrivateContext,\n    storage_slot: Field, // The storage slot to read\n    contract_address: AztecAddress, // The contract we want to look into\n    block_number: u32 // The block number at the end of which we'll read the value\n) -> Field {\n    let header = context.get_header_at(block_number);\n\n    _public_storage_historical_read(storage_slot, contract_address, header)\n}\n","path":"/Users/jack-sw/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.35.1/noir-projects/aztec-nr/aztec/src/history/public_storage.nr"},"105":{"source":"use dep::std::merkle::compute_merkle_root;\nuse dep::protocol_types::header::Header;\n\nuse crate::{\n    context::PrivateContext, oracle::get_nullifier_membership_witness::get_nullifier_membership_witness,\n    note::{utils::compute_siloed_nullifier, note_interface::NoteInterface}\n};\n\nfn _nullifier_inclusion(nullifier: Field, header: Header) {\n    // 1) Get the membership witness of the nullifier\n    let witness = get_nullifier_membership_witness(header.global_variables.block_number as u32, nullifier);\n\n    // 2) Check that the witness we obtained matches the nullifier\n    assert(witness.leaf_preimage.nullifier == nullifier, \"Nullifier does not match value in witness\");\n\n    // 3) Compute the nullifier tree leaf\n    let nullifier_leaf = witness.leaf_preimage.hash();\n\n    // 4) Prove that the nullifier is in the nullifier tree\n    assert(\n        header.state.partial.nullifier_tree.root\n        == compute_merkle_root(nullifier_leaf, witness.index, witness.path), \"Proving nullifier inclusion failed\"\n    );\n    // --> Now we have traversed the trees all the way up to archive root and verified that the nullifier\n    //     was included in the nullifier tree.\n}\n\npub fn prove_nullifier_inclusion(nullifier: Field, context: PrivateContext) {\n    _nullifier_inclusion(nullifier, context.get_header());\n}\n\npub fn prove_nullifier_inclusion_at(\n    nullifier: Field,\n    block_number: u32, // The block at which we'll prove that the nullifier exists in the nullifier tree\n    context: PrivateContext\n) {\n    let header = context.get_header_at(block_number);\n\n    _nullifier_inclusion(nullifier, header);\n}\n\npub fn prove_note_is_nullified<Note, N>(\n    note: Note,\n    context: &mut PrivateContext\n) where Note: NoteInterface<N> {\n    let nullifier = compute_siloed_nullifier(note, context);\n\n    _nullifier_inclusion(nullifier, context.historical_header);\n}\n\npub fn prove_note_is_nullified_at<Note, N>(\n    note: Note,\n    block_number: u32,\n    context: &mut PrivateContext\n) where Note: NoteInterface<N> {\n    let nullifier = compute_siloed_nullifier(note, context);\n    let header = context.get_header_at(block_number);\n\n    _nullifier_inclusion(nullifier, header);\n}\n","path":"/Users/jack-sw/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.35.1/noir-projects/aztec-nr/aztec/src/history/nullifier_inclusion.nr"},"106":{"source":"use dep::protocol_types::{\n    address::AztecAddress, hash::{silo_nullifier, pedersen_hash},\n    constants::GENERATOR_INDEX__CONSTRUCTOR, abis::function_selector::FunctionSelector\n};\n\nuse crate::{\n    context::{PrivateContext, PublicContext, AvmContext, ContextInterface},\n    oracle::get_contract_instance::get_contract_instance,\n    oracle::get_contract_instance::get_contract_instance_avm,\n    history::nullifier_inclusion::prove_nullifier_inclusion\n};\n\npub fn mark_as_initialized_public(context: &mut PublicContext) {\n    mark_as_initialized(context);\n}\n\npub fn mark_as_initialized_avm(context: &mut AvmContext) {\n    mark_as_initialized(context);\n}\n\npub fn mark_as_initialized_private(context: &mut PrivateContext) {\n    mark_as_initialized(context);\n}\n\nfn mark_as_initialized<TContext>(context: &mut TContext) where TContext: ContextInterface {\n    let init_nullifier = compute_unsiloed_contract_initialization_nullifier((*context).this_address());\n    ContextInterface::push_new_nullifier(context, init_nullifier, 0);\n}\n\npub fn assert_is_initialized_public(context: &mut PublicContext) {\n    let init_nullifier = compute_unsiloed_contract_initialization_nullifier(context.this_address());\n    assert(context.nullifier_exists(init_nullifier, context.this_address()), \"Not initialized\");\n}\n\npub fn assert_is_initialized_avm(context: &mut AvmContext) {\n    let init_nullifier = compute_unsiloed_contract_initialization_nullifier(context.this_address());\n    assert(context.nullifier_exists(init_nullifier, context.this_address()), \"Not initialized\");\n}\n\npub fn assert_is_initialized_private(context: &mut PrivateContext) {\n    let init_nullifier = compute_contract_initialization_nullifier(context.this_address());\n    prove_nullifier_inclusion(init_nullifier, *context);\n}\n\nfn compute_contract_initialization_nullifier(address: AztecAddress) -> Field {\n    silo_nullifier(\n        address,\n        compute_unsiloed_contract_initialization_nullifier(address)\n    )\n}\n\nfn compute_unsiloed_contract_initialization_nullifier(address: AztecAddress) -> Field {\n    address.to_field()\n}\n\npub fn assert_initialization_matches_address_preimage_public(context: PublicContext) {\n    assert_initialization_matches_address_preimage(context);\n}\n\npub fn assert_initialization_matches_address_preimage_avm(context: AvmContext) {\n    let address = context.this_address();\n    let instance = get_contract_instance_avm(address).unwrap();\n    let expected_init = compute_initialization_hash(context.selector(), context.get_args_hash());\n    assert(instance.initialization_hash == expected_init, \"Initialization hash does not match\");\n    assert(\n        (instance.deployer.is_zero()) | (instance.deployer == context.msg_sender()), \"Initializer address is not the contract deployer\"\n    );\n}\n\npub fn assert_initialization_matches_address_preimage_private(context: PrivateContext) {\n    assert_initialization_matches_address_preimage(context);\n}\n\nfn assert_initialization_matches_address_preimage<TContext>(context: TContext) where TContext: ContextInterface {\n    let address = context.this_address();\n    let instance = get_contract_instance(address);\n    let expected_init = compute_initialization_hash(context.selector(), context.get_args_hash());\n    assert(instance.initialization_hash == expected_init, \"Initialization hash does not match\");\n    assert(\n        (instance.deployer.is_zero()) | (instance.deployer == context.msg_sender()), \"Initializer address is not the contract deployer\"\n    );\n}\n\npub fn compute_initialization_hash(init_selector: FunctionSelector, init_args_hash: Field) -> Field {\n    pedersen_hash(\n        [init_selector.to_field(), init_args_hash],\n        GENERATOR_INDEX__CONSTRUCTOR\n    )\n}\n","path":"/Users/jack-sw/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.35.1/noir-projects/aztec-nr/aztec/src/initializer.nr"},"107":{"source":"use dep::protocol_types::{\n    address::{AztecAddress, EthAddress},\n    constants::{\n    GENERATOR_INDEX__L1_TO_L2_MESSAGE_SECRET, GENERATOR_INDEX__NULLIFIER, ARGS_HASH_CHUNK_COUNT,\n    GENERATOR_INDEX__FUNCTION_ARGS, ARGS_HASH_CHUNK_LENGTH\n},\n    traits::Hash, hash::{pedersen_hash, silo_nullifier}\n};\n\nuse dep::protocol_types::hash::sha256_to_field;\n\npub fn compute_secret_hash(secret: Field) -> Field {\n    // TODO(#1205) This is probably not the right index to use\n    pedersen_hash([secret], GENERATOR_INDEX__L1_TO_L2_MESSAGE_SECRET)\n}\n\npub fn compute_message_hash(\n    sender: EthAddress,\n    chain_id: Field,\n    recipient: AztecAddress,\n    version: Field,\n    content: Field,\n    secret_hash: Field\n) -> Field {\n    let mut hash_bytes = [0 as u8; 192];\n    let sender_bytes = sender.to_field().to_be_bytes(32);\n    let chain_id_bytes = chain_id.to_be_bytes(32);\n    let recipient_bytes = recipient.to_field().to_be_bytes(32);\n    let version_bytes = version.to_be_bytes(32);\n    let content_bytes = content.to_be_bytes(32);\n    let secret_hash_bytes = secret_hash.to_be_bytes(32);\n\n    for i in 0..32 {\n        hash_bytes[i] = sender_bytes[i];\n        hash_bytes[i + 32] = chain_id_bytes[i];\n        hash_bytes[i + 64] = recipient_bytes[i];\n        hash_bytes[i + 96] = version_bytes[i];\n        hash_bytes[i + 128] = content_bytes[i];\n        hash_bytes[i + 160] = secret_hash_bytes[i];\n    }\n\n    sha256_to_field(hash_bytes)\n}\n\n// The nullifier of a l1 to l2 message is the hash of the message salted with the secret and index of the message hash\n// in the L1 to L2 message tree\npub fn compute_message_nullifier(message_hash: Field, secret: Field, leaf_index: Field) -> Field {\n    pedersen_hash(\n        [message_hash, secret, leaf_index],\n        GENERATOR_INDEX__NULLIFIER\n    )\n}\n\npub fn compute_siloed_nullifier(address: AztecAddress, nullifier: Field) -> Field {\n    silo_nullifier(address, nullifier)\n}\n\nstruct ArgsHasher {\n    fields: [Field],\n}\n\nimpl Hash for ArgsHasher {\n    fn hash(self) -> Field {\n        hash_args(self.fields)\n    }\n}\n\nimpl ArgsHasher {\n    pub fn new() -> Self {\n        Self { fields: [] }\n    }\n\n    pub fn add(&mut self, field: Field) {\n        self.fields = self.fields.push_back(field);\n    }\n\n    pub fn add_multiple<N>(&mut self, fields: [Field; N]) {\n        for i in 0..N {\n            self.fields = self.fields.push_back(fields[i]);\n        }\n    }\n}\n\npub fn hash_args_array<N>(args: [Field; N]) -> Field {\n    hash_args(args.as_slice())\n}\n\npub fn hash_args(args: [Field]) -> Field {\n    if args.len() == 0 {\n        0\n    } else {\n        assert(args.len() < ARGS_HASH_CHUNK_COUNT * ARGS_HASH_CHUNK_LENGTH);\n        let mut chunks_hashes = [0; ARGS_HASH_CHUNK_COUNT];\n        let mut current_chunk_values = [0; ARGS_HASH_CHUNK_LENGTH];\n\n        let mut current_chunk_index = 0;\n        let mut index_inside_current_chunk = 0;\n        for i in 0..args.len() {\n            current_chunk_values[index_inside_current_chunk] = args[i];\n            index_inside_current_chunk+=1;\n            if index_inside_current_chunk == ARGS_HASH_CHUNK_LENGTH {\n                chunks_hashes[current_chunk_index] = pedersen_hash(current_chunk_values, GENERATOR_INDEX__FUNCTION_ARGS);\n                current_chunk_values = [0; ARGS_HASH_CHUNK_LENGTH];\n                current_chunk_index+=1;\n                index_inside_current_chunk = 0;\n            }\n        }\n        if index_inside_current_chunk > 0 {\n            chunks_hashes[current_chunk_index] = pedersen_hash(current_chunk_values, GENERATOR_INDEX__FUNCTION_ARGS);\n        }\n        pedersen_hash(chunks_hashes, GENERATOR_INDEX__FUNCTION_ARGS)\n    }\n}\n\n#[test]\nfn compute_var_args_hash() {\n    let mut input = ArgsHasher::new();\n    for i in 0..800 {\n        input.add(i as Field);\n    }\n    let hash = input.hash();\n    assert(hash == 0x05a1023fef839ac88731f49ae983e172c1b600a3c8f3393ad0ac25d819ac0f0f);\n}\n","path":"/Users/jack-sw/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.35.1/noir-projects/aztec-nr/aztec/src/hash.nr"},"111":{"source":"use dep::protocol_types::{address::AztecAddress, constants::GENERATOR_INDEX__INITIALIZATION_NULLIFIER, hash::pedersen_hash};\n\nuse crate::context::{PrivateContext, PublicContext, Context};\nuse crate::note::{\n    lifecycle::{create_note, destroy_note}, note_getter::{get_note, view_notes},\n    note_interface::NoteInterface, note_viewer_options::NoteViewerOptions\n};\nuse crate::oracle::{nullifier_key::get_nullifier_secret_key, notes::check_nullifier_exists};\nuse crate::state_vars::storage::Storage;\n\n// docs:start:struct\nstruct PrivateMutable<Note> {\n    context: Option<&mut PrivateContext>,\n    storage_slot: Field\n}\n// docs:end:struct\n\nimpl<T> Storage<T> for PrivateMutable<T> {}\n\nimpl<Note> PrivateMutable<Note> {\n    // docs:start:new\n    pub fn new(context: Context, storage_slot: Field) -> Self {\n        assert(storage_slot != 0, \"Storage slot 0 not allowed. Storage slots must start from 1.\");\n        Self { context: context.private, storage_slot }\n    }\n    // docs:end:new\n\n    // The following computation is leaky, in that it doesn't hide the storage slot that has been initialized, nor does it hide the contract address of this contract.\n    // When this initialization nullifier is emitted, an observer could do a dictionary or rainbow attack to learn the preimage of this nullifier to deduce the storage slot and contract address.\n    // For some applications, leaking the details that a particular state variable of a particular contract has been initialized will be unacceptable.\n    // Under such circumstances, such application developers might wish to _not_ use this state variable type.\n    // This is especially dangerous for initial assignment to elements of a `Map<AztecAddress, PrivateMutable>` type (for example), because the storage slot often also identifies an actor. e.g.\n    // the initial assignment to `my_map.at(msg.sender)` will leak: `msg.sender`, the fact that an element of `my_map` was assigned-to for the first time, and the contract_address.\n    // Note: subsequent nullification of this state variable, via the `replace` method will not be leaky, if the `compute_nullifier()` method of the underlying note is designed to ensure privacy.\n    // For example, if the `compute_nullifier()` method injects the secret key of a note owner into the computed nullifier's preimage.\n    pub fn compute_initialization_nullifier(self) -> Field {\n        pedersen_hash(\n            [self.storage_slot],\n            GENERATOR_INDEX__INITIALIZATION_NULLIFIER\n        )\n    }\n\n    // docs:start:is_initialized\n    unconstrained pub fn is_initialized(self) -> bool {\n        let nullifier = self.compute_initialization_nullifier();\n        check_nullifier_exists(nullifier)\n    }\n    // docs:end:is_initialized\n\n    // docs:start:initialize\n    pub fn initialize<N>(self, note: &mut Note, broadcast: bool) where Note: NoteInterface<N> {\n        let context = self.context.unwrap();\n\n        // Nullify the storage slot.\n        let nullifier = self.compute_initialization_nullifier();\n        context.push_new_nullifier(nullifier, 0);\n\n        create_note(context, self.storage_slot, note, broadcast);\n    }\n    // docs:end:initialize\n\n    // docs:start:replace\n    pub fn replace<N>(self, new_note: &mut Note, broadcast: bool) where Note: NoteInterface<N> {\n        let context = self.context.unwrap();\n        let prev_note: Note = get_note(context, self.storage_slot);\n\n        // Nullify previous note.\n        destroy_note(context, prev_note);\n\n        // Add replacement note.\n        create_note(context, self.storage_slot, new_note, broadcast);\n    }\n    // docs:end:replace\n\n    // docs:start:get_note\n    pub fn get_note<N>(self, broadcast: bool) -> Note where Note: NoteInterface<N> {\n        let context = self.context.unwrap();\n        let mut note = get_note(context, self.storage_slot);\n\n        // Nullify current note to make sure it's reading the latest note.\n        destroy_note(context, note);\n\n        // Add the same note again.\n        // Because a nonce is added to every note in the kernel, its nullifier will be different.\n        create_note(context, self.storage_slot, &mut note, broadcast);\n\n        note\n    }\n    // docs:end:get_note\n\n    // docs:start:view_note\n    unconstrained pub fn view_note<N>(self) -> Note where Note: NoteInterface<N> {\n        let mut options = NoteViewerOptions::new();\n        view_notes(self.storage_slot, options.set_limit(1))[0].unwrap()\n    }\n    // docs:end:view_note\n}\n","path":"/Users/jack-sw/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.35.1/noir-projects/aztec-nr/aztec/src/state_vars/private_mutable.nr"},"112":{"source":"use crate::{\n    context::Context, history::public_storage::public_storage_historical_read,\n    oracle::{storage::{storage_read, storage_write}}, state_vars::storage::Storage\n};\nuse dep::protocol_types::{constants::INITIALIZATION_SLOT_SEPARATOR, traits::{Deserialize, Serialize}};\n\n// Just like PublicImmutable but with the ability to read from private functions.\nstruct SharedImmutable<T>{\n    context: Context,\n    storage_slot: Field,\n}\n\nimpl<T> Storage<T> for SharedImmutable<T> {}\n\nimpl<T> SharedImmutable<T> {\n    pub fn new(\n        // Note: Passing the contexts to new(...) just to have an interface compatible with a Map.\n        context: Context,\n        storage_slot: Field\n    ) -> Self {\n        assert(storage_slot != 0, \"Storage slot 0 not allowed. Storage slots must start from 1.\");\n        Self { context, storage_slot }\n    }\n\n    // Intended to be only called once. \n    pub fn initialize<T_SERIALIZED_LEN>(self, value: T) where T: Serialize<T_SERIALIZED_LEN> {\n        assert(\n            self.context.private.is_none(), \"SharedImmutable can only be initialized from public functions\"\n        );\n        // TODO(#4738): Uncomment the following assert\n        // assert(\n        //     self.context.public.unwrap_unchecked().is_deployment(), \"SharedImmutable can only be initialized during contract deployment\"\n        // );\n\n        // We check that the struct is not yet initialized by checking if the initialization slot is 0\n        let initialization_slot = INITIALIZATION_SLOT_SEPARATOR + self.storage_slot;\n        let fields_read: [Field; 1] = storage_read(initialization_slot);\n        assert(fields_read[0] == 0, \"SharedImmutable already initialized\");\n\n        // We populate the initialization slot with a non-zero value to indicate that the struct is initialized\n        storage_write(initialization_slot, [0xdead]);\n\n        let fields_write = T::serialize(value);\n        storage_write(self.storage_slot, fields_write);\n    }\n\n    pub fn read_public<T_SERIALIZED_LEN>(self) -> T where T: Deserialize<T_SERIALIZED_LEN> {\n        assert(self.context.private.is_none(), \"Public read only supported in public functions\");\n        let fields = storage_read(self.storage_slot);\n        T::deserialize(fields)\n    }\n\n    pub fn read_private<T_SERIALIZED_LEN>(self) -> T  where T: Deserialize<T_SERIALIZED_LEN> {\n        assert(self.context.public.is_none(), \"Private read only supported in private functions\");\n        let private_context = self.context.private.unwrap();\n\n        let mut fields = [0; T_SERIALIZED_LEN];\n\n        for i in 0..fields.len() {\n            fields[i] =\n                public_storage_historical_read(\n                    (*private_context),\n                    self.storage_slot + i as Field,\n                    (*private_context).this_address()\n                );\n        }\n        T::deserialize(fields)\n    }\n}\n","path":"/Users/jack-sw/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.35.1/noir-projects/aztec-nr/aztec/src/state_vars/shared_immutable.nr"},"113":{"source":"use crate::context::{PrivateContext, PublicContext, Context};\nuse dep::protocol_types::{hash::pedersen_hash, traits::ToField};\nuse crate::state_vars::storage::Storage;\n\n// docs:start:map\nstruct Map<K, V> {\n    context: Context,\n    storage_slot: Field,\n    state_var_constructor: fn(Context, Field) -> V,\n}\n// docs:end:map\n\nimpl<K, T> Storage<T> for Map<K, T> {}\n\nimpl<K, V> Map<K, V> {\n    // docs:start:new\n    pub fn new(\n        context: Context,\n        storage_slot: Field,\n        state_var_constructor: fn(Context, Field) -> V\n    ) -> Self {\n        assert(storage_slot != 0, \"Storage slot 0 not allowed. Storage slots must start from 1.\");\n        Map { context, storage_slot, state_var_constructor }\n    }\n    // docs:end:new\n\n    // docs:start:at\n    pub fn at(self, key: K) -> V where K: ToField {\n        // TODO(#1204): use a generator index for the storage slot\n        let derived_storage_slot = pedersen_hash([self.storage_slot, key.to_field()], 0);\n\n        let state_var_constructor = self.state_var_constructor;\n        state_var_constructor(self.context, derived_storage_slot)\n    }\n    // docs:end:at\n}\n","path":"/Users/jack-sw/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.35.1/noir-projects/aztec-nr/aztec/src/state_vars/map.nr"},"117":{"source":"use crate::context::Context;\nuse crate::oracle::storage::storage_read;\nuse crate::oracle::storage::storage_write;\nuse dep::protocol_types::traits::{Deserialize, Serialize};\nuse crate::state_vars::storage::Storage;\n\n// docs:start:public_mutable_struct\nstruct PublicMutable<T> {\n    context: Context,\n    storage_slot: Field,\n}\n// docs:end:public_mutable_struct\n\nimpl<T> Storage<T> for PublicMutable<T> {}\n\nimpl<T> PublicMutable<T> {\n    // docs:start:public_mutable_struct_new\n    pub fn new(\n        // Note: Passing the contexts to new(...) just to have an interface compatible with a Map.\n        context: Context,\n        storage_slot: Field\n    ) -> Self {\n        assert(storage_slot != 0, \"Storage slot 0 not allowed. Storage slots must start from 1.\");\n        PublicMutable { context, storage_slot }\n    }\n    // docs:end:public_mutable_struct_new\n\n    // docs:start:public_mutable_struct_read\n    pub fn read<T_SERIALIZED_LEN>(self) -> T where T: Deserialize<T_SERIALIZED_LEN> {\n        assert(self.context.private.is_none(), \"PublicMutable reads only supported in public functions\");\n        let fields = storage_read(self.storage_slot);\n        T::deserialize(fields)\n    }\n    // docs:end:public_mutable_struct_read\n\n    // docs:start:public_mutable_struct_write\n    pub fn write<T_SERIALIZED_LEN>(self, value: T) where T: Serialize<T_SERIALIZED_LEN> {\n        assert(self.context.private.is_none(), \"PublicMutable writes only supported in public functions\");\n        let fields = T::serialize(value);\n        storage_write(self.storage_slot, fields);\n    }\n    // docs:end:public_mutable_struct_write\n}\n","path":"/Users/jack-sw/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.35.1/noir-projects/aztec-nr/aztec/src/state_vars/public_mutable.nr"},"118":{"source":"use crate::{context::Context, oracle::{storage::{storage_read, storage_write}}, state_vars::storage::Storage};\nuse dep::protocol_types::{constants::INITIALIZATION_SLOT_SEPARATOR, traits::{Deserialize, Serialize}};\n\n// Just like SharedImmutable but without the ability to read from private functions.\n// docs:start:public_immutable_struct\nstruct PublicImmutable<T> {\n    context: Context,\n    storage_slot: Field,\n}\n// docs:end:public_immutable_struct\n\nimpl<T> Storage<T> for PublicImmutable<T> {}\n\nimpl<T> PublicImmutable<T> {\n    // docs:start:public_immutable_struct_new\n    pub fn new(\n        // Note: Passing the contexts to new(...) just to have an interface compatible with a Map.\n        context: Context,\n        storage_slot: Field\n    ) -> Self {\n        assert(storage_slot != 0, \"Storage slot 0 not allowed. Storage slots must start from 1.\");\n        PublicImmutable { context, storage_slot }\n    }\n    // docs:end:public_immutable_struct_new\n\n    // docs:start:public_immutable_struct_write\n    pub fn initialize<T_SERIALIZED_LEN>(self, value: T) where T: Serialize<T_SERIALIZED_LEN> {\n        assert(\n            self.context.private.is_none(), \"PublicImmutable can only be initialized from public functions\"\n        );\n        // TODO(#4738): Uncomment the following assert\n        // assert(\n        //     self.context.public.unwrap_unchecked().is_deployment(), \"PublicImmutable can only be initialized during contract deployment\"\n        // );\n\n        // We check that the struct is not yet initialized by checking if the initialization slot is 0\n        let initialization_slot = INITIALIZATION_SLOT_SEPARATOR + self.storage_slot;\n        let fields_read: [Field; 1] = storage_read(initialization_slot);\n        assert(fields_read[0] == 0, \"PublicImmutable already initialized\");\n\n        // We populate the initialization slot with a non-zero value to indicate that the struct is initialized\n        storage_write(initialization_slot, [0xdead]);\n\n        let fields_write = T::serialize(value);\n        storage_write(self.storage_slot, fields_write);\n    }\n    // docs:end:public_immutable_struct_write\n\n    // docs:start:public_immutable_struct_read\n    pub fn read<T_SERIALIZED_LEN>(self) -> T where T: Deserialize<T_SERIALIZED_LEN> {\n        assert(self.context.private.is_none(), \"PublicImmutable reads only supported in public functions\");\n        let fields = storage_read(self.storage_slot);\n        T::deserialize(fields)\n    }\n    // docs:end:public_immutable_struct_read\n}\n","path":"/Users/jack-sw/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.35.1/noir-projects/aztec-nr/aztec/src/state_vars/public_immutable.nr"},"127":{"source":"use dep::std::cmp::Eq;\nuse crate::{\n    address::AztecAddress,\n    constants::{NULLIFIER_KEY_VALIDATION_REQUEST_CONTEXT_LENGTH, NULLIFIER_KEY_VALIDATION_REQUEST_LENGTH},\n    traits::{Empty, Serialize, Deserialize}, grumpkin_point::GrumpkinPoint,\n    grumpkin_private_key::GrumpkinPrivateKey\n};\n\nstruct NullifierKeyValidationRequest {\n    public_key: GrumpkinPoint,\n    secret_key: GrumpkinPrivateKey,\n}\n\nimpl Eq for NullifierKeyValidationRequest {\n    fn eq(self, request: NullifierKeyValidationRequest) -> bool {\n        (request.public_key.eq(self.public_key))\n            & (request.secret_key.eq(self.secret_key))\n    }\n}\n\nimpl Empty for NullifierKeyValidationRequest {\n    fn empty() -> Self {\n        NullifierKeyValidationRequest {\n            public_key: GrumpkinPoint::zero(),\n            secret_key: GrumpkinPrivateKey::zero(),\n        }\n    }\n}\n\nimpl Serialize<NULLIFIER_KEY_VALIDATION_REQUEST_LENGTH> for NullifierKeyValidationRequest {\n    fn serialize(self) -> [Field; NULLIFIER_KEY_VALIDATION_REQUEST_LENGTH] {\n        [\n            self.public_key.x,\n            self.public_key.y,\n            self.secret_key.high,\n            self.secret_key.low,\n        ]\n    }\n}\n\nimpl Deserialize<NULLIFIER_KEY_VALIDATION_REQUEST_LENGTH> for NullifierKeyValidationRequest {\n    fn deserialize(fields: [Field; NULLIFIER_KEY_VALIDATION_REQUEST_LENGTH]) -> Self {\n        Self {\n            public_key: GrumpkinPoint::new(fields[0], fields[1]),\n            secret_key: GrumpkinPrivateKey::new(fields[2], fields[3]),\n        }\n    }\n}\n\nimpl NullifierKeyValidationRequest {\n    pub fn to_context(self, contract_address: AztecAddress) -> NullifierKeyValidationRequestContext {\n        NullifierKeyValidationRequestContext { public_key: self.public_key, secret_key: self.secret_key, contract_address }\n    }\n}\n\nstruct NullifierKeyValidationRequestContext {\n    public_key: GrumpkinPoint,\n    secret_key: GrumpkinPrivateKey,\n    contract_address: AztecAddress,\n}\n\nimpl Eq for NullifierKeyValidationRequestContext {\n    fn eq(self, request: NullifierKeyValidationRequestContext) -> bool {\n        (request.public_key.eq(self.public_key))\n            & (request.secret_key.eq(self.secret_key))\n            & (request.contract_address.eq(self.contract_address))\n    }\n}\n\nimpl Empty for NullifierKeyValidationRequestContext {\n    fn empty() -> Self {\n        NullifierKeyValidationRequestContext {\n            public_key: GrumpkinPoint::zero(),\n            secret_key: GrumpkinPrivateKey::zero(),\n            contract_address: AztecAddress::zero(),\n        }\n    }\n}\n\nimpl Serialize<NULLIFIER_KEY_VALIDATION_REQUEST_CONTEXT_LENGTH> for NullifierKeyValidationRequestContext {\n    fn serialize(self) -> [Field; NULLIFIER_KEY_VALIDATION_REQUEST_CONTEXT_LENGTH] {\n        [\n            self.public_key.x,\n            self.public_key.y,\n            self.secret_key.high,\n            self.secret_key.low,\n            self.contract_address.to_field(),\n        ]\n    }\n}\n\nimpl Deserialize<NULLIFIER_KEY_VALIDATION_REQUEST_CONTEXT_LENGTH> for NullifierKeyValidationRequestContext {\n    fn deserialize(fields: [Field; NULLIFIER_KEY_VALIDATION_REQUEST_CONTEXT_LENGTH]) -> Self {\n        Self {\n            public_key: GrumpkinPoint::new(fields[0], fields[1]),\n            secret_key: GrumpkinPrivateKey::new(fields[2], fields[3]),\n            contract_address: AztecAddress::from_field(fields[4]),\n        }\n    }\n}\n\n","path":"/Users/jack-sw/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.35.1/noir-projects/noir-protocol-circuits/crates/types/src/abis/nullifier_key_validation_request.nr"},"128":{"source":"use dep::std::cmp::Eq;\nuse crate::{\n    address::{AztecAddress, EthAddress}, abis::gas_fees::GasFees,\n    constants::{GENERATOR_INDEX__GLOBAL_VARIABLES, GLOBAL_VARIABLES_LENGTH},\n    traits::{Deserialize, Empty, Hash, Serialize}, utils::reader::Reader\n};\n\n// docs:start:global-variables\nstruct GlobalVariables {\n    chain_id : Field,\n    version : Field,\n    block_number : Field,\n    timestamp : u64,\n    coinbase : EthAddress,\n    fee_recipient : AztecAddress,\n    gas_fees : GasFees\n}\n// docs:end:global-variables\n\nimpl Serialize<GLOBAL_VARIABLES_LENGTH> for GlobalVariables {\n    fn serialize(self) -> [Field; GLOBAL_VARIABLES_LENGTH] {\n        let mut serialized: BoundedVec<Field, GLOBAL_VARIABLES_LENGTH> = BoundedVec::new();\n\n        serialized.push(self.chain_id);\n        serialized.push(self.version);\n        serialized.push(self.block_number);\n        serialized.push(self.timestamp as Field);\n        serialized.push(self.coinbase.to_field());\n        serialized.push(self.fee_recipient.to_field());\n        serialized.extend_from_array(self.gas_fees.serialize());\n\n        serialized.storage\n    }\n}\n\nimpl Deserialize<GLOBAL_VARIABLES_LENGTH> for GlobalVariables {\n    fn deserialize(serialized: [Field; GLOBAL_VARIABLES_LENGTH]) -> GlobalVariables {\n        let mut reader = Reader::new(serialized);\n        GlobalVariables {\n            chain_id: reader.read(),\n            version: reader.read(),\n            block_number: reader.read(),\n            timestamp: reader.read() as u64,\n            coinbase: EthAddress::from_field(reader.read()),\n            fee_recipient: AztecAddress::from_field(reader.read()),\n            gas_fees: reader.read_struct(GasFees::deserialize)\n        }\n    }\n}\n\nimpl Eq for GlobalVariables {\n    fn eq(self, other : GlobalVariables) -> bool {\n        (self.chain_id == other.chain_id) &\n        (self.version == other.version) &\n        (self.block_number == other.block_number) &\n        (self.timestamp == other.timestamp) &\n        (self.coinbase == other.coinbase) &\n        (self.fee_recipient == other.fee_recipient) &\n        (self.gas_fees == other.gas_fees) \n    }\n}\n\nimpl Empty for GlobalVariables {\n    fn empty() -> Self {\n        Self {\n            chain_id: 0,\n            version: 0,\n            block_number: 0,\n            timestamp: 0,\n            coinbase: EthAddress::empty(),\n            fee_recipient: AztecAddress::empty(),\n            gas_fees: GasFees::empty()\n        }\n    }\n}\n\n#[test]\nfn serialization_of_empty() {\n    let vars = GlobalVariables::empty();\n    let _serialized = vars.serialize();\n    let _deserialized = GlobalVariables::deserialize(_serialized);\n}\n","path":"/Users/jack-sw/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.35.1/noir-projects/noir-protocol-circuits/crates/types/src/abis/global_variables.nr"},"129":{"source":"use crate::{\n    abis::{function_data::FunctionData, private_circuit_public_inputs::PrivateCircuitPublicInputs},\n    address::AztecAddress,\n    constants::{GENERATOR_INDEX__CALL_STACK_ITEM, PRIVATE_CALL_STACK_ITEM_LENGTH}, hash::pedersen_hash,\n    traits::{Deserialize, Hash, Serialize, Empty}, utils::reader::Reader\n};\n\nstruct PrivateCallStackItem {\n    // This is the _actual_ contract address relating to where this function's code resides in the\n    // contract tree. Regardless of whether this is a call or delegatecall, this\n    // `contract_address` _does not change_. Amongst other things, it's used as a lookup for\n    // getting the correct code from the tree. There is a separate `storage_contract_address`\n    // within a CallStackItem which varies depending on whether this is a call or delegatecall.\n    contract_address: AztecAddress,\n    function_data: FunctionData,\n    public_inputs: PrivateCircuitPublicInputs,\n}\n\nimpl Eq for PrivateCallStackItem {\n    fn eq(self, other: Self) -> bool {\n        self.contract_address.eq(other.contract_address) &\n        self.function_data.eq(other.function_data) &\n        self.public_inputs.eq(other.public_inputs)\n    }\n}\n\nimpl Serialize<PRIVATE_CALL_STACK_ITEM_LENGTH> for PrivateCallStackItem {\n    fn serialize(self) -> [Field; PRIVATE_CALL_STACK_ITEM_LENGTH] {\n        let mut fields: BoundedVec<Field, PRIVATE_CALL_STACK_ITEM_LENGTH> = BoundedVec::new();\n\n        fields.push(self.contract_address.to_field());\n        fields.extend_from_array(self.function_data.serialize());\n        fields.extend_from_array(self.public_inputs.serialize());\n\n        assert_eq(fields.len(), PRIVATE_CALL_STACK_ITEM_LENGTH);\n\n        fields.storage\n    }\n}\n\nimpl Deserialize<PRIVATE_CALL_STACK_ITEM_LENGTH> for PrivateCallStackItem {\n    fn deserialize(serialized: [Field; PRIVATE_CALL_STACK_ITEM_LENGTH]) -> Self {\n        // TODO(#4390): This should accept a reader ^ to avoid copying data.\n        let mut reader = Reader::new(serialized);\n\n        let item = Self {\n            contract_address: reader.read_struct(AztecAddress::deserialize),\n            function_data: reader.read_struct(FunctionData::deserialize),\n            public_inputs: reader.read_struct(PrivateCircuitPublicInputs::deserialize),\n        };\n\n        reader.finish();\n        item\n    }\n}\n\nimpl Hash for PrivateCallStackItem {\n    fn hash(self) -> Field {\n        pedersen_hash(self.serialize(), GENERATOR_INDEX__CALL_STACK_ITEM)\n    }\n}\n\nimpl Empty for PrivateCallStackItem {\n    fn empty() -> Self {\n        PrivateCallStackItem {\n            contract_address: AztecAddress::empty(),\n            function_data: FunctionData::empty(),\n            public_inputs: PrivateCircuitPublicInputs::empty(),\n        }\n    }\n}\n\n#[test]\nfn serialization_of_empty() {\n    let item = PrivateCallStackItem::empty();\n    let serialized = item.serialize();\n    let deserialized = PrivateCallStackItem::deserialize(serialized);\n    assert(item.eq(deserialized));\n}\n\n#[test]\nfn empty_hash() {\n    let mut item = PrivateCallStackItem::empty();\n    item.function_data.is_private = true;\n    let hash = item.hash();\n\n    // Value from private_call_stack_item.test.ts \"computes empty item hash\" test\n    let test_data_empty_hash = 0x243b1b69ea529d158803cc7a16b52293c5e5f2a1859337e3f69e4b20f55c6fb6;\n    assert_eq(hash, test_data_empty_hash);\n}\n","path":"/Users/jack-sw/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.35.1/noir-projects/noir-protocol-circuits/crates/types/src/abis/private_call_stack_item.nr"},"131":{"source":"use crate::{\n    abis::function_selector::FunctionSelector, address::{EthAddress, AztecAddress},\n    constants::GAS_LENGTH, hash::pedersen_hash, traits::{Deserialize, Hash, Serialize, Empty},\n    abis::side_effect::Ordered, utils::reader::Reader\n};\n\nstruct Gas {\n    da_gas: u32,\n    l1_gas: u32,\n    l2_gas: u32,\n}\n\nimpl Gas {\n    pub fn new(da_gas: u32, l1_gas: u32, l2_gas: u32) -> Self {\n        Self { da_gas, l1_gas, l2_gas }\n    }\n\n    fn add(self, other: Gas) -> Self {\n        Gas::new(\n            self.da_gas + other.da_gas,\n            self.l1_gas + other.l1_gas,\n            self.l2_gas + other.l2_gas\n        )\n    }\n\n    fn sub(self, other: Gas) -> Self {\n        Gas::new(\n            self.da_gas - other.da_gas,\n            self.l1_gas - other.l1_gas,\n            self.l2_gas - other.l2_gas\n        )\n    }\n}\n\nimpl Serialize<GAS_LENGTH> for Gas {\n    fn serialize(self) -> [Field; GAS_LENGTH] {\n        [self.da_gas as Field, self.l1_gas as Field, self.l2_gas as Field]\n    }\n}\n\nimpl Deserialize<GAS_LENGTH> for Gas {\n    fn deserialize(serialized: [Field; GAS_LENGTH]) -> Gas {\n        Gas::new(serialized[0] as u32, serialized[1] as u32, serialized[2] as u32)\n    }\n}\n\nimpl Eq for Gas {\n    fn eq(self, other : Gas) -> bool {\n        (self.da_gas == other.da_gas) & (self.l1_gas == other.l1_gas) & (self.l2_gas == other.l2_gas)\n    }\n}\n\nimpl Empty for Gas {\n    fn empty() -> Self {\n        Gas::new(0, 0, 0)\n    }\n}\n\n","path":"/Users/jack-sw/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.35.1/noir-projects/noir-protocol-circuits/crates/types/src/abis/gas.nr"},"133":{"source":"use crate::{\n    abis::function_selector::FunctionSelector, address::{EthAddress, AztecAddress}, abis::gas::Gas,\n    constants::{GAS_SETTINGS_LENGTH, DIMENSION_GAS_SETTINGS_LENGTH}, hash::pedersen_hash,\n    traits::{Deserialize, Hash, Serialize, Empty}, abis::side_effect::Ordered, utils::reader::Reader\n};\n\nstruct GasSettings {\n    da: DimensionGasSettings,\n    l1: DimensionGasSettings,\n    l2: DimensionGasSettings,\n    inclusion_fee: Field,\n}\n\nimpl GasSettings {\n    fn new(\n        da: DimensionGasSettings,\n        l1: DimensionGasSettings,\n        l2: DimensionGasSettings,\n        inclusion_fee: Field\n    ) -> Self {\n        Self { da, l1, l2, inclusion_fee }\n    }\n\n    fn get_gas_limits(self) -> Gas {\n        Gas { da_gas: self.da.gas_limit, l1_gas: self.l1.gas_limit, l2_gas: self.l2.gas_limit }\n    }\n}\n\nimpl Eq for GasSettings {\n    fn eq(self, other: Self) -> bool {\n        (self.da == other.da) & (self.l1 == other.l1) & (self.l2 == other.l2) & (self.inclusion_fee == other.inclusion_fee)\n    }\n}\n\nimpl Empty for GasSettings {\n    fn empty() -> Self {\n        GasSettings::new(\n            DimensionGasSettings::empty(),\n            DimensionGasSettings::empty(),\n            DimensionGasSettings::empty(),\n            0,\n        )\n    }\n}\n\nimpl Serialize<GAS_SETTINGS_LENGTH> for GasSettings {\n    fn serialize(self) -> [Field; GAS_SETTINGS_LENGTH] {\n        let mut serialized: BoundedVec<Field, GAS_SETTINGS_LENGTH> = BoundedVec::new();\n\n        serialized.extend_from_array(self.da.serialize());\n        serialized.extend_from_array(self.l1.serialize());\n        serialized.extend_from_array(self.l2.serialize());\n        serialized.push(self.inclusion_fee);\n    \n        serialized.storage\n    }\n}\n\nimpl Deserialize<GAS_SETTINGS_LENGTH> for GasSettings {\n    fn deserialize(serialized: [Field; GAS_SETTINGS_LENGTH]) -> GasSettings {\n        let mut reader = Reader::new(serialized);\n        GasSettings {\n            da: reader.read_struct(DimensionGasSettings::deserialize),\n            l1: reader.read_struct(DimensionGasSettings::deserialize),\n            l2: reader.read_struct(DimensionGasSettings::deserialize),\n            inclusion_fee: reader.read(),\n        }\n    }\n}\n\nstruct DimensionGasSettings {\n    gas_limit: u32,\n    teardown_gas_limit: u32,\n    max_fee_per_gas: Field,\n}\n\nimpl DimensionGasSettings {\n    pub fn new(gas_limit: u32, teardown_gas_limit: u32, max_fee_per_gas: Field) -> Self {\n        Self { gas_limit, teardown_gas_limit, max_fee_per_gas }\n    }\n}\n\nimpl Eq for DimensionGasSettings {\n    fn eq(self, other: Self) -> bool {\n        (self.gas_limit == other.gas_limit) & (self.teardown_gas_limit == other.teardown_gas_limit) & (self.max_fee_per_gas == other.max_fee_per_gas)\n    }\n\n}\n\nimpl Serialize<DIMENSION_GAS_SETTINGS_LENGTH> for DimensionGasSettings {\n    fn serialize(self) -> [Field; DIMENSION_GAS_SETTINGS_LENGTH] {\n        [\n            self.gas_limit as Field,\n            self.teardown_gas_limit as Field,\n            self.max_fee_per_gas,\n        ]\n    }\n}\n\nimpl Deserialize<DIMENSION_GAS_SETTINGS_LENGTH> for DimensionGasSettings {\n    fn deserialize(serialized: [Field; DIMENSION_GAS_SETTINGS_LENGTH]) -> DimensionGasSettings {\n        DimensionGasSettings::new(serialized[0] as u32, serialized[1] as u32, serialized[2])\n    }\n}\n\nimpl Empty for DimensionGasSettings {\n    fn empty() -> Self {\n        DimensionGasSettings::new(0,0,0)\n    }\n}\n","path":"/Users/jack-sw/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.35.1/noir-projects/noir-protocol-circuits/crates/types/src/abis/gas_settings.nr"},"134":{"source":"use crate::{\n    abis::{\n    call_context::CallContext, max_block_number::MaxBlockNumber,\n    nullifier_key_validation_request::NullifierKeyValidationRequest, read_request::ReadRequest,\n    side_effect::{SideEffect, SideEffectLinkedToNoteHash}\n},\n    constants::{\n    MAX_NOTE_HASH_READ_REQUESTS_PER_CALL, MAX_NULLIFIER_READ_REQUESTS_PER_CALL,\n    MAX_NULLIFIER_KEY_VALIDATION_REQUESTS_PER_CALL, MAX_NEW_NOTE_HASHES_PER_CALL,\n    MAX_NEW_NULLIFIERS_PER_CALL, MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL,\n    MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL, MAX_NEW_L2_TO_L1_MSGS_PER_CALL,\n    PRIVATE_CIRCUIT_PUBLIC_INPUTS_LENGTH, GENERATOR_INDEX__PRIVATE_CIRCUIT_PUBLIC_INPUTS\n},\n    header::Header, hash::pedersen_hash, messaging::l2_to_l1_message::L2ToL1Message,\n    traits::{Deserialize, Hash, Serialize, Empty}, utils::reader::Reader\n};\n\nstruct PrivateCircuitPublicInputs {\n    call_context: CallContext,\n\n    args_hash: Field,\n    returns_hash: Field,\n\n    min_revertible_side_effect_counter: u32,\n\n    max_block_number: MaxBlockNumber,\n\n    note_hash_read_requests: [SideEffect; MAX_NOTE_HASH_READ_REQUESTS_PER_CALL],\n    nullifier_read_requests: [ReadRequest; MAX_NULLIFIER_READ_REQUESTS_PER_CALL],\n    nullifier_key_validation_requests: [NullifierKeyValidationRequest; MAX_NULLIFIER_KEY_VALIDATION_REQUESTS_PER_CALL],\n\n    new_note_hashes: [SideEffect; MAX_NEW_NOTE_HASHES_PER_CALL],\n    new_nullifiers: [SideEffectLinkedToNoteHash; MAX_NEW_NULLIFIERS_PER_CALL],\n    private_call_stack_hashes: [Field; MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL],\n    public_call_stack_hashes: [Field; MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL],\n    new_l2_to_l1_msgs: [L2ToL1Message; MAX_NEW_L2_TO_L1_MSGS_PER_CALL],\n\n    start_side_effect_counter : u32,\n    end_side_effect_counter : u32,\n    encrypted_logs_hash: Field,\n    unencrypted_logs_hash: Field,\n\n    // Here so that the gas cost of this request can be measured by circuits, without actually needing to feed in the\n    // variable-length data.\n    encrypted_log_preimages_length: Field,\n    unencrypted_log_preimages_length: Field,\n\n    // Header of a block whose state is used during private execution (not the block the transaction is included in).\n    historical_header: Header,\n\n    // Note: The following 2 values are not redundant to the values in self.historical_header.global_variables because\n    // they can be different in case of a protocol upgrade. In such a situation we could be using header from a block\n    // before the upgrade took place but be using the updated protocol to execute and prove the transaction.\n    chain_id: Field,\n    version: Field,\n}\n\nimpl Eq for PrivateCircuitPublicInputs {\n    fn eq(self, other: Self) -> bool {\n        self.call_context.eq(other.call_context) &\n        self.args_hash.eq(other.args_hash) &\n        (self.returns_hash == other.returns_hash) &\n        (self.max_block_number == other.max_block_number) &\n        (self.note_hash_read_requests == other.note_hash_read_requests) &\n        (self.nullifier_read_requests == other.nullifier_read_requests) &\n        (self.nullifier_key_validation_requests == other.nullifier_key_validation_requests) &\n        (self.new_note_hashes == other.new_note_hashes) &\n        (self.new_nullifiers == other.new_nullifiers) &\n        (self.private_call_stack_hashes == other.private_call_stack_hashes) &\n        (self.public_call_stack_hashes == other.public_call_stack_hashes) &\n        (self.new_l2_to_l1_msgs == other.new_l2_to_l1_msgs) &\n        (self.start_side_effect_counter == other.start_side_effect_counter) &\n        (self.end_side_effect_counter == other.end_side_effect_counter) &\n        (self.encrypted_logs_hash == other.encrypted_logs_hash) &\n        (self.unencrypted_logs_hash == other.unencrypted_logs_hash) &\n        (self.encrypted_log_preimages_length == other.encrypted_log_preimages_length) &\n        (self.unencrypted_log_preimages_length == other.unencrypted_log_preimages_length) &\n        self.historical_header.eq(other.historical_header) &\n        self.chain_id.eq(other.chain_id) &\n        self.version.eq(other.version)\n    }\n}\n\nimpl Serialize<PRIVATE_CIRCUIT_PUBLIC_INPUTS_LENGTH> for PrivateCircuitPublicInputs {\n    fn serialize(self) -> [Field; PRIVATE_CIRCUIT_PUBLIC_INPUTS_LENGTH] {\n        let mut fields: BoundedVec<Field, PRIVATE_CIRCUIT_PUBLIC_INPUTS_LENGTH> = BoundedVec::new();\n        fields.extend_from_array(self.call_context.serialize());\n        fields.push(self.args_hash);\n        fields.push(self.returns_hash);\n\n        fields.push(self.min_revertible_side_effect_counter as Field);\n\n        fields.extend_from_array(self.max_block_number.serialize());\n\n        for i in 0..MAX_NOTE_HASH_READ_REQUESTS_PER_CALL{\n            fields.extend_from_array(self.note_hash_read_requests[i].serialize());\n        }\n        for i in 0..MAX_NULLIFIER_READ_REQUESTS_PER_CALL{\n            fields.extend_from_array(self.nullifier_read_requests[i].serialize());\n        }\n        for i in 0..MAX_NULLIFIER_KEY_VALIDATION_REQUESTS_PER_CALL{\n            fields.extend_from_array(self.nullifier_key_validation_requests[i].serialize());\n        }\n        for i in 0..MAX_NEW_NOTE_HASHES_PER_CALL{\n            fields.extend_from_array(self.new_note_hashes[i].serialize());\n        }\n        for i in 0..MAX_NEW_NULLIFIERS_PER_CALL{\n            fields.extend_from_array(self.new_nullifiers[i].serialize());\n        }\n        fields.extend_from_array(self.private_call_stack_hashes);\n        fields.extend_from_array(self.public_call_stack_hashes);\n        for i in 0..MAX_NEW_L2_TO_L1_MSGS_PER_CALL {\n            fields.extend_from_array(self.new_l2_to_l1_msgs[i].serialize());\n        }\n        fields.push(self.start_side_effect_counter as Field);\n        fields.push(self.end_side_effect_counter as Field);\n        fields.push(self.encrypted_logs_hash);\n        fields.push(self.unencrypted_logs_hash);\n        fields.push(self.encrypted_log_preimages_length);\n        fields.push(self.unencrypted_log_preimages_length);\n        fields.extend_from_array(self.historical_header.serialize());\n        fields.push(self.chain_id);\n        fields.push(self.version);\n\n        assert_eq(fields.len(), PRIVATE_CIRCUIT_PUBLIC_INPUTS_LENGTH);\n\n        fields.storage\n    }\n}\n\nimpl Deserialize<PRIVATE_CIRCUIT_PUBLIC_INPUTS_LENGTH> for PrivateCircuitPublicInputs {\n    fn deserialize(serialized: [Field; PRIVATE_CIRCUIT_PUBLIC_INPUTS_LENGTH]) -> Self {\n        // TODO(#4390): This should accept a reader ^ to avoid copying data.\n        let mut reader = Reader::new(serialized);\n        let inputs = Self {\n            call_context: reader.read_struct(CallContext::deserialize),\n            args_hash: reader.read(),\n            returns_hash: reader.read(),\n            min_revertible_side_effect_counter: reader.read() as u32,\n            max_block_number: reader.read_struct(MaxBlockNumber::deserialize),\n            note_hash_read_requests: reader.read_struct_array(SideEffect::deserialize, [SideEffect::empty(); MAX_NOTE_HASH_READ_REQUESTS_PER_CALL]),\n            nullifier_read_requests: reader.read_struct_array(ReadRequest::deserialize, [ReadRequest::empty(); MAX_NULLIFIER_READ_REQUESTS_PER_CALL]),\n            nullifier_key_validation_requests: reader.read_struct_array(NullifierKeyValidationRequest::deserialize, [NullifierKeyValidationRequest::empty(); MAX_NULLIFIER_KEY_VALIDATION_REQUESTS_PER_CALL]),\n            new_note_hashes: reader.read_struct_array(SideEffect::deserialize, [SideEffect::empty(); MAX_NEW_NOTE_HASHES_PER_CALL]),\n            new_nullifiers: reader.read_struct_array(SideEffectLinkedToNoteHash::deserialize, [SideEffectLinkedToNoteHash::empty(); MAX_NEW_NULLIFIERS_PER_CALL]),\n            private_call_stack_hashes: reader.read_array([0; MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL]),\n            public_call_stack_hashes: reader.read_array([0; MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL]),\n            new_l2_to_l1_msgs: reader.read_struct_array(L2ToL1Message::deserialize, [L2ToL1Message::empty(); MAX_NEW_L2_TO_L1_MSGS_PER_CALL]),\n            start_side_effect_counter: reader.read() as u32,\n            end_side_effect_counter: reader.read() as u32,\n            encrypted_logs_hash: reader.read() as Field,\n            unencrypted_logs_hash: reader.read() as Field,\n            encrypted_log_preimages_length: reader.read(),\n            unencrypted_log_preimages_length: reader.read(),\n            historical_header: reader.read_struct(Header::deserialize),\n            chain_id: reader.read(),\n            version: reader.read(),\n        };\n\n        reader.finish();\n        inputs\n    }\n}\n\nimpl Hash for PrivateCircuitPublicInputs {\n    fn hash(self) -> Field {\n        pedersen_hash(self.serialize(), GENERATOR_INDEX__PRIVATE_CIRCUIT_PUBLIC_INPUTS)\n    }\n}\n\n\nimpl Empty for PrivateCircuitPublicInputs {\n    fn empty() -> Self {\n        PrivateCircuitPublicInputs {\n            call_context: CallContext::empty(),\n            args_hash: 0,\n            returns_hash: 0,\n            min_revertible_side_effect_counter: 0 as u32,\n            max_block_number: MaxBlockNumber::empty(),\n            note_hash_read_requests: [SideEffect::empty(); MAX_NOTE_HASH_READ_REQUESTS_PER_CALL],\n            nullifier_read_requests: [ReadRequest::empty(); MAX_NULLIFIER_READ_REQUESTS_PER_CALL],\n            nullifier_key_validation_requests: [NullifierKeyValidationRequest::empty(); MAX_NULLIFIER_KEY_VALIDATION_REQUESTS_PER_CALL],\n            new_note_hashes: [SideEffect::empty(); MAX_NEW_NOTE_HASHES_PER_CALL],\n            new_nullifiers: [SideEffectLinkedToNoteHash::empty(); MAX_NEW_NULLIFIERS_PER_CALL],\n            private_call_stack_hashes: [0; MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL],\n            public_call_stack_hashes: [0; MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL],\n            new_l2_to_l1_msgs: [L2ToL1Message::empty(); MAX_NEW_L2_TO_L1_MSGS_PER_CALL],\n            start_side_effect_counter : 0 as u32,\n            end_side_effect_counter : 0 as u32,\n            encrypted_logs_hash: 0,\n            unencrypted_logs_hash: 0,\n            encrypted_log_preimages_length: 0,\n            unencrypted_log_preimages_length: 0,\n            historical_header: Header::empty(),\n            chain_id: 0,\n            version: 0,\n        }\n    }\n}\n\n#[test]\nfn serialization_of_empty() {\n    let pcpi = PrivateCircuitPublicInputs::empty();\n    let serialized = pcpi.serialize();\n    let deserialized = PrivateCircuitPublicInputs::deserialize(serialized);\n    assert(pcpi.eq(deserialized));\n}\n\n#[test]\nfn empty_hash() {\n    let inputs = PrivateCircuitPublicInputs::empty();\n    let hash = inputs.hash();\n\n    // Value from private_circuit_public_inputs.test.ts \"computes empty item hash\" test\n    let test_data_empty_hash = 0x02e09d8c4897d560bd4caf05ab45fa22e1d4a251bf5b5e0448310a7f40f7a0b8;\n    assert_eq(hash, test_data_empty_hash);\n}\n","path":"/Users/jack-sw/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.35.1/noir-projects/noir-protocol-circuits/crates/types/src/abis/private_circuit_public_inputs.nr"},"135":{"source":"use crate::{\n    address::AztecAddress, constants::GENERATOR_INDEX__SIDE_EFFECT,\n    traits::{Empty, Hash, Serialize, Deserialize}\n};\nuse dep::std::cmp::Eq;\n\nglobal SIDE_EFFECT_SERIALIZED_LEN = 2;\n\ntrait Ordered {\n    fn counter(self) -> u32;\n}\n\ntrait OrderedValue<T> where T: Eq {\n    fn value(self) -> T;\n    fn counter(self) -> u32;\n}\n\ntrait ContractScopedOrderedValue<T> where T: Eq {\n    fn value(self) -> T;\n    fn counter(self) -> u32;\n    fn contract_address(self) -> AztecAddress;\n}\n\nstruct SideEffect {\n    value: Field,\n    counter: u32,\n}\n\nimpl Ordered for SideEffect {\n    fn counter(self) -> u32 {\n        self.counter\n    }\n}\n\nimpl OrderedValue<Field> for SideEffect {\n    fn value(self) -> Field {\n        self.value\n    }\n    fn counter(self) -> u32 {\n        self.counter\n    }\n}\n\nimpl Eq for SideEffect {\n    fn eq(self, side_effect: SideEffect) -> bool {\n        (self.value == side_effect.value)\n        & (self.counter == side_effect.counter)\n    }\n}\n\nimpl Empty for SideEffect {\n    fn empty() -> Self {\n        SideEffect {\n            value: 0,\n            counter: 0,\n        }\n    }\n}\n\nimpl Hash for SideEffect {\n    fn hash(self) -> Field {\n        dep::std::hash::pedersen_hash_with_separator(\n            self.serialize() , GENERATOR_INDEX__SIDE_EFFECT)\n    }\n}\n\nimpl Serialize<SIDE_EFFECT_SERIALIZED_LEN> for SideEffect {\n    fn serialize(self) -> [Field; SIDE_EFFECT_SERIALIZED_LEN] {\n        [self.value, self.counter as Field]\n    }\n}\n\nimpl Deserialize<SIDE_EFFECT_SERIALIZED_LEN> for SideEffect {\n    fn deserialize(values: [Field; SIDE_EFFECT_SERIALIZED_LEN]) -> Self {\n        Self {\n            value: values[0],\n            counter: values[1] as u32,\n        }\n    }\n}\n\nstruct SideEffectLinkedToNoteHash{\n    value: Field,\n    note_hash: Field,\n    counter: u32,\n}\n\nimpl Ordered for SideEffectLinkedToNoteHash {\n    fn counter(self) -> u32 {\n        self.counter\n    }\n}\n\nimpl OrderedValue<Field> for SideEffectLinkedToNoteHash {\n    fn value(self) -> Field {\n        self.value\n    }\n    fn counter(self) -> u32 {\n        self.counter\n    }\n}\n\nimpl Eq for SideEffectLinkedToNoteHash {\n    fn eq(self, side_effect: SideEffectLinkedToNoteHash) -> bool {\n        (self.value == side_effect.value)\n            & (self.note_hash == side_effect.note_hash) \n            & (self.counter == side_effect.counter)\n    }\n}\n\nimpl Empty for SideEffectLinkedToNoteHash {\n    fn empty() -> Self {\n        SideEffectLinkedToNoteHash {\n            value: 0,\n            note_hash: 0,\n            counter: 0,\n        }\n    }\n}\n\nimpl Hash for SideEffectLinkedToNoteHash {\n    fn hash(self) -> Field {\n        dep::std::hash::pedersen_hash_with_separator(\n            self.serialize(),\n        GENERATOR_INDEX__SIDE_EFFECT)\n    }\n}\n\nimpl Serialize<3> for SideEffectLinkedToNoteHash {\n    fn serialize(self) -> [Field; 3] {\n        [self.value, self.note_hash, self.counter as Field]\n    }\n}\n\nimpl Deserialize<3> for SideEffectLinkedToNoteHash {\n    fn deserialize(values: [Field; 3]) -> Self {\n        Self {\n            value: values[0],\n            note_hash: values[1],\n            counter: values[2] as u32,\n        }\n    }\n}\n","path":"/Users/jack-sw/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.35.1/noir-projects/noir-protocol-circuits/crates/types/src/abis/side_effect.nr"},"136":{"source":"use crate::{\n    abis::function_selector::FunctionSelector, address::{EthAddress, AztecAddress},\n    constants::{CALL_CONTEXT_LENGTH, GENERATOR_INDEX__CALL_CONTEXT}, hash::pedersen_hash,\n    traits::{Deserialize, Hash, Serialize, Empty}, abis::side_effect::Ordered,\n    abis::{gas_settings::GasSettings, gas::Gas}, utils::reader::Reader\n};\n\n// docs:start:call-context\nstruct CallContext {\n    msg_sender : AztecAddress,\n    storage_contract_address : AztecAddress,\n    portal_contract_address : EthAddress,\n    function_selector : FunctionSelector,\n    gas_left: Gas,\n\n    is_delegate_call : bool,\n    is_static_call : bool,\n\n    side_effect_counter : u32,\n\n    gas_settings: GasSettings,\n    transaction_fee: Field,\n}\n// docs:end:call-context\n\nimpl CallContext {\n    fn assert_is_zero(self) {\n        let serialized: [Field; CALL_CONTEXT_LENGTH] = self.serialize();\n\n        for i in 0..CALL_CONTEXT_LENGTH {\n            assert(serialized[i] == 0);\n        }\n    }\n}\n\nimpl Eq for CallContext {\n    fn eq(self, other: CallContext) -> bool {\n        self.serialize() == other.serialize()\n    }\n}\n\nimpl Hash for CallContext {\n    fn hash(self) -> Field {\n        pedersen_hash(self.serialize(), GENERATOR_INDEX__CALL_CONTEXT)\n    }\n}\n\nimpl Serialize<CALL_CONTEXT_LENGTH> for CallContext {\n    fn serialize(self) -> [Field; CALL_CONTEXT_LENGTH] {\n        let mut serialized: BoundedVec<Field, CALL_CONTEXT_LENGTH> = BoundedVec::new();\n\n        serialized.push(self.msg_sender.to_field());\n        serialized.push(self.storage_contract_address.to_field());\n        serialized.push(self.portal_contract_address.to_field());\n        serialized.push(self.function_selector.to_field());\n        serialized.extend_from_array(self.gas_left.serialize());\n        serialized.push(self.is_delegate_call as Field);\n        serialized.push(self.is_static_call as Field);\n        serialized.push(self.side_effect_counter as Field);\n        serialized.extend_from_array(self.gas_settings.serialize());\n        serialized.push(self.transaction_fee);\n    \n        serialized.storage\n    }\n}\n\nimpl Deserialize<CALL_CONTEXT_LENGTH> for CallContext {\n    fn deserialize(serialized: [Field; CALL_CONTEXT_LENGTH]) -> CallContext {\n        let mut reader = Reader::new(serialized);\n        CallContext {\n            msg_sender: AztecAddress::from_field(reader.read()),\n            storage_contract_address: AztecAddress::from_field(reader.read()),\n            portal_contract_address: EthAddress::from_field(reader.read()),\n            function_selector: FunctionSelector::from_field(reader.read()),\n            gas_left: reader.read_struct(Gas::deserialize),\n            is_delegate_call: reader.read() as bool,\n            is_static_call: reader.read() as bool,\n            side_effect_counter: reader.read() as u32,\n            gas_settings: reader.read_struct(GasSettings::deserialize),\n            transaction_fee: reader.read(),\n        }\n    }\n}\n\nimpl Empty for CallContext {\n    fn empty() -> Self {\n        CallContext {\n            msg_sender: AztecAddress::empty(),\n            storage_contract_address: AztecAddress::empty(),\n            portal_contract_address: EthAddress::empty(),\n            function_selector: FunctionSelector::empty(),\n            gas_left: Gas::empty(),\n            is_delegate_call: false,\n            is_static_call: false,\n            side_effect_counter: 0,\n            gas_settings: GasSettings::empty(),\n            transaction_fee: 0,\n        }\n    }\n}\n\n#[test]\nfn serialize_deserialize_of_empty() {\n    let context = CallContext::empty();\n    let serialized = context.serialize();\n    let deserialized = CallContext::deserialize(serialized);\n    assert(context.eq(deserialized));\n}\n\n#[test]\nfn assert_is_zero() {\n    let context = CallContext::empty();\n    context.assert_is_zero();\n}\n\n#[test(should_fail)]\nfn not_zero_assert_is_zero() {\n    let mut context = CallContext::empty();\n    context.is_delegate_call = true;\n    context.assert_is_zero();\n}\n\n#[test]\nfn test_eq() {\n    let mut context1 = CallContext::empty();\n    let mut context2 = CallContext::empty();\n\n    context1.is_delegate_call = true;\n    context2.is_delegate_call = true;\n\n    let address: AztecAddress = AztecAddress::from_field(69420);\n    context1.msg_sender = address;\n    context2.msg_sender = address;\n\n    assert(context1.eq(context2));\n}\n\n#[test(should_fail)]\nfn not_eq_test_eq() {\n    let mut context1 = CallContext::empty();\n    let mut context2 = CallContext::empty();\n\n    context1.is_delegate_call = true;\n    context2.is_delegate_call = false;\n\n    let address1: AztecAddress = AztecAddress::from_field(69420);\n    let address2: AztecAddress = AztecAddress::from_field(42069);\n\n    context1.msg_sender = address1;\n    context2.msg_sender = address2;\n\n    assert(context1.eq(context2));\n}\n\n#[test]\nfn hash_smoke() {\n    let context = CallContext::empty();\n    let _hashed = context.hash();\n}\n","path":"/Users/jack-sw/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.35.1/noir-projects/noir-protocol-circuits/crates/types/src/abis/call_context.nr"},"137":{"source":"use crate::{\n    abis::{\n    call_context::CallContext, read_request::ReadRequest,\n    side_effect::{SideEffect, SideEffectLinkedToNoteHash}, gas::Gas\n},\n    address::AztecAddress,\n    constants::{\n    MAX_NEW_L2_TO_L1_MSGS_PER_CALL, MAX_NEW_NULLIFIERS_PER_CALL, MAX_NEW_NOTE_HASHES_PER_CALL,\n    MAX_NULLIFIER_READ_REQUESTS_PER_CALL, MAX_NULLIFIER_NON_EXISTENT_READ_REQUESTS_PER_CALL,\n    MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL, MAX_PUBLIC_DATA_READS_PER_CALL,\n    MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL, GENERATOR_INDEX__PUBLIC_CIRCUIT_PUBLIC_INPUTS,\n    PUBLIC_CIRCUIT_PUBLIC_INPUTS_LENGTH\n},\n    contrakt::{storage_read::StorageRead, storage_update_request::StorageUpdateRequest},\n    hash::pedersen_hash, header::Header, messaging::l2_to_l1_message::L2ToL1Message,\n    traits::{Hash, Serialize, Deserialize, Empty}, utils::reader::Reader\n};\n\nstruct PublicCircuitPublicInputs{\n    call_context: CallContext,\n\n    args_hash: Field,\n    returns_hash: Field,\n\n    nullifier_read_requests: [ReadRequest; MAX_NULLIFIER_READ_REQUESTS_PER_CALL],\n    nullifier_non_existent_read_requests: [ReadRequest; MAX_NULLIFIER_NON_EXISTENT_READ_REQUESTS_PER_CALL],\n    contract_storage_update_requests: [StorageUpdateRequest; MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL],\n    contract_storage_reads: [StorageRead; MAX_PUBLIC_DATA_READS_PER_CALL],\n\n    // todo: add sideeffect ranges for the input to these hashes\n    public_call_stack_hashes: [Field; MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL],\n    new_note_hashes: [SideEffect; MAX_NEW_NOTE_HASHES_PER_CALL],\n    new_nullifiers: [SideEffectLinkedToNoteHash; MAX_NEW_NULLIFIERS_PER_CALL],\n    new_l2_to_l1_msgs: [L2ToL1Message; MAX_NEW_L2_TO_L1_MSGS_PER_CALL],\n\n    start_side_effect_counter: u32,\n    end_side_effect_counter: u32,\n\n    unencrypted_logs_hash: Field,\n\n    // Here so that the gas cost of this request can be measured by circuits, without actually needing to feed in the\n    // variable-length data.\n    unencrypted_log_preimages_length: Field,\n\n    // Header of a block whose state is used during public execution. Set by sequencer to be a header of a block\n    // previous to the one in which the tx is included.\n    historical_header: Header,\n\n    prover_address: AztecAddress,\n\n    revert_code: u8,\n    \n    // gas left after execution is completed\n    gas_left: Gas,\n}\n\nimpl Eq for PublicCircuitPublicInputs {\n    fn eq(self, other: Self) -> bool {\n        self.serialize() == other.serialize()\n    }\n}\n\nimpl Serialize<PUBLIC_CIRCUIT_PUBLIC_INPUTS_LENGTH> for PublicCircuitPublicInputs {\n    fn serialize(self) -> [Field; PUBLIC_CIRCUIT_PUBLIC_INPUTS_LENGTH] {\n        let mut fields: BoundedVec<Field, PUBLIC_CIRCUIT_PUBLIC_INPUTS_LENGTH> = BoundedVec::new();\n        fields.extend_from_array(self.call_context.serialize());\n        fields.push(self.args_hash);\n        fields.push(self.returns_hash);\n        for i in 0..MAX_NULLIFIER_READ_REQUESTS_PER_CALL {\n            fields.extend_from_array(self.nullifier_read_requests[i].serialize());\n        }\n        for i in 0..MAX_NULLIFIER_NON_EXISTENT_READ_REQUESTS_PER_CALL {\n            fields.extend_from_array(self.nullifier_non_existent_read_requests[i].serialize());\n        }\n        for i in 0..MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL {\n            fields.extend_from_array(self.contract_storage_update_requests[i].serialize());\n        }\n        for i in 0..MAX_PUBLIC_DATA_READS_PER_CALL {\n            fields.extend_from_array(self.contract_storage_reads[i].serialize());\n        }\n        fields.extend_from_array(self.public_call_stack_hashes);\n\n        for i in 0..MAX_NEW_NOTE_HASHES_PER_CALL {\n            fields.extend_from_array(self.new_note_hashes[i].serialize());\n        }\n        for i in 0..MAX_NEW_NULLIFIERS_PER_CALL {\n            fields.extend_from_array(self.new_nullifiers[i].serialize());\n        }\n        for i in 0..MAX_NEW_L2_TO_L1_MSGS_PER_CALL {\n            fields.extend_from_array(self.new_l2_to_l1_msgs[i].serialize());\n        }\n\n        fields.push(self.start_side_effect_counter as Field);\n        fields.push(self.end_side_effect_counter as Field);\n\n        fields.push(self.unencrypted_logs_hash);\n        fields.push(self.unencrypted_log_preimages_length);\n        fields.extend_from_array(self.historical_header.serialize());\n        fields.push(self.prover_address.to_field());\n        fields.push(self.revert_code as Field);\n        fields.extend_from_array(self.gas_left.serialize());\n        fields.storage\n    }\n}\n\nimpl Deserialize<PUBLIC_CIRCUIT_PUBLIC_INPUTS_LENGTH> for PublicCircuitPublicInputs {\n    fn deserialize(serialized: [Field; PUBLIC_CIRCUIT_PUBLIC_INPUTS_LENGTH]) -> Self {\n        // TODO(#4390): This should accept a reader ^ to avoid copying data.\n        let mut reader = Reader::new(serialized);\n        let inputs = PublicCircuitPublicInputs {\n            call_context: reader.read_struct(CallContext::deserialize),\n            args_hash: reader.read(),\n            returns_hash: reader.read(),\n            nullifier_read_requests: reader.read_struct_array(ReadRequest::deserialize, [ReadRequest::empty(); MAX_NULLIFIER_READ_REQUESTS_PER_CALL]),\n            nullifier_non_existent_read_requests: reader.read_struct_array(ReadRequest::deserialize, [ReadRequest::empty(); MAX_NULLIFIER_NON_EXISTENT_READ_REQUESTS_PER_CALL]),\n            contract_storage_update_requests: reader.read_struct_array(StorageUpdateRequest::deserialize, [StorageUpdateRequest::empty(); MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL]),\n            contract_storage_reads: reader.read_struct_array(StorageRead::deserialize, [StorageRead::empty(); MAX_PUBLIC_DATA_READS_PER_CALL]),\n            public_call_stack_hashes: reader.read_array([0; MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL]),\n            new_note_hashes: reader.read_struct_array(SideEffect::deserialize, [SideEffect::empty(); MAX_NEW_NOTE_HASHES_PER_CALL]),\n            new_nullifiers: reader.read_struct_array(SideEffectLinkedToNoteHash::deserialize, [SideEffectLinkedToNoteHash::empty(); MAX_NEW_NULLIFIERS_PER_CALL]),\n            new_l2_to_l1_msgs: reader.read_struct_array(L2ToL1Message::deserialize, [L2ToL1Message::empty(); MAX_NEW_L2_TO_L1_MSGS_PER_CALL]),\n            start_side_effect_counter: reader.read() as u32,\n            end_side_effect_counter: reader.read() as u32,\n            unencrypted_logs_hash: reader.read() as Field,\n            unencrypted_log_preimages_length: reader.read(),\n            historical_header: reader.read_struct(Header::deserialize),\n            prover_address: reader.read_struct(AztecAddress::deserialize),\n            revert_code: reader.read() as u8,\n            gas_left: reader.read_struct(Gas::deserialize),\n        };\n\n        reader.finish();\n        inputs\n    }\n}\n\nimpl Hash for PublicCircuitPublicInputs {\n    fn hash(self) -> Field {\n        pedersen_hash(self.serialize(), GENERATOR_INDEX__PUBLIC_CIRCUIT_PUBLIC_INPUTS)\n    }\n}\n\nimpl Empty for PublicCircuitPublicInputs {\n    fn empty() -> Self {\n        PublicCircuitPublicInputs {\n            call_context: CallContext::empty(),\n            args_hash: 0,\n            returns_hash: 0,\n            nullifier_read_requests: [ReadRequest::empty(); MAX_NULLIFIER_READ_REQUESTS_PER_CALL],\n            nullifier_non_existent_read_requests: [ReadRequest::empty(); MAX_NULLIFIER_NON_EXISTENT_READ_REQUESTS_PER_CALL],\n            contract_storage_update_requests: [StorageUpdateRequest::empty(); MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL],\n            contract_storage_reads: [StorageRead::empty(); MAX_PUBLIC_DATA_READS_PER_CALL],\n            public_call_stack_hashes: [0; MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL],\n            new_note_hashes: [SideEffect::empty(); MAX_NEW_NOTE_HASHES_PER_CALL],\n            new_nullifiers: [SideEffectLinkedToNoteHash::empty(); MAX_NEW_NULLIFIERS_PER_CALL],\n            new_l2_to_l1_msgs: [L2ToL1Message::empty(); MAX_NEW_L2_TO_L1_MSGS_PER_CALL],\n            start_side_effect_counter: 0 as u32,\n            end_side_effect_counter: 0 as u32,\n            unencrypted_logs_hash: 0,\n            unencrypted_log_preimages_length: 0,\n            historical_header: Header::empty(),\n            prover_address: AztecAddress::zero(),\n            revert_code: 0 as u8,\n            gas_left: Gas::empty(),\n        }\n    }\n}\n\n#[test]\nfn serialization_of_empty() {\n    let pcpi = PublicCircuitPublicInputs::empty();\n    let serialized = pcpi.serialize();\n    let deserialized = PublicCircuitPublicInputs::deserialize(serialized);\n    assert(pcpi.eq(deserialized));\n}\n\n#[test]\nfn empty_hash() {\n    let inputs = PublicCircuitPublicInputs::empty();\n    let hash = inputs.hash();\n\n    // Value from public_circuit_public_inputs.test.ts \"computes empty item hash\" test\n    let test_data_empty_hash = 0x00147d3d2cde08ee1046bf73cb6664c2bdf11b43c5dca0e72f4137f354bdad25;\n    assert_eq(hash, test_data_empty_hash);\n}\n","path":"/Users/jack-sw/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.35.1/noir-projects/noir-protocol-circuits/crates/types/src/abis/public_circuit_public_inputs.nr"},"144":{"source":"global NULLIFIER_LEAF_PREIMAGE_LENGTH: u64 = 3;\n\nuse crate::{merkle_tree::leaf_preimage::{LeafPreimage, IndexedTreeLeafPreimage}, traits::{Empty, Hash}};\n\nstruct NullifierLeafPreimage {\n    nullifier : Field,\n    next_nullifier :Field,\n    next_index : u64,\n}\n\nimpl Empty for NullifierLeafPreimage {\n    fn empty() -> Self {\n        Self {\n            nullifier : 0,\n            next_nullifier : 0,\n            next_index : 0,\n        }\n    }\n}\n\nimpl Hash for NullifierLeafPreimage {\n    fn hash(self) -> Field {\n        if self.is_empty() {\n            0\n        } else {\n            dep::std::hash::pedersen_hash(self.serialize())\n        }\n    }\n}\n\nimpl LeafPreimage for NullifierLeafPreimage {\n    fn get_key(self) -> Field {\n        self.nullifier\n    }\n\n    fn as_leaf(self) -> Field {\n        self.hash()\n    }\n}\n\nimpl IndexedTreeLeafPreimage for NullifierLeafPreimage {\n    fn get_key(self) -> Field {\n        self.nullifier\n    }\n\n    fn get_next_key(self) -> Field {\n        self.next_nullifier\n    }\n\n    fn as_leaf(self) -> Field {\n        self.hash()\n    }\n}\n\nimpl NullifierLeafPreimage {\n    pub fn is_empty(self) -> bool {\n        (self.nullifier == 0) & (self.next_nullifier == 0) & (self.next_index == 0)\n    }\n\n    pub fn serialize(self) -> [Field; NULLIFIER_LEAF_PREIMAGE_LENGTH] {\n        [self.nullifier, self.next_nullifier, self.next_index as Field]\n    }\n\n    pub fn deserialize(fields: [Field; NULLIFIER_LEAF_PREIMAGE_LENGTH]) -> Self {\n        Self { nullifier: fields[0], next_nullifier: fields[1], next_index: fields[2] as u64 }\n    }\n}\n","path":"/Users/jack-sw/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.35.1/noir-projects/noir-protocol-circuits/crates/types/src/abis/nullifier_leaf_preimage.nr"},"145":{"source":"use crate::abis::{function_data::FunctionData, public_circuit_public_inputs::PublicCircuitPublicInputs};\nuse crate::address::AztecAddress;\nuse crate::constants::GENERATOR_INDEX__CALL_STACK_ITEM;\nuse crate::traits::Hash;\n\nstruct PublicCallStackItem {\n    contract_address: AztecAddress,\n    public_inputs: PublicCircuitPublicInputs,\n    function_data: FunctionData,\n    // True if this call stack item represents a request to execute a function rather than a\n    // fulfilled execution. Used when enqueuing calls from private to public functions.\n    is_execution_request: bool,\n}\n\nimpl Hash for PublicCallStackItem {\n    fn hash(self) -> Field {\n        let item = if self.is_execution_request {\n            self.as_execution_request()\n        } else {\n            self\n        };\n\n        dep::std::hash::pedersen_hash_with_separator([\n            item.contract_address.to_field(),\n            item.function_data.hash(),\n            item.public_inputs.hash(),\n        ], GENERATOR_INDEX__CALL_STACK_ITEM)\n    }\n}\n\nimpl PublicCallStackItem {\n    fn as_execution_request(self) -> Self {\n        let public_inputs = self.public_inputs;\n        let mut request_public_inputs = PublicCircuitPublicInputs::empty();\n        request_public_inputs.call_context = public_inputs.call_context;\n        request_public_inputs.args_hash = public_inputs.args_hash;\n\n        let call_stack_item = PublicCallStackItem {\n            contract_address: self.contract_address,\n            function_data: self.function_data,\n            is_execution_request: true,\n            public_inputs: request_public_inputs\n        };\n        call_stack_item\n    }\n}\n\nmod tests {\n    use crate::{\n        abis::{\n        function_data::FunctionData, function_selector::FunctionSelector,\n        public_circuit_public_inputs::PublicCircuitPublicInputs,\n        public_call_stack_item::PublicCallStackItem, side_effect::SideEffect\n    },\n        address::AztecAddress, constants::GENERATOR_INDEX__CALL_STACK_ITEM, traits::Hash\n    };\n\n    #[test]\n    fn compute_call_stack_item_request_hash() {\n        let contract_address = AztecAddress::from_field(1);\n        let function_data = FunctionData { selector: FunctionSelector::from_u32(2), is_private: false };\n\n        let mut public_inputs = PublicCircuitPublicInputs::empty();\n        public_inputs.new_note_hashes[0] = SideEffect{\n            value: 1,\n            counter: 0,\n        };\n\n        let call_stack_item = PublicCallStackItem { contract_address, public_inputs, is_execution_request: true, function_data };\n\n        // Value from public_call_stack_item.test.ts \"Computes a callstack item request hash\" test\n        let test_data_call_stack_item_request_hash = 0x12c634ebadf4209e2def6cac0753f151422faf11237dc4f136bc17a84c8c2d76;\n        assert_eq(call_stack_item.hash(), test_data_call_stack_item_request_hash);\n    }\n\n    #[test]\n    fn compute_call_stack_item_hash() {\n        let contract_address = AztecAddress::from_field(1);\n        let function_data = FunctionData { selector: FunctionSelector::from_u32(2), is_private: false };\n\n        let mut public_inputs = PublicCircuitPublicInputs::empty();\n        public_inputs.new_note_hashes[0] = SideEffect{\n            value: 1,\n            counter: 0,\n        };\n\n        let call_stack_item = PublicCallStackItem { contract_address, public_inputs, is_execution_request: false, function_data };\n\n        // Value from public_call_stack_item.test.ts \"Computes a callstack item hash\" test\n        let test_data_call_stack_item_hash = 0x0864975afc9bec7eb7ec5b5608bbef648ec9afead1bbe986d0af148e3c944b9b;\n        assert_eq(call_stack_item.hash(), test_data_call_stack_item_hash);\n    }\n}\n","path":"/Users/jack-sw/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.35.1/noir-projects/noir-protocol-circuits/crates/types/src/abis/public_call_stack_item.nr"},"152":{"source":"use crate::{\n    abis::function_selector::FunctionSelector,\n    constants::{GENERATOR_INDEX__FUNCTION_DATA, FUNCTION_DATA_LENGTH}, hash::pedersen_hash,\n    traits::{Serialize, Hash, Deserialize, Empty}\n};\n\nstruct FunctionData {\n    selector : FunctionSelector,\n    is_private : bool,\n}\n\nimpl Eq for FunctionData {\n    fn eq(self, other: Self) -> bool {\n        self.selector.eq(other.selector) &\n        self.is_private == other.is_private\n    }\n}\n\nimpl Serialize<FUNCTION_DATA_LENGTH> for FunctionData {\n    // A field is ~256 bits\n    // TODO(https://github.com/AztecProtocol/aztec-packages/issues/3057): Since, function data can fit into a Field,\n    // This method will simply return a bit packed Field instead of hashing\n    fn serialize(self) -> [Field; FUNCTION_DATA_LENGTH] {\n        [\n            self.selector.to_field(),\n            self.is_private as Field,\n        ]\n    }\n}\n\nimpl Deserialize<FUNCTION_DATA_LENGTH> for FunctionData {\n    fn deserialize(serialized: [Field; FUNCTION_DATA_LENGTH]) -> Self {\n        Self {\n            selector: FunctionSelector::from_field(serialized[0]),\n            is_private: serialized[1] as bool,\n        }\n    }\n}\n\nimpl Hash for FunctionData {\n    fn hash(self) -> Field {\n        pedersen_hash(self.serialize(), GENERATOR_INDEX__FUNCTION_DATA)\n    }\n}\n\nimpl Empty for FunctionData {\n    fn empty() -> Self {\n        FunctionData {\n            selector: FunctionSelector::empty(),\n            is_private: false,\n        }\n    }\n}\n\n#[test]\nfn serialization_of_empty() {\n    let data = FunctionData::empty();\n    let serialized = data.serialize();\n    let deserialized = FunctionData::deserialize(serialized);\n    assert(data.eq(deserialized));\n}\n\n#[test]\nfn empty_hash() {\n    let data = FunctionData::empty();\n    let hash = data.hash();\n\n    // Value from function_data.test.ts \"computes empty item hash\" test\n    let test_data_empty_hash = 0x27b1d0839a5b23baf12a8d195b18ac288fcf401afb2f70b8a4b529ede5fa9fed;\n    assert_eq(hash, test_data_empty_hash);\n}\n","path":"/Users/jack-sw/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.35.1/noir-projects/noir-protocol-circuits/crates/types/src/abis/function_data.nr"},"157":{"source":"use crate::utils::field::field_from_bytes;\nuse dep::std::cmp::Eq;\nuse crate::traits::{Serialize, Deserialize, FromField, ToField, Empty};\n\nglobal SELECTOR_SIZE = 4;\n\nstruct FunctionSelector {\n    // 1st 4-bytes of abi-encoding of function.\n    inner: u32,\n}\n\nimpl Eq for FunctionSelector {\n    fn eq(self, function_selector: FunctionSelector) -> bool {\n        function_selector.inner == self.inner\n    }\n}\n\nimpl Serialize<1> for FunctionSelector {\n    fn serialize(self: Self) -> [Field; 1] {\n        [self.inner as Field]\n    }\n}\n\nimpl Deserialize<1> for FunctionSelector {\n    fn deserialize(fields: [Field; 1]) -> Self {\n        Self {\n            inner: fields[0] as u32\n        }\n    }\n}\n\nimpl FromField for FunctionSelector {\n    fn from_field(field: Field) -> Self {\n        Self { inner: field as u32 }\n    }\n}\n\nimpl ToField for FunctionSelector {\n    fn to_field(self) -> Field {\n        self.inner as Field\n    }\n}\n\nimpl Empty for FunctionSelector {\n    fn empty() -> Self {\n        Self { inner: 0 as u32 }\n    }\n}\n\nimpl FunctionSelector {\n    pub fn from_u32(value: u32) -> Self {\n        Self { inner: value }\n    }\n\n    pub fn from_signature<N>(signature: str<N>) -> Self {\n        let bytes = signature.as_bytes();\n        let hash = dep::std::hash::keccak256(bytes, bytes.len() as u32);\n\n        let mut selector_be_bytes = [0; SELECTOR_SIZE];\n        for i in 0..SELECTOR_SIZE {\n            selector_be_bytes[i] = hash[i];\n        }\n\n        FunctionSelector::from_field(field_from_bytes(selector_be_bytes, true))\n    }\n\n    pub fn zero() -> Self {\n        Self { inner: 0 }\n    }\n}\n","path":"/Users/jack-sw/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.35.1/noir-projects/noir-protocol-circuits/crates/types/src/abis/function_selector.nr"},"159":{"source":"use dep::std::cmp::Eq;\n\nstruct AppendOnlyTreeSnapshot {\n    root : Field,\n    // TODO(Alvaro) change this to a u64\n    next_available_leaf_index : u32\n}\n\nglobal APPEND_ONLY_TREE_SNAPSHOT_LENGTH: u64 = 2;\n\nimpl AppendOnlyTreeSnapshot {\n    pub fn serialize(self) -> [Field; APPEND_ONLY_TREE_SNAPSHOT_LENGTH] {\n        [self.root, self.next_available_leaf_index as Field]\n    }\n\n    pub fn deserialize(serialized: [Field; APPEND_ONLY_TREE_SNAPSHOT_LENGTH]) -> AppendOnlyTreeSnapshot {\n        AppendOnlyTreeSnapshot { root: serialized[0], next_available_leaf_index: serialized[1] as u32 }\n    }\n\n    pub fn zero() -> Self {\n        Self { root: 0, next_available_leaf_index: 0 }\n    }\n}\n\nimpl Eq for AppendOnlyTreeSnapshot {\n    fn eq(self, other : AppendOnlyTreeSnapshot) -> bool {\n        (self.root == other.root) & (self.next_available_leaf_index == other.next_available_leaf_index)\n    }\n}","path":"/Users/jack-sw/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.35.1/noir-projects/noir-protocol-circuits/crates/types/src/abis/append_only_tree_snapshot.nr"},"161":{"source":"use crate::{\n    abis::side_effect::{OrderedValue, ContractScopedOrderedValue},\n    traits::{Empty, Serialize, Deserialize}, address::AztecAddress\n};\nuse dep::std::cmp::Eq;\n\nglobal READ_REQUEST_SERIALIZED_LEN = 2;\nglobal READ_REQUEST_CONTEXT_SERIALIZED_LEN = 3;\n\nstruct ReadRequest {\n    value: Field,\n    counter: u32,\n}\n\nimpl OrderedValue<Field> for ReadRequest {\n    fn value(self) -> Field {\n        self.value\n    }\n    fn counter(self) -> u32 {\n        self.counter\n    }\n}\n\nimpl Eq for ReadRequest {\n    fn eq(self, read_request: ReadRequest) -> bool {\n        (self.value == read_request.value)\n        & (self.counter == read_request.counter)\n    }\n}\n\nimpl Empty for ReadRequest {\n    fn empty() -> Self {\n        ReadRequest {\n            value: 0,\n            counter: 0,\n        }\n    }\n}\n\nimpl Serialize<READ_REQUEST_SERIALIZED_LEN> for ReadRequest {\n    fn serialize(self) -> [Field; READ_REQUEST_SERIALIZED_LEN] {\n        [self.value, self.counter as Field]\n    }\n}\n\nimpl Deserialize<READ_REQUEST_SERIALIZED_LEN> for ReadRequest {\n    fn deserialize(values: [Field; READ_REQUEST_SERIALIZED_LEN]) -> Self {\n        Self {\n            value: values[0],\n            counter: values[1] as u32,\n        }\n    }\n}\n\nimpl ReadRequest {\n    pub fn to_context(self, contract_address: AztecAddress) -> ReadRequestContext {\n        ReadRequestContext { value: self.value, counter: self.counter, contract_address }\n    }\n}\n\nstruct ReadRequestContext {\n    value: Field,\n    counter: u32,\n    contract_address: AztecAddress,\n}\n\nimpl OrderedValue<Field> for ReadRequestContext {\n    fn value(self) -> Field {\n        self.value\n    }\n    fn counter(self) -> u32 {\n        self.counter\n    }\n}\n\nimpl ContractScopedOrderedValue<Field> for ReadRequestContext {\n    fn value(self) -> Field {\n        self.value\n    }\n    fn counter(self) -> u32 {\n        self.counter\n    }\n    fn contract_address(self) -> AztecAddress {\n        self.contract_address\n    }\n}\n\nimpl Eq for ReadRequestContext {\n    fn eq(self, read_request: ReadRequestContext) -> bool {\n        (self.value == read_request.value)\n        & (self.counter == read_request.counter)\n        & (self.contract_address.eq(read_request.contract_address))\n    }\n}\n\nimpl Empty for ReadRequestContext {\n    fn empty() -> Self {\n        ReadRequestContext {\n            value: 0,\n            counter: 0,\n            contract_address: AztecAddress::empty(),\n        }\n    }\n}\n\nimpl Serialize<READ_REQUEST_CONTEXT_SERIALIZED_LEN> for ReadRequestContext {\n    fn serialize(self) -> [Field; READ_REQUEST_CONTEXT_SERIALIZED_LEN] {\n        [self.value, self.counter as Field, self.contract_address.to_field()]\n    }\n}\n\nimpl Deserialize<READ_REQUEST_CONTEXT_SERIALIZED_LEN> for ReadRequestContext {\n    fn deserialize(values: [Field; READ_REQUEST_CONTEXT_SERIALIZED_LEN]) -> Self {\n        Self {\n            value: values[0],\n            counter: values[1] as u32,\n            contract_address: AztecAddress::from_field(values[2]),\n        }\n    }\n}\n\n","path":"/Users/jack-sw/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.35.1/noir-projects/noir-protocol-circuits/crates/types/src/abis/read_request.nr"},"164":{"source":"use crate::{\n    abis::function_selector::FunctionSelector, address::{EthAddress, AztecAddress},\n    constants::GAS_FEES_LENGTH, hash::pedersen_hash, traits::{Deserialize, Hash, Serialize, Empty},\n    abis::side_effect::Ordered, utils::reader::Reader\n};\n\nstruct GasFees {\n    fee_per_da_gas: Field,\n    fee_per_l1_gas: Field,\n    fee_per_l2_gas: Field,\n}\n\nimpl GasFees {\n    fn new(fee_per_da_gas: Field, fee_per_l1_gas: Field, fee_per_l2_gas: Field) -> Self {\n        Self { fee_per_da_gas, fee_per_l1_gas, fee_per_l2_gas }\n    }\n}\n\nimpl Serialize<GAS_FEES_LENGTH> for GasFees {\n    fn serialize(self) -> [Field; GAS_FEES_LENGTH] {\n        [self.fee_per_da_gas, self.fee_per_l1_gas, self.fee_per_l2_gas]\n    }\n}\n\nimpl Deserialize<GAS_FEES_LENGTH> for GasFees {\n    fn deserialize(serialized: [Field; GAS_FEES_LENGTH]) -> GasFees {\n        GasFees::new(serialized[0], serialized[1], serialized[2])\n    }\n}\n\nimpl Eq for GasFees {\n    fn eq(self, other : GasFees) -> bool {\n        (self.fee_per_da_gas == other.fee_per_da_gas) & (self.fee_per_l1_gas == other.fee_per_l1_gas) & (self.fee_per_l2_gas == other.fee_per_l2_gas)\n    }\n}\n\nimpl Empty for GasFees {\n    fn empty() -> Self {\n        GasFees::new(0, 0, 0)\n    }\n}\n","path":"/Users/jack-sw/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.35.1/noir-projects/noir-protocol-circuits/crates/types/src/abis/gas_fees.nr"},"166":{"source":"use crate::{constants::MAX_BLOCK_NUMBER_LENGTH, traits::{Deserialize, Serialize, Empty}};\n\nstruct MaxBlockNumber {\n    _opt: Option<u32>\n}\n\nimpl Empty for MaxBlockNumber {\n    fn empty() -> Self {\n        Self { _opt: Option::none() }\n    }\n}\n\nimpl Eq for MaxBlockNumber {\n    fn eq(self, other: Self) -> bool {\n        self._opt == other._opt\n    }\n}\n\nimpl Serialize<MAX_BLOCK_NUMBER_LENGTH> for MaxBlockNumber {\n    fn serialize(self) -> [Field; MAX_BLOCK_NUMBER_LENGTH] {\n        [self._opt._is_some as Field, self._opt._value as Field]\n    }\n}\n\nimpl Deserialize<MAX_BLOCK_NUMBER_LENGTH> for MaxBlockNumber {\n    fn deserialize(serialized: [Field; MAX_BLOCK_NUMBER_LENGTH]) -> MaxBlockNumber {\n        MaxBlockNumber {\n            _opt: Option {\n                _is_some: serialized[0] as bool,\n                _value: serialized[1] as u32,\n            }\n        }\n    }\n}\n\nimpl MaxBlockNumber {\n    pub fn new(max_block_number: u32) -> Self {\n        Self { _opt: Option::some(max_block_number) }\n    }\n\n    pub fn is_none(self) -> bool {\n        self._opt.is_none()\n    }\n\n    pub fn is_some(self) -> bool {\n        self._opt.is_some()\n    }\n\n    pub fn unwrap(self) -> u32 {\n        self._opt.unwrap()\n    }\n\n    pub fn unwrap_unchecked(self) -> u32 {\n        self._opt.unwrap_unchecked()\n    }\n\n    pub fn min(lhs: MaxBlockNumber, rhs: MaxBlockNumber) -> MaxBlockNumber {\n        if rhs.is_none() {\n            lhs // lhs might also be none, but in that case both would be\n        } else {\n            MaxBlockNumber::min_with_u32(lhs, rhs.unwrap_unchecked())\n        }\n    }\n\n    pub fn min_with_u32(lhs: MaxBlockNumber, rhs: u32) -> MaxBlockNumber {\n        if lhs._opt.is_none() {\n            MaxBlockNumber::new(rhs)\n        } else {\n            let lhs_value = lhs._opt.unwrap_unchecked();\n\n            MaxBlockNumber::new(if lhs_value < rhs { lhs_value } else { rhs })\n        }\n    }\n}\n\n#[test]\nfn zeroed_is_none() {\n    // Large parts of the kernel rely on zeroed to initialize structs. This conveniently matches what `default` does,\n    // and though we should eventually move everything to use `default`, it's good to check for now that both are\n    // equivalent.\n    let a = MaxBlockNumber::empty();\n    assert(a.is_none());\n}\n\n#[test]\nfn serde_default() {\n    let a = MaxBlockNumber::empty();\n    let b = MaxBlockNumber::deserialize(a.serialize());\n    assert(b.is_none());\n}\n\n#[test]\nfn serde_some() {\n    let a = MaxBlockNumber::new(13);\n    let b = MaxBlockNumber::deserialize(a.serialize());\n    assert_eq(b.unwrap(), 13);\n}\n\n#[test(should_fail)]\nfn default_unwrap_panics() {\n    let a = MaxBlockNumber::empty();\n    let _ = a.unwrap();\n}\n\n#[test]\nfn min_default_default() {\n    let a = MaxBlockNumber::empty();\n    let b = MaxBlockNumber::empty();\n\n    assert(MaxBlockNumber::min(a, b).is_none());\n}\n\n#[test]\nfn min_default_some() {\n    let a = MaxBlockNumber::empty();\n    let b = MaxBlockNumber::new(13);\n\n    assert_eq(MaxBlockNumber::min(a, b).unwrap(), 13);\n    assert_eq(MaxBlockNumber::min(b, a).unwrap(), 13);\n}\n\n#[test]\nfn min_some_some() {\n    let a = MaxBlockNumber::new(13);\n    let b = MaxBlockNumber::new(42);\n\n    assert_eq(MaxBlockNumber::min(a, b).unwrap(), 13);\n    assert_eq(MaxBlockNumber::min(b, a).unwrap(), 13);\n}\n\n#[test]\nfn min_with_u32_default() {\n    let a = MaxBlockNumber::empty();\n    let b = 42;\n\n    assert_eq(MaxBlockNumber::min_with_u32(a, b).unwrap(), 42);\n}\n\n#[test]\nfn min_with_u32_some() {\n    let a = MaxBlockNumber::new(13);\n    let b = 42;\n    let c = 8;\n\n    assert_eq(MaxBlockNumber::min_with_u32(a, b).unwrap(), 13);\n    assert_eq(MaxBlockNumber::min_with_u32(a, c).unwrap(), 8);\n}\n","path":"/Users/jack-sw/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.35.1/noir-projects/noir-protocol-circuits/crates/types/src/abis/max_block_number.nr"},"171":{"source":"use crate::{\n    abis::{\n    append_only_tree_snapshot::{AppendOnlyTreeSnapshot, APPEND_ONLY_TREE_SNAPSHOT_LENGTH},\n    global_variables::{GlobalVariables, GLOBAL_VARIABLES_LENGTH}\n},\n    constants::{GENERATOR_INDEX__BLOCK_HASH, HEADER_LENGTH, STATE_REFERENCE_LENGTH, CONTENT_COMMITMENT_LENGTH},\n    hash::pedersen_hash, state_reference::StateReference, traits::{Deserialize, Empty, Hash, Serialize},\n    utils::arr_copy_slice, content_commitment::ContentCommitment\n};\n\n// docs:start:header\nstruct Header {\n    last_archive: AppendOnlyTreeSnapshot,\n    content_commitment: ContentCommitment,\n    state: StateReference,\n    global_variables: GlobalVariables,\n}\n// docs:end:header\n\nimpl Eq for Header {\n    fn eq(self, other: Self) -> bool {\n        self.last_archive.eq(other.last_archive) &\n        self.content_commitment.eq(other.content_commitment) &\n        self.state.eq(other.state) &\n        self.global_variables.eq(other.global_variables)\n    }\n}\n\nimpl Serialize<HEADER_LENGTH> for Header {\n    fn serialize(self) -> [Field; HEADER_LENGTH] {\n        let mut fields: BoundedVec<Field, HEADER_LENGTH> = BoundedVec::new();\n\n        fields.extend_from_array(self.last_archive.serialize());\n        fields.extend_from_array(self.content_commitment.serialize());\n        fields.extend_from_array(self.state.serialize());\n        fields.extend_from_array(self.global_variables.serialize());\n\n        fields.storage\n    }\n}\n\nimpl Deserialize<HEADER_LENGTH> for Header {\n    fn deserialize(serialized: [Field; HEADER_LENGTH]) -> Self {\n        let mut offset = 0;\n\n        let last_archive_fields = arr_copy_slice(serialized, [0; APPEND_ONLY_TREE_SNAPSHOT_LENGTH], offset);\n        offset = offset + APPEND_ONLY_TREE_SNAPSHOT_LENGTH;\n\n        let content_commitment_fields = arr_copy_slice(serialized, [0; CONTENT_COMMITMENT_LENGTH], offset);\n        offset = offset + CONTENT_COMMITMENT_LENGTH;\n\n        let state_fields = arr_copy_slice(serialized, [0; STATE_REFERENCE_LENGTH], offset);\n        offset = offset + STATE_REFERENCE_LENGTH;\n\n        let global_variables_fields = arr_copy_slice(serialized, [0; GLOBAL_VARIABLES_LENGTH], offset);\n\n        Header {\n            last_archive: AppendOnlyTreeSnapshot::deserialize(last_archive_fields),\n            content_commitment: ContentCommitment::deserialize(content_commitment_fields),\n            state: StateReference::deserialize(state_fields),\n            global_variables: GlobalVariables::deserialize(global_variables_fields),\n        }\n    }\n}\n\nimpl Empty for Header {\n    fn empty() -> Self {\n        Self {\n            last_archive: AppendOnlyTreeSnapshot::zero(),\n            content_commitment: ContentCommitment::empty(),\n            state: StateReference::empty(),\n            global_variables: GlobalVariables::empty(),\n        }\n    }\n}\n\nimpl Hash for Header {\n    fn hash(self) -> Field {\n        pedersen_hash(self.serialize(), GENERATOR_INDEX__BLOCK_HASH)\n    }\n}\n\n#[test]\nfn serialization_of_empty() {\n    let header = Header::empty();\n    let serialized = header.serialize();\n    let deserialized = Header::deserialize(serialized);\n    assert(header.eq(deserialized));\n}\n\n#[test]\nfn hash_smoke() {\n    let header = Header::empty();\n    let _hashed = header.hash();\n}\n\n#[test]\nfn empty_hash_is_zero() {\n    let header = Header::empty();\n    let hash = header.hash();\n\n    // Value from new_contract_data.test.ts \"computes empty hash\" test\n    let test_data_empty_hash = 0x124e8c40a6eca2e3ad10c04050b01a3fad00df3cea47b13592c7571b6914c7a7;\n    assert_eq(hash, test_data_empty_hash);\n}\n","path":"/Users/jack-sw/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.35.1/noir-projects/noir-protocol-circuits/crates/types/src/header.nr"},"198":{"source":"pub fn field_from_bytes<N>(bytes: [u8; N], big_endian: bool) -> Field {\n    assert(bytes.len() < 32, \"field_from_bytes: N must be less than 32\");\n    let mut as_field = 0;\n    let mut offset = 1;\n    for i in 0..N {\n        let mut index = i;\n        if big_endian {\n            index = N - i - 1;\n        }\n        as_field += (bytes[index] as Field) * offset;\n        offset *= 256;\n    }\n\n    as_field\n}\n\n// Convert a 32 byte array to a field element by truncating the final byte\npub fn field_from_bytes_32_trunc(bytes32: [u8; 32]) -> Field {\n    // Convert it to a field element\n    let mut v = 1;\n    let mut high = 0 as Field;\n    let mut low = 0 as Field;\n\n    for i in 0..15 {\n        // covers bytes 16..30 (31 is truncated and ignored)\n        low = low + (bytes32[15 + 15 - i] as Field) * v;\n        v = v * 256;\n        // covers bytes 0..14\n        high = high + (bytes32[14 - i] as Field) * v;\n    }\n    // covers byte 15\n    low = low + (bytes32[15] as Field) * v;\n\n    low + high * v\n}\n\n// TODO to radix returns u8, so we cannot use bigger radixes. It'd be ideal to use a radix of the maximum range-constrained integer noir supports\npub fn full_field_less_than(lhs: Field, rhs: Field) -> bool {\n    lhs.lt(rhs)\n}\n\npub fn full_field_greater_than(lhs: Field, rhs: Field) -> bool {\n    rhs.lt(lhs)\n}\n\n#[test]\nunconstrained fn bytes_field_test() {\n    // Tests correctness of field_from_bytes_32_trunc against existing methods\n    // Bytes representing 0x543e0a6642ffeb8039296861765a53407bba62bd1c97ca43374de950bbe0a7\n    let inputs = [\n        84, 62, 10, 102, 66, 255, 235, 128, 57, 41, 104, 97, 118, 90, 83, 64, 123, 186, 98, 189, 28, 151, 202, 67, 55, 77, 233, 80, 187, 224, 167\n    ];\n    let field = field_from_bytes(inputs, true);\n    let return_bytes = field.to_be_bytes(31);\n    for i in 0..31 {\n        assert_eq(inputs[i], return_bytes[i]);\n    }\n    // 32 bytes - we remove the final byte, and check it matches the field\n    let inputs2 = [\n        84, 62, 10, 102, 66, 255, 235, 128, 57, 41, 104, 97, 118, 90, 83, 64, 123, 186, 98, 189, 28, 151, 202, 67, 55, 77, 233, 80, 187, 224, 167, 158\n    ];\n    let field2 = field_from_bytes_32_trunc(inputs2);\n    let return_bytes2 = field.to_be_bytes(31);\n\n    for i in 0..31 {\n        assert_eq(return_bytes2[i], return_bytes[i]);\n    }\n    assert_eq(field2, field);\n}\n","path":"/Users/jack-sw/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.35.1/noir-projects/noir-protocol-circuits/crates/types/src/utils/field.nr"},"200":{"source":"struct Reader<N> {\n    data: [Field; N],\n    offset: u64,\n}\n\nimpl<N> Reader<N> {\n    pub fn new(data: [Field; N]) -> Self {\n        Self { data, offset: 0 }\n    }\n\n    pub fn read(&mut self) -> Field {\n        let result = self.data[self.offset];\n        self.offset += 1;\n        result\n    }\n\n    pub fn read_array<K>(&mut self, mut result: [Field; K]) -> [Field; K] {\n        for i in 0..K {\n            result[i] = self.data[self.offset + i];\n        }\n        self.offset += K;\n        result\n    }\n\n    // TODO(#4394)\n    pub fn read_struct<T, K>(&mut self, deserialise: fn([Field; K]) -> T) -> T {\n        let result = deserialise(self.read_array([0; K]));\n        result\n    }\n\n    pub fn read_struct_array<T, K, C>(&mut self, deserialise: fn([Field; K]) -> T, mut result: [T; C]) -> [T; C] {\n        for i in 0..C {\n            result[i] = self.read_struct(deserialise);\n        }\n        result\n    }\n\n    pub fn finish(self) {\n        assert(self.offset == self.data.len(), \"Reader did not read all data\");\n    }\n}\n","path":"/Users/jack-sw/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.35.1/noir-projects/noir-protocol-circuits/crates/types/src/utils/reader.nr"},"202":{"source":"use crate::traits::{Empty, Hash};\n\nstruct PublicDataTreeLeafPreimage {\n    slot : Field,\n    value: Field,\n    next_slot :Field,\n    next_index : u64,\n}\n\nimpl Empty for PublicDataTreeLeafPreimage {\n    fn empty() -> Self {\n        Self {\n            slot: 0,\n            value: 0,\n            next_slot: 0,\n            next_index: 0,\n        }\n    }\n}\n\nimpl Hash for PublicDataTreeLeafPreimage {\n    fn hash(self) -> Field {\n        if self.is_empty() {\n            0\n        } else {\n            dep::std::hash::pedersen_hash([self.slot, self.value, (self.next_index as Field), self.next_slot])\n        }\n    }\n}\n\nimpl PublicDataTreeLeafPreimage {\n    pub fn is_empty(self) -> bool {\n        (self.slot == 0) & (self.value == 0) & (self.next_slot == 0) & (self.next_index == 0)\n    }\n}\n","path":"/Users/jack-sw/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.35.1/noir-projects/noir-protocol-circuits/crates/types/src/public_data_tree_leaf_preimage.nr"},"204":{"source":"use dep::std::cmp::Eq;\n\n// Trait: is_empty\n//\n// The general is_empty trait checks if a data type is is empty,\n// and it defines empty for the basic data types as 0.\n//\n// If a Field is equal to zero, then it is regarded as zero.\n// We will go with this definition for now, however it can be problematic \n// if a value can actually be zero. In a future refactor, we can \n// use the optional type for safety. Doing it now would lead to a worse devex\n// and would make it harder to sync up with the cpp code.\n// Preferred over Default trait to convey intent, as default doesn't necessarily mean empty.\ntrait Empty {\n    fn empty() -> Self;\n}\n\nimpl Empty for Field { fn empty() -> Self {0} }\n\nimpl Empty for u1 { fn empty() -> Self {0} }\nimpl Empty for u8 { fn empty() -> Self {0} }\nimpl Empty for u32 { fn empty() -> Self {0} }\nimpl Empty for u64 { fn empty() -> Self {0} }\nimpl Empty for U128 { fn empty() -> Self {U128::from_integer(0)} }\n\npub fn is_empty<T>(item: T) -> bool where T: Empty + Eq {\n    item.eq(T::empty())\n}\n\npub fn is_empty_array<T, N>(array: [T; N]) -> bool where T: Empty + Eq {\n    array.all(|elem| is_empty(elem))\n}\n\ntrait Hash {\n    fn hash(self) -> Field;\n}\n\ntrait ToField {\n    fn to_field(self) -> Field;\n}\n\nimpl ToField for Field {\n    fn to_field(self) -> Field {\n        self\n    }\n}\n\nimpl ToField for bool { fn to_field(self) -> Field { self as Field } }\nimpl ToField for u1 { fn to_field(self) -> Field { self as Field } }\nimpl ToField for u8 { fn to_field(self) -> Field { self as Field } }\nimpl ToField for u32 { fn to_field(self) -> Field { self as Field } }\nimpl ToField for u64 { fn to_field(self) -> Field { self as Field } }\nimpl ToField for U128 {\n    fn to_field(self) -> Field {\n        self.to_integer()\n    }\n}\n\ntrait FromField {\n    fn from_field(value: Field) -> Self;\n}\n\nimpl FromField for Field {\n    fn from_field(value: Field) -> Self {\n        value\n    }\n}\n\nimpl FromField for bool { fn from_field(value: Field) -> Self { value as bool } }\nimpl FromField for u1 { fn from_field(value: Field) -> Self { value as u1 } }\nimpl FromField for u8 { fn from_field(value: Field) -> Self { value as u8 } }\nimpl FromField for u32 { fn from_field(value: Field) -> Self { value as u32 } }\nimpl FromField for u64 { fn from_field(value: Field) -> Self { value as u64 } }\nimpl FromField for U128 {\n    fn from_field(value: Field) -> Self {\n        U128::from_integer(value)\n    }\n}\n\n// docs:start:serialize\ntrait Serialize<N> {\n    fn serialize(self) -> [Field; N];\n}\n// docs:end:serialize\n\n// docs:start:deserialize\ntrait Deserialize<N> {\n    fn deserialize(fields: [Field; N]) -> Self;\n}\n// docs:end:deserialize\n","path":"/Users/jack-sw/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.35.1/noir-projects/noir-protocol-circuits/crates/types/src/traits.nr"},"205":{"source":"use crate::traits::{Serialize, Deserialize};\n\nglobal BOOL_SERIALIZED_LEN: Field = 1;\nglobal U8_SERIALIZED_LEN: Field = 1;\nglobal U32_SERIALIZED_LEN: Field = 1;\nglobal U64_SERIALIZED_LEN: Field = 1;\nglobal U128_SERIALIZED_LEN: Field = 1;\nglobal FIELD_SERIALIZED_LEN: Field = 1;\n\nimpl Serialize<BOOL_SERIALIZED_LEN> for bool {\n    fn serialize(self) -> [Field; BOOL_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<BOOL_SERIALIZED_LEN> for bool {\n    fn deserialize(fields: [Field; BOOL_SERIALIZED_LEN]) -> bool {\n        fields[0] as bool\n    }\n}\n\nimpl Serialize<U8_SERIALIZED_LEN> for u8 {\n    fn serialize(self) -> [Field; U32_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<U8_SERIALIZED_LEN> for u8 {\n    fn deserialize(fields: [Field; U8_SERIALIZED_LEN]) -> Self {\n        fields[0] as u8\n    }\n}\n\nimpl Serialize<U32_SERIALIZED_LEN> for u32 {\n    fn serialize(self) -> [Field; U32_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<U32_SERIALIZED_LEN> for u32 {\n    fn deserialize(fields: [Field; U32_SERIALIZED_LEN]) -> Self {\n        fields[0] as u32\n    }\n}\n\nimpl Serialize<U64_SERIALIZED_LEN> for u64 {\n    fn serialize(self) -> [Field; U64_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<U64_SERIALIZED_LEN> for u64 {\n    fn deserialize(fields: [Field; U64_SERIALIZED_LEN]) -> Self {\n        fields[0] as u64\n    }\n}\n\nimpl Serialize<U128_SERIALIZED_LEN> for U128 {\n    fn serialize(self) -> [Field; 1] {\n        [self.to_integer()]\n    }\n\n}\n\nimpl Deserialize<U128_SERIALIZED_LEN> for U128 {\n    fn deserialize(fields: [Field; U128_SERIALIZED_LEN]) -> Self {\n        U128::from_integer(fields[0])\n    }\n}\n\nimpl Serialize<FIELD_SERIALIZED_LEN> for Field {\n    fn serialize(self) -> [Field; U32_SERIALIZED_LEN] {\n        [self]\n    }\n}\n\nimpl Deserialize<FIELD_SERIALIZED_LEN> for Field {\n    fn deserialize(fields: [Field; FIELD_SERIALIZED_LEN]) -> Self {\n        fields[0]\n    }\n}\n","path":"/Users/jack-sw/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.35.1/noir-projects/noir-protocol-circuits/crates/types/src/type_serialization.nr"},"206":{"source":"use crate::{\n    abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot, constants::PARTIAL_STATE_REFERENCE_LENGTH,\n    traits::{Deserialize, Empty, Hash, Serialize}\n};\n\nstruct PartialStateReference {\n    note_hash_tree: AppendOnlyTreeSnapshot,\n    nullifier_tree: AppendOnlyTreeSnapshot,\n    public_data_tree: AppendOnlyTreeSnapshot,\n}\n\nimpl Eq for PartialStateReference {\n    fn eq(self, other: PartialStateReference) -> bool {\n        self.note_hash_tree.eq(other.note_hash_tree) &\n        self.nullifier_tree.eq(other.nullifier_tree) &\n        self.public_data_tree.eq(other.public_data_tree)\n    }\n}\n\nimpl Serialize<PARTIAL_STATE_REFERENCE_LENGTH> for PartialStateReference {\n    fn serialize(self) -> [Field; PARTIAL_STATE_REFERENCE_LENGTH] {\n        let serialized_note_hash_tree = self.note_hash_tree.serialize();\n        let serialized_nullifier_tree = self.nullifier_tree.serialize();\n        let serialized_public_data_tree = self.public_data_tree.serialize();\n\n        [\n            serialized_note_hash_tree[0], \n            serialized_note_hash_tree[1],\n            serialized_nullifier_tree[0],\n            serialized_nullifier_tree[1],\n            serialized_public_data_tree[0],\n            serialized_public_data_tree[1],\n        ]\n    }\n}\n\nimpl Deserialize<PARTIAL_STATE_REFERENCE_LENGTH> for PartialStateReference {\n    fn deserialize(serialized: [Field; PARTIAL_STATE_REFERENCE_LENGTH]) -> PartialStateReference {\n        PartialStateReference {\n            note_hash_tree: AppendOnlyTreeSnapshot::deserialize(\n                [serialized[0], serialized[1]]\n            ),\n            nullifier_tree: AppendOnlyTreeSnapshot::deserialize(\n                [serialized[2], serialized[3]]\n            ),\n            public_data_tree: AppendOnlyTreeSnapshot::deserialize(\n                [serialized[4], serialized[5]]\n            ),\n        }\n    }\n}\n\nimpl Empty for PartialStateReference {\n    fn empty() -> Self {\n        Self {\n            note_hash_tree: AppendOnlyTreeSnapshot::zero(),\n            nullifier_tree: AppendOnlyTreeSnapshot::zero(),\n            public_data_tree: AppendOnlyTreeSnapshot::zero(),\n        }\n    }\n}\n\n#[test]\nfn serialization_of_empty() {\n    let partial = PartialStateReference::empty();\n    let _serialized = partial.serialize();\n    let _deserialized = PartialStateReference::deserialize(_serialized);\n}\n","path":"/Users/jack-sw/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.35.1/noir-projects/noir-protocol-circuits/crates/types/src/partial_state_reference.nr"},"208":{"source":"use crate::{\n    constants::CONTENT_COMMITMENT_LENGTH, traits::{Deserialize, Empty, Hash, Serialize},\n    utils::arr_copy_slice\n};\n\nstruct ContentCommitment {\n  tx_tree_height: Field,\n  txs_effects_hash: Field,\n  in_hash: Field,\n  out_hash: Field,\n}\n\nimpl Serialize<CONTENT_COMMITMENT_LENGTH> for ContentCommitment {\n  fn serialize(self) -> [Field; CONTENT_COMMITMENT_LENGTH] {\n    let mut fields: BoundedVec<Field, CONTENT_COMMITMENT_LENGTH> = BoundedVec::new();\n\n    fields.push(self.tx_tree_height);\n    fields.push(self.txs_effects_hash);\n    fields.push(self.in_hash);\n    fields.push(self.out_hash);\n\n    fields.storage\n  }\n}\n\nimpl Deserialize<CONTENT_COMMITMENT_LENGTH> for ContentCommitment {\n  fn deserialize(serialized: [Field; CONTENT_COMMITMENT_LENGTH]) -> Self {\n    let tx_tree_height = serialized[0];\n\n    let txs_effects_hash = serialized[1];\n\n    let in_hash = serialized[2];\n\n    let out_hash = serialized[3];\n\n    Self {\n      tx_tree_height,\n      txs_effects_hash,\n      in_hash,\n      out_hash,\n    }\n  }\n}\n\nimpl Empty for ContentCommitment {\n  fn empty() -> Self {\n    Self {\n      tx_tree_height: 0,\n      txs_effects_hash: 0,\n      in_hash: 0,\n      out_hash: 0,\n    }\n  }\n}\n\nimpl Eq for ContentCommitment {\n  fn eq(self, other: Self) -> bool {\n    (self.tx_tree_height == other.tx_tree_height)\n      & (self.txs_effects_hash == other.txs_effects_hash)\n      & (self.in_hash == other.in_hash)\n      & (self.out_hash == other.out_hash)\n  }\n}\n\n#[test]\nfn serialization_of_empty() {\n    let empty = ContentCommitment::empty();\n    let serialized = empty.serialize();\n    let deserialized = ContentCommitment::deserialize(serialized);\n\n    assert(empty.eq(deserialized));\n}\n","path":"/Users/jack-sw/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.35.1/noir-projects/noir-protocol-circuits/crates/types/src/content_commitment.nr"},"209":{"source":"use crate::{\n    address::{\n    aztec_address::AztecAddress, eth_address::EthAddress, partial_address::PartialAddress,\n    public_keys_hash::PublicKeysHash\n},\n    contract_class_id::ContractClassId,\n    constants::{GENERATOR_INDEX__CONTRACT_DEPLOYMENT_DATA, CONTRACT_INSTANCE_LENGTH},\n    traits::{Deserialize, Hash, Serialize}\n};\n\nstruct ContractInstance {\n    salt : Field,\n    deployer: AztecAddress,\n    contract_class_id : ContractClassId,\n    initialization_hash : Field,\n    portal_contract_address : EthAddress,\n    public_keys_hash : PublicKeysHash,\n}\n\nimpl Eq for ContractInstance {\n    fn eq(self, other: Self) -> bool {\n        self.public_keys_hash.eq(other.public_keys_hash) &\n        self.initialization_hash.eq(other.initialization_hash) &\n        self.contract_class_id.eq(other.contract_class_id) &\n        self.salt.eq(other.salt) &\n        self.portal_contract_address.eq(other.portal_contract_address)\n    }\n}\n\nimpl Serialize<CONTRACT_INSTANCE_LENGTH> for ContractInstance {\n    fn serialize(self) -> [Field; CONTRACT_INSTANCE_LENGTH] {\n        [\n            self.salt,\n            self.deployer.to_field(),\n            self.contract_class_id.to_field(),\n            self.initialization_hash,\n            self.portal_contract_address.to_field(),\n            self.public_keys_hash.to_field()\n        ]\n    }\n}\n\nimpl Deserialize<CONTRACT_INSTANCE_LENGTH> for ContractInstance {\n    fn deserialize(serialized: [Field; CONTRACT_INSTANCE_LENGTH]) -> Self {\n        Self {\n            salt: serialized[0],\n            deployer: AztecAddress::from_field(serialized[1]),\n            contract_class_id: ContractClassId::from_field(serialized[2]),\n            initialization_hash: serialized[3],\n            portal_contract_address: EthAddress::from_field(serialized[4]),\n            public_keys_hash: PublicKeysHash::from_field(serialized[5]),\n        }\n    }\n}\n\nimpl Hash for ContractInstance {\n    fn hash(self) -> Field {\n        self.to_address().to_field()\n    }\n}\n\nimpl ContractInstance {\n    fn to_address(self) -> AztecAddress {\n        AztecAddress::compute(\n            self.public_keys_hash,\n            PartialAddress::compute(\n                self.contract_class_id,\n                self.salt,\n                self.initialization_hash,\n                self.portal_contract_address,\n                self.deployer\n            )\n        )\n    }\n}\n","path":"/Users/jack-sw/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.35.1/noir-projects/noir-protocol-circuits/crates/types/src/contract_instance.nr"},"210":{"source":"// general util packages/modules are usually bad practice\n// because there is no criteria for what we should not put in here.\n// Reducing the size of this package would be welcome.\n\nmod arrays;\nmod field;\nmod reader;\nmod uint256;\n\n// if predicate == true then return lhs, else return rhs\npub fn conditional_assign(predicate: bool, lhs: Field, rhs: Field) -> Field {\n    if predicate { lhs } else { rhs }\n}\n\npub fn arr_copy_slice<T, N, M>(src: [T; N], mut dst: [T; M], offset: u64) -> [T; M] {\n    for i in 0..dst.len() {\n        dst[i] = src[i + offset];\n    }\n    dst\n}\n","path":"/Users/jack-sw/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.35.1/noir-projects/noir-protocol-circuits/crates/types/src/utils.nr"},"211":{"source":"use crate::{\n    crate::address::{eth_address::EthAddress, partial_address::PartialAddress, public_keys_hash::PublicKeysHash},\n    constants::{AZTEC_ADDRESS_LENGTH, GENERATOR_INDEX__CONTRACT_ADDRESS},\n    contract_class_id::ContractClassId, hash::pedersen_hash, grumpkin_point::GrumpkinPoint,\n    traits::{Empty, FromField, ToField, Serialize, Deserialize}, utils\n};\n\n// Aztec address\nstruct AztecAddress {\n    inner : Field\n}\n\nimpl Eq for AztecAddress {\n    fn eq(self, other : Self) -> bool {\n        self.to_field() == other.to_field()\n    }\n}\n\nimpl Empty for AztecAddress {\n    fn empty() -> Self {\n        Self {\n            inner : 0\n        }\n    }\n}\n\nimpl ToField for AztecAddress {\n    fn to_field(self) -> Field {\n        self.inner\n    }\n}\n\nimpl FromField for AztecAddress {\n    fn from_field(value: Field) -> AztecAddress {\n        AztecAddress { inner: value }\n    }\n}\n\nimpl Serialize<AZTEC_ADDRESS_LENGTH> for AztecAddress {\n    fn serialize(self: Self) -> [Field; AZTEC_ADDRESS_LENGTH] {\n        [self.to_field()]\n    }\n}\n\nimpl Deserialize<AZTEC_ADDRESS_LENGTH> for AztecAddress {\n    fn deserialize(fields: [Field; AZTEC_ADDRESS_LENGTH]) -> Self {\n        FromField::from_field(fields[0])\n    }\n}\n\nimpl AztecAddress {\n    pub fn zero() -> Self {\n        Self { inner: 0 }\n    }\n\n    pub fn compute_from_public_key(\n        pub_key: GrumpkinPoint,\n        contract_class_id: ContractClassId,\n        salt: Field,\n        initialization_hash: Field,\n        portal_contract_address: EthAddress,\n        deployer: AztecAddress\n    ) -> AztecAddress {\n        AztecAddress::compute(\n            PublicKeysHash::compute(pub_key),\n            PartialAddress::compute(\n                contract_class_id,\n                salt,\n                initialization_hash,\n                portal_contract_address,\n                deployer\n            )\n        )\n    }\n\n    pub fn compute(pub_keys_hash: PublicKeysHash, partial_address: PartialAddress) -> AztecAddress {\n        AztecAddress::from_field(\n            pedersen_hash(\n                [pub_keys_hash.to_field(), partial_address.to_field()],\n                GENERATOR_INDEX__CONTRACT_ADDRESS\n            )\n        )\n    }\n\n    pub fn is_zero(self) -> bool {\n        self.inner == 0\n    }\n\n    pub fn assert_is_zero(self) {\n        assert(self.to_field() == 0);\n    }\n\n    pub fn conditional_assign(predicate: bool, lhs: Self, rhs: Self) -> Self {\n        let result = utils::conditional_assign(predicate, rhs.to_field(), lhs.to_field());\n        Self { inner: result }\n    }\n}\n\n#[test]\nfn compute_address() {\n    let point = GrumpkinPoint { x: 1, y: 2 };\n    let contract_address_salt = 3;\n    let contract_class_id = ContractClassId::from_field(4);\n    let initialization_hash = 5;\n    let portal_contract_address = EthAddress::from_field(6);\n    let deployer = AztecAddress::from_field(7);\n\n    let address = AztecAddress::compute_from_public_key(\n        point,\n        contract_class_id,\n        contract_address_salt,\n        initialization_hash,\n        portal_contract_address,\n        deployer\n    );\n\n    let expected_computed_address_from_preimage = 0x027ea2b41ced2ec9a98305984e96dd28518536a4628883ccdc06e38aa8997220;\n    assert(address.to_field() == expected_computed_address_from_preimage);\n}\n\n#[test]\nfn compute_address_from_partial_and_pubkey() {\n    let point = GrumpkinPoint { x: 1, y: 2 };\n    let partial_address = PartialAddress::from_field(3);\n\n    let address = AztecAddress::compute(PublicKeysHash::compute(point), partial_address);\n    let expected_computed_address_from_partial_and_pubkey = 0x0447f893197175723deb223696e2e96dbba1e707ee8507766373558877e74197;\n    assert(address.to_field() == expected_computed_address_from_partial_and_pubkey);\n}\n\n#[test]\nfn from_field_to_field() {\n    let address = AztecAddress { inner: 37 };\n    assert_eq(FromField::from_field(address.to_field()), address);\n}\n\n#[test]\nfn serde() {\n    let address = AztecAddress { inner: 37 };\n    assert_eq(Deserialize::deserialize(address.serialize()), address);\n}\n","path":"/Users/jack-sw/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.35.1/noir-projects/noir-protocol-circuits/crates/types/src/address/aztec_address.nr"},"212":{"source":"use crate::{\n    constants::GENERATOR_INDEX__PARTIAL_ADDRESS, hash::pedersen_hash, grumpkin_point::GrumpkinPoint,\n    traits::{ToField, Serialize, Deserialize}\n};\n\n// Public keys hash. Used in the computation of an address.\nstruct PublicKeysHash {\n    inner: Field\n}\n\nimpl ToField for PublicKeysHash {\n    fn to_field(self) -> Field {\n        self.inner\n    }\n}\n\nimpl Serialize<1> for PublicKeysHash {\n    fn serialize(self: Self) -> [Field; 1] {\n        [self.to_field()]\n    }\n}\n\nimpl Deserialize<1> for PublicKeysHash {\n    fn deserialize(fields: [Field; 1]) -> Self {\n        PublicKeysHash::from_field(fields[0])\n    }\n}\n\nimpl Eq for PublicKeysHash {\n    fn eq(self, other: Self) -> bool {\n        self.inner == other.inner\n    }\n}\n\nimpl PublicKeysHash {\n    pub fn from_field(field: Field) -> Self {\n        Self { inner: field }\n    }\n\n    pub fn compute(public_key: GrumpkinPoint) -> Self {\n        PublicKeysHash::from_field(\n            pedersen_hash(\n                [\n            public_key.x,\n            public_key.y\n        ],\n                GENERATOR_INDEX__PARTIAL_ADDRESS\n            )\n        )\n    }\n\n    pub fn to_field(self) -> Field {\n        self.inner\n    }\n\n    pub fn assert_is_zero(self) {\n        assert(self.to_field() == 0);\n    }\n}\n\n#[test]\nfn compute_public_keys_hash() {\n    let point = GrumpkinPoint { x: 1, y: 2 };\n    let actual = PublicKeysHash::compute(point);\n    let expected_public_keys_hash = 0x1923a6246e305720b6aaf751fde0342613e93c82e455c3831e28375c16dd40d8;\n    assert(actual.to_field() == expected_public_keys_hash);\n}\n","path":"/Users/jack-sw/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.35.1/noir-projects/noir-protocol-circuits/crates/types/src/address/public_keys_hash.nr"},"213":{"source":"use crate::{\n    address::{eth_address::EthAddress, aztec_address::AztecAddress},\n    constants::GENERATOR_INDEX__PARTIAL_ADDRESS, hash::pedersen_hash, traits::ToField\n};\n\n// Salted initialization hash. Used in the computation of a partial address.\nstruct SaltedInitializationHash {\n    inner: Field\n}\n\nimpl ToField for SaltedInitializationHash {\n    fn to_field(self) -> Field {\n        self.inner\n    }\n}\n\nimpl SaltedInitializationHash {\n    pub fn from_field(field: Field) -> Self {\n        Self { inner: field }\n    }\n\n    pub fn compute(\n        salt: Field,\n        initialization_hash: Field,\n        portal_contract_address: EthAddress,\n        deployer: AztecAddress\n    ) -> Self {\n        SaltedInitializationHash::from_field(\n            pedersen_hash(\n                [\n            salt,\n            initialization_hash,\n            deployer.to_field(),\n            portal_contract_address.to_field()\n        ],\n                GENERATOR_INDEX__PARTIAL_ADDRESS\n            )\n        )\n    }\n\n    pub fn assert_is_zero(self) {\n        assert(self.to_field() == 0);\n    }\n}\n","path":"/Users/jack-sw/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.35.1/noir-projects/noir-protocol-circuits/crates/types/src/address/salted_initialization_hash.nr"},"214":{"source":"use crate::{\n    address::{\n    eth_address::EthAddress, salted_initialization_hash::SaltedInitializationHash,\n    aztec_address::AztecAddress\n},\n    constants::GENERATOR_INDEX__PARTIAL_ADDRESS, contract_class_id::ContractClassId,\n    hash::pedersen_hash, traits::ToField\n};\n\n// Partial address\nstruct PartialAddress {\n    inner : Field\n}\n\nimpl ToField for PartialAddress {\n    fn to_field(self) -> Field {\n        self.inner\n    }\n}\n\nimpl PartialAddress {\n    pub fn from_field(field: Field) -> Self {\n        Self { inner: field }\n    }\n\n    pub fn compute(\n        contract_class_id: ContractClassId,\n        salt: Field,\n        initialization_hash: Field,\n        portal_contract_address: EthAddress,\n        deployer: AztecAddress\n    ) -> Self {\n        PartialAddress::compute_from_salted_initialization_hash(\n            contract_class_id,\n            SaltedInitializationHash::compute(salt, initialization_hash, portal_contract_address, deployer)\n        )\n    }\n\n    pub fn compute_from_salted_initialization_hash(\n        contract_class_id: ContractClassId,\n        salted_initialization_hash: SaltedInitializationHash\n    ) -> Self {\n        PartialAddress::from_field(\n            pedersen_hash(\n                [\n            contract_class_id.to_field(),\n            salted_initialization_hash.to_field()\n        ],\n                GENERATOR_INDEX__PARTIAL_ADDRESS\n            )\n        )\n    }\n\n    pub fn to_field(self) -> Field {\n        self.inner\n    }\n\n    pub fn assert_is_zero(self) {\n        assert(self.to_field() == 0);\n    }\n}\n","path":"/Users/jack-sw/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.35.1/noir-projects/noir-protocol-circuits/crates/types/src/address/partial_address.nr"},"215":{"source":"use crate::{\n    constants::ETH_ADDRESS_LENGTH, hash::pedersen_hash,\n    traits::{Empty, ToField, Serialize, Deserialize}, utils\n};\n\nstruct EthAddress{\n    inner : Field\n}\n\nimpl Eq for EthAddress {\n    fn eq(self, other : Self) -> bool {\n        self.to_field() == other.to_field()\n    }\n}\n\nimpl Empty for EthAddress {\n    fn empty() -> Self {\n        Self {\n            inner : 0\n        }\n    }\n}\n\nimpl ToField for EthAddress {\n    fn to_field(self) -> Field {\n        self.inner\n    }\n}\n\nimpl Serialize<ETH_ADDRESS_LENGTH> for EthAddress {\n    fn serialize(self: Self) -> [Field; ETH_ADDRESS_LENGTH] {\n        [self.inner]\n    }\n}\n\nimpl Deserialize<ETH_ADDRESS_LENGTH> for EthAddress {\n    fn deserialize(fields: [Field; ETH_ADDRESS_LENGTH]) -> Self {\n        EthAddress::from_field(fields[0])\n    }\n}\n\nimpl EthAddress {\n    pub fn zero() -> Self {\n        Self { inner: 0 }\n    }\n\n    pub fn from_field(field: Field) -> Self {\n        field.assert_max_bit_size(160);\n        Self { inner: field }\n    }\n\n    pub fn is_zero(self) -> bool {\n        self.inner == 0\n    }\n\n    pub fn assert_is_zero(self) {\n        assert(self.to_field() == 0);\n    }\n\n    pub fn conditional_assign(predicate: bool, lhs: Self, rhs: Self) -> Self {\n        let result = utils::conditional_assign(predicate, rhs.to_field(), lhs.to_field());\n        Self { inner: result }\n    }\n}\n","path":"/Users/jack-sw/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.35.1/noir-projects/noir-protocol-circuits/crates/types/src/address/eth_address.nr"},"217":{"source":"use crate::address::{AztecAddress, EthAddress};\nuse crate::mocked::VerificationKey;\nuse crate::abis::function_selector::FunctionSelector;\nuse crate::abis::contract_class_function_leaf_preimage::ContractClassFunctionLeafPreimage;\nuse crate::contract_class_id::ContractClassId;\nuse crate::utils::{uint256::U256, field::field_from_bytes_32_trunc};\nuse crate::constants::{\n    FUNCTION_TREE_HEIGHT, GENERATOR_INDEX__SILOED_NOTE_HASH, GENERATOR_INDEX__OUTER_NULLIFIER,\n    GENERATOR_INDEX__VK, GENERATOR_INDEX__CONSTRUCTOR, GENERATOR_INDEX__PARTIAL_ADDRESS,\n    GENERATOR_INDEX__CONTRACT_ADDRESS, GENERATOR_INDEX__NOTE_HASH_NONCE,\n    GENERATOR_INDEX__UNIQUE_NOTE_HASH\n};\nuse crate::traits::Hash;\nuse crate::messaging::l2_to_l1_message::L2ToL1Message;\nuse crate::merkle_tree::root::root_from_sibling_path;\nuse dep::std::hash::{pedersen_hash_with_separator, sha256};\n\npub fn sha256_to_field<N>(bytes_to_hash: [u8; N]) -> Field {\n    let sha256_hashed = sha256(bytes_to_hash);\n    let hash_in_a_field = field_from_bytes_32_trunc(sha256_hashed);\n\n    hash_in_a_field\n}\n\npub fn private_functions_root_from_siblings(\n    selector: FunctionSelector,\n    vk_hash: Field,\n    function_leaf_index: Field,\n    function_leaf_sibling_path: [Field; FUNCTION_TREE_HEIGHT]\n) -> Field {\n    let function_leaf_preimage = ContractClassFunctionLeafPreimage { selector, vk_hash };\n    let function_leaf = function_leaf_preimage.hash();\n    root_from_sibling_path(function_leaf, function_leaf_index, function_leaf_sibling_path)\n}\n\npub fn silo_note_hash(address: AztecAddress, inner_commitment: Field) -> Field {\n    pedersen_hash(\n        [\n        address.to_field(),\n        inner_commitment\n    ],\n        GENERATOR_INDEX__SILOED_NOTE_HASH\n    )\n}\n\npub fn silo_nullifier(address: AztecAddress, nullifier: Field) -> Field {\n    pedersen_hash(\n        [\n        address.to_field(),\n        nullifier\n    ],\n        GENERATOR_INDEX__OUTER_NULLIFIER\n    )\n}\n\npub fn merkle_hash(left: Field, right: Field) -> Field {\n    pedersen_hash([left, right], 0)\n}\n\npub fn stdlib_recursion_verification_key_compress_native_vk(_vk: VerificationKey) -> Field {\n    // Original cpp code\n    // stdlib::recursion::verification_key<CT::bn254>::compress_native(private_call.vk, GeneratorIndex::VK);\n    // The above cpp method is only ever called on verification key, so it has been special cased here\n    let _hash_index = GENERATOR_INDEX__VK;\n    0\n}\n\npub fn compute_l2_to_l1_hash(\n    contract_address: AztecAddress,\n    rollup_version_id: Field,\n    chain_id: Field,\n    message: L2ToL1Message\n) -> Field {\n    let mut bytes: BoundedVec<u8, 160> = BoundedVec::new();\n\n    let inputs = [\n        contract_address.to_field(), rollup_version_id, message.recipient.to_field(), chain_id, message.content\n    ];\n    for i in 0..inputs.len() {\n        // TODO are bytes be in fr.to_buffer() ?\n        let item_bytes = inputs[i].to_be_bytes(32);\n        for j in 0..32 {\n            bytes.push(item_bytes[j]);\n        }\n    }\n\n    sha256_to_field(bytes.storage)\n}\n\n// Computes sha256 hash of 2 input hashes.\n//\n// NB: This method now takes in two 31 byte fields - it assumes that any input\n// is the result of a sha_to_field hash and => is truncated\n//\n// TODO(Jan and David): This is used for the encrypted_log hashes.\n// Can we check to see if we can just use hash_to_field or pedersen_compress here?\n//\npub fn accumulate_sha256(input: [Field; 2]) -> Field {\n    // This is a note about the cpp code, since it takes an array of Fields\n    // instead of a U128.\n    // 4 Field elements when converted to bytes will usually \n    // occupy 4 * 32 = 128 bytes.\n    // However, this function is making the assumption that each Field \n    // only occupies 128 bits.\n    //\n    // TODO(David): This does not seem to be getting guaranteed anywhere in the code?\n\n    // Concatentate two fields into 32x2 = 64 bytes\n    // accumulate_sha256 assumes that the inputs are pre-truncated 31 byte numbers\n    let mut hash_input_flattened = [0; 64];\n    for offset in 0..input.len() {\n        let input_as_bytes = input[offset].to_be_bytes(32);\n        for byte_index in 0..32 {\n            hash_input_flattened[offset * 32 + byte_index] = input_as_bytes[byte_index];\n        }\n    }\n\n    sha256_to_field(hash_input_flattened)\n}\n\npub fn compute_logs_hash(previous_log_hash: Field, current_log_hash: Field) -> Field {\n    accumulate_sha256(\n        [\n        previous_log_hash,\n        current_log_hash\n    ]\n    )\n}\n\npub fn compute_note_hash_nonce(first_nullifier: Field, commitment_index: u64) -> Field {\n    pedersen_hash(\n        [\n        first_nullifier,\n        commitment_index as Field\n    ],\n        GENERATOR_INDEX__NOTE_HASH_NONCE\n    )\n}\n\npub fn compute_unique_siloed_note_hash(nonce: Field, siloed_note_hash: Field) -> Field {\n    pedersen_hash(\n        [\n        nonce,\n        siloed_note_hash\n    ],\n        GENERATOR_INDEX__UNIQUE_NOTE_HASH\n    )\n}\n\npub fn pedersen_hash<N>(inputs: [Field; N], hash_index: u32) -> Field {\n    dep::std::hash::pedersen_hash_with_separator(inputs, hash_index)\n}\n\n#[test]\nfn smoke_sha256_to_field() {\n    let full_buffer = [\n        0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19,\n        20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39,\n        40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59,\n        60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79,\n        80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99,\n        100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119,\n        120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139,\n        140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159\n    ];\n    let result = sha256_to_field(full_buffer);\n\n    assert(result == 0x448ebbc9e1a31220a2f3830c18eef61b9bd070e5084b7fa2a359fe729184c7);\n\n    // to show correctness of the current ver (truncate one byte) vs old ver (mod full bytes):\n    let result_bytes = sha256(full_buffer);\n    let truncated_field = crate::utils::field::field_from_bytes_32_trunc(result_bytes);\n    assert(truncated_field == result);\n    let mod_res = result + (result_bytes[31] as Field);\n    assert(mod_res == 0x448ebbc9e1a31220a2f3830c18eef61b9bd070e5084b7fa2a359fe729184e0);\n}\n\n#[test]\nfn compute_l2_l1_hash() {\n    // All zeroes\n    let hash_result = compute_l2_to_l1_hash(AztecAddress::from_field(0), 0, 0, L2ToL1Message::empty());\n    assert(hash_result == 0xb393978842a0fa3d3e1470196f098f473f9678e72463cb65ec4ab5581856c2);\n\n    // Non-zero case\n    let message = L2ToL1Message { recipient: EthAddress::from_field(3), content: 5 };\n    let hash_result = compute_l2_to_l1_hash(AztecAddress::from_field(1), 2, 4, message);\n    assert(hash_result == 0x3f88c1044a05e5340ed20466276500f6d45ca5603913b9091e957161734e16);\n}\n","path":"/Users/jack-sw/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.35.1/noir-projects/noir-protocol-circuits/crates/types/src/hash.nr"},"221":{"source":"use crate::{address::EthAddress, constants::L2_TO_L1_MESSAGE_LENGTH, traits::{Deserialize, Empty, Serialize}};\n\n// Note: Not to be confused with L2ToL1Msg in Solidity\nstruct L2ToL1Message {\n    recipient: EthAddress,\n    content: Field,\n}\n\nimpl Empty for L2ToL1Message {\n    fn empty() -> Self {\n        Self {\n            recipient: EthAddress::empty(),\n            content: 0,\n        }\n    }\n}\n\nimpl Eq for L2ToL1Message {\n    fn eq(self, other: Self) -> bool {\n        (self.recipient == other.recipient) & (self.content == other.content)\n    }\n}\n\nimpl Serialize<L2_TO_L1_MESSAGE_LENGTH> for L2ToL1Message {\n    fn serialize(self) -> [Field; L2_TO_L1_MESSAGE_LENGTH] {\n        [self.recipient.to_field(), self.content]\n    }\n}\n\nimpl Deserialize<L2_TO_L1_MESSAGE_LENGTH> for L2ToL1Message {\n    fn deserialize(values: [Field; L2_TO_L1_MESSAGE_LENGTH]) -> Self {\n        Self {\n            recipient: EthAddress::from_field(values[0]),\n            content: values[1],\n        }\n    }\n}\n","path":"/Users/jack-sw/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.35.1/noir-projects/noir-protocol-circuits/crates/types/src/messaging/l2_to_l1_message.nr"},"223":{"source":"use crate::{\n    abis::append_only_tree_snapshot::{AppendOnlyTreeSnapshot, APPEND_ONLY_TREE_SNAPSHOT_LENGTH},\n    constants::{PARTIAL_STATE_REFERENCE_LENGTH, STATE_REFERENCE_LENGTH},\n    partial_state_reference::PartialStateReference, traits::{Deserialize, Empty, Hash, Serialize},\n    utils::arr_copy_slice\n};\n\nstruct StateReference {\n    l1_to_l2_message_tree: AppendOnlyTreeSnapshot,\n    partial: PartialStateReference,\n}\n\nimpl Eq for StateReference {\n    fn eq(self, other: StateReference) -> bool {\n        self.l1_to_l2_message_tree.eq(other.l1_to_l2_message_tree) &\n        self.partial.eq(other.partial)\n    }\n}\n\nimpl Serialize<STATE_REFERENCE_LENGTH> for StateReference {\n    fn serialize(self) -> [Field; STATE_REFERENCE_LENGTH] {\n        let mut fields: BoundedVec<Field, STATE_REFERENCE_LENGTH> = BoundedVec::new();\n\n        fields.extend_from_array(self.l1_to_l2_message_tree.serialize());\n        fields.extend_from_array(self.partial.serialize());\n\n        fields.storage\n    }\n}\n\nimpl Deserialize<STATE_REFERENCE_LENGTH> for StateReference {\n    fn deserialize(serialized: [Field; STATE_REFERENCE_LENGTH]) -> StateReference {\n        let mut offset = 0;\n\n        let l1_to_l2_message_tree_fields = arr_copy_slice(serialized, [0; APPEND_ONLY_TREE_SNAPSHOT_LENGTH], offset);\n        offset = offset + APPEND_ONLY_TREE_SNAPSHOT_LENGTH;\n\n        let partial_fields = arr_copy_slice(serialized, [0; PARTIAL_STATE_REFERENCE_LENGTH], offset);\n\n        StateReference {\n            l1_to_l2_message_tree: AppendOnlyTreeSnapshot::deserialize(l1_to_l2_message_tree_fields),\n            partial: PartialStateReference::deserialize(partial_fields),\n        }\n    }\n}\n\nimpl Empty for StateReference {\n    fn empty() -> Self {\n        Self {\n            l1_to_l2_message_tree: AppendOnlyTreeSnapshot::zero(),\n            partial: PartialStateReference::empty(),\n        }\n    }\n}\n\n#[test]\nfn serialization_of_empty() {\n    let state = StateReference::empty();\n    let _serialized = state.serialize();\n    let _deserialized = StateReference::deserialize(_serialized);\n}\n","path":"/Users/jack-sw/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.35.1/noir-projects/noir-protocol-circuits/crates/types/src/state_reference.nr"},"228":{"source":"use dep::std;\n/// ElGamal encryption/decryption for Field elements\n\n// Given generator gen, public key pub_key, message m and randomness r\n// Output ciphertext (c1,c2)\n// c1 = gen^r\n// c2 = m * pub_key^r\n// TODO acording to function comment assumes exponent under 32 bits. \n// It seems to work for random test values, but probably perfomance isn't optimal. \nfn single_standard_encryption_fe(\n  gen: Field, \n  pub_key: Field, \n  m: Field, \n  r: Field\n  ) -> (Field, Field) {\n\n  // let c1 = gen.pow_32(r);\n  // let temp = pub_key.pow_32(r);\n  // let c2 = m * temp;\n  // let c1 = r.pow_32(gen);\n  // let temp1 = r.pow_32(pub_key);\n  // let temp2 = m.pow_32(gen) ;\n  // let c2 = temp1 + temp2;\n\n  //　single_hom_encryption_fe\n  // let c1 = gen.pow_32(r);\n   let c1 = gen * r;\n  let temp1 = pub_key.pow_32(r);\n  let temp2 = gen.pow_32(m) ;\n  let c2 = temp2 * temp1;\n  (c1, c2)\n}\n\n#[test]\nfn testsingle_standard_encryption_fe() {\n  let gen = 3618502788666131106986593281521497120414687020801267626233049500247285301248;\n  let g_pub_key = 0x8601d0dec944deca8918a6431526acb8530afea2ffa295142b348dfbce36c20b;\n  let m = 42830;\n  let r = 1152000579019524719769048073517805207578464470827627862468450398349088064047;\n  let (c1, c2) = single_standard_encryption_fe(gen, g_pub_key, m, r);\n  std::println(c1);\n  std::println(c2);\n\n}\n\n// TODO assumes exponent under 32 bits?\nfn single_decryption_fe(\n  c1: Field,\n  c2: Field,\n  x: Field\n) -> Field {\n\n  // The shared secret\n  let s = c1.pow_32(x);\n  let s_inv = 1/s;\n  \n  // Check in parigp\n  // Mod(1/31250, 21888242871839275222246405745257275088548364400416034343698204186575808495617)\n  // note that this assumes field is bn254\n  \n  // Check here - works\n  // let test = s * s_inv;\n  // std::println(\"test\");\n  // std::println(test);\n\n  // recover and return m\n  c2 * s_inv\n}\n\n\n#[test]\nfn test_single_encryption_fe_1() {\n  // small values\n\n  // priv key\n  let x = 2;\n  let gen = 5;\n  // pub_key = gen^x\n  // assumes exponent fits in 32 bits\n  // 25 = 0x19\n  let pub_key = gen.pow_32(x);\n\n  let msg = 11111;\n  let randomness = 6;\n  let (c1, c2) = single_standard_encryption_fe(gen, pub_key, msg, randomness);\n  let m_decrypted =  single_decryption_fe(c1, c2, x);\n  \n  assert(msg == m_decrypted);\n}\n\n#[test]\nfn test_single_encryption_fe_2() {\n  // with generated values parigp\n  // random(21888242871839275222246405745257275088548364400416034343698204186575808495617)\n\n  // priv key\n  let x = 7115637666404682632379307215493662218327241124760828634863089038725962038957;\n  \n  // gen = 0x183227397098d014dc2822db40c0ac2e9419f4243cdcb848a1f0fac9fd2c88d0\n  let gen = 10944121435919637611123202872628637544274182200208017171849102093287991052496;\n  \n  // pub_key = gen^x\n  let pub_key = gen.pow_32(x);\n  std::println(pub_key); // 0x06c4dfa71f2a7a8810dc34ce86938764a51b6bf5bce71da90c1c5fc9407e0ebc\n\n  let msg = 11111;\n  // hex 25ea07206ae935e88e774161a280fc15ddd2cbc78d99d2123f3bd562956d466a\n  let randomness = 17149066796940759370530693659488791163567038136671713582338765584448638240362;\n  let (c1, c2) = single_standard_encryption_fe(gen, pub_key, msg, randomness);\n  let m_decrypted =  single_decryption_fe(c1, c2, x);\n\n  assert(msg == m_decrypted);\n}","path":"/Users/jack-sw/Codes/abstract/dex-build/token-bridge-uniswap/packages/aztec-contracts/noir-elgamal/src/elgamal/standard_fe.nr"}}}