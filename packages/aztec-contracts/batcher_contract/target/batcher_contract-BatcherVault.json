{"noir_version":"0.27.0+783feebcc2543497cc9a23db958af64902afa589","name":"BatcherVault","functions":[{"name":"deposit_to_batch","is_unconstrained":false,"custom_attributes":["aztec(private)"],"abi":{"parameters":[{"name":"inputs","type":{"kind":"struct","path":"aztec::context::inputs::private_context_inputs::PrivateContextInputs","fields":[{"name":"call_context","type":{"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"storage_contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"portal_contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"gas_left","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l1_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}},{"name":"side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"gas_settings","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::GasSettings","fields":[{"name":"da","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::DimensionGasSettings","fields":[{"name":"gas_limit","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"teardown_gas_limit","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"max_fee_per_gas","type":{"kind":"field"}}]}},{"name":"l1","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::DimensionGasSettings","fields":[{"name":"gas_limit","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"teardown_gas_limit","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"max_fee_per_gas","type":{"kind":"field"}}]}},{"name":"l2","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::DimensionGasSettings","fields":[{"name":"gas_limit","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"teardown_gas_limit","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"max_fee_per_gas","type":{"kind":"field"}}]}},{"name":"inclusion_fee","type":{"kind":"field"}}]}},{"name":"transaction_fee","type":{"kind":"field"}}]}},{"name":"historical_header","type":{"kind":"struct","path":"aztec::protocol_types::header::Header","fields":[{"name":"last_archive","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"content_commitment","type":{"kind":"struct","path":"aztec::protocol_types::content_commitment::ContentCommitment","fields":[{"name":"tx_tree_height","type":{"kind":"field"}},{"name":"txs_effects_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}]}},{"name":"state","type":{"kind":"struct","path":"aztec::protocol_types::state_reference::StateReference","fields":[{"name":"l1_to_l2_message_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"partial","type":{"kind":"struct","path":"aztec::protocol_types::partial_state_reference::PartialStateReference","fields":[{"name":"note_hash_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"nullifier_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"public_data_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}}]}},{"name":"global_variables","type":{"kind":"struct","path":"aztec::protocol_types::abis::global_variables::GlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"fee_recipient","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"gas_fees","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l1_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}}]}}]}},{"name":"private_global_variables","type":{"kind":"struct","path":"aztec::context::globals::private_global_variables::PrivateGlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}}]}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}]},"visibility":"private"},{"name":"current_round","type":{"kind":"field"},"visibility":"private"},{"name":"amount_out","type":{"kind":"field"},"visibility":"private"},{"name":"relayer_he_pubkey","type":{"kind":"field"},"visibility":"private"},{"name":"elgamal_rand","type":{"kind":"field"},"visibility":"private"},{"name":"init","type":{"kind":"boolean"},"visibility":"private"}],"param_witnesses":{"amount_out":[{"start":48,"end":49}],"current_round":[{"start":47,"end":48}],"elgamal_rand":[{"start":50,"end":51}],"init":[{"start":51,"end":52}],"inputs":[{"start":0,"end":47}],"relayer_he_pubkey":[{"start":49,"end":50}]},"return_type":{"abi_type":{"kind":"struct","path":"aztec::protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs","fields":[{"name":"call_context","type":{"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"storage_contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"portal_contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"gas_left","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l1_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}},{"name":"side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"gas_settings","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::GasSettings","fields":[{"name":"da","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::DimensionGasSettings","fields":[{"name":"gas_limit","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"teardown_gas_limit","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"max_fee_per_gas","type":{"kind":"field"}}]}},{"name":"l1","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::DimensionGasSettings","fields":[{"name":"gas_limit","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"teardown_gas_limit","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"max_fee_per_gas","type":{"kind":"field"}}]}},{"name":"l2","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::DimensionGasSettings","fields":[{"name":"gas_limit","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"teardown_gas_limit","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"max_fee_per_gas","type":{"kind":"field"}}]}},{"name":"inclusion_fee","type":{"kind":"field"}}]}},{"name":"transaction_fee","type":{"kind":"field"}}]}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"min_revertible_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"max_block_number","type":{"kind":"struct","path":"aztec::protocol_types::abis::max_block_number::MaxBlockNumber","fields":[{"name":"_opt","type":{"kind":"struct","path":"std::option::Option","fields":[{"name":"_is_some","type":{"kind":"boolean"}},{"name":"_value","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}},{"name":"note_hash_read_requests","type":{"kind":"array","length":32,"type":{"kind":"struct","path":"aztec::protocol_types::abis::side_effect::SideEffect","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"nullifier_read_requests","type":{"kind":"array","length":2,"type":{"kind":"struct","path":"aztec::protocol_types::abis::read_request::ReadRequest","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"nullifier_key_validation_requests","type":{"kind":"array","length":1,"type":{"kind":"struct","path":"aztec::protocol_types::abis::nullifier_key_validation_request::NullifierKeyValidationRequest","fields":[{"name":"public_key","type":{"kind":"struct","path":"aztec::protocol_types::grumpkin_point::GrumpkinPoint","fields":[{"name":"x","type":{"kind":"field"}},{"name":"y","type":{"kind":"field"}}]}},{"name":"secret_key","type":{"kind":"struct","path":"aztec::protocol_types::grumpkin_private_key::GrumpkinPrivateKey","fields":[{"name":"high","type":{"kind":"field"}},{"name":"low","type":{"kind":"field"}}]}}]}}},{"name":"new_note_hashes","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::abis::side_effect::SideEffect","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"new_nullifiers","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::abis::side_effect::SideEffectLinkedToNoteHash","fields":[{"name":"value","type":{"kind":"field"}},{"name":"note_hash","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"private_call_stack_hashes","type":{"kind":"array","length":4,"type":{"kind":"field"}}},{"name":"public_call_stack_hashes","type":{"kind":"array","length":4,"type":{"kind":"field"}}},{"name":"new_l2_to_l1_msgs","type":{"kind":"array","length":2,"type":{"kind":"struct","path":"aztec::protocol_types::messaging::l2_to_l1_message::L2ToL1Message","fields":[{"name":"recipient","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"content","type":{"kind":"field"}}]}}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"encrypted_logs_hash","type":{"kind":"field"}},{"name":"unencrypted_logs_hash","type":{"kind":"field"}},{"name":"encrypted_log_preimages_length","type":{"kind":"field"}},{"name":"unencrypted_log_preimages_length","type":{"kind":"field"}},{"name":"historical_header","type":{"kind":"struct","path":"aztec::protocol_types::header::Header","fields":[{"name":"last_archive","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"content_commitment","type":{"kind":"struct","path":"aztec::protocol_types::content_commitment::ContentCommitment","fields":[{"name":"tx_tree_height","type":{"kind":"field"}},{"name":"txs_effects_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}]}},{"name":"state","type":{"kind":"struct","path":"aztec::protocol_types::state_reference::StateReference","fields":[{"name":"l1_to_l2_message_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"partial","type":{"kind":"struct","path":"aztec::protocol_types::partial_state_reference::PartialStateReference","fields":[{"name":"note_hash_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"nullifier_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"public_data_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}}]}},{"name":"global_variables","type":{"kind":"struct","path":"aztec::protocol_types::abis::global_variables::GlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"fee_recipient","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"gas_fees","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l1_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}}]}}]}},{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}}]},"visibility":"public"},"return_witnesses":[1265,1266,1267,1268,1269,1270,1271,1272,1273,1274,1275,1276,1277,1278,1279,1280,1281,1282,1283,1284,1285,1286,1287,1288,1289,1290,1291,1292,1293,1294,1295,1296,1297,1298,1299,1300,1301,1302,1303,1304,1305,1306,1307,1308,1309,1310,1311,1312,1313,1314,1315,1316,1317,1318,1319,1320,1321,1322,1323,1324,1325,1326,1327,1328,1329,1330,1331,1332,1333,1334,1335,1336,1337,1338,1339,1340,1341,1342,1343,1344,1345,1346,1347,1348,1349,1350,1351,1352,1353,1354,1355,1356,1357,1358,1359,1360,1361,1362,1363,1364,1365,1366,1367,1368,1369,1370,1371,1372,1373,1374,1375,1376,1377,1378,1379,1380,1381,1382,1383,1384,1385,1386,1387,1388,1389,1390,1391,1392,1393,1394,1395,1396,1397,1398,1399,1400,1401,1402,1403,1404,1405,1406,1407,1408,1409,1410,1411,1412,1413,1414,1415,1416,1417,1418,1419,1420,1421,1422,1423,1424,1425,1426,1427,1428,1429,1430,1431,1432,1433,1434,1435,1436,1437,1438,1439,1440,1441,1442,1443,1444,1445,1446,1447,1448,1449,1450,1451,1452,1453,1454,1455,1456,1457,1458,1459,1460,1461,1462,1463,1464,1465,1466,1467,1468,1469,1470,1471,1472,1473,1474,1475,1476,1477,1478,1479,1480,1481,1482,1483,1484,1485]},"bytecode":"","debug_symbols":"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Vo66ZuWoa1aOumblqGtWjrpm5ahrVo66ZuWoa1aOemblWOp/juVXDnT/huW5Hd3+RNXwn+O5PNF9qy315/OYRveo8ZS7GRVYUZEVld6Pyv85Fmm5hH+i6vISVf9Etf8c/0zqcidf80vfLo+oyopqrKjOiRofQNyMCqyoyIoa9nJbln+iftxo+4wiVlRmRRVWVGVFNVZU50SNj0G1cp+kWm2jqMCKiqyoxIoiVlRmRRVW1HhstPtK0noZRTVWVOdEjQ9jbEYFVlRkRSVW1HBs9HD/pfQw+qWM3+ffjCqsqMqKaqyozokavxK+GRU2ouKov8YvWG9GJVbUeGykx9tcNPotj98q3owqrKjKimqsqM6JGr+Yuhk1Hhul/BMVFqLXsP9447P3r4jf/4r0/a+g739F/v5XlO9/Rf3+V7Tvf0X/+leM3+iU/Yrv/7rb93/d7fu/7vb9X3f7/q+7ff/X3b7/627f/3W37/+6+/d/3f37v+7+/V93//6vu3//192//+vu3/919+//uvv3f939+7/usCwHfEc44DviAd+RDvgOOuA78gHfUQ74jnrAd7QDvuOA33k44HceDvidhwN+5+GA33k44HceDvidhwN+5+GA33k44HceDvidxwN+5/GA33k84HceD/idxwN+5/GA33k84HceD/idxwN+5/GA33k64HeeDvidpwN+5+mA33k64HeeDvidpwN+5+mA33k64HeeDvid0wG/czrgd04H/M7pgN85HfA7pwN+53TA75wO+J3TAb9zOuB3ng/4necDfuf5gN95PuB3ng/4necDfuf5gN95PuB3ng/4necDfuflgN95OeB3Xg74nZcDfuflgN95OeB3Xg74nZcDfuflgN95OeB3Xg/4nR/wzls44KW3cMBbb+GA197CAe+9hQNefAsHvPkWDnj1LRzw7ls44OW3cMDbb+GA19/CAe+/hQNegAsHvAEXDngFLhzwDlw44CW4cMBbcOGA1+DCAe/BhQNehAsHvAkXDngVLhzwLlw44GW4cMDbcOGA1+HCAe/DxQPeh4sHvA8XD3gfLh7wPtzKTd/C35EP+I5ywHfUA76jHfAdB/zOD3gfLh7wPlw84H24eMD7cPGA9+HiAe/DxQPeh4sHvA8XD3gfLh7wPlw84H24eMD7cPGA9+HiAe/DxQPeh4sHvA8XD3gfLh7wPlw84H24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o7Jp36hs2jcqm/aNyqZ9o7Jp36hs2jcqm/aNyqZ9o7Jp36hs2jcqm/aNyqZ9o7Jp36hs2jcqm/aNyqZ9o7Jp36hs2jcqm/aNyqZ9o7Jp36hs2jcqm/aNyqZ9o7Jp36hs2jcqm/aNyqZ9o7Jp36hs2jcqm/aNyqZ9o7Jp36hs2jcqm/aNyqZ9o7Jp36hs2jcqm/aNyqZ9o7Jp36hs2jcqm/aNyqZ9o7Jp36hs2jcqm/aNyqZ9o7Jp36hs2jcqm/aNyqZ9o7Jp36hs2jcqm/aNyqZ9o7Jp36hs2jcqm/aNyqZ9o7Jp36hs2jcqm/aNyqZ9o7Jp36hs2jcqm/aNyqZ9o7Jp36hs2jcqm/aNyqZ9o7Jp36hs2jcqm/aNyqZ9o7Jp36hs2jcqm/aNyqZ9o7Jp36hi2jeqmPaNKqZ9o4pp36iyWF5ri2nfqGLaN6qY9o0qpn2jimnfqGLaN6qY9o0qpn2jimnfqGLaN6qY9o0qpn2jimnfqGLaN6qY9o0qpn2jimnfqGLaN6qY9o0qpn2jimnfqGLaN6qY9o0qpn2jimnfqGLaN6qY9o0qpn2jimnfqGLaN6qY9o0qpn2jimnfqGLaN6qY9o0qpn2jimnfqGLaN6qY9o0qpn2jimnfqGLaN6qY9o0qpn2jimnfqGLaN6qY9o0qpn2jimnfqGLaN6qY9o0qpn2jimnfqGLaN6qY9o0qpn2jimnfqGLaN6qY9o0qpn2jimnfqGLaN6qY9o0qpn2jimnfqGLaN6qY9o0qpn2jimnfqGLaN6qY9o0qpn2jimnfqGLaN6qY9o0qpn2jimnfqGLaN6qY9o0qpn2jimnfqGLaN6qY9o0qpn2jimnfqGLaN6qY9o0qpn2jimnfqGLaN6qY9o0qpn2jimnfqGLaN6qY9o2qpn2jqmnfqGraN6qa9o2qi+W1tpr2jaqmfaOqad+oato3qpr2jaqmfaOqad+oato3qpr2jaqmfaOqad+oato3qpr2jaqmfaOqad+oato3qpr2jaqmfaOqad+oato3qpr2jaqmfaOqad+oato3qpr2jaqmfaOqad+oato3qpr2jaqmfaOqad+oato3qpr2jaqmfaOqad+oato3qpr2jaqmfaOqad+oato3qpr2jaqmfaOqad+oato3qpr2jaqmfaOqad+oato3qpr2jaqmfaOqad+oato3qpr2jaqmfaOqad+oato3qpr2jaqmfaOqad+oato3qpr2jaqmfaOqad+oato3qpr2jaqmfaOqad+oato3qpr2jaqmfaOqad+oato3qpr2jaqmfaOqad+oato3qpr2jaqmfaOqad+oato3qpr2jaqmfaOqad+oato3qpr2jaqmfaOqad+oato3qpr2jaqmfaOqad+oato3qpr2jaqmfaOqad+oZto3qpn2jWqmfaOaad+otlhea5tp36hm2jeqmfaNaqZ9o5pp36hm2jeqmfaNaqZ9o5pp36hm2jeqmfaNaqZ9o5pp36hm2jeqmfaNaqZ9o5pp36hm2jeqmfaNaqZ9o5pp36hm2jeqmfaNaqZ9o5pp36hm2jeqmfaNaqZ9o5pp36hm2jeqmfaNaqZ9o5pp36hm2jeqmfaNaqZ9o5pp36hm2jeqmfaNaqZ9o5pp36hm2jeqmfaNaqZ9o5pp36hm2jeqmfaNaqZ9o5pp36hm2jeqmfaNaqZ9o5pp36hm2jeqmfaNaqZ9o5pp36hm2jeqmfaNaqZ9o5pp36hm2jeqmfaNaqZ9o5pp36hm2jeqmfaNaqZ9o5pp36hm2jeqmfaNaqZ9o5pp36hm2jeqmfaNaqZ9o5pp36hm2jeqmfaNaqZ9o5pp36hm2jeqmfaNaqZ9o5pp36hm2jeqmfaNaqZ9o5pp36hm2jeqmfaNaqZ9o5pp36hm2jeqmfaN6qZ9o7pp36hu2jeqm/aN6ovltbab9o3qpn2jumnfqG7aN6qb9o3qpn2jumnfqG7aN6qb9o3qpn2jumnfqG7aN6qb9o3qpn2jumnfqG7aN6qb9o3qpn2jumnfqG7aN6qb9o3qpn2jumnfqG7aN6qb9o3qpn2jumnfqG7aN6qb9o3qpn2jumnfqG7aN6qb9o3qpn2jumnfqG7aN6qb9o3qpn2jumnfqG7aN6qb9o3qpn2jumnfqG7aN6qb9o3qpn2jumnfqG7aN6qb9o3qpn2jumnfqG7aN6qb9o3qpn2jumnfqG7aN6qb9o3qpn2jumnfqG7aN6qb9o3qpn2jumnfqG7aN6qb9o3qpn2jumnfqG7aN6qb9o3qpn2jumnfqG7aN6qb9o3qpn2jumnfqG7aN6qb9o3qpn2jumnfqG7aN6qb9o3qpn2jumnfqG7aN6qb9o3qpn2jumnfqG7aN6qb9o3qpn2jumnfqG7aN6qb9o3q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WiPKp6ta+cmnq1rPiaer+r6RL6SrWnvJp6taUcmnq1pTyadLvtL1papU3z3yhXR9qSrV9498IV1fqkr1HSRfSNeXqlJ9D8kX0vWlqlTfW/KFdH2pKt13osin60tV6b4XRT5dX6pK9x0m8un6UlW67xuRT9eXqtJ9N4h8ur5Ule57POTT9aWqdN+5IZ+uL1Wl+34M+XR9qSrdd1nIp+tLVem+d0I+XV+qSvcdEfLp+lJVuu9zkE/Xl6rSffeCfLq+VJXuexLk0/WlqnTfaSCfri9Vpfv+Afl0famq7EtV6b4zQjxd3TdByKfrS1UVX6pK9+0d8umSr3R9qSrd92fIp+tLVem+60I+XV+qSve9FPLp+lJVuu+QkE/Xl6rSfd+DfLq+VJXuuxnk0/WlqnTfoyCfri9VpfvOA/l0fakq3fcTyKfrS1XpvktAPl1fqkq37798ur5UlW6Pfvl0fakq3X768un6UlW6ve/l0/WlqnT71Mun60tV6faUl0/Xl6rS7f8un64rVZV0e7XLp+tKVSXdvury6bpSVWkhX+m6UlXJl7d68uWtnnx5qydf3urJl7d68uWtnnx5qydf3urJl7d68uWtnnx5qydf3urJl7d68uWtnnx5qydf3urJl7d68uWtnnx5qydf3urJl7d68uWtnnx5qydf3urJl7d68uWtnnx5qydf3urJl7d68uWtnnx5qydf3urJl7d68uWtnnx5qydf3urJl7d68uWtnnx5qydf3urJl7d68uWtnnx5qydf3urJl7d68uWtnnx5qydf3urJl7d68uWtnnx5qydf3urJl7d68uWtnnx5qydf3urJl7d68uWtnnx5qydf3urJl7d68uWtnnx5qydf3urJl7d68uWtnnx5qydf3urJl7d68uWtnnx5qydf3urJl7d68uWtnnx5qydf3urJl7d68uWtnnx5qydf3urJl7d68uWtnnx5qydf3urJl7d68uWtnnx5qydf3urJl7d68uWtnnx5qydf3urJl7d68uWtTr681cmXtzr58lYnX97qtJCvdF2pKvLlrU6+vNXJl7c6+fJWJ1/e6uTLW518eauTL2918uWtTr681cmXtzr58lYnX97q5MtbnXx5q5Mvb3Xy5a1OvrzVyZe3OvnyVidf3urky1udfHmrky9vdfLlrU6+vNXJl7c6+fJWJ1/e6uTLW518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"},{"name":"validate_execute_batch","is_unconstrained":true,"custom_attributes":["aztec(public)","aztec(internal)"],"abi":{"parameters":[{"name":"inputs","type":{"kind":"struct","path":"aztec::context::inputs::public_context_inputs::PublicContextInputs","fields":[{"name":"call_context","type":{"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"storage_contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"portal_contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"gas_left","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l1_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}},{"name":"side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"gas_settings","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::GasSettings","fields":[{"name":"da","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::DimensionGasSettings","fields":[{"name":"gas_limit","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"teardown_gas_limit","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"max_fee_per_gas","type":{"kind":"field"}}]}},{"name":"l1","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::DimensionGasSettings","fields":[{"name":"gas_limit","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"teardown_gas_limit","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"max_fee_per_gas","type":{"kind":"field"}}]}},{"name":"l2","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::DimensionGasSettings","fields":[{"name":"gas_limit","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"teardown_gas_limit","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"max_fee_per_gas","type":{"kind":"field"}}]}},{"name":"inclusion_fee","type":{"kind":"field"}}]}},{"name":"transaction_fee","type":{"kind":"field"}}]}},{"name":"historical_header","type":{"kind":"struct","path":"aztec::protocol_types::header::Header","fields":[{"name":"last_archive","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"content_commitment","type":{"kind":"struct","path":"aztec::protocol_types::content_commitment::ContentCommitment","fields":[{"name":"tx_tree_height","type":{"kind":"field"}},{"name":"txs_effects_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}]}},{"name":"state","type":{"kind":"struct","path":"aztec::protocol_types::state_reference::StateReference","fields":[{"name":"l1_to_l2_message_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"partial","type":{"kind":"struct","path":"aztec::protocol_types::partial_state_reference::PartialStateReference","fields":[{"name":"note_hash_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"nullifier_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"public_data_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}}]}},{"name":"global_variables","type":{"kind":"struct","path":"aztec::protocol_types::abis::global_variables::GlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"fee_recipient","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"gas_fees","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l1_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}}]}}]}},{"name":"public_global_variables","type":{"kind":"struct","path":"aztec::protocol_types::abis::global_variables::GlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"fee_recipient","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"gas_fees","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l1_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}}]}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}]},"visibility":"private"},{"name":"sender","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]},"visibility":"private"},{"name":"c1","type":{"kind":"field"},"visibility":"private"},{"name":"c2","type":{"kind":"field"},"visibility":"private"},{"name":"amount_out","type":{"kind":"field"},"visibility":"private"},{"name":"amount_out_sub_cancelled","type":{"kind":"field"},"visibility":"private"}],"param_witnesses":{"amount_out":[{"start":57,"end":58}],"amount_out_sub_cancelled":[{"start":58,"end":59}],"c1":[{"start":55,"end":56}],"c2":[{"start":56,"end":57}],"inputs":[{"start":0,"end":54}],"sender":[{"start":54,"end":55}]},"return_type":{"abi_type":{"kind":"struct","path":"aztec::protocol_types::abis::public_circuit_public_inputs::PublicCircuitPublicInputs","fields":[{"name":"call_context","type":{"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"storage_contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"portal_contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"gas_left","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l1_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}},{"name":"side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"gas_settings","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::GasSettings","fields":[{"name":"da","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::DimensionGasSettings","fields":[{"name":"gas_limit","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"teardown_gas_limit","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"max_fee_per_gas","type":{"kind":"field"}}]}},{"name":"l1","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::DimensionGasSettings","fields":[{"name":"gas_limit","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"teardown_gas_limit","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"max_fee_per_gas","type":{"kind":"field"}}]}},{"name":"l2","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::DimensionGasSettings","fields":[{"name":"gas_limit","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"teardown_gas_limit","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"max_fee_per_gas","type":{"kind":"field"}}]}},{"name":"inclusion_fee","type":{"kind":"field"}}]}},{"name":"transaction_fee","type":{"kind":"field"}}]}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"nullifier_read_requests","type":{"kind":"array","length":2,"type":{"kind":"struct","path":"aztec::protocol_types::abis::read_request::ReadRequest","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"nullifier_non_existent_read_requests","type":{"kind":"array","length":2,"type":{"kind":"struct","path":"aztec::protocol_types::abis::read_request::ReadRequest","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"contract_storage_update_requests","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::contrakt::storage_update_request::StorageUpdateRequest","fields":[{"name":"storage_slot","type":{"kind":"field"}},{"name":"new_value","type":{"kind":"field"}}]}}},{"name":"contract_storage_reads","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::contrakt::storage_read::StorageRead","fields":[{"name":"storage_slot","type":{"kind":"field"}},{"name":"current_value","type":{"kind":"field"}}]}}},{"name":"public_call_stack_hashes","type":{"kind":"array","length":4,"type":{"kind":"field"}}},{"name":"new_note_hashes","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::abis::side_effect::SideEffect","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"new_nullifiers","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::abis::side_effect::SideEffectLinkedToNoteHash","fields":[{"name":"value","type":{"kind":"field"}},{"name":"note_hash","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"new_l2_to_l1_msgs","type":{"kind":"array","length":2,"type":{"kind":"struct","path":"aztec::protocol_types::messaging::l2_to_l1_message::L2ToL1Message","fields":[{"name":"recipient","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"content","type":{"kind":"field"}}]}}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"unencrypted_logs_hash","type":{"kind":"field"}},{"name":"unencrypted_log_preimages_length","type":{"kind":"field"}},{"name":"historical_header","type":{"kind":"struct","path":"aztec::protocol_types::header::Header","fields":[{"name":"last_archive","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"content_commitment","type":{"kind":"struct","path":"aztec::protocol_types::content_commitment::ContentCommitment","fields":[{"name":"tx_tree_height","type":{"kind":"field"}},{"name":"txs_effects_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}]}},{"name":"state","type":{"kind":"struct","path":"aztec::protocol_types::state_reference::StateReference","fields":[{"name":"l1_to_l2_message_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"partial","type":{"kind":"struct","path":"aztec::protocol_types::partial_state_reference::PartialStateReference","fields":[{"name":"note_hash_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"nullifier_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"public_data_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}}]}},{"name":"global_variables","type":{"kind":"struct","path":"aztec::protocol_types::abis::global_variables::GlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"fee_recipient","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"gas_fees","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l1_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}}]}}]}},{"name":"prover_address","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"revert_code","type":{"kind":"integer","sign":"unsigned","width":8}},{"name":"gas_left","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l1_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]},"visibility":"public"},"return_witnesses":[59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273]},"bytecode":"","debug_symbols":""},{"name":"cancel_batch_and_claim","is_unconstrained":false,"custom_attributes":["aztec(private)"],"abi":{"parameters":[{"name":"inputs","type":{"kind":"struct","path":"aztec::context::inputs::private_context_inputs::PrivateContextInputs","fields":[{"name":"call_context","type":{"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"storage_contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"portal_contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"gas_left","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l1_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}},{"name":"side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"gas_settings","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::GasSettings","fields":[{"name":"da","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::DimensionGasSettings","fields":[{"name":"gas_limit","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"teardown_gas_limit","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"max_fee_per_gas","type":{"kind":"field"}}]}},{"name":"l1","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::DimensionGasSettings","fields":[{"name":"gas_limit","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"teardown_gas_limit","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"max_fee_per_gas","type":{"kind":"field"}}]}},{"name":"l2","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::DimensionGasSettings","fields":[{"name":"gas_limit","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"teardown_gas_limit","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"max_fee_per_gas","type":{"kind":"field"}}]}},{"name":"inclusion_fee","type":{"kind":"field"}}]}},{"name":"transaction_fee","type":{"kind":"field"}}]}},{"name":"historical_header","type":{"kind":"struct","path":"aztec::protocol_types::header::Header","fields":[{"name":"last_archive","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"content_commitment","type":{"kind":"struct","path":"aztec::protocol_types::content_commitment::ContentCommitment","fields":[{"name":"tx_tree_height","type":{"kind":"field"}},{"name":"txs_effects_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}]}},{"name":"state","type":{"kind":"struct","path":"aztec::protocol_types::state_reference::StateReference","fields":[{"name":"l1_to_l2_message_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"partial","type":{"kind":"struct","path":"aztec::protocol_types::partial_state_reference::PartialStateReference","fields":[{"name":"note_hash_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"nullifier_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"public_data_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}}]}},{"name":"global_variables","type":{"kind":"struct","path":"aztec::protocol_types::abis::global_variables::GlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"fee_recipient","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"gas_fees","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l1_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}}]}}]}},{"name":"private_global_variables","type":{"kind":"struct","path":"aztec::context::globals::private_global_variables::PrivateGlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}}]}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}]},"visibility":"private"},{"name":"current_round","type":{"kind":"field"},"visibility":"private"},{"name":"secret_hash","type":{"kind":"field"},"visibility":"private"}],"param_witnesses":{"current_round":[{"start":47,"end":48}],"inputs":[{"start":0,"end":47}],"secret_hash":[{"start":48,"end":49}]},"return_type":{"abi_type":{"kind":"struct","path":"aztec::protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs","fields":[{"name":"call_context","type":{"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"storage_contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"portal_contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"gas_left","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l1_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}},{"name":"side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"gas_settings","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::GasSettings","fields":[{"name":"da","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::DimensionGasSettings","fields":[{"name":"gas_limit","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"teardown_gas_limit","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"max_fee_per_gas","type":{"kind":"field"}}]}},{"name":"l1","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::DimensionGasSettings","fields":[{"name":"gas_limit","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"teardown_gas_limit","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"max_fee_per_gas","type":{"kind":"field"}}]}},{"name":"l2","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::DimensionGasSettings","fields":[{"name":"gas_limit","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"teardown_gas_limit","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"max_fee_per_gas","type":{"kind":"field"}}]}},{"name":"inclusion_fee","type":{"kind":"field"}}]}},{"name":"transaction_fee","type":{"kind":"field"}}]}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"min_revertible_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"max_block_number","type":{"kind":"struct","path":"aztec::protocol_types::abis::max_block_number::MaxBlockNumber","fields":[{"name":"_opt","type":{"kind":"struct","path":"std::option::Option","fields":[{"name":"_is_some","type":{"kind":"boolean"}},{"name":"_value","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}},{"name":"note_hash_read_requests","type":{"kind":"array","length":32,"type":{"kind":"struct","path":"aztec::protocol_types::abis::side_effect::SideEffect","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"nullifier_read_requests","type":{"kind":"array","length":2,"type":{"kind":"struct","path":"aztec::protocol_types::abis::read_request::ReadRequest","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"nullifier_key_validation_requests","type":{"kind":"array","length":1,"type":{"kind":"struct","path":"aztec::protocol_types::abis::nullifier_key_validation_request::NullifierKeyValidationRequest","fields":[{"name":"public_key","type":{"kind":"struct","path":"aztec::protocol_types::grumpkin_point::GrumpkinPoint","fields":[{"name":"x","type":{"kind":"field"}},{"name":"y","type":{"kind":"field"}}]}},{"name":"secret_key","type":{"kind":"struct","path":"aztec::protocol_types::grumpkin_private_key::GrumpkinPrivateKey","fields":[{"name":"high","type":{"kind":"field"}},{"name":"low","type":{"kind":"field"}}]}}]}}},{"name":"new_note_hashes","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::abis::side_effect::SideEffect","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"new_nullifiers","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::abis::side_effect::SideEffectLinkedToNoteHash","fields":[{"name":"value","type":{"kind":"field"}},{"name":"note_hash","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"private_call_stack_hashes","type":{"kind":"array","length":4,"type":{"kind":"field"}}},{"name":"public_call_stack_hashes","type":{"kind":"array","length":4,"type":{"kind":"field"}}},{"name":"new_l2_to_l1_msgs","type":{"kind":"array","length":2,"type":{"kind":"struct","path":"aztec::protocol_types::messaging::l2_to_l1_message::L2ToL1Message","fields":[{"name":"recipient","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"content","type":{"kind":"field"}}]}}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"encrypted_logs_hash","type":{"kind":"field"}},{"name":"unencrypted_logs_hash","type":{"kind":"field"}},{"name":"encrypted_log_preimages_length","type":{"kind":"field"}},{"name":"unencrypted_log_preimages_length","type":{"kind":"field"}},{"name":"historical_header","type":{"kind":"struct","path":"aztec::protocol_types::header::Header","fields":[{"name":"last_archive","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"content_commitment","type":{"kind":"struct","path":"aztec::protocol_types::content_commitment::ContentCommitment","fields":[{"name":"tx_tree_height","type":{"kind":"field"}},{"name":"txs_effects_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}]}},{"name":"state","type":{"kind":"struct","path":"aztec::protocol_types::state_reference::StateReference","fields":[{"name":"l1_to_l2_message_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"partial","type":{"kind":"struct","path":"aztec::protocol_types::partial_state_reference::PartialStateReference","fields":[{"name":"note_hash_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"nullifier_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"public_data_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}}]}},{"name":"global_variables","type":{"kind":"struct","path":"aztec::protocol_types::abis::global_variables::GlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"fee_recipient","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"gas_fees","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l1_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}}]}}]}},{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}}]},"visibility":"public"},"return_witnesses":[1047,1048,1049,1050,1051,1052,1053,1054,1055,1056,1057,1058,1059,1060,1061,1062,1063,1064,1065,1066,1067,1068,1069,1070,1071,1072,1073,1074,1075,1076,1077,1078,1079,1080,1081,1082,1083,1084,1085,1086,1087,1088,1089,1090,1091,1092,1093,1094,1095,1096,1097,1098,1099,1100,1101,1102,1103,1104,1105,1106,1107,1108,1109,1110,1111,1112,1113,1114,1115,1116,1117,1118,1119,1120,1121,1122,1123,1124,1125,1126,1127,1128,1129,1130,1131,1132,1133,1134,1135,1136,1137,1138,1139,1140,1141,1142,1143,1144,1145,1146,1147,1148,1149,1150,1151,1152,1153,1154,1155,1156,1157,1158,1159,1160,1161,1162,1163,1164,1165,1166,1167,1168,1169,1170,1171,1172,1173,1174,1175,1176,1177,1178,1179,1180,1181,1182,1183,1184,1185,1186,1187,1188,1189,1190,1191,1192,1193,1194,1195,1196,1197,1198,1199,1200,1201,1202,1203,1204,1205,1206,1207,1208,1209,1210,1211,1212,1213,1214,1215,1216,1217,1218,1219,1220,1221,1222,1223,1224,1225,1226,1227,1228,1229,1230,1231,1232,1233,1234,1235,1236,1237,1238,1239,1240,1241,1242,1243,1244,1245,1246,1247,1248,1249,1250,1251,1252,1253,1254,1255,1256,1257,1258,1259,1260,1261,1262,1263,1264,1265,1266,1267]},"bytecode":"","debug_symbols":""},{"name":"claim_token_in","is_unconstrained":false,"custom_attributes":["aztec(private)"],"abi":{"parameters":[{"name":"inputs","type":{"kind":"struct","path":"aztec::context::inputs::private_context_inputs::PrivateContextInputs","fields":[{"name":"call_context","type":{"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"storage_contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"portal_contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"gas_left","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l1_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}},{"name":"side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"gas_settings","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::GasSettings","fields":[{"name":"da","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::DimensionGasSettings","fields":[{"name":"gas_limit","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"teardown_gas_limit","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"max_fee_per_gas","type":{"kind":"field"}}]}},{"name":"l1","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::DimensionGasSettings","fields":[{"name":"gas_limit","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"teardown_gas_limit","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"max_fee_per_gas","type":{"kind":"field"}}]}},{"name":"l2","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::DimensionGasSettings","fields":[{"name":"gas_limit","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"teardown_gas_limit","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"max_fee_per_gas","type":{"kind":"field"}}]}},{"name":"inclusion_fee","type":{"kind":"field"}}]}},{"name":"transaction_fee","type":{"kind":"field"}}]}},{"name":"historical_header","type":{"kind":"struct","path":"aztec::protocol_types::header::Header","fields":[{"name":"last_archive","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"content_commitment","type":{"kind":"struct","path":"aztec::protocol_types::content_commitment::ContentCommitment","fields":[{"name":"tx_tree_height","type":{"kind":"field"}},{"name":"txs_effects_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}]}},{"name":"state","type":{"kind":"struct","path":"aztec::protocol_types::state_reference::StateReference","fields":[{"name":"l1_to_l2_message_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"partial","type":{"kind":"struct","path":"aztec::protocol_types::partial_state_reference::PartialStateReference","fields":[{"name":"note_hash_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"nullifier_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"public_data_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}}]}},{"name":"global_variables","type":{"kind":"struct","path":"aztec::protocol_types::abis::global_variables::GlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"fee_recipient","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"gas_fees","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l1_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}}]}}]}},{"name":"private_global_variables","type":{"kind":"struct","path":"aztec::context::globals::private_global_variables::PrivateGlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}}]}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}]},"visibility":"private"},{"name":"round","type":{"kind":"field"},"visibility":"private"},{"name":"total_token_in","type":{"kind":"field"},"visibility":"private"},{"name":"total_token_out","type":{"kind":"field"},"visibility":"private"}],"param_witnesses":{"inputs":[{"start":0,"end":47}],"round":[{"start":47,"end":48}],"total_token_in":[{"start":48,"end":49}],"total_token_out":[{"start":49,"end":50}]},"return_type":{"abi_type":{"kind":"struct","path":"aztec::protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs","fields":[{"name":"call_context","type":{"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"storage_contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"portal_contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"gas_left","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l1_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}},{"name":"side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"gas_settings","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::GasSettings","fields":[{"name":"da","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::DimensionGasSettings","fields":[{"name":"gas_limit","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"teardown_gas_limit","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"max_fee_per_gas","type":{"kind":"field"}}]}},{"name":"l1","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::DimensionGasSettings","fields":[{"name":"gas_limit","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"teardown_gas_limit","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"max_fee_per_gas","type":{"kind":"field"}}]}},{"name":"l2","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::DimensionGasSettings","fields":[{"name":"gas_limit","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"teardown_gas_limit","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"max_fee_per_gas","type":{"kind":"field"}}]}},{"name":"inclusion_fee","type":{"kind":"field"}}]}},{"name":"transaction_fee","type":{"kind":"field"}}]}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"min_revertible_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"max_block_number","type":{"kind":"struct","path":"aztec::protocol_types::abis::max_block_number::MaxBlockNumber","fields":[{"name":"_opt","type":{"kind":"struct","path":"std::option::Option","fields":[{"name":"_is_some","type":{"kind":"boolean"}},{"name":"_value","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}},{"name":"note_hash_read_requests","type":{"kind":"array","length":32,"type":{"kind":"struct","path":"aztec::protocol_types::abis::side_effect::SideEffect","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"nullifier_read_requests","type":{"kind":"array","length":2,"type":{"kind":"struct","path":"aztec::protocol_types::abis::read_request::ReadRequest","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"nullifier_key_validation_requests","type":{"kind":"array","length":1,"type":{"kind":"struct","path":"aztec::protocol_types::abis::nullifier_key_validation_request::NullifierKeyValidationRequest","fields":[{"name":"public_key","type":{"kind":"struct","path":"aztec::protocol_types::grumpkin_point::GrumpkinPoint","fields":[{"name":"x","type":{"kind":"field"}},{"name":"y","type":{"kind":"field"}}]}},{"name":"secret_key","type":{"kind":"struct","path":"aztec::protocol_types::grumpkin_private_key::GrumpkinPrivateKey","fields":[{"name":"high","type":{"kind":"field"}},{"name":"low","type":{"kind":"field"}}]}}]}}},{"name":"new_note_hashes","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::abis::side_effect::SideEffect","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"new_nullifiers","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::abis::side_effect::SideEffectLinkedToNoteHash","fields":[{"name":"value","type":{"kind":"field"}},{"name":"note_hash","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"private_call_stack_hashes","type":{"kind":"array","length":4,"type":{"kind":"field"}}},{"name":"public_call_stack_hashes","type":{"kind":"array","length":4,"type":{"kind":"field"}}},{"name":"new_l2_to_l1_msgs","type":{"kind":"array","length":2,"type":{"kind":"struct","path":"aztec::protocol_types::messaging::l2_to_l1_message::L2ToL1Message","fields":[{"name":"recipient","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"content","type":{"kind":"field"}}]}}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"encrypted_logs_hash","type":{"kind":"field"}},{"name":"unencrypted_logs_hash","type":{"kind":"field"}},{"name":"encrypted_log_preimages_length","type":{"kind":"field"}},{"name":"unencrypted_log_preimages_length","type":{"kind":"field"}},{"name":"historical_header","type":{"kind":"struct","path":"aztec::protocol_types::header::Header","fields":[{"name":"last_archive","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"content_commitment","type":{"kind":"struct","path":"aztec::protocol_types::content_commitment::ContentCommitment","fields":[{"name":"tx_tree_height","type":{"kind":"field"}},{"name":"txs_effects_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}]}},{"name":"state","type":{"kind":"struct","path":"aztec::protocol_types::state_reference::StateReference","fields":[{"name":"l1_to_l2_message_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"partial","type":{"kind":"struct","path":"aztec::protocol_types::partial_state_reference::PartialStateReference","fields":[{"name":"note_hash_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"nullifier_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"public_data_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}}]}},{"name":"global_variables","type":{"kind":"struct","path":"aztec::protocol_types::abis::global_variables::GlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"fee_recipient","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"gas_fees","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l1_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}}]}}]}},{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}}]},"visibility":"public"},"return_witnesses":[990,991,992,993,994,995,996,997,998,999,1000,1001,1002,1003,1004,1005,1006,1007,1008,1009,1010,1011,1012,1013,1014,1015,1016,1017,1018,1019,1020,1021,1022,1023,1024,1025,1026,1027,1028,1029,1030,1031,1032,1033,1034,1035,1036,1037,1038,1039,1040,1041,1042,1043,1044,1045,1046,1047,1048,1049,1050,1051,1052,1053,1054,1055,1056,1057,1058,1059,1060,1061,1062,1063,1064,1065,1066,1067,1068,1069,1070,1071,1072,1073,1074,1075,1076,1077,1078,1079,1080,1081,1082,1083,1084,1085,1086,1087,1088,1089,1090,1091,1092,1093,1094,1095,1096,1097,1098,1099,1100,1101,1102,1103,1104,1105,1106,1107,1108,1109,1110,1111,1112,1113,1114,1115,1116,1117,1118,1119,1120,1121,1122,1123,1124,1125,1126,1127,1128,1129,1130,1131,1132,1133,1134,1135,1136,1137,1138,1139,1140,1141,1142,1143,1144,1145,1146,1147,1148,1149,1150,1151,1152,1153,1154,1155,1156,1157,1158,1159,1160,1161,1162,1163,1164,1165,1166,1167,1168,1169,1170,1171,1172,1173,1174,1175,1176,1177,1178,1179,1180,1181,1182,1183,1184,1185,1186,1187,1188,1189,1190,1191,1192,1193,1194,1195,1196,1197,1198,1199,1200,1201,1202,1203,1204,1205,1206,1207,1208,1209,1210]},"bytecode":"","debug_symbols":""},{"name":"replace_relayer_and_slash_stake","is_unconstrained":true,"custom_attributes":["aztec(public)","aztec(internal)"],"abi":{"parameters":[{"name":"inputs","type":{"kind":"struct","path":"aztec::context::inputs::public_context_inputs::PublicContextInputs","fields":[{"name":"call_context","type":{"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"storage_contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"portal_contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"gas_left","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l1_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}},{"name":"side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"gas_settings","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::GasSettings","fields":[{"name":"da","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::DimensionGasSettings","fields":[{"name":"gas_limit","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"teardown_gas_limit","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"max_fee_per_gas","type":{"kind":"field"}}]}},{"name":"l1","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::DimensionGasSettings","fields":[{"name":"gas_limit","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"teardown_gas_limit","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"max_fee_per_gas","type":{"kind":"field"}}]}},{"name":"l2","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::DimensionGasSettings","fields":[{"name":"gas_limit","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"teardown_gas_limit","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"max_fee_per_gas","type":{"kind":"field"}}]}},{"name":"inclusion_fee","type":{"kind":"field"}}]}},{"name":"transaction_fee","type":{"kind":"field"}}]}},{"name":"historical_header","type":{"kind":"struct","path":"aztec::protocol_types::header::Header","fields":[{"name":"last_archive","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"content_commitment","type":{"kind":"struct","path":"aztec::protocol_types::content_commitment::ContentCommitment","fields":[{"name":"tx_tree_height","type":{"kind":"field"}},{"name":"txs_effects_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}]}},{"name":"state","type":{"kind":"struct","path":"aztec::protocol_types::state_reference::StateReference","fields":[{"name":"l1_to_l2_message_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"partial","type":{"kind":"struct","path":"aztec::protocol_types::partial_state_reference::PartialStateReference","fields":[{"name":"note_hash_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"nullifier_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"public_data_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}}]}},{"name":"global_variables","type":{"kind":"struct","path":"aztec::protocol_types::abis::global_variables::GlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"fee_recipient","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"gas_fees","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l1_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}}]}}]}},{"name":"public_global_variables","type":{"kind":"struct","path":"aztec::protocol_types::abis::global_variables::GlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"fee_recipient","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"gas_fees","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l1_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}}]}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}]},"visibility":"private"},{"name":"sk_hash","type":{"kind":"field"},"visibility":"private"},{"name":"new_he_pub_key","type":{"kind":"field"},"visibility":"private"},{"name":"new_relayer","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]},"visibility":"private"},{"name":"secret_hash","type":{"kind":"field"},"visibility":"private"}],"param_witnesses":{"inputs":[{"start":0,"end":54}],"new_he_pub_key":[{"start":55,"end":56}],"new_relayer":[{"start":56,"end":57}],"secret_hash":[{"start":57,"end":58}],"sk_hash":[{"start":54,"end":55}]},"return_type":{"abi_type":{"kind":"struct","path":"aztec::protocol_types::abis::public_circuit_public_inputs::PublicCircuitPublicInputs","fields":[{"name":"call_context","type":{"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"storage_contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"portal_contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"gas_left","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l1_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}},{"name":"side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"gas_settings","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::GasSettings","fields":[{"name":"da","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::DimensionGasSettings","fields":[{"name":"gas_limit","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"teardown_gas_limit","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"max_fee_per_gas","type":{"kind":"field"}}]}},{"name":"l1","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::DimensionGasSettings","fields":[{"name":"gas_limit","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"teardown_gas_limit","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"max_fee_per_gas","type":{"kind":"field"}}]}},{"name":"l2","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::DimensionGasSettings","fields":[{"name":"gas_limit","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"teardown_gas_limit","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"max_fee_per_gas","type":{"kind":"field"}}]}},{"name":"inclusion_fee","type":{"kind":"field"}}]}},{"name":"transaction_fee","type":{"kind":"field"}}]}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"nullifier_read_requests","type":{"kind":"array","length":2,"type":{"kind":"struct","path":"aztec::protocol_types::abis::read_request::ReadRequest","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"nullifier_non_existent_read_requests","type":{"kind":"array","length":2,"type":{"kind":"struct","path":"aztec::protocol_types::abis::read_request::ReadRequest","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"contract_storage_update_requests","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::contrakt::storage_update_request::StorageUpdateRequest","fields":[{"name":"storage_slot","type":{"kind":"field"}},{"name":"new_value","type":{"kind":"field"}}]}}},{"name":"contract_storage_reads","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::contrakt::storage_read::StorageRead","fields":[{"name":"storage_slot","type":{"kind":"field"}},{"name":"current_value","type":{"kind":"field"}}]}}},{"name":"public_call_stack_hashes","type":{"kind":"array","length":4,"type":{"kind":"field"}}},{"name":"new_note_hashes","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::abis::side_effect::SideEffect","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"new_nullifiers","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::abis::side_effect::SideEffectLinkedToNoteHash","fields":[{"name":"value","type":{"kind":"field"}},{"name":"note_hash","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"new_l2_to_l1_msgs","type":{"kind":"array","length":2,"type":{"kind":"struct","path":"aztec::protocol_types::messaging::l2_to_l1_message::L2ToL1Message","fields":[{"name":"recipient","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"content","type":{"kind":"field"}}]}}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"unencrypted_logs_hash","type":{"kind":"field"}},{"name":"unencrypted_log_preimages_length","type":{"kind":"field"}},{"name":"historical_header","type":{"kind":"struct","path":"aztec::protocol_types::header::Header","fields":[{"name":"last_archive","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"content_commitment","type":{"kind":"struct","path":"aztec::protocol_types::content_commitment::ContentCommitment","fields":[{"name":"tx_tree_height","type":{"kind":"field"}},{"name":"txs_effects_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}]}},{"name":"state","type":{"kind":"struct","path":"aztec::protocol_types::state_reference::StateReference","fields":[{"name":"l1_to_l2_message_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"partial","type":{"kind":"struct","path":"aztec::protocol_types::partial_state_reference::PartialStateReference","fields":[{"name":"note_hash_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"nullifier_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"public_data_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}}]}},{"name":"global_variables","type":{"kind":"struct","path":"aztec::protocol_types::abis::global_variables::GlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"fee_recipient","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"gas_fees","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l1_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}}]}}]}},{"name":"prover_address","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"revert_code","type":{"kind":"integer","sign":"unsigned","width":8}},{"name":"gas_left","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l1_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]},"visibility":"public"},"return_witnesses":[58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272]},"bytecode":"","debug_symbols":""},{"name":"constructor","is_unconstrained":false,"custom_attributes":["aztec(private)","aztec(initializer)"],"abi":{"parameters":[{"name":"inputs","type":{"kind":"struct","path":"aztec::context::inputs::private_context_inputs::PrivateContextInputs","fields":[{"name":"call_context","type":{"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"storage_contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"portal_contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"gas_left","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l1_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}},{"name":"side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"gas_settings","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::GasSettings","fields":[{"name":"da","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::DimensionGasSettings","fields":[{"name":"gas_limit","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"teardown_gas_limit","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"max_fee_per_gas","type":{"kind":"field"}}]}},{"name":"l1","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::DimensionGasSettings","fields":[{"name":"gas_limit","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"teardown_gas_limit","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"max_fee_per_gas","type":{"kind":"field"}}]}},{"name":"l2","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::DimensionGasSettings","fields":[{"name":"gas_limit","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"teardown_gas_limit","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"max_fee_per_gas","type":{"kind":"field"}}]}},{"name":"inclusion_fee","type":{"kind":"field"}}]}},{"name":"transaction_fee","type":{"kind":"field"}}]}},{"name":"historical_header","type":{"kind":"struct","path":"aztec::protocol_types::header::Header","fields":[{"name":"last_archive","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"content_commitment","type":{"kind":"struct","path":"aztec::protocol_types::content_commitment::ContentCommitment","fields":[{"name":"tx_tree_height","type":{"kind":"field"}},{"name":"txs_effects_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}]}},{"name":"state","type":{"kind":"struct","path":"aztec::protocol_types::state_reference::StateReference","fields":[{"name":"l1_to_l2_message_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"partial","type":{"kind":"struct","path":"aztec::protocol_types::partial_state_reference::PartialStateReference","fields":[{"name":"note_hash_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"nullifier_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"public_data_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}}]}},{"name":"global_variables","type":{"kind":"struct","path":"aztec::protocol_types::abis::global_variables::GlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"fee_recipient","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"gas_fees","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l1_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}}]}}]}},{"name":"private_global_variables","type":{"kind":"struct","path":"aztec::context::globals::private_global_variables::PrivateGlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}}]}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}]},"visibility":"private"},{"name":"admin","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]},"visibility":"private"},{"name":"target","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]},"visibility":"private"},{"name":"token_in","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]},"visibility":"private"},{"name":"token_out","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]},"visibility":"private"},{"name":"relayer","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]},"visibility":"private"},{"name":"bonding_token","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]},"visibility":"private"},{"name":"bonding_amount","type":{"kind":"field"},"visibility":"private"},{"name":"he_pub_key","type":{"kind":"field"},"visibility":"private"},{"name":"sk_hash","type":{"kind":"field"},"visibility":"private"},{"name":"interval","type":{"kind":"field"},"visibility":"private"},{"name":"he_secret_key","type":{"kind":"field"},"visibility":"private"}],"param_witnesses":{"admin":[{"start":47,"end":48}],"bonding_amount":[{"start":53,"end":54}],"bonding_token":[{"start":52,"end":53}],"he_pub_key":[{"start":54,"end":55}],"he_secret_key":[{"start":57,"end":58}],"inputs":[{"start":0,"end":47}],"interval":[{"start":56,"end":57}],"relayer":[{"start":51,"end":52}],"sk_hash":[{"start":55,"end":56}],"target":[{"start":48,"end":49}],"token_in":[{"start":49,"end":50}],"token_out":[{"start":50,"end":51}]},"return_type":{"abi_type":{"kind":"struct","path":"aztec::protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs","fields":[{"name":"call_context","type":{"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"storage_contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"portal_contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"gas_left","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l1_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}},{"name":"side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"gas_settings","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::GasSettings","fields":[{"name":"da","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::DimensionGasSettings","fields":[{"name":"gas_limit","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"teardown_gas_limit","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"max_fee_per_gas","type":{"kind":"field"}}]}},{"name":"l1","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::DimensionGasSettings","fields":[{"name":"gas_limit","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"teardown_gas_limit","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"max_fee_per_gas","type":{"kind":"field"}}]}},{"name":"l2","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::DimensionGasSettings","fields":[{"name":"gas_limit","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"teardown_gas_limit","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"max_fee_per_gas","type":{"kind":"field"}}]}},{"name":"inclusion_fee","type":{"kind":"field"}}]}},{"name":"transaction_fee","type":{"kind":"field"}}]}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"min_revertible_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"max_block_number","type":{"kind":"struct","path":"aztec::protocol_types::abis::max_block_number::MaxBlockNumber","fields":[{"name":"_opt","type":{"kind":"struct","path":"std::option::Option","fields":[{"name":"_is_some","type":{"kind":"boolean"}},{"name":"_value","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}},{"name":"note_hash_read_requests","type":{"kind":"array","length":32,"type":{"kind":"struct","path":"aztec::protocol_types::abis::side_effect::SideEffect","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"nullifier_read_requests","type":{"kind":"array","length":2,"type":{"kind":"struct","path":"aztec::protocol_types::abis::read_request::ReadRequest","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"nullifier_key_validation_requests","type":{"kind":"array","length":1,"type":{"kind":"struct","path":"aztec::protocol_types::abis::nullifier_key_validation_request::NullifierKeyValidationRequest","fields":[{"name":"public_key","type":{"kind":"struct","path":"aztec::protocol_types::grumpkin_point::GrumpkinPoint","fields":[{"name":"x","type":{"kind":"field"}},{"name":"y","type":{"kind":"field"}}]}},{"name":"secret_key","type":{"kind":"struct","path":"aztec::protocol_types::grumpkin_private_key::GrumpkinPrivateKey","fields":[{"name":"high","type":{"kind":"field"}},{"name":"low","type":{"kind":"field"}}]}}]}}},{"name":"new_note_hashes","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::abis::side_effect::SideEffect","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"new_nullifiers","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::abis::side_effect::SideEffectLinkedToNoteHash","fields":[{"name":"value","type":{"kind":"field"}},{"name":"note_hash","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"private_call_stack_hashes","type":{"kind":"array","length":4,"type":{"kind":"field"}}},{"name":"public_call_stack_hashes","type":{"kind":"array","length":4,"type":{"kind":"field"}}},{"name":"new_l2_to_l1_msgs","type":{"kind":"array","length":2,"type":{"kind":"struct","path":"aztec::protocol_types::messaging::l2_to_l1_message::L2ToL1Message","fields":[{"name":"recipient","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"content","type":{"kind":"field"}}]}}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"encrypted_logs_hash","type":{"kind":"field"}},{"name":"unencrypted_logs_hash","type":{"kind":"field"}},{"name":"encrypted_log_preimages_length","type":{"kind":"field"}},{"name":"unencrypted_log_preimages_length","type":{"kind":"field"}},{"name":"historical_header","type":{"kind":"struct","path":"aztec::protocol_types::header::Header","fields":[{"name":"last_archive","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"content_commitment","type":{"kind":"struct","path":"aztec::protocol_types::content_commitment::ContentCommitment","fields":[{"name":"tx_tree_height","type":{"kind":"field"}},{"name":"txs_effects_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}]}},{"name":"state","type":{"kind":"struct","path":"aztec::protocol_types::state_reference::StateReference","fields":[{"name":"l1_to_l2_message_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"partial","type":{"kind":"struct","path":"aztec::protocol_types::partial_state_reference::PartialStateReference","fields":[{"name":"note_hash_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"nullifier_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"public_data_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}}]}},{"name":"global_variables","type":{"kind":"struct","path":"aztec::protocol_types::abis::global_variables::GlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"fee_recipient","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"gas_fees","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l1_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}}]}}]}},{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}}]},"visibility":"public"},"return_witnesses":[208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,376,377,378,379,380,381,382,383,384,385,386,387,388,389,390,391,392,393,394,395,396,397,398,399,400,401,402,403,404,405,406,407,408,409,410,411,412,413,414,415,416,417,418,419,420,421,422,423,424,425,426,427,428]},"bytecode":"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","debug_symbols":"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"},{"name":"spend_public_authwit","is_unconstrained":true,"custom_attributes":["aztec(public)"],"abi":{"parameters":[{"name":"inputs","type":{"kind":"struct","path":"aztec::context::inputs::public_context_inputs::PublicContextInputs","fields":[{"name":"call_context","type":{"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"storage_contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"portal_contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"gas_left","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l1_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}},{"name":"side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"gas_settings","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::GasSettings","fields":[{"name":"da","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::DimensionGasSettings","fields":[{"name":"gas_limit","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"teardown_gas_limit","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"max_fee_per_gas","type":{"kind":"field"}}]}},{"name":"l1","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::DimensionGasSettings","fields":[{"name":"gas_limit","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"teardown_gas_limit","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"max_fee_per_gas","type":{"kind":"field"}}]}},{"name":"l2","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::DimensionGasSettings","fields":[{"name":"gas_limit","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"teardown_gas_limit","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"max_fee_per_gas","type":{"kind":"field"}}]}},{"name":"inclusion_fee","type":{"kind":"field"}}]}},{"name":"transaction_fee","type":{"kind":"field"}}]}},{"name":"historical_header","type":{"kind":"struct","path":"aztec::protocol_types::header::Header","fields":[{"name":"last_archive","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"content_commitment","type":{"kind":"struct","path":"aztec::protocol_types::content_commitment::ContentCommitment","fields":[{"name":"tx_tree_height","type":{"kind":"field"}},{"name":"txs_effects_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}]}},{"name":"state","type":{"kind":"struct","path":"aztec::protocol_types::state_reference::StateReference","fields":[{"name":"l1_to_l2_message_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"partial","type":{"kind":"struct","path":"aztec::protocol_types::partial_state_reference::PartialStateReference","fields":[{"name":"note_hash_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"nullifier_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"public_data_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}}]}},{"name":"global_variables","type":{"kind":"struct","path":"aztec::protocol_types::abis::global_variables::GlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"fee_recipient","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"gas_fees","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l1_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}}]}}]}},{"name":"public_global_variables","type":{"kind":"struct","path":"aztec::protocol_types::abis::global_variables::GlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"fee_recipient","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"gas_fees","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l1_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}}]}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}]},"visibility":"private"},{"name":"inner_hash","type":{"kind":"field"},"visibility":"private"}],"param_witnesses":{"inner_hash":[{"start":54,"end":55}],"inputs":[{"start":0,"end":54}]},"return_type":{"abi_type":{"kind":"struct","path":"aztec::protocol_types::abis::public_circuit_public_inputs::PublicCircuitPublicInputs","fields":[{"name":"call_context","type":{"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"storage_contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"portal_contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"gas_left","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l1_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}},{"name":"side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"gas_settings","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::GasSettings","fields":[{"name":"da","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::DimensionGasSettings","fields":[{"name":"gas_limit","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"teardown_gas_limit","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"max_fee_per_gas","type":{"kind":"field"}}]}},{"name":"l1","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::DimensionGasSettings","fields":[{"name":"gas_limit","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"teardown_gas_limit","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"max_fee_per_gas","type":{"kind":"field"}}]}},{"name":"l2","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::DimensionGasSettings","fields":[{"name":"gas_limit","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"teardown_gas_limit","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"max_fee_per_gas","type":{"kind":"field"}}]}},{"name":"inclusion_fee","type":{"kind":"field"}}]}},{"name":"transaction_fee","type":{"kind":"field"}}]}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"nullifier_read_requests","type":{"kind":"array","length":2,"type":{"kind":"struct","path":"aztec::protocol_types::abis::read_request::ReadRequest","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"nullifier_non_existent_read_requests","type":{"kind":"array","length":2,"type":{"kind":"struct","path":"aztec::protocol_types::abis::read_request::ReadRequest","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"contract_storage_update_requests","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::contrakt::storage_update_request::StorageUpdateRequest","fields":[{"name":"storage_slot","type":{"kind":"field"}},{"name":"new_value","type":{"kind":"field"}}]}}},{"name":"contract_storage_reads","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::contrakt::storage_read::StorageRead","fields":[{"name":"storage_slot","type":{"kind":"field"}},{"name":"current_value","type":{"kind":"field"}}]}}},{"name":"public_call_stack_hashes","type":{"kind":"array","length":4,"type":{"kind":"field"}}},{"name":"new_note_hashes","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::abis::side_effect::SideEffect","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"new_nullifiers","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::abis::side_effect::SideEffectLinkedToNoteHash","fields":[{"name":"value","type":{"kind":"field"}},{"name":"note_hash","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"new_l2_to_l1_msgs","type":{"kind":"array","length":2,"type":{"kind":"struct","path":"aztec::protocol_types::messaging::l2_to_l1_message::L2ToL1Message","fields":[{"name":"recipient","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"content","type":{"kind":"field"}}]}}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"unencrypted_logs_hash","type":{"kind":"field"}},{"name":"unencrypted_log_preimages_length","type":{"kind":"field"}},{"name":"historical_header","type":{"kind":"struct","path":"aztec::protocol_types::header::Header","fields":[{"name":"last_archive","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"content_commitment","type":{"kind":"struct","path":"aztec::protocol_types::content_commitment::ContentCommitment","fields":[{"name":"tx_tree_height","type":{"kind":"field"}},{"name":"txs_effects_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}]}},{"name":"state","type":{"kind":"struct","path":"aztec::protocol_types::state_reference::StateReference","fields":[{"name":"l1_to_l2_message_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"partial","type":{"kind":"struct","path":"aztec::protocol_types::partial_state_reference::PartialStateReference","fields":[{"name":"note_hash_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"nullifier_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"public_data_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}}]}},{"name":"global_variables","type":{"kind":"struct","path":"aztec::protocol_types::abis::global_variables::GlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"fee_recipient","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"gas_fees","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l1_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}}]}}]}},{"name":"prover_address","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"revert_code","type":{"kind":"integer","sign":"unsigned","width":8}},{"name":"gas_left","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l1_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]},"visibility":"public"},"return_witnesses":[55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269]},"bytecode":"","debug_symbols":""},{"name":"get_admin","is_unconstrained":true,"custom_attributes":[],"abi":{"parameters":[],"param_witnesses":{},"return_type":{"abi_type":{"kind":"field"},"visibility":"public"},"return_witnesses":[0]},"bytecode":"H4sIAAAAAAAA/72UTU7DMBCFnT83JSqCJYJF2LNwJQ5grsANghIQm0ZKWwkuH4GRh35yvKvhSdGMx2PP8/M4mToh87aIxAQP3taIWf85mHPwaLbabVKqKFbfX+X9Bnm5j10jloGnzM+peBqzvVRLjWpoZxPWCu/Awi+gR5jXYD5HLA/WOl3vMV9F1uhIPfF5J3J1OrKWOlU4i/W+OQ8/OrGWxVjqbcBD/wMftrLFuELtVfraplanN5r6TGucwYK/1CuRc+ftlVqCewlP9qTDBlpJbhPRkX1dIp9vMuX7d/tq8E61L89GnVSgk+Cve/jCa+uwP4xT9zY8D12fgVoZ0KQl9RnjHHH6RSQ2w/J3InVdTNol1g78FYXttVZLeZO+lULFkUV8xm69vfH2aZq6z/Z91w8f7Xg8tONr+zIed/3+d8UXdqw6UsoHAAA=","debug_symbols":"zZfRisIwEEX/ZZ7LkplMmrS/suxD1u1CoVSxVZDSf7fVWh8UwaJy3zrk3s4hDwfSUbVexbZc1w3lHZkvR/l3R80m1uPctHHbUs7BGE2oqP9O36J9Qv9lVVDupE9u4mJDNqVFxcxh5nAnbb1MYWU7Z4Prf5KBJwXj8WA8AYwnA+NhgwbEaECCBmTRgBQNCM3SjKZpRvM0o4ma0UwtaKaWd5v6vEU+suUlTlVr5i1j4uHlMmfzv8Vcr1eYJyYFZHKATCkgkwdkCoBMGR6TvesCSf3UskZvXGh1Qcct6KQLOn5BJzzXGYZ93JbxtyrGh/J4tqtXl3fzMLaHzfmkPwI="},{"name":"check_sk_hash","is_unconstrained":true,"custom_attributes":["aztec(public)"],"abi":{"parameters":[{"name":"inputs","type":{"kind":"struct","path":"aztec::context::inputs::public_context_inputs::PublicContextInputs","fields":[{"name":"call_context","type":{"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"storage_contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"portal_contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"gas_left","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l1_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}},{"name":"side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"gas_settings","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::GasSettings","fields":[{"name":"da","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::DimensionGasSettings","fields":[{"name":"gas_limit","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"teardown_gas_limit","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"max_fee_per_gas","type":{"kind":"field"}}]}},{"name":"l1","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::DimensionGasSettings","fields":[{"name":"gas_limit","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"teardown_gas_limit","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"max_fee_per_gas","type":{"kind":"field"}}]}},{"name":"l2","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::DimensionGasSettings","fields":[{"name":"gas_limit","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"teardown_gas_limit","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"max_fee_per_gas","type":{"kind":"field"}}]}},{"name":"inclusion_fee","type":{"kind":"field"}}]}},{"name":"transaction_fee","type":{"kind":"field"}}]}},{"name":"historical_header","type":{"kind":"struct","path":"aztec::protocol_types::header::Header","fields":[{"name":"last_archive","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"content_commitment","type":{"kind":"struct","path":"aztec::protocol_types::content_commitment::ContentCommitment","fields":[{"name":"tx_tree_height","type":{"kind":"field"}},{"name":"txs_effects_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}]}},{"name":"state","type":{"kind":"struct","path":"aztec::protocol_types::state_reference::StateReference","fields":[{"name":"l1_to_l2_message_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"partial","type":{"kind":"struct","path":"aztec::protocol_types::partial_state_reference::PartialStateReference","fields":[{"name":"note_hash_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"nullifier_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"public_data_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}}]}},{"name":"global_variables","type":{"kind":"struct","path":"aztec::protocol_types::abis::global_variables::GlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"fee_recipient","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"gas_fees","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l1_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}}]}}]}},{"name":"public_global_variables","type":{"kind":"struct","path":"aztec::protocol_types::abis::global_variables::GlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"fee_recipient","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"gas_fees","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l1_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}}]}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}]},"visibility":"private"},{"name":"sk_hash","type":{"kind":"field"},"visibility":"private"}],"param_witnesses":{"inputs":[{"start":0,"end":54}],"sk_hash":[{"start":54,"end":55}]},"return_type":{"abi_type":{"kind":"struct","path":"aztec::protocol_types::abis::public_circuit_public_inputs::PublicCircuitPublicInputs","fields":[{"name":"call_context","type":{"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"storage_contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"portal_contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"gas_left","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l1_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}},{"name":"side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"gas_settings","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::GasSettings","fields":[{"name":"da","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::DimensionGasSettings","fields":[{"name":"gas_limit","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"teardown_gas_limit","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"max_fee_per_gas","type":{"kind":"field"}}]}},{"name":"l1","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::DimensionGasSettings","fields":[{"name":"gas_limit","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"teardown_gas_limit","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"max_fee_per_gas","type":{"kind":"field"}}]}},{"name":"l2","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::DimensionGasSettings","fields":[{"name":"gas_limit","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"teardown_gas_limit","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"max_fee_per_gas","type":{"kind":"field"}}]}},{"name":"inclusion_fee","type":{"kind":"field"}}]}},{"name":"transaction_fee","type":{"kind":"field"}}]}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"nullifier_read_requests","type":{"kind":"array","length":2,"type":{"kind":"struct","path":"aztec::protocol_types::abis::read_request::ReadRequest","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"nullifier_non_existent_read_requests","type":{"kind":"array","length":2,"type":{"kind":"struct","path":"aztec::protocol_types::abis::read_request::ReadRequest","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"contract_storage_update_requests","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::contrakt::storage_update_request::StorageUpdateRequest","fields":[{"name":"storage_slot","type":{"kind":"field"}},{"name":"new_value","type":{"kind":"field"}}]}}},{"name":"contract_storage_reads","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::contrakt::storage_read::StorageRead","fields":[{"name":"storage_slot","type":{"kind":"field"}},{"name":"current_value","type":{"kind":"field"}}]}}},{"name":"public_call_stack_hashes","type":{"kind":"array","length":4,"type":{"kind":"field"}}},{"name":"new_note_hashes","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::abis::side_effect::SideEffect","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"new_nullifiers","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::abis::side_effect::SideEffectLinkedToNoteHash","fields":[{"name":"value","type":{"kind":"field"}},{"name":"note_hash","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"new_l2_to_l1_msgs","type":{"kind":"array","length":2,"type":{"kind":"struct","path":"aztec::protocol_types::messaging::l2_to_l1_message::L2ToL1Message","fields":[{"name":"recipient","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"content","type":{"kind":"field"}}]}}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"unencrypted_logs_hash","type":{"kind":"field"}},{"name":"unencrypted_log_preimages_length","type":{"kind":"field"}},{"name":"historical_header","type":{"kind":"struct","path":"aztec::protocol_types::header::Header","fields":[{"name":"last_archive","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"content_commitment","type":{"kind":"struct","path":"aztec::protocol_types::content_commitment::ContentCommitment","fields":[{"name":"tx_tree_height","type":{"kind":"field"}},{"name":"txs_effects_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}]}},{"name":"state","type":{"kind":"struct","path":"aztec::protocol_types::state_reference::StateReference","fields":[{"name":"l1_to_l2_message_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"partial","type":{"kind":"struct","path":"aztec::protocol_types::partial_state_reference::PartialStateReference","fields":[{"name":"note_hash_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"nullifier_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"public_data_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}}]}},{"name":"global_variables","type":{"kind":"struct","path":"aztec::protocol_types::abis::global_variables::GlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"fee_recipient","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"gas_fees","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l1_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}}]}}]}},{"name":"prover_address","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"revert_code","type":{"kind":"integer","sign":"unsigned","width":8}},{"name":"gas_left","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l1_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]},"visibility":"public"},"return_witnesses":[55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269]},"bytecode":"","debug_symbols":""},{"name":"stake","is_unconstrained":true,"custom_attributes":["aztec(public)","aztec(internal)"],"abi":{"parameters":[{"name":"inputs","type":{"kind":"struct","path":"aztec::context::inputs::public_context_inputs::PublicContextInputs","fields":[{"name":"call_context","type":{"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"storage_contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"portal_contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"gas_left","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l1_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}},{"name":"side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"gas_settings","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::GasSettings","fields":[{"name":"da","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::DimensionGasSettings","fields":[{"name":"gas_limit","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"teardown_gas_limit","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"max_fee_per_gas","type":{"kind":"field"}}]}},{"name":"l1","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::DimensionGasSettings","fields":[{"name":"gas_limit","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"teardown_gas_limit","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"max_fee_per_gas","type":{"kind":"field"}}]}},{"name":"l2","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::DimensionGasSettings","fields":[{"name":"gas_limit","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"teardown_gas_limit","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"max_fee_per_gas","type":{"kind":"field"}}]}},{"name":"inclusion_fee","type":{"kind":"field"}}]}},{"name":"transaction_fee","type":{"kind":"field"}}]}},{"name":"historical_header","type":{"kind":"struct","path":"aztec::protocol_types::header::Header","fields":[{"name":"last_archive","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"content_commitment","type":{"kind":"struct","path":"aztec::protocol_types::content_commitment::ContentCommitment","fields":[{"name":"tx_tree_height","type":{"kind":"field"}},{"name":"txs_effects_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}]}},{"name":"state","type":{"kind":"struct","path":"aztec::protocol_types::state_reference::StateReference","fields":[{"name":"l1_to_l2_message_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"partial","type":{"kind":"struct","path":"aztec::protocol_types::partial_state_reference::PartialStateReference","fields":[{"name":"note_hash_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"nullifier_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"public_data_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}}]}},{"name":"global_variables","type":{"kind":"struct","path":"aztec::protocol_types::abis::global_variables::GlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"fee_recipient","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"gas_fees","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l1_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}}]}}]}},{"name":"public_global_variables","type":{"kind":"struct","path":"aztec::protocol_types::abis::global_variables::GlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"fee_recipient","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"gas_fees","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l1_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}}]}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}]},"visibility":"private"},{"name":"relayer","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]},"visibility":"private"},{"name":"token","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]},"visibility":"private"},{"name":"amount","type":{"kind":"field"},"visibility":"private"}],"param_witnesses":{"amount":[{"start":56,"end":57}],"inputs":[{"start":0,"end":54}],"relayer":[{"start":54,"end":55}],"token":[{"start":55,"end":56}]},"return_type":{"abi_type":{"kind":"struct","path":"aztec::protocol_types::abis::public_circuit_public_inputs::PublicCircuitPublicInputs","fields":[{"name":"call_context","type":{"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"storage_contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"portal_contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"gas_left","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l1_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}},{"name":"side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"gas_settings","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::GasSettings","fields":[{"name":"da","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::DimensionGasSettings","fields":[{"name":"gas_limit","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"teardown_gas_limit","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"max_fee_per_gas","type":{"kind":"field"}}]}},{"name":"l1","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::DimensionGasSettings","fields":[{"name":"gas_limit","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"teardown_gas_limit","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"max_fee_per_gas","type":{"kind":"field"}}]}},{"name":"l2","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::DimensionGasSettings","fields":[{"name":"gas_limit","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"teardown_gas_limit","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"max_fee_per_gas","type":{"kind":"field"}}]}},{"name":"inclusion_fee","type":{"kind":"field"}}]}},{"name":"transaction_fee","type":{"kind":"field"}}]}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"nullifier_read_requests","type":{"kind":"array","length":2,"type":{"kind":"struct","path":"aztec::protocol_types::abis::read_request::ReadRequest","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"nullifier_non_existent_read_requests","type":{"kind":"array","length":2,"type":{"kind":"struct","path":"aztec::protocol_types::abis::read_request::ReadRequest","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"contract_storage_update_requests","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::contrakt::storage_update_request::StorageUpdateRequest","fields":[{"name":"storage_slot","type":{"kind":"field"}},{"name":"new_value","type":{"kind":"field"}}]}}},{"name":"contract_storage_reads","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::contrakt::storage_read::StorageRead","fields":[{"name":"storage_slot","type":{"kind":"field"}},{"name":"current_value","type":{"kind":"field"}}]}}},{"name":"public_call_stack_hashes","type":{"kind":"array","length":4,"type":{"kind":"field"}}},{"name":"new_note_hashes","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::abis::side_effect::SideEffect","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"new_nullifiers","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::abis::side_effect::SideEffectLinkedToNoteHash","fields":[{"name":"value","type":{"kind":"field"}},{"name":"note_hash","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"new_l2_to_l1_msgs","type":{"kind":"array","length":2,"type":{"kind":"struct","path":"aztec::protocol_types::messaging::l2_to_l1_message::L2ToL1Message","fields":[{"name":"recipient","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"content","type":{"kind":"field"}}]}}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"unencrypted_logs_hash","type":{"kind":"field"}},{"name":"unencrypted_log_preimages_length","type":{"kind":"field"}},{"name":"historical_header","type":{"kind":"struct","path":"aztec::protocol_types::header::Header","fields":[{"name":"last_archive","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"content_commitment","type":{"kind":"struct","path":"aztec::protocol_types::content_commitment::ContentCommitment","fields":[{"name":"tx_tree_height","type":{"kind":"field"}},{"name":"txs_effects_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}]}},{"name":"state","type":{"kind":"struct","path":"aztec::protocol_types::state_reference::StateReference","fields":[{"name":"l1_to_l2_message_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"partial","type":{"kind":"struct","path":"aztec::protocol_types::partial_state_reference::PartialStateReference","fields":[{"name":"note_hash_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"nullifier_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"public_data_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}}]}},{"name":"global_variables","type":{"kind":"struct","path":"aztec::protocol_types::abis::global_variables::GlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"fee_recipient","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"gas_fees","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l1_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}}]}}]}},{"name":"prover_address","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"revert_code","type":{"kind":"integer","sign":"unsigned","width":8}},{"name":"gas_left","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l1_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]},"visibility":"public"},"return_witnesses":[57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271]},"bytecode":"","debug_symbols":""},{"name":"execute_batch","is_unconstrained":false,"custom_attributes":["aztec(private)"],"abi":{"parameters":[{"name":"inputs","type":{"kind":"struct","path":"aztec::context::inputs::private_context_inputs::PrivateContextInputs","fields":[{"name":"call_context","type":{"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"storage_contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"portal_contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"gas_left","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l1_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}},{"name":"side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"gas_settings","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::GasSettings","fields":[{"name":"da","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::DimensionGasSettings","fields":[{"name":"gas_limit","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"teardown_gas_limit","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"max_fee_per_gas","type":{"kind":"field"}}]}},{"name":"l1","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::DimensionGasSettings","fields":[{"name":"gas_limit","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"teardown_gas_limit","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"max_fee_per_gas","type":{"kind":"field"}}]}},{"name":"l2","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::DimensionGasSettings","fields":[{"name":"gas_limit","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"teardown_gas_limit","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"max_fee_per_gas","type":{"kind":"field"}}]}},{"name":"inclusion_fee","type":{"kind":"field"}}]}},{"name":"transaction_fee","type":{"kind":"field"}}]}},{"name":"historical_header","type":{"kind":"struct","path":"aztec::protocol_types::header::Header","fields":[{"name":"last_archive","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"content_commitment","type":{"kind":"struct","path":"aztec::protocol_types::content_commitment::ContentCommitment","fields":[{"name":"tx_tree_height","type":{"kind":"field"}},{"name":"txs_effects_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}]}},{"name":"state","type":{"kind":"struct","path":"aztec::protocol_types::state_reference::StateReference","fields":[{"name":"l1_to_l2_message_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"partial","type":{"kind":"struct","path":"aztec::protocol_types::partial_state_reference::PartialStateReference","fields":[{"name":"note_hash_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"nullifier_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"public_data_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}}]}},{"name":"global_variables","type":{"kind":"struct","path":"aztec::protocol_types::abis::global_variables::GlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"fee_recipient","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"gas_fees","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l1_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}}]}}]}},{"name":"private_global_variables","type":{"kind":"struct","path":"aztec::context::globals::private_global_variables::PrivateGlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}}]}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}]},"visibility":"private"},{"name":"encrypted_amount","type":{"kind":"array","length":2,"type":{"kind":"field"}},"visibility":"private"},{"name":"secret_key","type":{"kind":"field"},"visibility":"private"},{"name":"token_out_amount_cancelled","type":{"kind":"field"},"visibility":"private"},{"name":"input_asset_bridge","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]},"visibility":"private"},{"name":"output_asset_bridge","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]},"visibility":"private"},{"name":"nonce_for_transfer_approval","type":{"kind":"field"},"visibility":"private"},{"name":"uniswap_fee_tier","type":{"kind":"field"},"visibility":"private"},{"name":"minimum_output_amount","type":{"kind":"field"},"visibility":"private"},{"name":"secret_hash_for_L1_to_l2_message","type":{"kind":"field"},"visibility":"private"},{"name":"caller_on_L1","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]},"visibility":"private"},{"name":"nonce_for_swap_approval","type":{"kind":"field"},"visibility":"private"}],"param_witnesses":{"caller_on_L1":[{"start":57,"end":58}],"encrypted_amount":[{"start":47,"end":49}],"input_asset_bridge":[{"start":51,"end":52}],"inputs":[{"start":0,"end":47}],"minimum_output_amount":[{"start":55,"end":56}],"nonce_for_swap_approval":[{"start":58,"end":59}],"nonce_for_transfer_approval":[{"start":53,"end":54}],"output_asset_bridge":[{"start":52,"end":53}],"secret_hash_for_L1_to_l2_message":[{"start":56,"end":57}],"secret_key":[{"start":49,"end":50}],"token_out_amount_cancelled":[{"start":50,"end":51}],"uniswap_fee_tier":[{"start":54,"end":55}]},"return_type":{"abi_type":{"kind":"struct","path":"aztec::protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs","fields":[{"name":"call_context","type":{"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"storage_contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"portal_contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"gas_left","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l1_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}},{"name":"side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"gas_settings","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::GasSettings","fields":[{"name":"da","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::DimensionGasSettings","fields":[{"name":"gas_limit","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"teardown_gas_limit","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"max_fee_per_gas","type":{"kind":"field"}}]}},{"name":"l1","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::DimensionGasSettings","fields":[{"name":"gas_limit","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"teardown_gas_limit","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"max_fee_per_gas","type":{"kind":"field"}}]}},{"name":"l2","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::DimensionGasSettings","fields":[{"name":"gas_limit","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"teardown_gas_limit","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"max_fee_per_gas","type":{"kind":"field"}}]}},{"name":"inclusion_fee","type":{"kind":"field"}}]}},{"name":"transaction_fee","type":{"kind":"field"}}]}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"min_revertible_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"max_block_number","type":{"kind":"struct","path":"aztec::protocol_types::abis::max_block_number::MaxBlockNumber","fields":[{"name":"_opt","type":{"kind":"struct","path":"std::option::Option","fields":[{"name":"_is_some","type":{"kind":"boolean"}},{"name":"_value","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}},{"name":"note_hash_read_requests","type":{"kind":"array","length":32,"type":{"kind":"struct","path":"aztec::protocol_types::abis::side_effect::SideEffect","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"nullifier_read_requests","type":{"kind":"array","length":2,"type":{"kind":"struct","path":"aztec::protocol_types::abis::read_request::ReadRequest","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"nullifier_key_validation_requests","type":{"kind":"array","length":1,"type":{"kind":"struct","path":"aztec::protocol_types::abis::nullifier_key_validation_request::NullifierKeyValidationRequest","fields":[{"name":"public_key","type":{"kind":"struct","path":"aztec::protocol_types::grumpkin_point::GrumpkinPoint","fields":[{"name":"x","type":{"kind":"field"}},{"name":"y","type":{"kind":"field"}}]}},{"name":"secret_key","type":{"kind":"struct","path":"aztec::protocol_types::grumpkin_private_key::GrumpkinPrivateKey","fields":[{"name":"high","type":{"kind":"field"}},{"name":"low","type":{"kind":"field"}}]}}]}}},{"name":"new_note_hashes","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::abis::side_effect::SideEffect","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"new_nullifiers","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::abis::side_effect::SideEffectLinkedToNoteHash","fields":[{"name":"value","type":{"kind":"field"}},{"name":"note_hash","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"private_call_stack_hashes","type":{"kind":"array","length":4,"type":{"kind":"field"}}},{"name":"public_call_stack_hashes","type":{"kind":"array","length":4,"type":{"kind":"field"}}},{"name":"new_l2_to_l1_msgs","type":{"kind":"array","length":2,"type":{"kind":"struct","path":"aztec::protocol_types::messaging::l2_to_l1_message::L2ToL1Message","fields":[{"name":"recipient","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"content","type":{"kind":"field"}}]}}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"encrypted_logs_hash","type":{"kind":"field"}},{"name":"unencrypted_logs_hash","type":{"kind":"field"}},{"name":"encrypted_log_preimages_length","type":{"kind":"field"}},{"name":"unencrypted_log_preimages_length","type":{"kind":"field"}},{"name":"historical_header","type":{"kind":"struct","path":"aztec::protocol_types::header::Header","fields":[{"name":"last_archive","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"content_commitment","type":{"kind":"struct","path":"aztec::protocol_types::content_commitment::ContentCommitment","fields":[{"name":"tx_tree_height","type":{"kind":"field"}},{"name":"txs_effects_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}]}},{"name":"state","type":{"kind":"struct","path":"aztec::protocol_types::state_reference::StateReference","fields":[{"name":"l1_to_l2_message_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"partial","type":{"kind":"struct","path":"aztec::protocol_types::partial_state_reference::PartialStateReference","fields":[{"name":"note_hash_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"nullifier_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"public_data_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}}]}},{"name":"global_variables","type":{"kind":"struct","path":"aztec::protocol_types::abis::global_variables::GlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"fee_recipient","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"gas_fees","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l1_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}}]}}]}},{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}}]},"visibility":"public"},"return_witnesses":[488,489,490,491,492,493,494,495,496,497,498,499,500,501,502,503,504,505,506,507,508,509,510,511,512,513,514,515,516,517,518,519,520,521,522,523,524,525,526,527,528,529,530,531,532,533,534,535,536,537,538,539,540,541,542,543,544,545,546,547,548,549,550,551,552,553,554,555,556,557,558,559,560,561,562,563,564,565,566,567,568,569,570,571,572,573,574,575,576,577,578,579,580,581,582,583,584,585,586,587,588,589,590,591,592,593,594,595,596,597,598,599,600,601,602,603,604,605,606,607,608,609,610,611,612,613,614,615,616,617,618,619,620,621,622,623,624,625,626,627,628,629,630,631,632,633,634,635,636,637,638,639,640,641,642,643,644,645,646,647,648,649,650,651,652,653,654,655,656,657,658,659,660,661,662,663,664,665,666,667,668,669,670,671,672,673,674,675,676,677,678,679,680,681,682,683,684,685,686,687,688,689,690,691,692,693,694,695,696,697,698,699,700,701,702,703,704,705,706,707,708]},"bytecode":"","debug_symbols":"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"},{"name":"_sub_token_out_amount","is_unconstrained":true,"custom_attributes":["aztec(public)","aztec(internal)"],"abi":{"parameters":[{"name":"inputs","type":{"kind":"struct","path":"aztec::context::inputs::public_context_inputs::PublicContextInputs","fields":[{"name":"call_context","type":{"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"storage_contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"portal_contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"gas_left","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l1_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}},{"name":"side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"gas_settings","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::GasSettings","fields":[{"name":"da","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::DimensionGasSettings","fields":[{"name":"gas_limit","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"teardown_gas_limit","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"max_fee_per_gas","type":{"kind":"field"}}]}},{"name":"l1","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::DimensionGasSettings","fields":[{"name":"gas_limit","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"teardown_gas_limit","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"max_fee_per_gas","type":{"kind":"field"}}]}},{"name":"l2","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::DimensionGasSettings","fields":[{"name":"gas_limit","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"teardown_gas_limit","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"max_fee_per_gas","type":{"kind":"field"}}]}},{"name":"inclusion_fee","type":{"kind":"field"}}]}},{"name":"transaction_fee","type":{"kind":"field"}}]}},{"name":"historical_header","type":{"kind":"struct","path":"aztec::protocol_types::header::Header","fields":[{"name":"last_archive","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"content_commitment","type":{"kind":"struct","path":"aztec::protocol_types::content_commitment::ContentCommitment","fields":[{"name":"tx_tree_height","type":{"kind":"field"}},{"name":"txs_effects_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}]}},{"name":"state","type":{"kind":"struct","path":"aztec::protocol_types::state_reference::StateReference","fields":[{"name":"l1_to_l2_message_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"partial","type":{"kind":"struct","path":"aztec::protocol_types::partial_state_reference::PartialStateReference","fields":[{"name":"note_hash_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"nullifier_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"public_data_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}}]}},{"name":"global_variables","type":{"kind":"struct","path":"aztec::protocol_types::abis::global_variables::GlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"fee_recipient","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"gas_fees","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l1_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}}]}}]}},{"name":"public_global_variables","type":{"kind":"struct","path":"aztec::protocol_types::abis::global_variables::GlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"fee_recipient","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"gas_fees","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l1_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}}]}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}]},"visibility":"private"},{"name":"amount","type":{"kind":"field"},"visibility":"private"},{"name":"_round","type":{"kind":"field"},"visibility":"private"}],"param_witnesses":{"_round":[{"start":55,"end":56}],"amount":[{"start":54,"end":55}],"inputs":[{"start":0,"end":54}]},"return_type":{"abi_type":{"kind":"struct","path":"aztec::protocol_types::abis::public_circuit_public_inputs::PublicCircuitPublicInputs","fields":[{"name":"call_context","type":{"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"storage_contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"portal_contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"gas_left","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l1_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}},{"name":"side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"gas_settings","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::GasSettings","fields":[{"name":"da","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::DimensionGasSettings","fields":[{"name":"gas_limit","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"teardown_gas_limit","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"max_fee_per_gas","type":{"kind":"field"}}]}},{"name":"l1","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::DimensionGasSettings","fields":[{"name":"gas_limit","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"teardown_gas_limit","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"max_fee_per_gas","type":{"kind":"field"}}]}},{"name":"l2","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::DimensionGasSettings","fields":[{"name":"gas_limit","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"teardown_gas_limit","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"max_fee_per_gas","type":{"kind":"field"}}]}},{"name":"inclusion_fee","type":{"kind":"field"}}]}},{"name":"transaction_fee","type":{"kind":"field"}}]}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"nullifier_read_requests","type":{"kind":"array","length":2,"type":{"kind":"struct","path":"aztec::protocol_types::abis::read_request::ReadRequest","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"nullifier_non_existent_read_requests","type":{"kind":"array","length":2,"type":{"kind":"struct","path":"aztec::protocol_types::abis::read_request::ReadRequest","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"contract_storage_update_requests","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::contrakt::storage_update_request::StorageUpdateRequest","fields":[{"name":"storage_slot","type":{"kind":"field"}},{"name":"new_value","type":{"kind":"field"}}]}}},{"name":"contract_storage_reads","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::contrakt::storage_read::StorageRead","fields":[{"name":"storage_slot","type":{"kind":"field"}},{"name":"current_value","type":{"kind":"field"}}]}}},{"name":"public_call_stack_hashes","type":{"kind":"array","length":4,"type":{"kind":"field"}}},{"name":"new_note_hashes","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::abis::side_effect::SideEffect","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"new_nullifiers","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::abis::side_effect::SideEffectLinkedToNoteHash","fields":[{"name":"value","type":{"kind":"field"}},{"name":"note_hash","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"new_l2_to_l1_msgs","type":{"kind":"array","length":2,"type":{"kind":"struct","path":"aztec::protocol_types::messaging::l2_to_l1_message::L2ToL1Message","fields":[{"name":"recipient","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"content","type":{"kind":"field"}}]}}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"unencrypted_logs_hash","type":{"kind":"field"}},{"name":"unencrypted_log_preimages_length","type":{"kind":"field"}},{"name":"historical_header","type":{"kind":"struct","path":"aztec::protocol_types::header::Header","fields":[{"name":"last_archive","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"content_commitment","type":{"kind":"struct","path":"aztec::protocol_types::content_commitment::ContentCommitment","fields":[{"name":"tx_tree_height","type":{"kind":"field"}},{"name":"txs_effects_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}]}},{"name":"state","type":{"kind":"struct","path":"aztec::protocol_types::state_reference::StateReference","fields":[{"name":"l1_to_l2_message_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"partial","type":{"kind":"struct","path":"aztec::protocol_types::partial_state_reference::PartialStateReference","fields":[{"name":"note_hash_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"nullifier_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"public_data_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}}]}},{"name":"global_variables","type":{"kind":"struct","path":"aztec::protocol_types::abis::global_variables::GlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"fee_recipient","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"gas_fees","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l1_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}}]}}]}},{"name":"prover_address","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"revert_code","type":{"kind":"integer","sign":"unsigned","width":8}},{"name":"gas_left","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l1_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]},"visibility":"public"},"return_witnesses":[56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270]},"bytecode":"","debug_symbols":""},{"name":"_add_token_out_amount","is_unconstrained":true,"custom_attributes":["aztec(public)","aztec(internal)"],"abi":{"parameters":[{"name":"inputs","type":{"kind":"struct","path":"aztec::context::inputs::public_context_inputs::PublicContextInputs","fields":[{"name":"call_context","type":{"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"storage_contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"portal_contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"gas_left","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l1_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}},{"name":"side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"gas_settings","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::GasSettings","fields":[{"name":"da","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::DimensionGasSettings","fields":[{"name":"gas_limit","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"teardown_gas_limit","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"max_fee_per_gas","type":{"kind":"field"}}]}},{"name":"l1","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::DimensionGasSettings","fields":[{"name":"gas_limit","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"teardown_gas_limit","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"max_fee_per_gas","type":{"kind":"field"}}]}},{"name":"l2","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::DimensionGasSettings","fields":[{"name":"gas_limit","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"teardown_gas_limit","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"max_fee_per_gas","type":{"kind":"field"}}]}},{"name":"inclusion_fee","type":{"kind":"field"}}]}},{"name":"transaction_fee","type":{"kind":"field"}}]}},{"name":"historical_header","type":{"kind":"struct","path":"aztec::protocol_types::header::Header","fields":[{"name":"last_archive","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"content_commitment","type":{"kind":"struct","path":"aztec::protocol_types::content_commitment::ContentCommitment","fields":[{"name":"tx_tree_height","type":{"kind":"field"}},{"name":"txs_effects_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}]}},{"name":"state","type":{"kind":"struct","path":"aztec::protocol_types::state_reference::StateReference","fields":[{"name":"l1_to_l2_message_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"partial","type":{"kind":"struct","path":"aztec::protocol_types::partial_state_reference::PartialStateReference","fields":[{"name":"note_hash_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"nullifier_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"public_data_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}}]}},{"name":"global_variables","type":{"kind":"struct","path":"aztec::protocol_types::abis::global_variables::GlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"fee_recipient","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"gas_fees","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l1_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}}]}}]}},{"name":"public_global_variables","type":{"kind":"struct","path":"aztec::protocol_types::abis::global_variables::GlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"fee_recipient","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"gas_fees","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l1_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}}]}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}]},"visibility":"private"},{"name":"enc_c1","type":{"kind":"field"},"visibility":"private"},{"name":"enc_c2","type":{"kind":"field"},"visibility":"private"}],"param_witnesses":{"enc_c1":[{"start":54,"end":55}],"enc_c2":[{"start":55,"end":56}],"inputs":[{"start":0,"end":54}]},"return_type":{"abi_type":{"kind":"struct","path":"aztec::protocol_types::abis::public_circuit_public_inputs::PublicCircuitPublicInputs","fields":[{"name":"call_context","type":{"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"storage_contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"portal_contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"gas_left","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l1_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}},{"name":"side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"gas_settings","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::GasSettings","fields":[{"name":"da","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::DimensionGasSettings","fields":[{"name":"gas_limit","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"teardown_gas_limit","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"max_fee_per_gas","type":{"kind":"field"}}]}},{"name":"l1","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::DimensionGasSettings","fields":[{"name":"gas_limit","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"teardown_gas_limit","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"max_fee_per_gas","type":{"kind":"field"}}]}},{"name":"l2","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::DimensionGasSettings","fields":[{"name":"gas_limit","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"teardown_gas_limit","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"max_fee_per_gas","type":{"kind":"field"}}]}},{"name":"inclusion_fee","type":{"kind":"field"}}]}},{"name":"transaction_fee","type":{"kind":"field"}}]}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"nullifier_read_requests","type":{"kind":"array","length":2,"type":{"kind":"struct","path":"aztec::protocol_types::abis::read_request::ReadRequest","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"nullifier_non_existent_read_requests","type":{"kind":"array","length":2,"type":{"kind":"struct","path":"aztec::protocol_types::abis::read_request::ReadRequest","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"contract_storage_update_requests","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::contrakt::storage_update_request::StorageUpdateRequest","fields":[{"name":"storage_slot","type":{"kind":"field"}},{"name":"new_value","type":{"kind":"field"}}]}}},{"name":"contract_storage_reads","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::contrakt::storage_read::StorageRead","fields":[{"name":"storage_slot","type":{"kind":"field"}},{"name":"current_value","type":{"kind":"field"}}]}}},{"name":"public_call_stack_hashes","type":{"kind":"array","length":4,"type":{"kind":"field"}}},{"name":"new_note_hashes","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::abis::side_effect::SideEffect","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"new_nullifiers","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::abis::side_effect::SideEffectLinkedToNoteHash","fields":[{"name":"value","type":{"kind":"field"}},{"name":"note_hash","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"new_l2_to_l1_msgs","type":{"kind":"array","length":2,"type":{"kind":"struct","path":"aztec::protocol_types::messaging::l2_to_l1_message::L2ToL1Message","fields":[{"name":"recipient","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"content","type":{"kind":"field"}}]}}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"unencrypted_logs_hash","type":{"kind":"field"}},{"name":"unencrypted_log_preimages_length","type":{"kind":"field"}},{"name":"historical_header","type":{"kind":"struct","path":"aztec::protocol_types::header::Header","fields":[{"name":"last_archive","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"content_commitment","type":{"kind":"struct","path":"aztec::protocol_types::content_commitment::ContentCommitment","fields":[{"name":"tx_tree_height","type":{"kind":"field"}},{"name":"txs_effects_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}]}},{"name":"state","type":{"kind":"struct","path":"aztec::protocol_types::state_reference::StateReference","fields":[{"name":"l1_to_l2_message_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"partial","type":{"kind":"struct","path":"aztec::protocol_types::partial_state_reference::PartialStateReference","fields":[{"name":"note_hash_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"nullifier_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"public_data_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}}]}},{"name":"global_variables","type":{"kind":"struct","path":"aztec::protocol_types::abis::global_variables::GlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"fee_recipient","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"gas_fees","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l1_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}}]}}]}},{"name":"prover_address","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"revert_code","type":{"kind":"integer","sign":"unsigned","width":8}},{"name":"gas_left","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l1_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]},"visibility":"public"},"return_witnesses":[56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270]},"bytecode":"","debug_symbols":""},{"name":"get_token_in","is_unconstrained":true,"custom_attributes":[],"abi":{"parameters":[],"param_witnesses":{},"return_type":{"abi_type":{"kind":"field"},"visibility":"public"},"return_witnesses":[0]},"bytecode":"H4sIAAAAAAAA/72UTU7DMBCFnT83JSqCJYJF2LNIJA5grsANghIQm0ZKWwkuH1EjD/3keFfTJ0UzHo89z8/jJOqExNksEBM8OVsiZtxn0ZyD56bVdpNcBbE6foXzK+SlLnaLWAKeMj/H4nlkeq2WGpXQzsSr1fp3YOBn0MPPqzCfIpZ6a62uj5gvAmt0oJ74vBO5Oh1YS50KnMU4vzkPvzqxlsFY6m3AQ1+AD1vZYFyg9ip+7aZUpzca+0xrnMGAv9TLkfPg7I1agnsJT/akxQZaSW4V0JF9nSOfbzLi+2/tvhq8Y+3Ls1En5ekk+O8evnLaWuz249R9DK9D1yeglns0aUl9xjhFnH4WiM2w/J1IXRuTdgm1A39Ffnut1VLeqG8lU2EkAZ+xe2fvnH2Zpu67/tz2w1c9Hvb1+F6/jYdtv/tb8QPEr1DXygcAAA==","debug_symbols":"zZfBasMwEET/Zc+maFaSJftXSg9q6oLBOCF2C8X432s3Tn1IoNQkYW5aNIMeOjzYQZr9LvX1vu2kHMQ8eSmfB+kOqZ3nrk/HXkpEhc+kat9+zs6PmbzXTSWl1zG7iCuCW9KqZg0D19I26BJ2sL/Z6MeXbOLJyXgCGU8k4ynIeGDYgMAGpGxAlg3IsQGxWRpsmgabp8EmarCZWtlMrfc29ekVfcgrN3Hqmla14Y/PBYozE9Ss36vAwuQImTwhU07IFAiZIiFTwcdkr7pA87C0rHEXLrRuQ8dv6OQbOmFDJ/6vMw2f6Vin16aaF+X57qPdnffmaey/Dqeb8Rs="},{"name":"get_round","is_unconstrained":true,"custom_attributes":[],"abi":{"parameters":[],"param_witnesses":{},"return_type":{"abi_type":{"kind":"field"},"visibility":"public"},"return_witnesses":[0]},"bytecode":"H4sIAAAAAAAA/72UTU7DMBCFnd+mREWwRLAIexaOBHtzBW4QlIDYNFLaSnD5CIw89JPjXU2fFM14PPY8P4+TqCMSZ7NATPDgbIWYcZ+FPgWPui3tJrkKYvXzFc6vkZe62DViCXjK/ByLp9ZPl2qpUQXtTLxarX8HBn4GPfy8GvMpYqm31up6j/kisKYM1BOfdyJXVwbWUqcCZzHO16fhVyfWMhhLvQ14lGfgw1Y2GBeovYpfW1fq+EZjn2mNMxjwl3o5cu6cvVJLcC/hyZ602EArya0DOrKvc+TzTUZ8/63dtwTvWPvybNRJeToJ/ruHL5y2Frv9OHXvw8vQ9Qmo5R5NWlKfMU4Rp58FYjMsfydS18akXULtwF+R315rtZQ36lvJVBhJwGfs1tkbZ5+nqftqPrb98NmMh30zvjWv42Hb7/5WfAM0U4cnygcAAA==","debug_symbols":"zZfBqsIwEEX/ZdblkUkySdpfebxFnlYolCq2ClL677Zqs1EQi8rdZci9zCGLA+mp3q5iV22bloqe1I9Q8dtTu4vNNLdd3HdUcLBGZVQ268tZwpDRpqpLKkQP2X2cWeY0W5fCzP5B2nh9C1s2KRtk+MtGHgfG48F4AhhPDsbDCg2I0YA0GpBBA7JoQGiWZjRNM5qnGU3UjGZqjWZq/WlTX7for2x5j1PFpS0+PHlczm1K5yIprdX8vhaQSQCZHCCTB2QKgEw5HpN56ALt/K1llL1zobELOrKg4xZ0/IJOeK0zDse4r+J/XU4f5enu0Kzmf/M4dqfd9WY4Aw=="},{"name":"_validate_round","is_unconstrained":true,"custom_attributes":["aztec(public)","aztec(internal)"],"abi":{"parameters":[{"name":"inputs","type":{"kind":"struct","path":"aztec::context::inputs::public_context_inputs::PublicContextInputs","fields":[{"name":"call_context","type":{"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"storage_contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"portal_contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"gas_left","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l1_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}},{"name":"side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"gas_settings","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::GasSettings","fields":[{"name":"da","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::DimensionGasSettings","fields":[{"name":"gas_limit","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"teardown_gas_limit","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"max_fee_per_gas","type":{"kind":"field"}}]}},{"name":"l1","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::DimensionGasSettings","fields":[{"name":"gas_limit","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"teardown_gas_limit","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"max_fee_per_gas","type":{"kind":"field"}}]}},{"name":"l2","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::DimensionGasSettings","fields":[{"name":"gas_limit","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"teardown_gas_limit","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"max_fee_per_gas","type":{"kind":"field"}}]}},{"name":"inclusion_fee","type":{"kind":"field"}}]}},{"name":"transaction_fee","type":{"kind":"field"}}]}},{"name":"historical_header","type":{"kind":"struct","path":"aztec::protocol_types::header::Header","fields":[{"name":"last_archive","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"content_commitment","type":{"kind":"struct","path":"aztec::protocol_types::content_commitment::ContentCommitment","fields":[{"name":"tx_tree_height","type":{"kind":"field"}},{"name":"txs_effects_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}]}},{"name":"state","type":{"kind":"struct","path":"aztec::protocol_types::state_reference::StateReference","fields":[{"name":"l1_to_l2_message_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"partial","type":{"kind":"struct","path":"aztec::protocol_types::partial_state_reference::PartialStateReference","fields":[{"name":"note_hash_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"nullifier_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"public_data_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}}]}},{"name":"global_variables","type":{"kind":"struct","path":"aztec::protocol_types::abis::global_variables::GlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"fee_recipient","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"gas_fees","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l1_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}}]}}]}},{"name":"public_global_variables","type":{"kind":"struct","path":"aztec::protocol_types::abis::global_variables::GlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"fee_recipient","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"gas_fees","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l1_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}}]}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}]},"visibility":"private"},{"name":"round","type":{"kind":"field"},"visibility":"private"}],"param_witnesses":{"inputs":[{"start":0,"end":54}],"round":[{"start":54,"end":55}]},"return_type":{"abi_type":{"kind":"struct","path":"aztec::protocol_types::abis::public_circuit_public_inputs::PublicCircuitPublicInputs","fields":[{"name":"call_context","type":{"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"storage_contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"portal_contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"gas_left","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l1_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}},{"name":"side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"gas_settings","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::GasSettings","fields":[{"name":"da","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::DimensionGasSettings","fields":[{"name":"gas_limit","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"teardown_gas_limit","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"max_fee_per_gas","type":{"kind":"field"}}]}},{"name":"l1","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::DimensionGasSettings","fields":[{"name":"gas_limit","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"teardown_gas_limit","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"max_fee_per_gas","type":{"kind":"field"}}]}},{"name":"l2","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::DimensionGasSettings","fields":[{"name":"gas_limit","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"teardown_gas_limit","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"max_fee_per_gas","type":{"kind":"field"}}]}},{"name":"inclusion_fee","type":{"kind":"field"}}]}},{"name":"transaction_fee","type":{"kind":"field"}}]}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"nullifier_read_requests","type":{"kind":"array","length":2,"type":{"kind":"struct","path":"aztec::protocol_types::abis::read_request::ReadRequest","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"nullifier_non_existent_read_requests","type":{"kind":"array","length":2,"type":{"kind":"struct","path":"aztec::protocol_types::abis::read_request::ReadRequest","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"contract_storage_update_requests","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::contrakt::storage_update_request::StorageUpdateRequest","fields":[{"name":"storage_slot","type":{"kind":"field"}},{"name":"new_value","type":{"kind":"field"}}]}}},{"name":"contract_storage_reads","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::contrakt::storage_read::StorageRead","fields":[{"name":"storage_slot","type":{"kind":"field"}},{"name":"current_value","type":{"kind":"field"}}]}}},{"name":"public_call_stack_hashes","type":{"kind":"array","length":4,"type":{"kind":"field"}}},{"name":"new_note_hashes","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::abis::side_effect::SideEffect","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"new_nullifiers","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::abis::side_effect::SideEffectLinkedToNoteHash","fields":[{"name":"value","type":{"kind":"field"}},{"name":"note_hash","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"new_l2_to_l1_msgs","type":{"kind":"array","length":2,"type":{"kind":"struct","path":"aztec::protocol_types::messaging::l2_to_l1_message::L2ToL1Message","fields":[{"name":"recipient","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"content","type":{"kind":"field"}}]}}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"unencrypted_logs_hash","type":{"kind":"field"}},{"name":"unencrypted_log_preimages_length","type":{"kind":"field"}},{"name":"historical_header","type":{"kind":"struct","path":"aztec::protocol_types::header::Header","fields":[{"name":"last_archive","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"content_commitment","type":{"kind":"struct","path":"aztec::protocol_types::content_commitment::ContentCommitment","fields":[{"name":"tx_tree_height","type":{"kind":"field"}},{"name":"txs_effects_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}]}},{"name":"state","type":{"kind":"struct","path":"aztec::protocol_types::state_reference::StateReference","fields":[{"name":"l1_to_l2_message_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"partial","type":{"kind":"struct","path":"aztec::protocol_types::partial_state_reference::PartialStateReference","fields":[{"name":"note_hash_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"nullifier_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"public_data_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}}]}},{"name":"global_variables","type":{"kind":"struct","path":"aztec::protocol_types::abis::global_variables::GlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"fee_recipient","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"gas_fees","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l1_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}}]}}]}},{"name":"prover_address","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"revert_code","type":{"kind":"integer","sign":"unsigned","width":8}},{"name":"gas_left","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l1_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]},"visibility":"public"},"return_witnesses":[55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269]},"bytecode":"","debug_symbols":""},{"name":"get_token_out","is_unconstrained":true,"custom_attributes":[],"abi":{"parameters":[],"param_witnesses":{},"return_type":{"abi_type":{"kind":"field"},"visibility":"public"},"return_witnesses":[0]},"bytecode":"H4sIAAAAAAAA/72UTU7DMBCFnd+mREWwRLAIexaO4ADmCtwgKAGxaaS0leDyERh56CfHu5o+KZrxeOx5fh4nUUckzmaBmODB2Qox4z4LfQqedFvaTXIVxOrnK5xfIy91sWvEEvCU+TkWT60fL9VSowramXi1Wv8ODPwMevh5NeZTxFJvrdX1HvNFYE0ZqCc+70SurgyspU4FzmKcr0/Dr06sZTCWehvwKM/Ah61sMC5QexW/tq7U8Y3GPtMaZzDgL/Vy5Nw5e6WW4F7Ckz1psYFWklsHdGRf58jnm4z4/lu7bwnesfbl2aiT8nQS/HcPXzhtLXb7cereh5eh6xNQyz2atKQ+Y5wiTj8LxGZY/k6kro1Ju4Tagb8iv73Wailv1LeSqTCSgM/YrbM3zj5PU/fVfGz74bMZD/tmfGtex8O23/2t+AbXU+RoygcAAA==","debug_symbols":"zZfBCoJAFEX/5a0l5r2ZcUZ/JVpMZSCIRVoQ4r+nZbZIiKTi7nzMvb7DLA5MQ8V+E+p8X1aUNqQWltJlQ9UhlP1c1eFYU8pei4koK7e3b2vbiHZ5kVFqpY1e4sLukRZRzzDzVFo7GcKG9Zj1tl1FHU8MxuPAeDwYTwLGwwoNiNGABA1IowEZNCA0SzOaphnN04wmakYztaCZWn5t6vsW+cuWrzhV2I5btHtzuczJ+G9Rz+sV5oHJADJZQKYYkMkBMnlApgSPSU+6QGI3tLQyLy7UZkbHzujEMzpuRsd/1umGczjmYV1k/UO5PzuVm8e7uRvry+F+0l4B"},{"name":"finalize_execute","is_unconstrained":true,"custom_attributes":["aztec(public)"],"abi":{"parameters":[{"name":"inputs","type":{"kind":"struct","path":"aztec::context::inputs::public_context_inputs::PublicContextInputs","fields":[{"name":"call_context","type":{"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"storage_contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"portal_contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"gas_left","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l1_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}},{"name":"side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"gas_settings","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::GasSettings","fields":[{"name":"da","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::DimensionGasSettings","fields":[{"name":"gas_limit","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"teardown_gas_limit","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"max_fee_per_gas","type":{"kind":"field"}}]}},{"name":"l1","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::DimensionGasSettings","fields":[{"name":"gas_limit","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"teardown_gas_limit","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"max_fee_per_gas","type":{"kind":"field"}}]}},{"name":"l2","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::DimensionGasSettings","fields":[{"name":"gas_limit","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"teardown_gas_limit","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"max_fee_per_gas","type":{"kind":"field"}}]}},{"name":"inclusion_fee","type":{"kind":"field"}}]}},{"name":"transaction_fee","type":{"kind":"field"}}]}},{"name":"historical_header","type":{"kind":"struct","path":"aztec::protocol_types::header::Header","fields":[{"name":"last_archive","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"content_commitment","type":{"kind":"struct","path":"aztec::protocol_types::content_commitment::ContentCommitment","fields":[{"name":"tx_tree_height","type":{"kind":"field"}},{"name":"txs_effects_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}]}},{"name":"state","type":{"kind":"struct","path":"aztec::protocol_types::state_reference::StateReference","fields":[{"name":"l1_to_l2_message_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"partial","type":{"kind":"struct","path":"aztec::protocol_types::partial_state_reference::PartialStateReference","fields":[{"name":"note_hash_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"nullifier_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"public_data_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}}]}},{"name":"global_variables","type":{"kind":"struct","path":"aztec::protocol_types::abis::global_variables::GlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"fee_recipient","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"gas_fees","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l1_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}}]}}]}},{"name":"public_global_variables","type":{"kind":"struct","path":"aztec::protocol_types::abis::global_variables::GlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"fee_recipient","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"gas_fees","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l1_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}}]}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}]},"visibility":"private"},{"name":"secret_hash_for_redeeming_minted_notes","type":{"kind":"field"},"visibility":"private"},{"name":"amount","type":{"kind":"field"},"visibility":"private"},{"name":"secret_for_L1_to_L2_message_consumption","type":{"kind":"field"},"visibility":"private"}],"param_witnesses":{"amount":[{"start":55,"end":56}],"inputs":[{"start":0,"end":54}],"secret_for_L1_to_L2_message_consumption":[{"start":56,"end":57}],"secret_hash_for_redeeming_minted_notes":[{"start":54,"end":55}]},"return_type":{"abi_type":{"kind":"struct","path":"aztec::protocol_types::abis::public_circuit_public_inputs::PublicCircuitPublicInputs","fields":[{"name":"call_context","type":{"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"storage_contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"portal_contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"gas_left","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l1_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}},{"name":"side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"gas_settings","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::GasSettings","fields":[{"name":"da","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::DimensionGasSettings","fields":[{"name":"gas_limit","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"teardown_gas_limit","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"max_fee_per_gas","type":{"kind":"field"}}]}},{"name":"l1","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::DimensionGasSettings","fields":[{"name":"gas_limit","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"teardown_gas_limit","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"max_fee_per_gas","type":{"kind":"field"}}]}},{"name":"l2","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::DimensionGasSettings","fields":[{"name":"gas_limit","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"teardown_gas_limit","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"max_fee_per_gas","type":{"kind":"field"}}]}},{"name":"inclusion_fee","type":{"kind":"field"}}]}},{"name":"transaction_fee","type":{"kind":"field"}}]}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"nullifier_read_requests","type":{"kind":"array","length":2,"type":{"kind":"struct","path":"aztec::protocol_types::abis::read_request::ReadRequest","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"nullifier_non_existent_read_requests","type":{"kind":"array","length":2,"type":{"kind":"struct","path":"aztec::protocol_types::abis::read_request::ReadRequest","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"contract_storage_update_requests","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::contrakt::storage_update_request::StorageUpdateRequest","fields":[{"name":"storage_slot","type":{"kind":"field"}},{"name":"new_value","type":{"kind":"field"}}]}}},{"name":"contract_storage_reads","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::contrakt::storage_read::StorageRead","fields":[{"name":"storage_slot","type":{"kind":"field"}},{"name":"current_value","type":{"kind":"field"}}]}}},{"name":"public_call_stack_hashes","type":{"kind":"array","length":4,"type":{"kind":"field"}}},{"name":"new_note_hashes","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::abis::side_effect::SideEffect","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"new_nullifiers","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::abis::side_effect::SideEffectLinkedToNoteHash","fields":[{"name":"value","type":{"kind":"field"}},{"name":"note_hash","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"new_l2_to_l1_msgs","type":{"kind":"array","length":2,"type":{"kind":"struct","path":"aztec::protocol_types::messaging::l2_to_l1_message::L2ToL1Message","fields":[{"name":"recipient","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"content","type":{"kind":"field"}}]}}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"unencrypted_logs_hash","type":{"kind":"field"}},{"name":"unencrypted_log_preimages_length","type":{"kind":"field"}},{"name":"historical_header","type":{"kind":"struct","path":"aztec::protocol_types::header::Header","fields":[{"name":"last_archive","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"content_commitment","type":{"kind":"struct","path":"aztec::protocol_types::content_commitment::ContentCommitment","fields":[{"name":"tx_tree_height","type":{"kind":"field"}},{"name":"txs_effects_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}]}},{"name":"state","type":{"kind":"struct","path":"aztec::protocol_types::state_reference::StateReference","fields":[{"name":"l1_to_l2_message_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"partial","type":{"kind":"struct","path":"aztec::protocol_types::partial_state_reference::PartialStateReference","fields":[{"name":"note_hash_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"nullifier_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"public_data_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}}]}},{"name":"global_variables","type":{"kind":"struct","path":"aztec::protocol_types::abis::global_variables::GlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"fee_recipient","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"gas_fees","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l1_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}}]}}]}},{"name":"prover_address","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"revert_code","type":{"kind":"integer","sign":"unsigned","width":8}},{"name":"gas_left","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l1_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]},"visibility":"public"},"return_witnesses":[57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271]},"bytecode":"","debug_symbols":""},{"name":"compute_note_hash_and_nullifier","is_unconstrained":true,"custom_attributes":[],"abi":{"parameters":[{"name":"contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]},"visibility":"private"},{"name":"nonce","type":{"kind":"field"},"visibility":"private"},{"name":"storage_slot","type":{"kind":"field"},"visibility":"private"},{"name":"note_type_id","type":{"kind":"field"},"visibility":"private"},{"name":"serialized_note","type":{"kind":"array","length":20,"type":{"kind":"field"}},"visibility":"private"}],"param_witnesses":{"contract_address":[{"start":0,"end":1}],"nonce":[{"start":1,"end":2}],"note_type_id":[{"start":3,"end":4}],"serialized_note":[{"start":4,"end":24}],"storage_slot":[{"start":2,"end":3}]},"return_type":{"abi_type":{"kind":"array","length":4,"type":{"kind":"field"}},"visibility":"public"},"return_witnesses":[24,25,26,27]},"bytecode":"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","debug_symbols":"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"},{"name":"get_uniswap_address","is_unconstrained":true,"custom_attributes":[],"abi":{"parameters":[],"param_witnesses":{},"return_type":{"abi_type":{"kind":"field"},"visibility":"public"},"return_witnesses":[0]},"bytecode":"H4sIAAAAAAAA/72UTU7DMBCFnd+mREWwRLAIexYO4gDmCtwgKAGxaaS0leDyERh56CfHu5o+KZrxeOx5fh4nUUckzmaBmODB2Qox4z4LfQqedFvaTXIVxOrnK5xfIy91sWvEEvCU+TkWT60fL9VSowramXi1Wv8ODPwMevh5NeZTxFJvrdX1HvNFYE0ZqCc+70SurgyspU4FzmKcr0/Dr06sZTCWehvwKM/Ah61sMC5QexW/tq7U8Y3GPtMaZzDgL/Vy5Nw5e6WW4F7Ckz1psYFWklsHdGRf58jnm4z4/lu7bwnesfbl2aiT8nQS/HcPXzhtLXb7cereh5eh6xNQyz2atKQ+Y5wiTj8LxGZY/k6kro1Ju4Tagb8iv73Wailv1LeSqTCSgM/YrbM3zj5PU/fVfGz74bMZD/tmfGtex8O23/2t+AYnrzOYygcAAA==","debug_symbols":"zZfBaoQwFEX/5a2l5L4kJvorpYt0akEQZxhtoYj/Xu04tjBuKu1wd3nkXt4hiwMZpDkeUl8f207KQcyDl/JxkO6U2nnu+nTupUSEKTKp2pevsw1jJq91U0npdcxu4orglrSq8WsY2ErboEvYwa7Z6MenbOLJyXgCGU8k4ynIeGDYgMAGpGxAlg3IsQGxWRpsmgabp8EmarCZWtlMrf9t6ssWvcuWP3Gqwq9bfoS3HxcorkxQ8/28CixMjpDJEzLlhEyBkCkSMhV8THbTBZqHpWWNu3GhdTs6fkcn39EJOzrxd51peE/nOj031fxRnu/e2sP13zyN/cfpcjN+Ag=="},{"name":"_validate_claim_params","is_unconstrained":true,"custom_attributes":["aztec(public)","aztec(internal)"],"abi":{"parameters":[{"name":"inputs","type":{"kind":"struct","path":"aztec::context::inputs::public_context_inputs::PublicContextInputs","fields":[{"name":"call_context","type":{"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"storage_contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"portal_contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"gas_left","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l1_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}},{"name":"side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"gas_settings","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::GasSettings","fields":[{"name":"da","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::DimensionGasSettings","fields":[{"name":"gas_limit","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"teardown_gas_limit","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"max_fee_per_gas","type":{"kind":"field"}}]}},{"name":"l1","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::DimensionGasSettings","fields":[{"name":"gas_limit","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"teardown_gas_limit","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"max_fee_per_gas","type":{"kind":"field"}}]}},{"name":"l2","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::DimensionGasSettings","fields":[{"name":"gas_limit","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"teardown_gas_limit","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"max_fee_per_gas","type":{"kind":"field"}}]}},{"name":"inclusion_fee","type":{"kind":"field"}}]}},{"name":"transaction_fee","type":{"kind":"field"}}]}},{"name":"historical_header","type":{"kind":"struct","path":"aztec::protocol_types::header::Header","fields":[{"name":"last_archive","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"content_commitment","type":{"kind":"struct","path":"aztec::protocol_types::content_commitment::ContentCommitment","fields":[{"name":"tx_tree_height","type":{"kind":"field"}},{"name":"txs_effects_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}]}},{"name":"state","type":{"kind":"struct","path":"aztec::protocol_types::state_reference::StateReference","fields":[{"name":"l1_to_l2_message_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"partial","type":{"kind":"struct","path":"aztec::protocol_types::partial_state_reference::PartialStateReference","fields":[{"name":"note_hash_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"nullifier_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"public_data_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}}]}},{"name":"global_variables","type":{"kind":"struct","path":"aztec::protocol_types::abis::global_variables::GlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"fee_recipient","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"gas_fees","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l1_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}}]}}]}},{"name":"public_global_variables","type":{"kind":"struct","path":"aztec::protocol_types::abis::global_variables::GlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"fee_recipient","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"gas_fees","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l1_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}}]}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}]},"visibility":"private"},{"name":"_round","type":{"kind":"field"},"visibility":"private"},{"name":"_total_token_in","type":{"kind":"field"},"visibility":"private"},{"name":"_total_token_out","type":{"kind":"field"},"visibility":"private"}],"param_witnesses":{"_round":[{"start":54,"end":55}],"_total_token_in":[{"start":55,"end":56}],"_total_token_out":[{"start":56,"end":57}],"inputs":[{"start":0,"end":54}]},"return_type":{"abi_type":{"kind":"struct","path":"aztec::protocol_types::abis::public_circuit_public_inputs::PublicCircuitPublicInputs","fields":[{"name":"call_context","type":{"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"storage_contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"portal_contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"gas_left","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l1_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}},{"name":"side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"gas_settings","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::GasSettings","fields":[{"name":"da","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::DimensionGasSettings","fields":[{"name":"gas_limit","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"teardown_gas_limit","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"max_fee_per_gas","type":{"kind":"field"}}]}},{"name":"l1","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::DimensionGasSettings","fields":[{"name":"gas_limit","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"teardown_gas_limit","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"max_fee_per_gas","type":{"kind":"field"}}]}},{"name":"l2","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::DimensionGasSettings","fields":[{"name":"gas_limit","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"teardown_gas_limit","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"max_fee_per_gas","type":{"kind":"field"}}]}},{"name":"inclusion_fee","type":{"kind":"field"}}]}},{"name":"transaction_fee","type":{"kind":"field"}}]}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"nullifier_read_requests","type":{"kind":"array","length":2,"type":{"kind":"struct","path":"aztec::protocol_types::abis::read_request::ReadRequest","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"nullifier_non_existent_read_requests","type":{"kind":"array","length":2,"type":{"kind":"struct","path":"aztec::protocol_types::abis::read_request::ReadRequest","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"contract_storage_update_requests","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::contrakt::storage_update_request::StorageUpdateRequest","fields":[{"name":"storage_slot","type":{"kind":"field"}},{"name":"new_value","type":{"kind":"field"}}]}}},{"name":"contract_storage_reads","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::contrakt::storage_read::StorageRead","fields":[{"name":"storage_slot","type":{"kind":"field"}},{"name":"current_value","type":{"kind":"field"}}]}}},{"name":"public_call_stack_hashes","type":{"kind":"array","length":4,"type":{"kind":"field"}}},{"name":"new_note_hashes","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::abis::side_effect::SideEffect","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"new_nullifiers","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::abis::side_effect::SideEffectLinkedToNoteHash","fields":[{"name":"value","type":{"kind":"field"}},{"name":"note_hash","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"new_l2_to_l1_msgs","type":{"kind":"array","length":2,"type":{"kind":"struct","path":"aztec::protocol_types::messaging::l2_to_l1_message::L2ToL1Message","fields":[{"name":"recipient","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"content","type":{"kind":"field"}}]}}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"unencrypted_logs_hash","type":{"kind":"field"}},{"name":"unencrypted_log_preimages_length","type":{"kind":"field"}},{"name":"historical_header","type":{"kind":"struct","path":"aztec::protocol_types::header::Header","fields":[{"name":"last_archive","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"content_commitment","type":{"kind":"struct","path":"aztec::protocol_types::content_commitment::ContentCommitment","fields":[{"name":"tx_tree_height","type":{"kind":"field"}},{"name":"txs_effects_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}]}},{"name":"state","type":{"kind":"struct","path":"aztec::protocol_types::state_reference::StateReference","fields":[{"name":"l1_to_l2_message_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"partial","type":{"kind":"struct","path":"aztec::protocol_types::partial_state_reference::PartialStateReference","fields":[{"name":"note_hash_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"nullifier_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"public_data_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}}]}},{"name":"global_variables","type":{"kind":"struct","path":"aztec::protocol_types::abis::global_variables::GlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"fee_recipient","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"gas_fees","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l1_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}}]}}]}},{"name":"prover_address","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"revert_code","type":{"kind":"integer","sign":"unsigned","width":8}},{"name":"gas_left","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l1_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]},"visibility":"public"},"return_witnesses":[57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271]},"bytecode":"","debug_symbols":""},{"name":"dipute_relayer","is_unconstrained":false,"custom_attributes":["aztec(private)"],"abi":{"parameters":[{"name":"inputs","type":{"kind":"struct","path":"aztec::context::inputs::private_context_inputs::PrivateContextInputs","fields":[{"name":"call_context","type":{"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"storage_contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"portal_contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"gas_left","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l1_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}},{"name":"side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"gas_settings","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::GasSettings","fields":[{"name":"da","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::DimensionGasSettings","fields":[{"name":"gas_limit","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"teardown_gas_limit","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"max_fee_per_gas","type":{"kind":"field"}}]}},{"name":"l1","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::DimensionGasSettings","fields":[{"name":"gas_limit","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"teardown_gas_limit","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"max_fee_per_gas","type":{"kind":"field"}}]}},{"name":"l2","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::DimensionGasSettings","fields":[{"name":"gas_limit","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"teardown_gas_limit","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"max_fee_per_gas","type":{"kind":"field"}}]}},{"name":"inclusion_fee","type":{"kind":"field"}}]}},{"name":"transaction_fee","type":{"kind":"field"}}]}},{"name":"historical_header","type":{"kind":"struct","path":"aztec::protocol_types::header::Header","fields":[{"name":"last_archive","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"content_commitment","type":{"kind":"struct","path":"aztec::protocol_types::content_commitment::ContentCommitment","fields":[{"name":"tx_tree_height","type":{"kind":"field"}},{"name":"txs_effects_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}]}},{"name":"state","type":{"kind":"struct","path":"aztec::protocol_types::state_reference::StateReference","fields":[{"name":"l1_to_l2_message_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"partial","type":{"kind":"struct","path":"aztec::protocol_types::partial_state_reference::PartialStateReference","fields":[{"name":"note_hash_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"nullifier_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"public_data_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}}]}},{"name":"global_variables","type":{"kind":"struct","path":"aztec::protocol_types::abis::global_variables::GlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"fee_recipient","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"gas_fees","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l1_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}}]}}]}},{"name":"private_global_variables","type":{"kind":"struct","path":"aztec::context::globals::private_global_variables::PrivateGlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}}]}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}]},"visibility":"private"},{"name":"he_secret_key","type":{"kind":"field"},"visibility":"private"},{"name":"new_sk_hash","type":{"kind":"field"},"visibility":"private"},{"name":"new_he_pub_key","type":{"kind":"field"},"visibility":"private"},{"name":"new_he_secret_key","type":{"kind":"field"},"visibility":"private"},{"name":"new_relayer","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]},"visibility":"private"},{"name":"secret_hash","type":{"kind":"field"},"visibility":"private"}],"param_witnesses":{"he_secret_key":[{"start":47,"end":48}],"inputs":[{"start":0,"end":47}],"new_he_pub_key":[{"start":49,"end":50}],"new_he_secret_key":[{"start":50,"end":51}],"new_relayer":[{"start":51,"end":52}],"new_sk_hash":[{"start":48,"end":49}],"secret_hash":[{"start":52,"end":53}]},"return_type":{"abi_type":{"kind":"struct","path":"aztec::protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs","fields":[{"name":"call_context","type":{"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"storage_contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"portal_contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"gas_left","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l1_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}},{"name":"side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"gas_settings","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::GasSettings","fields":[{"name":"da","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::DimensionGasSettings","fields":[{"name":"gas_limit","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"teardown_gas_limit","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"max_fee_per_gas","type":{"kind":"field"}}]}},{"name":"l1","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::DimensionGasSettings","fields":[{"name":"gas_limit","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"teardown_gas_limit","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"max_fee_per_gas","type":{"kind":"field"}}]}},{"name":"l2","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::DimensionGasSettings","fields":[{"name":"gas_limit","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"teardown_gas_limit","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"max_fee_per_gas","type":{"kind":"field"}}]}},{"name":"inclusion_fee","type":{"kind":"field"}}]}},{"name":"transaction_fee","type":{"kind":"field"}}]}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"min_revertible_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"max_block_number","type":{"kind":"struct","path":"aztec::protocol_types::abis::max_block_number::MaxBlockNumber","fields":[{"name":"_opt","type":{"kind":"struct","path":"std::option::Option","fields":[{"name":"_is_some","type":{"kind":"boolean"}},{"name":"_value","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}},{"name":"note_hash_read_requests","type":{"kind":"array","length":32,"type":{"kind":"struct","path":"aztec::protocol_types::abis::side_effect::SideEffect","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"nullifier_read_requests","type":{"kind":"array","length":2,"type":{"kind":"struct","path":"aztec::protocol_types::abis::read_request::ReadRequest","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"nullifier_key_validation_requests","type":{"kind":"array","length":1,"type":{"kind":"struct","path":"aztec::protocol_types::abis::nullifier_key_validation_request::NullifierKeyValidationRequest","fields":[{"name":"public_key","type":{"kind":"struct","path":"aztec::protocol_types::grumpkin_point::GrumpkinPoint","fields":[{"name":"x","type":{"kind":"field"}},{"name":"y","type":{"kind":"field"}}]}},{"name":"secret_key","type":{"kind":"struct","path":"aztec::protocol_types::grumpkin_private_key::GrumpkinPrivateKey","fields":[{"name":"high","type":{"kind":"field"}},{"name":"low","type":{"kind":"field"}}]}}]}}},{"name":"new_note_hashes","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::abis::side_effect::SideEffect","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"new_nullifiers","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::abis::side_effect::SideEffectLinkedToNoteHash","fields":[{"name":"value","type":{"kind":"field"}},{"name":"note_hash","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"private_call_stack_hashes","type":{"kind":"array","length":4,"type":{"kind":"field"}}},{"name":"public_call_stack_hashes","type":{"kind":"array","length":4,"type":{"kind":"field"}}},{"name":"new_l2_to_l1_msgs","type":{"kind":"array","length":2,"type":{"kind":"struct","path":"aztec::protocol_types::messaging::l2_to_l1_message::L2ToL1Message","fields":[{"name":"recipient","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"content","type":{"kind":"field"}}]}}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"encrypted_logs_hash","type":{"kind":"field"}},{"name":"unencrypted_logs_hash","type":{"kind":"field"}},{"name":"encrypted_log_preimages_length","type":{"kind":"field"}},{"name":"unencrypted_log_preimages_length","type":{"kind":"field"}},{"name":"historical_header","type":{"kind":"struct","path":"aztec::protocol_types::header::Header","fields":[{"name":"last_archive","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"content_commitment","type":{"kind":"struct","path":"aztec::protocol_types::content_commitment::ContentCommitment","fields":[{"name":"tx_tree_height","type":{"kind":"field"}},{"name":"txs_effects_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}]}},{"name":"state","type":{"kind":"struct","path":"aztec::protocol_types::state_reference::StateReference","fields":[{"name":"l1_to_l2_message_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"partial","type":{"kind":"struct","path":"aztec::protocol_types::partial_state_reference::PartialStateReference","fields":[{"name":"note_hash_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"nullifier_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"public_data_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}}]}},{"name":"global_variables","type":{"kind":"struct","path":"aztec::protocol_types::abis::global_variables::GlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"fee_recipient","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"gas_fees","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l1_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}}]}}]}},{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}}]},"visibility":"public"},"return_witnesses":[448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,465,466,467,468,469,470,471,472,473,474,475,476,477,478,479,480,481,482,483,484,485,486,487,488,489,490,491,492,493,494,495,496,497,498,499,500,501,502,503,504,505,506,507,508,509,510,511,512,513,514,515,516,517,518,519,520,521,522,523,524,525,526,527,528,529,530,531,532,533,534,535,536,537,538,539,540,541,542,543,544,545,546,547,548,549,550,551,552,553,554,555,556,557,558,559,560,561,562,563,564,565,566,567,568,569,570,571,572,573,574,575,576,577,578,579,580,581,582,583,584,585,586,587,588,589,590,591,592,593,594,595,596,597,598,599,600,601,602,603,604,605,606,607,608,609,610,611,612,613,614,615,616,617,618,619,620,621,622,623,624,625,626,627,628,629,630,631,632,633,634,635,636,637,638,639,640,641,642,643,644,645,646,647,648,649,650,651,652,653,654,655,656,657,658,659,660,661,662,663,664,665,666,667,668]},"bytecode":"H4sIAAAAAAAA/+1dCZwUxfWu2QP2gGU55BDUwftAnZ69Zj0XT1RAFBQ8YXZ2FlaWXdhDRKN4RI0SNWqi8YoH8UCj5jKHuaPxTjTRRBMVTdRogolnokbBf72dKuZNMxDDfjX/rq2u3+/9qrunp/p9r16993X1FRGZckWxEFOKM8sRKUVSaDXK1kt866W+9UG+9cFqWa+X+dbLfftX+NYrfetDfetVvvVq3/pw3/po3/oE3/rWvvWob31b3/qOUprY+h7qd14iqm5SdU2svrY23RBPezVeMhZvbE7UxWrrmusTXsKrS9S1xBM1NelEbaKhsbmxIdbo1dakvda6xprWWKbUsbZi/SwR1Se6vT2lrKN2Ve2pOq7qGlXXqrourAdUPUlKvcj4LPeL+tA+zvtFg8jkAx3PePHHuFj/igdsK8b1TYhMTqIyKI/+upDvF6nldUBdhLIhlVJ2PH2sEvb7IKZLBK+Lx/Hm69fheeyzQd83AZUx4UQJA+02ClwyN4W7Ed9H68lCEXOGdaymgbWXcqYisWFB49xBYAemv/SzbU8vcFvsrep9RHaA80CUz248OPhtyZeLRG7f+H/Pt60yz3GG59lmbOBr5kyGWS2yTJoMFPUdsxh8bO5AmzmQ42oge3sLXFDYR5hx7CKw/ZCY983TVnMs1VLnNde3NHjpZF0ilWqs8bx4sj5Z3xxPtKab67xEXUK2mUrGE/Jw8WTKS8eS9elCsZR9BTa46rKfCFmKKgOfpZAT7Weg3f1FsFkK4d4f30d5dUUE5P0NtHtDkZlAj0qUWk+kLzUJnA8h7aeJB7U3URSOxZpK9mg99wLqyZPKZFUfoOoDVX2QwjBKrR8s5RAph0qZIuUwKYdLOULKVCnTpEyXcqSUGVKOknK0lJlSZkk5RsqxUmZLmUP/UwYqY7o0oTDWesm+xKgou9+Pithvuo6KDBtfv6/aTtv0eI6obUQOxons70W+4/T9R20rZttKSnKa7ttWqlZ0n5SJrE2aBMoesXpqsxzdbsyrLRPZsxhcu5l4MERkbdPEjlPObDVU9w3u2B4/tr5coo+jt5ew5bFsX72ftocmaFp3+r2CLW/sf2W+/1WxfSry4G8SWPyVPn24/lRK2TKRQD0GxjLd4H4c8xKVIpeUa/sJn76C6aHrwXB9Yh71xVaqrfnpnum97e1trW3prmnpRc3pru4FbYtnt/V0pLu7OTvWAMb6AERELph1bB8exPhycZ5tUfZ/Mx2RcZLB7JhNbJ0bHR90YvFKkZs4tO2ETx9deMAwEKxqKtkxPos+lUyfCrw+nqmgTO3qoIc8480XAMt9tuIBcAiz3/9XAAx1LozOVSI71rmufAwFQUe9jSdnE2Owj0gyO1ChZLwvO66BmFITYfbXhKzEh7mE7TMmkt13MrMXj8UaQ76+HILHsMm+HMJ0rGC6aX1M5dAKnz7cf3RtOpbj2vUSPMaUbsTGJWyfaaquFhuWz0qoy9iytpkB/+kbA1WfAZveZ+Z/wVblw1aeBxuPMQax9XGGYYZsVu2zmdZ/GLOZ3uf4/2Kz6o3YjI/fKl8bhrDFqd3hhmw2wmczrf9wZjO9T9KH12+zERux2TBmM/1fvW8R26+a/Ze26xilf18nsvf/CZGbf0yeA/DYqbEKH1bh09VMn3m1/+s5wHCmzwi4PpnxbMA3+/LGSNUW+hxglM9W5T5bVbF9RjL7jTJgv4jIvbrVxNb18UKdQ51DnUOdQ51DnUOdQ51DnUOdQ51DnUOd+68z6eOfZ6hk+1UEREe9bQTTsZQtC7X+ENPXwLxrLek7jB2vienB5yb1PqvZvo+p5aHsdz4Hnu/ahoE5nU3Oz5czHYcw3bQ+Jq6j8htBdNtD8tjHP2fPbTaUbdMYqtg27T/VbJv2pWFsmx6THHtRHl34DUe61tdp+DjSvjGcbdNz69yX9TX9kawNm/3EgD61+fQp9enD48kg3z76vyVsnzdUnW9O18ycYebaje5n//WNEUxHvc+bm9CRt6X1zHftRuMdaRZbLc+B/vjIsel93t0ENjM5J3MznYm5YMK+BcNI7Q7Jg13v8wGz00dqmY9vnmfKIhv+rkvEt97ElkcxW47BY+6bTx7L9Gxix+HHHsd0BR3b48fW93Tp4+jtJWx5cCS7r95P20PbWutOY2a0Wua6+/9X6ftfFdtndB78TQKLf4xPnzE+nalPPmHLZeyG4JGGdBq9ERuVMhvpffj1GVP3Ivj5pZ+vcU7nzxn8OqDep1rZMF/M4nyacwN/HjfJp4eJXLx6nfNpvW0k09GPmfNpm+8pKZQ+JT59+H0Vg3z7cC6i95m4Cb8iHFVwHBku4j+f4feoaR31PjtsQsd8vpePi2i8wxi2aji2zPX94T5s2v7VDJveZ7f/Yn8T9yAYwu7x+xE0F6nIg13vE2P3kcUZ19B9xO9Jm5znd102xUV4rDcQ+2Kcf+n+HpXn2KOZrqBj53A/zUX0cTgn1MtNjIv486W2tdadxouO01x3///yxXm9z8g8+JsEFr9/7muUT2fqkzp+vyLjIvjYltFp5EZsVMJspPfJdy8snxvId8+gqfPujd2vyOc2Ktiy1nFT96z6xyZUYZokOUjkDnghNnwcv79PVgKf0PMOwLUVK9Tj+MgnFLm+x4nwcXxVPI53QD6OT050nIF2jxe4gW4K9/H4PirY4D9QmBn8J4hw8Ksy8Ac/OdEJBto9UQR78BPuE/F9VLDBf5AwM/hPEuHgV2XgD35yopMMtHuyCPbgJ9wn4/vIiK7EUE4U+BfxzBXYAEKDUA9MYlY0EA9U9UGqpjJP1Wg81J9zDbSbBPalDmJiIzaI9a94k3FtxfR8TbOUlJQWKWkprVLmS1kgpU3KKVIWSmmXskhKh5ROKYulLJHSJaVbSo+UXpEJ5HqKoFlk58eK1HH4eotvPe1bb/Wtz/etL/Ctt/nWT/GtL/Stt/vWF/nWO3zrnb71xb71Jb71Lt96t2+9x7feKzZMMOg3RHIf6u/YaQa2dWMRNk5vzH6bq2e6NVNSuLZaWoD2u8kO+zWmcW15rUD73WyF/dLefFhbKW8B0H63WGG/hNcGayvmnQK030ob7JeOeQtRbaViXjvQfl+3wX6JmLcI1ZbM5R1A+91qgf3SEnMnqK2UbGsx0H63WWC/hMS8BNSWVNPrAtrv9uDbL02YuzFtpaitHqD97gi+/RKEuVfgzmX4OUN/7beqQPaL9a94QJ7v3Qy0352W2A/IU72VQPvdZYn9gDzLuxVov29YYj8gT/BuB9rvbkvsB8xz3iqg/e6xxH7AOO3dBbTfvZbYDxhnvLuB9vumJfYDjhMP6DOeKfsV+ewXpDn3U4H9Sm2gr3fNE5n38KGv+S0V2L5G4z5YZK+dIXE/UBRs3OSPSw3gfjDg58Zaz9OAtgT2tfdgwP2GxsupBvzm4YDjbjY0Xh6xZLwsA9oS2Nce0n763hvNIyhG0L02y0T2npvTRW5Bc44UsK0zRLA5B32QKSXwY+rxgMcS8qEzDOB+wpJY8jmgLYF97T0RcL85xJDfPBlw3BQjTjeA+ylLxsuZQFsC+9p7ymDupRhBOfdMkc29Z4ncgs69yHvElotg5176EGKLwI+ppwMeS8iHlhvA/YwlseRsoC2Bfe09E3C/OdSQ3zwbcNwUI84ygPs5S8bLOUBbAvvae85g7j1bZHLuOSKbe88VuQWde9PAts4Twc69U0T2+QukDZ8PeCwhHzrPAO4XLIklnwfaEtjX3gsB95sphvzmpYDjphhxrgHcL1syXs4H2hLY1x7Sfv7cSzGCcu75Ipt7LxC5BZ17kc/2XCiCnXsPE9lnHZE2fCXgsYR86EIDuF+1JJZ8AWhLYF97rwbcbw4z5DevBxw3xYgLDOB+w5LxchHQlsC+9t4wmHspRlDOvUhkc+/FIregc+98YFsrRLBz7+Ei+14BpA3XBDyWkA+tMID7TUtiyReBtgT2tfdmwP3mcEN+81bAcVOMuNgA7rctGS+XAG0J7GvvbYO5l2IE5dxLRDb3XipyCzr3It/JcJkIdu49QmTf4YO04XsBjyXkQ5cZwP2+JbHkS0BbAvvaez/gfnOEIb/5IOC4KUZcagD3h5aMl8uBtgT2tfehwdxLMYJy7uUim3uvELkFnXvbgG1dKYKde6eK7PvykDb8OOCxhHzoSgO4P7EklnwZaEtgX3ufBNxvphrym08DjptixBUGcJNjI3GbGi9fAdoS2Nce0n7+3EsxgnLuV0Q2914lcgs69yLfpXe1CHbunSay76ZF2rC4ONixhHzoagO4SyyJJV8F2hLY115JwP1mmiG/GRxw3BQjrjKAu8yS8XIN0JbAvvbKDOZeihGUc68R2dx7rcgt6Ny7ENjWdSLYuXe6yL4HHmnDyoDHEvKh6wzgHmJJLLkeaEtgX3tDAu430w35zbCA46YYca0B3NWWjJcbgLYE9rVXbTD3UoygnHuDyOber4ncgs69yHeg3yiCnXuPFNlvriBtODLgsYR86EYDuEdZEktuAtoS2NfeqID7zZGG/GZMwHFTjPiaAdxjLRkvNwNtCexrb6zB3HuTyOTcm0U2994icgs69y4CtrVSBDv3zhDZ75shbTg+4LGEfGilAdwTLIklXwfaEtjX3oSA+80MQ36zTcBxU4y4xQDuqCXj5VagLYF97UUN5l6KEZRzbxXZ3HubyC3o3Iv8dtXtIti59yiR/ZYo0obbBTyWkA/dbgD39pbEkjuAtgT2tbd9wP3mKEN+s1PAcVOMuM0A7p0tGS+rgLYE9rW3s8HcSzGCcu4qkc29d4rcgs69ncC27hLBzr1Hi+x3u5E23C3gsYR86C4DuCdZEku+AbQlsK+9SQH3m6MN+c2eAcdNMeJOA7hjloyXu4G2BPa1FzOYeylGUM69W2Rz7z0it6Bz72JgW/eKYOfembKNxQbGVE3AYwn50L0GcNdaEku+CbQlsK+92oD7zUxDftMQcNwUI+4xgDthyXj5FtCWwL72EgZzL8UIyrnfEtnc+22RW9C5dwmwre+IYOfeWbKNJQbG1N4BjyXkQ98xgHsfS2LJd4G2BPa1t0/A/WaWIb/ZP+C4KUZ82wDuJkvGy31AWwL72msymHspRlDOvU9kc+/3RG5B594uYFvfF8HOvcfINroMjKkDAx5LyIe+bwD3QZbEkh8AbQnsa++ggPvNMYb85tCA46YY8T0DuKdYMl5+CLQlsK+9KQZzL8UIyrk/FNnce7/ILejc2w1s60ci2Ln3WNlGt4ExdUTAYwn50I8M4J5qSSz5MdCWwL72pgbcb4415DdHBhw3xYj7DeCeYcl4+QnQlsC+9mYYzL0UIyjn/kRkc+9PRW5B594eYFs/E8HOvbNlGz0GxtTMgMcS8qGfGcA9y5JY8nOgLYF97c0KuN/MNuQ3swOOm2LETw3gnmPJePkF0oeA42WOwdz7c5HJub8Q2dz7S5Fb0Lm3F9jWAyLYuXeObKPXwJg6IeCxhHzoAQO4T7QkljwItCWwr70TA+43cwz5zdyA46YY8UsDuOdZMl5+BbQlsK+9eQZzL8UIyrm/Etnc+5DILf7cG+tf8bYB9tlDAm8b7f97Mps8rLaXseM9rH6vC2sn60lSHhEb+sUjoX2c94tHRSY/6VgSYcuCbaPSpOpY/4r3sMDGQl0ekzJULZex7U2o49XG4oOokZJcuwh2zCL8MWNlIpdDQNqld8BmoazXu5It698GSylnv0dKcv8znG3TNqlgfbE4mVo4uWt+76J0R083N5o+AN+2TuQ6Y5Fvn405Kv8fKVnqOwYHpn8rFxt2IvQMWRc0M3lU4JjJYzi96EE3MUhsWNARJALUOY+6/W47VdPqtSYb0iZt8KghG6D13MMSPctEsH1KFx4Ax6nlx6U8IeXXUn4j5UkpT0n5rZTfSXlayjNSfi/lD1KelfKclD9K+ZOU56W8IOVFKaulvCTlZSl/lvIXKa9I2VEdy0xm9Vp5ZvXHEIqf6zOMqqNqe7FaL/ZtL1HrJSwz0fZStV7KtvPkoHWgbTrrRti29RmTbdMJpZht0xhK2LbBIvfYtD5BbStjbTcJGHuoL2P6wdqNeY1lDA+u3ezZrVB6N3G7MVtpRgLMBR4/tiYY5eyYff3JlsezffV+2h7an7TuxIa0T5Rv4n8lvv9VsX0G5cHfJLD4B/v0GezTmfqgWi0T8xukFB7HdKuA6+Y1Vorc2KPtJ3z66lJh2FYVDHO6Y0lvujc9o7e5vS11SG9Hqqets+PAZHs7D9Za+XE+5fMxWb0PD4RFbLmYLZew5VK2zP87OM+2daqObmSd60fG5wYValulWuanB1rPCratmC3r/Y0x72KRayzhA4Q6zhMi0IzB0wvcFq+q+jWRdYaNOZl/W0keW/LlIrHh6RpfzretMs9xhufZZsxZNC0gw6z2HaMYfCzuMJt52hZXp23eq/1va/0p4GvCjCOjT3uRmP+ap63mWKqlzmuub2nw0sm6RCrVWON58WR9sr45nmhNN9d5ibqEbDOVjCfk4eLJlJeOJevTfAKNF3TA+SuurZyJs9dF/gyxqQmudWCf0WOtNI//lLDfOQWK4HXJmbbJ16/D89jH6BySCSd63UC7bwjc4DSF+w18H+XVFRGQ3zDQbqpAV7hjm1m0nkhf+pvA+VAKfIWbAhzpN1HZsBCs9dfCjA8IrJ5xbou/q3qNCFkrlfWslQyzVmQnt9bkOSiaxXIH2tzBmW7NlL8L3EBfI8w4NprFIjG/ydryEjXxeEMN7ZdoiXm1Lal4Ih5vaa6NpWLJVDzdWOs1ttbGa2tSLalm2WbSa421JlONrYmMXoVisW8KbBDV5R8iZLGqDHwWS070DwPt/lMEm8US7n/i+8gIi12jdEW3+5bABhAaoG+pWq/T1bObROFY2W+FmeQF8pO8c4lvq/odEbKyPiNp5yHDrBZZZyIDRX3HRLMy7kD9nVt8W+AG6zvCjGOjWRkS87vCvrnFdwU2qOrynghZmSoDn5WRE71noN33RbBZGeF+H99HRljZO0pXdLtpS+YWkb70L4HzobSBuUXSb6IoHIv9nTDjAwKjZ14W+29VfyBCFttnJO08ZBjOYslAUd8x0SyWO1B/Wey/BW6gfyDMODaaxSIxfyjsY7EfCmwQ1eUjEbJYVQY+iyUn+shAu/8RwWaxhPs/+D4ywmI/ULqi251vCYtF+tLHAudD8w2wWNKvkCz2aWHGBwRGz7ws9hNV08XgkMUyFkuG4SyWDBT1HRPNYrkD9ZfFfiJwA32tMOPYaBaLxLxO2MdikcyR6/upCFmsKgOfxZKxPjXQLjWo2woii13n6ylQu0ZY7FrVKLrdNktYLNKXIhGcD7UZYLGkXyFZ7DPCjA8IjJ55WWyRMkJxJGSxfUbSzkOG4SyWDBT1HRPNYrkD9ZfFFgEHenHEjGOjWSwSc0nEPhZbEsEGUV1KIyGLVWXgs1hyotIIvt1BAWexhHuQJSy2WOmKbnehJSwW6UuDgSx2oQEWO7jALPb3wowPCKyeOU8rlSkjlIcstq+sZ7FkmLW+Y6BZK3eY/j6dVAYc2OWWsFYk5grWli1PJ1UYYq2VIWvVZeCzVnKiSgOsdUjAWSvhHmIJay1XuqLbHQoOIDRAqc2+aR9RGNb1B2EmWYH9Iod1VSkjDAtZV19Zz7qqIrnPiA+LbHhQNAvjDtRfFlYFDHrDLGFhSMzVFrKwakMsbHjIwnQZ+CyMnGi4ARY2IuAsjHCPsISFDVO6otsdaYCFjSwwC3tWmElWIL/IewV3lDLCFiELyxhJOw8Zhl/BJQNFfcdEszDuQP29gjsKGPS2sISFITGPjth3BXe0IRY2JmRhugx8FkZONMYACxsbcBZGuMdawsK2ULqi211kyRVcpC+NwwVNb5GBK7ik30RROBb7nDDjAwKjZ14Wu6UywviQxWaMpJ1nSx+LHV8AFssdqL8sdkvgQB9vCYtFYp5gIYudYIjFbhWyWF0GPoslJ9rKAIvdOuAslnBvbQmLHa90RbfbaQmLRfrSNkAW22mAxW5TYBb7R2HGBwRGz7wsNqqMMDFksRkjaeeJ+ljsxAKwWO5A/WWxUeBAn2gJi0Vi3tZCFrutIRa7XchidRn4LJacaDsDLHb7gLNYwr29JSx2otIV3e4SS1gs0pd2ALLYJQZY7A4FZrHPCzM+IDB65mWxOyoj7BSy2IyRtPPs6GOxOxWAxXIH6i+L3RE40HeyhMUiMe9sIYvd2RCL3SVksboMfBZLTrSLARa7a8BZLOHe1RIWu5PSFd1utyUsFulLuwFZbLcBFrtbgVnsC8KMDwiMnnlZ7CRlhN1DFpsxknaeST4Wu3sBWCx3oP6y2EnAgb67JSwWiXkPC1nsHoZY7J4hi9Vl4LNYcqI9DbDYWMBZLOGOWcJid1e6otvttYTFIn3JA7LYXgMs1iswi10tzPiAwOiZl8XGlRFqQhabMZJ2nriPxdYUgMVyB+ovi40DB3qNJSwWibnWQhZba4jF1oUsVpeBz2LJieoMsNj6gLNYwl1vCYutUbqi211qCYtF+lIDkMUuNcBiGwrMYl8SZnxAYPTMy2ITygiNIYvNGEk7T8LHYhsLwGK5A/WXxSaAA73REhaLxLyXhSx2L0Msdu+Qxeoy8FksOdHeBljsPgFnsYR7H0tYbKPSFd3uMktYLNKX9gWy2GUGWOy+isXygk6cEaAPPS7M+BB6vL8GwBxPxdKxukTNpvqm3xeFgZhtednUHkD77RfBjhPCul+ekwG0DR4F2uAVYceYLNSHAfprzzIg5mGWYI4AMT8p3MP8G1GYMdhfzPsD/DFV0+q1JhvSpBs/KaS26WRsjcjUFaS34rG037MM0zpWP6Xqd1T9garXqrpYtVun1stUvYeqx6vfJ6r6T2r7Tmp9d1W/qLbXqPVGVb+stv9Z1X9R9aMi97hhHdZhHdZh7Wa9m5TJLJ/peQ+dx5pUPpms6hFSDmD761weV/tTOdA3e4g+z4gJHHc4EDwBncOzlU08VdeoujYgfR/WZutJUg5iY6VJZMpBkdA+rvvFwZHcizFU86vTQhi4t1zgz+fQOnoW6FhjgY61ApvXdDlErgxVy2VsexPqeLWxur4Lomow+McEPzcHHjPGuQ+sXdkPlQyD1rtSbHhHCl2sLme/l5Tk/mc426b7g+YidF8sTqYWTu6a37so3dHTzTtMH4BvWydyA0/RRvaN5PlfCVOy1Pc/Dkz/Vi4MX03WBc0yDwZesTsEyDLJSweJDQs6ggBnEo18RTDeIC3d0tBq0gYHG5rpRuu5nyV6Aq9CmPwyZYwHwHFq+VC5MkXKYVIOl3KElKlSpkmZLuVIKTOkHCXlaCkzpcyScoyUY6XMljJHynFSjpdygpQTpZwk5WQpc6XsqI5lJrN6rTyz+mMIxc+IzjCqjqrtxWq92LddZySemWh7qVovZdt5ctA60Lb1Mw5s2/qMybbphFLMtmkMJWybvu1LH5vWJ6htZaztJgFjD/VlTD9YuzGvsYzhwbWbnakQSu8mbjdmK81IkFeV+LE1wShnx+zrT7Y8nu2r99P20P6kdSc2pH2ifBP/K/H9r4rtMygP/iaBxT/Yp89gn87UB9VqmZjfIKXwOKZbBVw3r7FS5MYebT/h01eXCsO2qmCY0x1LetO96Rm9ze1tqUN6O1I9bZ0dBybb23mw1sqP8ymfj8nqfTZ283gxW+anIfx+Tv7ffPebrlN1dCPrXD8yPjeoUNv0Deb89EDrWcG2FbNlvb8x5l2oJxSmGGI2IHvkfUJhnjJCMhI+odBnJE0LyDCrfcdAP5Ewpf+nbeufSJgHPAVMFuimmVj/ChRzc562gv5EQjP4gpAuqUj4RIIqA/+JBHKiVATfbgtwcJrC3RKB95GRJxKSSld0u2dY8kQC0pfSuKDpnWHgiQTSb6Io3HO1hwWbteoS57ZoVUaYH7LWvrKetZJh1ors5Nb8yIYHRbPYwwCDM92qCnCgz7eExSIxL2BteYmaeLyhhvZLtMirrC2peCIeb2mujaViyVQ83VjrNbbWxmtrUi2pZtlm0muNtSZTja2JjF6FYrELDLHYtpDF6jLwWSw5UZsBFntKwFks4T7FEhY7X+mKbnchOIDQAKU2i0Q2kdLVs5tE4VjZNAvnEvXs9qKQlWWMpJ2nPZL7thMyUNR3TDQrmwacW2wHBsFFlrAyJOYOC+cWOwyxss6Qleky8FkZOVGnAVa2OOCsjHAvtoSVLVK6ots905K5RaQvLQHOLZ5pYG5xSYHnFqdbyGK7lBG6QxabMZJ2ni4fi+0uAIudDmSxXcCB3m0Ji0Vi7rGQxfYYYrG9IYvVZeCzWHKiXgMs9tSAs1jCfaolLLZb6Ypud7klLBbpS0uBLHa5ARa7tMAs9kgLWexpygjLQhabMZJ2ntN8LHZZAVjskUAWexpwoC+zhMUiMZ9uIYs93RCLPSNksboMfBZLTnSGARb7uYCzWML9OUtY7DKlK7rdcyxhsUhfOhPIYs8xwGLPLDCLnWEhiz1LGWF5yGIzRtLOc5aPxS4vAIudAWSxZwEH+nJLWCwS89kWstizDbHYc0IWq8vAZ7HkROcYYLHnBpzFEu5zLWGxy5Wu6HbPs4TFIn3pPCCLPc8Aiz2vwCz2qGCzWF1ynlb6vDLC+SGL7SvrWSwZZq3vGGjWehRgMOqnkz4PHNjnW8JakZgvYG3Z8nTSBYZY64Uha9Vl4LNWcqILDbDWLwSctRLuL1jCWs9XuqLbvQgcQGiAUptUF4p1HW0h67pYGWFFyLr6ynrWdXEk9xnxFZEND4pmYUcDWdjFwKC3whIWhsT8RQtZ2BcNsbBLQhamy8BnYeRElxhgYZcGnIUR7kstYWErlK7odi8zwMIuKzALmxlsFpb3Cu6XlBEuD1lYxkjaecgw/AouGSjqOyaahc3sf6BafwX3S8Cgd7klLAyJ+YqIfVdwrzDEwq4MWZguA5+FkRNdaYCFfTngLIxwf9kSFna50hU+x2bJFVykL30FFzS98w1cwSX9JorCsdhZFrLYq5QRrg5ZbMZI2nmu8rHYqwvAYmcBWexVwIF+tSUsFon5qxay2K8aYrHXhCxWl4HPYsmJrjHAYq8NOIsl3NdawmKvVrqi273QEhaL9KXrgCz2QgMs9roCs9hjLGSx1ysj3BCy2IyRtPNc72OxNxSAxR4DZLHXAwf6DZawWCTmr1nIYr9miMXeGLJYXQY+iyUnutEAi70p4CyWcN9kCYu9QemKbvciS1gs0pduBrLYiwyw2JsLzGJnW8hib1FGWBmy2IyRtPPc4mOxKwvAYmcDWewtwIG+0hIWi8T8dQtZ7NcNsdhbQxary8BnseREtxpgsbcFnMUS7tssYbErla7odldYwmKRvnQ7kMWuMMBiby8wi51jIYu9QxlhVchiM0bSznOHj8WuKgCLnQNksXcAB/oqS1gsEvOdFrLYOw2x2LtCFqvLwGex5ER3GWCx3wg4iyXc37CExa5SuqLbvcQSFov0pbuBLPYSAyz27gKz2OMtZLH3KCPcG7LYjJG089zjY7H3FoDFHg9ksfcAB/q9lrBYJOZvWshiv2mIxX4rZLG6DHwWS070LQMs9tsBZ7GE+9uWsNh7la7odi+zhMUifek7QBZ7mQEW+50Cs9gTLGSx31VGuC9ksRkjaef5ro/F3lcAFnsCkMV+FzjQ77OExSIxf89CFvs9Qyz2+yGL1WXgs1hyou8bYLE/CDiLJdw/sITF3qd0Rbd7uSUsFulLPwSy2MsNsNgfKhbLCzpxRoA+dKghsoAe70mAD6USidb6eCK+qb7prz33Q/qnJURuP+D4vj+CHSeE9f48JwNoGxwMtMFcS8ZkoT4M0F97lgExr7AEcwSI+QgHMR9eoDHYX8w/AugZb5AttzS0km78pJDappOx+aqukPJjxWNpv2cZpnWsnqr2X6TqblUvU/VyVdep/ctUvZ/afrWqb1D1sapeqepVqj5O1feq+j5Vn6jqk1R9sqoP9h03rMM6rMM6rN2sd5PyE5bP9LyHzmM/VvniJ6oeIeWnkew+VJpUHetf8faQbTQKPD/4mSXnkEjMP7cEM3Ie5xeWYC4CYv6lJZiLgZgfsARzCRDzg5ZgLgVi/pUlmAcBMT9kCebBQMwPW4K5DIj5EUswlwMxP2oJ5gog5scswVwJxPy4JZiHADE/YQnmoUDMv7YEcxUQ828swTwMiPlJSzBXAzE/ZQnm4UDMv7UE8wgg5t9ZgnkkEPPTlmAeBcT8jCWYG4CYf28J5jog5j9YgvlnwHtlnnWwn59zEPMfHcT8JwcxP+8g5hccxPyig5hXO4j5JQcxv+wg5j87iPkvDmJ+xUHMrzqI+TUHMf/VQcyvO4j5DQcx/81BzH93EPMaBzG/6SDmfziI+Z8OYn7LQcxvO4j5HQcxv+sg5vccxPy+g5j/5SDmfzuI+QMHMX/oIOaPHMT8Hwcxf+wg5k8cxLzWQczrHMT8qYOYSTnXMEccxFzkIOZiBzGXOIi51EHMgxzEPNhBzGUOYi53EHOFg5grHcQ8xEHMQx3EXOUg5mEOYq52EPNwBzGPcBDzSAcxj3IQ8xYOYh7tIOYxDmIe6yDmcQ5i3tJBzOMdxDzBQcxbOYh5awcxb+Mg5qiDmCc6iHlbBzFv5yDm7R3EvIODmHd0EPNODmLe2UHMuziIeVcHMe/mIOZJDmLe3UHMeziIeU8HMcccxOw5iDnuIOYaBzHXOoi5zkHM9Q5ibnAQc8JBzI0OYt7LQcx7O4h5Hwcx7+sg5v0cxLy/g5ibHMQ82UHMBziI+UAHMR/kIOaDHcR8iIOYD3UQ8xQHMR/mIObDHcR8hIOYpzqIeZqDmKc7iPlIBzHPcBDzUQ5iPtpBzDMdxDzLQczHOIj5WAcxz3YQ8xwHMR/nIObjHcR8goOYT3QQ80kOYj7ZQcxzHcQ8z0HMSQcxNzuIOeUg5hYHMacdxNzqIOb5DmJe4CDmNgcxn+Ig5oUOYm53EPMiBzF3OIi500HMix3EvMRBzF0OYu52EHOPg5h7LcF8QASH+VRLMP8UiHmpg759moOYlzmI+XQHMZ/hIObPOYj5TEsw7wHEfJYlmO8H5uflDvr22Q5iPsdBzOc6iPk8SzBvAcT8eUswjwZiPt8SzGOAmC+wBPNYIOYLLcE8Doj5C5Zg3hKI+SJLMI8HYr7YEswTgJhXWIJ5KyDmL1qCeWsg5ksswbwNEPOllmCOAjFfZgnmiUDMX7IE87ZAzJdbgnk7IOYrLMG8PRDzlZZg3gGI+cuWYN4RiPkrlmDeCYj5Kksw7wzEfLUlmHcBYv6qJZh3BWK+xhLMuwExX2sJ5klAzNdZgnl3IObrgZjlpUNRrNqqY/gjygb0W4mUUimDpAyWUialXEqFlEopQ6QMlVIlZZiUainDpYyQMlLKKCk0v0/z3TT/S/OhND9I82U0f0TzKTS/QOfbdP4ZlULnJ8TXib8SnyN+Q/me8h/lA4qPFC9o/JA/kX3p2u+eZBMpnpQ42VpKLcP1oqp/LgH+QsovpTwg5UEpv5LykJSHpTwi5VEpj0l5XMoTUn4t5TdSnpTylJTfSvmdlKelPCPl91L+IOVZKc9J+aOUP0l5XsoLUl6UslrKS1JelvJnKX+R8oqUV6W8JuWvUl6X8oaUv0n5u5Q1Ut6U8g8p/5TylpS3pbwj5V0p70l5X8q/pPxbygdSPpTykZT/SPlYyidS1kpZJ+VT1bkRKUVSiqWUSCmVMkjKYCllUsqlVEiplDJEylApVVKGSamWMlzKCCkjpYySsoWU0VLGSBkrZZwU+iY9faOdvllO3/Cmb1rTN56jUugbwPRNXPpGLH0zlb4hSt/UpG9M0jcX6RuE9E0++kYdfbONvmFG3/Sib1zRN5/oG0j0TSD6Rg59M4a+oULfFKFvbNA3J+gbDPRNAnpHP72znt7hTu8073vHtxR6BzS9E5neEUzvzKV3yNI7Vekdo/TOTXoHJb2Tkd5RSO/so3fY0Tvd6B1n9M4vegcWvROK3pFE7wyid+jQO2XoHSv0zhF6Bwe9k4Le0UDvLKBn+OmZdnrGe54UegaYnomlZ0TpmUl6hpCeqaNnzOiZK3oGiZ7JoWdU6JkNeoaB7umne9zpnm+6B5ruCaZ7ZOmeUbqHku4ppHvs6J4zugeL7kmie3TonhW6h4PuaaBr/GdLoWvAdE2UrhHSNTO6hkTXVOgaA8250xw0zcnSHCXN2dEcFs3p0BwHnfPTOTCdE9I5Ep0zEIcmTkkcizgH5WDKSRSjKWaNYONwZ1Xvourpve3tba1t6a5oS2e6O9rR2RNdlOxJLYiemmzvTUfbOqJL23o60t3dtPM69adtVT2jq/PUto750Y71jbR1pNp7u9s6O6Ktybb2dAvtNS6S2Xu8+lcq2d4e7emMJru70109cxclT5vb3NYzt7vt9DT9fKfafYLaPdnTk160uKfvHy0tpM6CaOep6a7W9s6l9Pt9av+Rav+2Dql6W8vcjvTSud0L5y5Idi+gzU/+b1qQn3xWLSIqRlKZqupxqp7c1ZVcJs3Skj4t2tnbE+1sjTZ39na0dPM/Hb05fzpuc/40b3P+9LrYPFus2ZyDvbM5fxr2P/gM/190M/+3fWQzlNz1s/5J6PJ/UIPkhEluAwA=","debug_symbols":"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"}],"outputs":{"structs":{"functions":[{"kind":"struct","path":"BatcherVault::cancel_batch_and_claim_abi","fields":[{"name":"parameters","type":{"kind":"struct","path":"BatcherVault::cancel_batch_and_claim_parameters","fields":[{"name":"current_round","type":{"kind":"field"}},{"name":"secret_hash","type":{"kind":"field"}}]}}]},{"kind":"struct","path":"BatcherVault::claim_token_in_abi","fields":[{"name":"parameters","type":{"kind":"struct","path":"BatcherVault::claim_token_in_parameters","fields":[{"name":"round","type":{"kind":"field"}},{"name":"total_token_in","type":{"kind":"field"}},{"name":"total_token_out","type":{"kind":"field"}}]}}]},{"kind":"struct","path":"BatcherVault::execute_batch_abi","fields":[{"name":"parameters","type":{"kind":"struct","path":"BatcherVault::execute_batch_parameters","fields":[{"name":"encrypted_amount","type":{"kind":"array","length":2,"type":{"kind":"field"}}},{"name":"secret_key","type":{"kind":"field"}},{"name":"token_out_amount_cancelled","type":{"kind":"field"}},{"name":"input_asset_bridge","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"output_asset_bridge","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"nonce_for_transfer_approval","type":{"kind":"field"}},{"name":"uniswap_fee_tier","type":{"kind":"field"}},{"name":"minimum_output_amount","type":{"kind":"field"}},{"name":"secret_hash_for_L1_to_l2_message","type":{"kind":"field"}},{"name":"caller_on_L1","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"nonce_for_swap_approval","type":{"kind":"field"}}]}}]},{"kind":"struct","path":"BatcherVault::stake_abi","fields":[{"name":"parameters","type":{"kind":"struct","path":"BatcherVault::stake_parameters","fields":[{"name":"relayer","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"token","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"amount","type":{"kind":"field"}}]}}]},{"kind":"struct","path":"BatcherVault::deposit_to_batch_abi","fields":[{"name":"parameters","type":{"kind":"struct","path":"BatcherVault::deposit_to_batch_parameters","fields":[{"name":"current_round","type":{"kind":"field"}},{"name":"amount_out","type":{"kind":"field"}},{"name":"relayer_he_pubkey","type":{"kind":"field"}},{"name":"elgamal_rand","type":{"kind":"field"}},{"name":"init","type":{"kind":"boolean"}}]}}]},{"kind":"struct","path":"BatcherVault::validate_execute_batch_abi","fields":[{"name":"parameters","type":{"kind":"struct","path":"BatcherVault::validate_execute_batch_parameters","fields":[{"name":"sender","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"c1","type":{"kind":"field"}},{"name":"c2","type":{"kind":"field"}},{"name":"amount_out","type":{"kind":"field"}},{"name":"amount_out_sub_cancelled","type":{"kind":"field"}}]}}]},{"kind":"struct","path":"BatcherVault::dipute_relayer_abi","fields":[{"name":"parameters","type":{"kind":"struct","path":"BatcherVault::dipute_relayer_parameters","fields":[{"name":"he_secret_key","type":{"kind":"field"}},{"name":"new_sk_hash","type":{"kind":"field"}},{"name":"new_he_pub_key","type":{"kind":"field"}},{"name":"new_he_secret_key","type":{"kind":"field"}},{"name":"new_relayer","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"secret_hash","type":{"kind":"field"}}]}}]},{"kind":"struct","path":"BatcherVault::_validate_round_abi","fields":[{"name":"parameters","type":{"kind":"struct","path":"BatcherVault::_validate_round_parameters","fields":[{"name":"round","type":{"kind":"field"}}]}}]},{"kind":"struct","path":"BatcherVault::replace_relayer_and_slash_stake_abi","fields":[{"name":"parameters","type":{"kind":"struct","path":"BatcherVault::replace_relayer_and_slash_stake_parameters","fields":[{"name":"sk_hash","type":{"kind":"field"}},{"name":"new_he_pub_key","type":{"kind":"field"}},{"name":"new_relayer","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"secret_hash","type":{"kind":"field"}}]}}]},{"kind":"struct","path":"BatcherVault::check_sk_hash_abi","fields":[{"name":"parameters","type":{"kind":"struct","path":"BatcherVault::check_sk_hash_parameters","fields":[{"name":"sk_hash","type":{"kind":"field"}}]}}]},{"kind":"struct","path":"BatcherVault::spend_public_authwit_abi","fields":[{"name":"parameters","type":{"kind":"struct","path":"BatcherVault::spend_public_authwit_parameters","fields":[{"name":"inner_hash","type":{"kind":"field"}}]}},{"name":"return_type","type":{"kind":"field"}}]},{"kind":"struct","path":"BatcherVault::_validate_claim_params_abi","fields":[{"name":"parameters","type":{"kind":"struct","path":"BatcherVault::_validate_claim_params_parameters","fields":[{"name":"_round","type":{"kind":"field"}},{"name":"_total_token_in","type":{"kind":"field"}},{"name":"_total_token_out","type":{"kind":"field"}}]}}]},{"kind":"struct","path":"BatcherVault::finalize_execute_abi","fields":[{"name":"parameters","type":{"kind":"struct","path":"BatcherVault::finalize_execute_parameters","fields":[{"name":"secret_hash_for_redeeming_minted_notes","type":{"kind":"field"}},{"name":"amount","type":{"kind":"field"}},{"name":"secret_for_L1_to_L2_message_consumption","type":{"kind":"field"}}]}}]},{"kind":"struct","path":"BatcherVault::_sub_token_out_amount_abi","fields":[{"name":"parameters","type":{"kind":"struct","path":"BatcherVault::_sub_token_out_amount_parameters","fields":[{"name":"amount","type":{"kind":"field"}},{"name":"_round","type":{"kind":"field"}}]}}]},{"kind":"struct","path":"BatcherVault::_add_token_out_amount_abi","fields":[{"name":"parameters","type":{"kind":"struct","path":"BatcherVault::_add_token_out_amount_parameters","fields":[{"name":"enc_c1","type":{"kind":"field"}},{"name":"enc_c2","type":{"kind":"field"}}]}}]},{"kind":"struct","path":"BatcherVault::constructor_abi","fields":[{"name":"parameters","type":{"kind":"struct","path":"BatcherVault::constructor_parameters","fields":[{"name":"admin","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"target","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"token_in","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"token_out","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"relayer","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"bonding_token","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"bonding_amount","type":{"kind":"field"}},{"name":"he_pub_key","type":{"kind":"field"}},{"name":"sk_hash","type":{"kind":"field"}},{"name":"interval","type":{"kind":"field"}},{"name":"he_secret_key","type":{"kind":"field"}}]}}]}]},"globals":{"notes":[{"kind":"tuple","fields":[{"kind":"integer","sign":false,"value":"6810111211111510511678111116101"},{"kind":"string","value":"DepositNote"}]}],"storage":[{"kind":"struct","fields":[{"name":"admin","value":{"kind":"struct","fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"1"}},{"name":"typ","value":{"kind":"string","value":"PublicImmutable<AztecAddress>"}}]}},{"name":"target","value":{"kind":"struct","fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"2"}},{"name":"typ","value":{"kind":"string","value":"SharedImmutable<AztecAddress>"}}]}},{"name":"token_out","value":{"kind":"struct","fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"3"}},{"name":"typ","value":{"kind":"string","value":"SharedImmutable<AztecAddress>"}}]}},{"name":"token_in","value":{"kind":"struct","fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"4"}},{"name":"typ","value":{"kind":"string","value":"SharedImmutable<AztecAddress>"}}]}},{"name":"current_round","value":{"kind":"struct","fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"5"}},{"name":"typ","value":{"kind":"string","value":"PublicMutable<Field>"}}]}},{"name":"batch_relayer","value":{"kind":"struct","fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"6"}},{"name":"typ","value":{"kind":"string","value":"PublicMutable<BatchRelayer>"}}]}},{"name":"rounds","value":{"kind":"struct","fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"7"}},{"name":"typ","value":{"kind":"string","value":"Map<Field, PublicMutable<Round>>"}}]}},{"name":"deposit_notes","value":{"kind":"struct","fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"8"}},{"name":"typ","value":{"kind":"string","value":"Map<AztecAddress, PrivateMutable<DepositNote>>"}}]}}]}]}},"file_map":{"3":{"source":"struct BoundedVec<T, MaxLen> {\n    storage: [T; MaxLen],\n    len: u64,\n}\n\nimpl<T, MaxLen> BoundedVec<T, MaxLen> {\n    pub fn new() -> Self {\n        let zeroed = crate::unsafe::zeroed();\n        BoundedVec { storage: [zeroed; MaxLen], len: 0 }\n    }\n\n    pub fn get(mut self: Self, index: u64) -> T {\n        assert(index as u64 < self.len);\n        self.storage[index]\n    }\n\n    pub fn get_unchecked(mut self: Self, index: u64) -> T {\n        self.storage[index]\n    }\n\n    pub fn push(&mut self, elem: T) {\n        assert(self.len < MaxLen as u64, \"push out of bounds\");\n\n        self.storage[self.len] = elem;\n        self.len += 1;\n    }\n\n    pub fn len(self) -> u64 {\n        self.len\n    }\n\n    pub fn max_len(_self: BoundedVec<T, MaxLen>) -> u64 {\n        MaxLen\n    }\n\n    // This is a intermediate method, while we don't have an\n    // .extend method\n    pub fn storage(self) -> [T; MaxLen] {\n        self.storage\n    }\n\n    pub fn extend_from_array<Len>(&mut self, array: [T; Len]) {\n        let new_len = self.len + array.len();\n        assert(new_len as u64 <= MaxLen as u64, \"extend_from_array out of bounds\");\n        for i in 0..array.len() {\n            self.storage[self.len + i] = array[i];\n        }\n        self.len = new_len;\n    }\n\n    pub fn extend_from_slice(&mut self, slice: [T]) {\n        let new_len = self.len + slice.len();\n        assert(new_len as u64 <= MaxLen as u64, \"extend_from_slice out of bounds\");\n        for i in 0..slice.len() {\n            self.storage[self.len + i] = slice[i];\n        }\n        self.len = new_len;\n    }\n\n    pub fn extend_from_bounded_vec<Len>(&mut self, vec: BoundedVec<T, Len>) {\n        let append_len = vec.len();\n        let new_len = self.len + append_len;\n        assert(new_len as u64 <= MaxLen as u64, \"extend_from_bounded_vec out of bounds\");\n\n        let mut exceeded_len = false;\n        for i in 0..Len {\n            exceeded_len |= i == append_len;\n            if !exceeded_len {\n                self.storage[self.len + i] = vec.get_unchecked(i);\n            }\n        }\n        self.len = new_len;\n    }\n\n    pub fn pop(&mut self) -> T {\n        assert(self.len as u64 > 0);\n        self.len -= 1;\n\n        let elem = self.storage[self.len];\n        self.storage[self.len] = crate::unsafe::zeroed();\n        elem\n    }\n\n    pub fn any<Env>(self, predicate: fn[Env](T) -> bool) -> bool {\n        let mut ret = false;\n        let mut exceeded_len = false;\n        for i in 0..MaxLen {\n            exceeded_len |= i == self.len;\n            if !exceeded_len {\n                ret |= predicate(self.storage[i]);\n            }\n        }\n        ret\n    }\n}\n","path":"std/collections/bounded_vec.nr"},"19":{"source":"// The low and high decomposition of the field modulus\nglobal PLO: Field = 53438638232309528389504892708671455233;\nglobal PHI: Field = 64323764613183177041862057485226039389;\n\nglobal TWO_POW_128: Field = 0x100000000000000000000000000000000;\n\n/// A hint for decomposing a single field into two 16 byte fields.\nunconstrained fn decompose_unsafe(x: Field) -> (Field, Field) {\n    let x_bytes = x.to_le_bytes(32);\n\n    let mut low: Field = 0;\n    let mut high: Field = 0;\n\n    let mut offset = 1;\n    for i in 0..16 {\n        low += (x_bytes[i] as Field) * offset;\n        high += (x_bytes[i + 16] as Field) * offset;\n        offset *= 256;\n    }\n\n    (low, high)\n}\n\n// Assert that (alo > blo && ahi >= bhi) || (alo <= blo && ahi > bhi)\nfn assert_gt_limbs(a: (Field, Field), b: (Field, Field)) {\n    let (alo, ahi) = a;\n    let (blo, bhi) = b;\n    let borrow = lte_unsafe(alo, blo, 16);\n\n    let rlo = alo - blo - 1 + (borrow as Field) * TWO_POW_128;\n    let rhi = ahi - bhi - (borrow as Field);\n\n    rlo.assert_max_bit_size(128);\n    rhi.assert_max_bit_size(128);\n}\n\n/// Decompose a single field into two 16 byte fields.\npub fn decompose(x: Field) -> (Field, Field) {\n    // Take hints of the decomposition\n    let (xlo, xhi) = decompose_unsafe(x);\n\n    // Range check the limbs\n    xlo.assert_max_bit_size(128);\n    xhi.assert_max_bit_size(128);\n\n    // Check that the decomposition is correct\n    assert_eq(x, xlo + TWO_POW_128 * xhi);\n\n    // Assert that the decomposition of P is greater than the decomposition of x\n    assert_gt_limbs((PLO, PHI), (xlo, xhi));\n    (xlo, xhi)\n}\n\nunconstrained fn lt_unsafe(x: Field, y: Field, num_bytes: u32) -> bool {\n    let x_bytes = x.__to_le_radix(256, num_bytes);\n    let y_bytes = y.__to_le_radix(256, num_bytes);\n    let mut x_is_lt = false;\n    let mut done = false;\n    for i in 0..num_bytes {\n        if (!done) {\n            let x_byte = x_bytes[num_bytes - 1 - i];\n            let y_byte = y_bytes[num_bytes - 1 - i];\n            let bytes_match = x_byte == y_byte;\n            if !bytes_match {\n                x_is_lt = x_byte < y_byte;\n                done = true;\n            }\n        }\n    }\n    x_is_lt\n}\n\nunconstrained fn lte_unsafe(x: Field, y: Field, num_bytes: u32) -> bool {\n    lt_unsafe(x, y, num_bytes) | (x == y)\n}\n\npub fn assert_gt(a: Field, b: Field) {\n    // Decompose a and b\n    let a_limbs = decompose(a);\n    let b_limbs = decompose(b);\n\n    // Assert that a_limbs is greater than b_limbs\n    assert_gt_limbs(a_limbs, b_limbs)\n}\n\npub fn assert_lt(a: Field, b: Field) {\n    assert_gt(b, a);\n}\n\npub fn gt(a: Field, b: Field) -> bool {\n    if a == b {\n        false\n    } else if lt_unsafe(a, b, 32) {\n        assert_gt(b, a);\n        false\n    } else {\n        assert_gt(a, b);\n        true\n    }\n}\n\npub fn lt(a: Field, b: Field) -> bool {\n    gt(b, a)\n}\n\nmod tests {\n    // TODO: Allow imports from \"super\"\n    use crate::field::bn254::{decompose_unsafe, decompose, lt_unsafe, assert_gt, gt, lt, TWO_POW_128, lte_unsafe, PLO, PHI};\n\n    #[test]\n    fn check_decompose_unsafe() {\n        assert_eq(decompose_unsafe(TWO_POW_128), (0, 1));\n        assert_eq(decompose_unsafe(TWO_POW_128 + 0x1234567890), (0x1234567890, 1));\n        assert_eq(decompose_unsafe(0x1234567890), (0x1234567890, 0));\n    }\n\n    #[test]\n    fn check_decompose() {\n        assert_eq(decompose(TWO_POW_128), (0, 1));\n        assert_eq(decompose(TWO_POW_128 + 0x1234567890), (0x1234567890, 1));\n        assert_eq(decompose(0x1234567890), (0x1234567890, 0));\n    }\n\n    #[test]\n    fn check_lt_unsafe() {\n        assert(lt_unsafe(0, 1, 16));\n        assert(lt_unsafe(0, 0x100, 16));\n        assert(lt_unsafe(0x100, TWO_POW_128 - 1, 16));\n        assert(!lt_unsafe(0, TWO_POW_128, 16));\n    }\n\n    #[test]\n    fn check_lte_unsafe() {\n        assert(lte_unsafe(0, 1, 16));\n        assert(lte_unsafe(0, 0x100, 16));\n        assert(lte_unsafe(0x100, TWO_POW_128 - 1, 16));\n        assert(!lte_unsafe(0, TWO_POW_128, 16));\n\n        assert(lte_unsafe(0, 0, 16));\n        assert(lte_unsafe(0x100, 0x100, 16));\n        assert(lte_unsafe(TWO_POW_128 - 1, TWO_POW_128 - 1, 16));\n        assert(lte_unsafe(TWO_POW_128, TWO_POW_128, 16));\n    }\n\n    #[test]\n    fn check_assert_gt() {\n        assert_gt(1, 0);\n        assert_gt(0x100, 0);\n        assert_gt((0 - 1), (0 - 2));\n        assert_gt(TWO_POW_128, 0);\n        assert_gt(0 - 1, 0);\n    }\n\n    #[test]\n    fn check_gt() {\n        assert(gt(1, 0));\n        assert(gt(0x100, 0));\n        assert(gt((0 - 1), (0 - 2)));\n        assert(gt(TWO_POW_128, 0));\n        assert(!gt(0, 0));\n        assert(!gt(0, 0x100));\n        assert(gt(0 - 1, 0 - 2));\n        assert(!gt(0 - 2, 0 - 1));\n    }\n\n    #[test]\n    fn check_plo_phi() {\n        assert_eq(PLO + PHI * TWO_POW_128, 0);\n        let p_bytes = crate::field::modulus_le_bytes();\n        let mut p_low: Field = 0;\n        let mut p_high: Field = 0;\n\n        let mut offset = 1;\n        for i in 0..16 {\n            p_low += (p_bytes[i] as Field) * offset;\n            p_high += (p_bytes[i + 16] as Field) * offset;\n            offset *= 256;\n        }\n        assert_eq(p_low, PLO);\n        assert_eq(p_high, PHI);\n    }\n}\n","path":"std/field/bn254.nr"},"20":{"source":"mod bn254;\nuse bn254::lt as bn254_lt;\n\nimpl Field {\n    pub fn to_le_bits(self: Self, bit_size: u32) -> [u1] {\n        crate::assert_constant(bit_size);\n        self.__to_le_bits(bit_size)\n    }\n\n    pub fn to_be_bits(self: Self, bit_size: u32) -> [u1] {\n        crate::assert_constant(bit_size);\n        self.__to_be_bits(bit_size)\n    }\n\n    #[builtin(to_le_bits)]\n    fn __to_le_bits(self, _bit_size: u32) -> [u1] {}\n\n    #[builtin(to_be_bits)]\n    fn __to_be_bits(self, bit_size: u32) -> [u1] {}\n\n    #[builtin(apply_range_constraint)]\n    fn __assert_max_bit_size(self, bit_size: u32) {}\n\n    pub fn assert_max_bit_size(self: Self, bit_size: u32) {\n        crate::assert_constant(bit_size);\n        assert(bit_size < modulus_num_bits() as u32);\n        self.__assert_max_bit_size(bit_size);\n    }\n\n    pub fn to_le_bytes(self: Self, byte_size: u32) -> [u8] {\n        self.to_le_radix(256, byte_size)\n    }\n\n    pub fn to_be_bytes(self: Self, byte_size: u32) -> [u8] {\n        self.to_be_radix(256, byte_size)\n    }\n\n    pub fn to_le_radix(self: Self, radix: u32, result_len: u32) -> [u8] {\n        crate::assert_constant(radix);\n        crate::assert_constant(result_len);\n        self.__to_le_radix(radix, result_len)\n    }\n\n    pub fn to_be_radix(self: Self, radix: u32, result_len: u32) -> [u8] {\n        crate::assert_constant(radix);\n        crate::assert_constant(result_len);\n        self.__to_be_radix(radix, result_len)\n    }\n\n    // decompose `_self` into a `_result_len` vector over the `_radix` basis\n    // `_radix` must be less than 256\n    #[builtin(to_le_radix)]\n    fn __to_le_radix(self, radix: u32, result_len: u32) -> [u8] {}\n\n    #[builtin(to_be_radix)]\n    fn __to_be_radix(self, radix: u32, result_len: u32) -> [u8] {}\n\n    // Returns self to the power of the given exponent value.\n    // Caution: we assume the exponent fits into 32 bits\n    // using a bigger bit size impacts negatively the performance and should be done only if the exponent does not fit in 32 bits\n    pub fn pow_32(self, exponent: Field) -> Field {\n        let mut r: Field = 1;\n        let b = exponent.to_le_bits(32);\n\n        for i in 1..33 {\n            r *= r;\n            r = (b[32-i] as Field) * (r * self) + (1 - b[32-i] as Field) * r;\n        }\n        r\n    }\n\n    // Parity of (prime) Field element, i.e. sgn0(x mod p) = 0 if x ∈ {0, ..., p-1} is even, otherwise sgn0(x mod p) = 1.\n    pub fn sgn0(self) -> u1 {\n        self as u1\n    }\n\n    pub fn lt(self, another: Field) -> bool {\n        if crate::compat::is_bn254() {\n            bn254_lt(self, another)\n        } else {\n            lt_fallback(self, another)\n        }\n    }\n}\n\n#[builtin(modulus_num_bits)]\npub fn modulus_num_bits() -> u64 {}\n\n#[builtin(modulus_be_bits)]\npub fn modulus_be_bits() -> [u1] {}\n\n#[builtin(modulus_le_bits)]\npub fn modulus_le_bits() -> [u1] {}\n\n#[builtin(modulus_be_bytes)]\npub fn modulus_be_bytes() -> [u8] {}\n\n#[builtin(modulus_le_bytes)]\npub fn modulus_le_bytes() -> [u8] {}\n// Convert a 32 byte array to a field element by modding\npub fn bytes32_to_field(bytes32: [u8; 32]) -> Field {\n    // Convert it to a field element\n    let mut v = 1;\n    let mut high = 0 as Field;\n    let mut low = 0 as Field;\n\n    for i in 0..16 {\n        high = high + (bytes32[15 - i] as Field) * v;\n        low = low + (bytes32[16 + 15 - i] as Field) * v;\n        v = v * 256;\n    }\n    // Abuse that a % p + b % p = (a + b) % p and that low < p\n    low + high * v\n}\n\nfn lt_fallback(x: Field, y: Field) -> bool {\n    let num_bytes = (modulus_num_bits() as u32 + 7) / 8;\n    let x_bytes = x.to_le_bytes(num_bytes);\n    let y_bytes = y.to_le_bytes(num_bytes);\n    let mut x_is_lt = false;\n    let mut done = false;\n    for i in 0..num_bytes {\n        if (!done) {\n            let x_byte = x_bytes[num_bytes - 1 - i] as u8;\n            let y_byte = y_bytes[num_bytes - 1 - i] as u8;\n            let bytes_match = x_byte == y_byte;\n            if !bytes_match {\n                x_is_lt = x_byte < y_byte;\n                done = true;\n            }\n        }\n    }\n    x_is_lt\n}\n\n","path":"std/field.nr"},"30":{"source":"mod poseidon;\nmod mimc;\nmod poseidon2;\nmod pedersen;\n\nuse crate::default::Default;\nuse crate::uint128::U128;\n\n#[foreign(sha256)]\n// docs:start:sha256\npub fn sha256<N>(input: [u8; N]) -> [u8; 32]\n// docs:end:sha256\n{}\n\n#[foreign(sha256)]\n// docs:start:sha256_slice\npub fn sha256_slice(input: [u8]) -> [u8; 32]\n// docs:end:sha256_slice\n{}\n\n#[foreign(blake2s)]\n// docs:start:blake2s\npub fn blake2s<N>(input: [u8; N]) -> [u8; 32]\n// docs:end:blake2s\n{}\n\n#[foreign(blake2s)]\n// docs:start:blake2s_slice\npub fn blake2s_slice(input: [u8]) -> [u8; 32]\n// docs:end:blake2s_slice\n{}\n\n#[foreign(blake3)]\n// docs:start:blake3\npub fn blake3<N>(input: [u8; N]) -> [u8; 32]\n// docs:end:blake3\n{}\n\n#[foreign(blake3)]\n// docs:start:blake3_slice\npub fn blake3_slice(input: [u8]) -> [u8; 32]\n// docs:end:blake3_slice\n{}\n\n// docs:start:pedersen_commitment\nstruct PedersenPoint {\n   x : Field,\n   y : Field,\n}\n\npub fn pedersen_commitment<N>(input: [Field; N]) -> PedersenPoint {\n    // docs:end:pedersen_commitment\n    pedersen_commitment_with_separator(input, 0)\n}\n\n// docs:start:pedersen_commitment_slice\npub fn pedersen_commitment_slice(input: [Field]) -> PedersenPoint {\n    pedersen_commitment_with_separator_slice(input, 0)\n}\n// docs:end:pedersen_commitment_slice\n\n#[foreign(pedersen_commitment)]\npub fn __pedersen_commitment_with_separator<N>(input: [Field; N], separator: u32) -> [Field; 2] {}\n\n#[foreign(pedersen_commitment)]\npub fn __pedersen_commitment_with_separator_slice(input: [Field], separator: u32) -> [Field; 2] {}\n\npub fn pedersen_commitment_with_separator<N>(input: [Field; N], separator: u32) -> PedersenPoint {\n    let values = __pedersen_commitment_with_separator(input, separator);\n    PedersenPoint { x: values[0], y: values[1] }\n}\n\npub fn pedersen_commitment_with_separator_slice(input: [Field], separator: u32) -> PedersenPoint {\n    let values = __pedersen_commitment_with_separator_slice(input, separator);\n    PedersenPoint { x: values[0], y: values[1] }\n}\n\n// docs:start:pedersen_hash\npub fn pedersen_hash<N>(input: [Field; N]) -> Field\n// docs:end:pedersen_hash\n{\n    pedersen_hash_with_separator(input, 0)\n}\n\n// docs:start:pedersen_hash_slice\npub fn pedersen_hash_slice(input: [Field]) -> Field\n// docs:end:pedersen_hash_slice\n{\n    pedersen_hash_with_separator_slice(input, 0)\n}\n\n#[foreign(pedersen_hash)]\npub fn pedersen_hash_with_separator<N>(input: [Field; N], separator: u32) -> Field {}\n\n#[foreign(pedersen_hash)]\npub fn pedersen_hash_with_separator_slice(input: [Field], separator: u32) -> Field {}\n\npub fn hash_to_field(inputs: [Field]) -> Field {\n    let mut inputs_as_bytes = &[];\n\n    for input in inputs {\n        let input_bytes = input.to_le_bytes(32);\n        for i in 0..32 {\n            inputs_as_bytes = inputs_as_bytes.push_back(input_bytes[i]);\n        }\n    }\n\n    let hashed_input = blake2s_slice(inputs_as_bytes);\n    crate::field::bytes32_to_field(hashed_input)\n}\n\n#[foreign(keccak256)]\n// docs:start:keccak256\npub fn keccak256<N>(input: [u8; N], message_size: u32) -> [u8; 32]\n// docs:end:keccak256\n{}\n\n#[foreign(keccak256)]\n// docs:start:keccak256_slice\npub fn keccak256_slice(input: [u8], message_size: u32) -> [u8; 32]\n// docs:end:keccak256_slice\n{}\n\n#[foreign(poseidon2_permutation)]\npub fn poseidon2_permutation<N>(_input: [Field; N], _state_length: u32) -> [Field; N] {}\n\n#[foreign(sha256_compression)]\npub fn sha256_compression(_input: [u32; 16], _state: [u32; 8]) -> [u32; 8] {}\n\n// Generic hashing support. \n// Partially ported and impacted by rust.\n\n// Hash trait shall be implemented per type.\ntrait Hash{\n    fn hash<H>(self, state: &mut H) where H: Hasher;\n}\n\n// Hasher trait shall be implemented by algorithms to provide hash-agnostic means.\n// TODO: consider making the types generic here ([u8], [Field], etc.)\ntrait Hasher{\n    fn finish(self) -> Field;\n    \n    fn write(&mut self, input: [Field]);\n}\n\n// BuildHasher is a factory trait, responsible for production of specific Hasher.\ntrait BuildHasher<H> where H: Hasher{\n    fn build_hasher(self) -> H;\n}\n\nstruct BuildHasherDefault<H>;\n\nimpl<H> BuildHasher<H> for BuildHasherDefault<H>\nwhere \n    H: Hasher + Default\n{\n    fn build_hasher(_self: Self) -> H{\n        H::default()\n    }\n}\n\nimpl<H> Default for BuildHasherDefault<H>\nwhere \n    H: Hasher + Default\n{\n    fn default() -> Self{\n        BuildHasherDefault{}\n    }    \n}\n\nimpl Hash for Field {\n    fn hash<H>(self, state: &mut H) where H: Hasher{\n        H::write(state, &[self]);\n    }\n}\n\nimpl Hash for u8 {\n    fn hash<H>(self, state: &mut H) where H: Hasher{\n        H::write(state, &[self as Field]);\n    }\n}\n\nimpl Hash for u32 {\n    fn hash<H>(self, state: &mut H) where H: Hasher{\n        H::write(state, &[self as Field]);\n    }\n}\n\nimpl Hash for u64 {\n    fn hash<H>(self, state: &mut H) where H: Hasher{\n        H::write(state, &[self as Field]);\n    }\n}\n\nimpl Hash for i8 {\n    fn hash<H>(self, state: &mut H) where H: Hasher{\n        H::write(state, &[self as Field]);\n    }\n}\n\nimpl Hash for i32 {\n    fn hash<H>(self, state: &mut H) where H: Hasher{\n        H::write(state, &[self as Field]);\n    }\n}\n\nimpl Hash for i64 {\n    fn hash<H>(self, state: &mut H) where H: Hasher{\n        H::write(state, &[self as Field]);\n    }\n}\n\nimpl Hash for bool {\n    fn hash<H>(self, state: &mut H) where H: Hasher{\n        H::write(state, &[self as Field]);\n    }\n}\n\nimpl Hash for () {\n    fn hash<H>(_self: Self, _state: &mut H) where H: Hasher {}\n}\n\nimpl Hash for U128 {\n    fn hash<H>(self, state: &mut H) where H: Hasher{\n        H::write(state, &[self.lo as Field, self.hi as Field]);\n    }\n}\n\nimpl<T, N> Hash for [T; N] where T: Hash {\n    fn hash<H>(self, state: &mut H) where H: Hasher{\n        for elem in self {\n            elem.hash(state);\n        }\n    }\n}\n\nimpl<T> Hash for [T] where T: Hash {\n    fn hash<H>(self, state: &mut H) where H: Hasher{\n        self.len().hash(state);\n        for elem in self {\n            elem.hash(state);\n        }\n    }\n}\n\nimpl<A, B> Hash for (A, B) where A: Hash, B: Hash {\n    fn hash<H>(self, state: &mut H) where H: Hasher{\n        self.0.hash(state);\n        self.1.hash(state);\n    }\n}\n\nimpl<A, B, C> Hash for (A, B, C) where A: Hash, B: Hash, C: Hash {\n    fn hash<H>(self, state: &mut H) where H: Hasher{\n        self.0.hash(state);\n        self.1.hash(state);\n        self.2.hash(state);\n    }\n}\n\nimpl<A, B, C, D> Hash for (A, B, C, D) where A: Hash, B: Hash, C: Hash, D: Hash {\n    fn hash<H>(self, state: &mut H) where H: Hasher{\n        self.0.hash(state);\n        self.1.hash(state);\n        self.2.hash(state);\n        self.3.hash(state);\n    }\n}\n\nimpl<A, B, C, D, E> Hash for (A, B, C, D, E) where A: Hash, B: Hash, C: Hash, D: Hash, E: Hash {\n    fn hash<H>(self, state: &mut H) where H: Hasher{\n        self.0.hash(state);\n        self.1.hash(state);\n        self.2.hash(state);\n        self.3.hash(state);\n        self.4.hash(state);\n    }\n}\n","path":"std/hash.nr"},"33":{"source":"// Regular merkle tree means a append-only merkle tree (Explain why this is the only way to have privacy and alternatives if you don't want it)\n// Currently we assume that it is a binary tree, so depth k implies a width of 2^k\n// XXX: In the future we can add an arity parameter\n// Returns the merkle root of the tree from the provided leaf, its hashpath, using a pedersen hash function.\npub fn compute_merkle_root<N>(leaf: Field, index: Field, hash_path: [Field; N]) -> Field {\n    let n = hash_path.len();\n    let index_bits = index.to_le_bits(n as u32);\n    let mut current = leaf;\n    for i in 0..n {\n        let path_bit = index_bits[i] as bool;\n        let (hash_left, hash_right) = if path_bit {\n            (hash_path[i], current)\n        } else {\n            (current, hash_path[i])\n        };\n        current = crate::hash::pedersen_hash([hash_left, hash_right]);\n    }\n    current\n}\n","path":"std/merkle.nr"},"35":{"source":"use crate::hash::{Hash, Hasher};\nuse crate::cmp::{Ordering, Ord, Eq};\nuse crate::default::Default;\n\nstruct Option<T> {\n    _is_some: bool,\n    _value: T,\n}\n\nimpl<T> Option<T> {\n    /// Constructs a None value\n    pub fn none() -> Self {\n        Self { _is_some: false, _value: crate::unsafe::zeroed() }\n    }\n\n    /// Constructs a Some wrapper around the given value\n    pub fn some(_value: T) -> Self {\n        Self { _is_some: true, _value }\n    }\n\n    /// True if this Option is None\n    pub fn is_none(self) -> bool {\n        !self._is_some\n    }\n\n    /// True if this Option is Some\n    pub fn is_some(self) -> bool {\n        self._is_some\n    }\n\n    /// Asserts `self.is_some()` and returns the wrapped value.\n    pub fn unwrap(self) -> T {\n        assert(self._is_some);\n        self._value\n    }\n\n    /// Returns the inner value without asserting `self.is_some()`\n    /// Note that if `self` is `None`, there is no guarantee what value will be returned,\n    /// only that it will be of type `T`.\n    pub fn unwrap_unchecked(self) -> T {\n        self._value\n    }\n\n    /// Returns the wrapped value if `self.is_some()`. Otherwise, returns the given default value.\n    pub fn unwrap_or(self, default: T) -> T {\n        if self._is_some { self._value } else { default }\n    }\n\n    /// Returns the wrapped value if `self.is_some()`. Otherwise, calls the given function to return\n    /// a default value.\n    pub fn unwrap_or_else<Env>(self, default: fn[Env]() -> T) -> T {\n        if self._is_some {\n            self._value\n        } else {\n            default()\n        }\n    }\n\n    /// Asserts `self.is_some()` with a provided custom message and returns the contained `Some` value\n    fn expect<N, MessageTypes>(self, message: fmtstr<N, MessageTypes>) -> T {\n        assert(self.is_some(), message);\n        self._value\n    }\n\n    /// If self is `Some(x)`, this returns `Some(f(x))`. Otherwise, this returns `None`.\n    pub fn map<U, Env>(self, f: fn[Env](T) -> U) -> Option<U> {\n        if self._is_some {\n            Option::some(f(self._value))\n        } else {\n            Option::none()\n        }\n    }\n\n    /// If self is `Some(x)`, this returns `f(x)`. Otherwise, this returns the given default value.\n    pub fn map_or<U, Env>(self, default: U, f: fn[Env](T) -> U) -> U {\n        if self._is_some {\n            f(self._value)\n        } else {\n            default\n        }\n    }\n\n    /// If self is `Some(x)`, this returns `f(x)`. Otherwise, this returns `default()`.\n    pub fn map_or_else<U, Env1, Env2>(self, default: fn[Env1]() -> U, f: fn[Env2](T) -> U) -> U {\n        if self._is_some {\n            f(self._value)\n        } else {\n            default()\n        }\n    }\n\n    /// Returns None if self is None. Otherwise, this returns `other`.\n    pub fn and(self, other: Self) -> Self {\n        if self.is_none() {\n            Option::none()\n        } else {\n            other\n        }\n    }\n\n    /// If self is None, this returns None. Otherwise, this calls the given function\n    /// with the Some value contained within self, and returns the result of that call.\n    ///\n    /// In some languages this function is called `flat_map` or `bind`.\n    pub fn and_then<U, Env>(self, f: fn[Env](T) -> Option<U>) -> Option<U> {\n        if self._is_some {\n            f(self._value)\n        } else {\n            Option::none()\n        }\n    }\n\n    /// If self is Some, return self. Otherwise, return `other`.\n    pub fn or(self, other: Self) -> Self {\n        if self._is_some { self } else { other }\n    }\n\n    /// If self is Some, return self. Otherwise, return `default()`.\n    pub fn or_else<U, Env>(self, default: fn[Env]() -> Self) -> Self {\n        if self._is_some { self } else { default() }\n    }\n\n    // If only one of the two Options is Some, return that option.\n    // Otherwise, if both options are Some or both are None, None is returned.\n    pub fn xor(self, other: Self) -> Self {\n        if self._is_some {\n            if other._is_some { Option::none() } else { self }\n        } else if other._is_some {\n            other\n        } else {\n            Option::none()\n        }\n    }\n\n    /// Returns `Some(x)` if self is `Some(x)` and `predicate(x)` is true.\n    /// Otherwise, this returns `None`\n    pub fn filter<Env>(self, predicate: fn[Env](T) -> bool) -> Self {\n        if self._is_some {\n            if predicate(self._value) {\n                self\n            } else {\n                Option::none()\n            }\n        } else {\n            Option::none()\n        }\n    }\n\n    /// Flattens an Option<Option<T>> into a Option<T>.\n    /// This returns None if the outer Option is None. Otherwise, this returns the inner Option.\n    pub fn flatten(option: Option<Option<T>>) -> Option<T> {\n        if option._is_some {\n            option._value\n        } else {\n            Option::none()\n        }\n    }\n}\n\nimpl<T> Default for Option<T> {\n    fn default() -> Self {\n        Option::none()\n    }\n}\n\nimpl<T> Eq for Option<T> where T: Eq {\n    fn eq(self, other: Self) -> bool {\n        if self._is_some == other._is_some {\n            if self._is_some {\n                self._value == other._value\n            } else {\n                true\n            }\n        } else {\n            false\n        }\n    }\n}\n\nimpl<T> Hash for Option<T> where T: Hash {\n    fn hash<H>(self, state: &mut H) where H: Hasher {\n        self._is_some.hash(state);\n        if self._is_some {\n            self._value.hash(state);\n        }\n    }\n}\n\n// For this impl we're declaring Option::none < Option::some\nimpl<T> Ord for Option<T> where T: Ord {\n    fn cmp(self, other: Self) -> Ordering {\n        if self._is_some {\n            if other._is_some {\n                self._value.cmp(other._value)\n            } else {\n                Ordering::greater()\n            }\n        } else {\n            if other._is_some {\n                Ordering::less()\n            } else {\n                Ordering::equal()\n            }\n        }\n    }\n}\n","path":"std/option.nr"},"47":{"source":"// docs:start:interfaces\nuse dep::aztec::prelude::{FunctionSelector, AztecAddress, EthAddress, PrivateContext};\nuse dep::aztec::context::{PublicContext, gas::GasOpts};\n\nstruct Token {\n  address: AztecAddress,\n}\n\nimpl Token {\n    pub fn at(address: AztecAddress) -> Self {\n        Self { address }\n    }\n\n    pub fn transfer_public(\n        self: Self,\n        context: &mut PublicContext,\n        from: AztecAddress,\n        to: AztecAddress,\n        amount: Field,\n        nonce: Field\n    ) {\n        context.call_public_function(\n            self.address,\n            FunctionSelector::from_signature(\"transfer_public((Field),(Field),Field,Field)\"),\n            [from.to_field(), to.to_field(), amount, nonce],\n            GasOpts::default()\n        ).assert_empty();\n    }\n\n    pub fn shield(\n        self: Self,\n        context: &mut PublicContext,\n        from: AztecAddress,\n        amount: Field,\n        secret_hash: Field,\n        nonce: Field\n    ) {\n        context.call_public_function(\n            self.address,\n            FunctionSelector::from_signature(\"shield((Field),Field,Field,Field)\"),\n            [from.to_field(), amount, secret_hash, nonce],\n            GasOpts::default()\n        ).assert_empty();\n    }\n    \n    pub fn unshield(\n        self: Self,\n        context: &mut PrivateContext,\n        from: AztecAddress,\n        to: AztecAddress,\n        amount: Field,\n        nonce: Field\n    ) {\n        let _ = context.call_private_function(\n            self.address,\n            FunctionSelector::from_signature(\"unshield((Field),(Field),Field,Field)\"),\n            [from.to_field(), to.to_field(), amount, nonce]\n        );\n    }\n\n    pub fn transfer(\n        self: Self,\n        context: &mut PrivateContext,\n        from: AztecAddress,\n        to: AztecAddress,\n        amount: Field,\n        nonce: Field\n    ) {\n        let _ret = context.call_private_function(\n            self.address,\n            FunctionSelector::from_signature(\"transfer((Field),(Field),Field,Field)\"),\n            [from.to_field(), to.to_field(), amount, nonce]\n        );\n    }\n\n    // pub fn balance_of_public(\n    //     self: Self,\n    //     context: &mut PublicContext,\n    //     owner: AztecAddress\n    // ) -> Field {\n    //     let _ret = context.call_public_function(\n    //         self.address,\n    //         FunctionSelector::from_signature(\"balance_of_public((Field))\"),\n    //         [owner.to_field()],\n    //          GasOpts::default()\n    //     );\n    //     _ret[0]\n    // }\n}\n\nstruct Uniswap {\n  address: AztecAddress,\n}\n\nimpl Uniswap {\n    pub fn at(address: AztecAddress) -> Self {\n        Self { address }\n    }\n\n    pub fn swap_public(\n        self: Self,\n        context: &mut PublicContext,\n        sender: AztecAddress,\n        input_asset_bridge: AztecAddress,\n        input_amount: Field,\n        output_asset_bridge: AztecAddress,\n        nonce_for_transfer_approval: Field,\n        uniswap_fee_tier: Field,\n        minimum_output_amount: Field,\n        recipient: AztecAddress,\n        secret_hash_for_L1_to_l2_message: Field,\n        caller_on_L1: EthAddress,\n        nonce_for_swap_approval: Field\n    ) {\n        let _ = context.call_public_function(\n            self.address,\n            FunctionSelector::from_signature(\"swap_public((Field),(Field),Field,(Field),Field,Field,Field,(Field),Field,(Field),Field)\"),\n            [\n                sender.to_field(), \n                input_asset_bridge.to_field(), \n                input_amount, \n                output_asset_bridge.to_field(), \n                nonce_for_transfer_approval,\n                uniswap_fee_tier,\n                minimum_output_amount,\n                recipient.to_field(),\n                secret_hash_for_L1_to_l2_message,\n                caller_on_L1.to_field(),\n                nonce_for_swap_approval\n            ],\n             GasOpts::default()\n        );\n    }\n\n    // pub fn swap_public(\n    //     self: Self,\n    //     context: &mut PrivateContext,\n    //     sender: AztecAddress,\n    //     input_asset_bridge: AztecAddress,\n    //     input_amount: Field,\n    //     output_asset_bridge: AztecAddress,\n    //     nonce_for_transfer_approval: Field,\n    //     uniswap_fee_tier: Field,\n    //     minimum_output_amount: Field,\n    //     recipient: AztecAddress,\n    //     secret_hash_for_L1_to_l2_message: Field,\n    //     caller_on_L1: EthAddress,\n    //     nonce_for_swap_approval: Field\n    // ) {\n    //     let _ = context.call_public_function(\n    //         self.address,\n    //         FunctionSelector::from_signature(\"swap_public((Field),(Field),Field,(Field),Field,Field,Field,(Field),Field,(Field),Field)\"),\n    //         [\n    //             sender.to_field(), \n    //             input_asset_bridge.to_field(), \n    //             input_amount, \n    //             output_asset_bridge.to_field(), \n    //             nonce_for_transfer_approval,\n    //             uniswap_fee_tier,\n    //             minimum_output_amount,\n    //             recipient.to_field(),\n    //             secret_hash_for_L1_to_l2_message,\n    //             caller_on_L1.to_field(),\n    //             nonce_for_swap_approval\n    //         ],\n    //          GasOpts::default()\n    //     );\n    // }\n\n    // pub fn claim_public(\n\n    // ) {\n    //     let _ = context.call_public_function(\n    //         self.address,\n    //         FunctionSelector::from_signature(\"claim_public((Field),(Field),Field,(Field),Field,Field,Field,(Field),Field,(Field),Field)\"),\n    //         [\n    //             sender.to_field(), \n    //             input_asset_bridge.to_field(), \n    //             input_amount, \n    //             output_asset_bridge.to_field(), \n    //             nonce_for_transfer_approval,\n    //             uniswap_fee_tier,\n    //             minimum_output_amount,\n    //             recipient.to_field(),\n    //             secret_hash_for_L1_to_l2_message,\n    //             caller_on_L1.to_field(),\n    //             nonce_for_swap_approval\n    //         ],\n    //          GasOpts::default()\n    //     );  \n    // }\n}\n// docs:end:interfaces\n","path":"/Users/jack-sw/Codes/abstract/dex-build/token-bridge-uniswap/packages/aztec-contracts/batcher_contract/src/interfaces.nr"},"48":{"source":"use dep::aztec::protocol_types::{address::AztecAddress, traits::{Serialize, Deserialize}};\n\nglobal RELAYER_SERIALIZED_LEN: Field = 7;\n\nstruct BatchRelayer {\n    relayer: AztecAddress, \n    bonding_token: AztecAddress, \n    bonding_amount: Field, // say 50-100k dai\n    he_pub_key: Field,\n    sk_hash: Field,\n    last_timestamp: Field,\n    interval: Field,\n}\n\nimpl BatchRelayer {\n    fn new(\n        relayer: AztecAddress, \n        bonding_token: AztecAddress,\n        bonding_amount: Field,\n        he_pub_key: Field,\n        sk_hash: Field, \n        last_timestamp: Field,\n        interval: Field,\n    ) -> Self {\n        BatchRelayer {\n            relayer,\n            bonding_token,\n            bonding_amount,\n            he_pub_key,\n            sk_hash,\n            last_timestamp,\n            interval\n        }\n    }\n}\n\nimpl Deserialize<RELAYER_SERIALIZED_LEN> for BatchRelayer {\n    fn deserialize(fields: [Field; RELAYER_SERIALIZED_LEN]) -> Self {\n        BatchRelayer { \n            relayer: AztecAddress::from_field(fields[0]),\n            bonding_token: AztecAddress::from_field(fields[1]),\n            bonding_amount: fields[2],\n            he_pub_key: fields[3],\n            sk_hash: fields[4],\n            last_timestamp: fields[5],\n            interval: fields[6],\n         }\n    }\n}\n\nimpl Serialize<RELAYER_SERIALIZED_LEN> for BatchRelayer {\n    fn serialize(self) -> [Field; RELAYER_SERIALIZED_LEN] {\n        [\n            self.relayer.to_field(), \n            self.bonding_token.to_field(),\n            self.bonding_amount,\n            self.he_pub_key,\n            self.sk_hash,\n            self.last_timestamp,\n            self.interval,\n        ]\n    }\n}\n","path":"/Users/jack-sw/Codes/abstract/dex-build/token-bridge-uniswap/packages/aztec-contracts/batcher_contract/src/relayer.nr"},"49":{"source":"use dep::aztec::protocol_types::{address::AztecAddress, traits::{Serialize, Deserialize}};\n\n\nglobal ROUND_SERIALIZED_LEN: Field = 6;\n\nstruct Round {\n    token_in_amount: Field,\n    token_out_amount_cancelled: Field,\n    token_out_amount: Field,\n    encrypted_token_out_amount: [Field; 2], // [c1, c2]\n    executed: bool,\n}\n\nimpl Round {\n    fn get_encrypted_amount(self) -> (Field, Field) {\n        (\n            self.encrypted_token_out_amount[0],\n            self.encrypted_token_out_amount[1]\n        )\n    }\n}\n\n\nimpl Deserialize<ROUND_SERIALIZED_LEN> for Round {\n    fn deserialize(fields: [Field; ROUND_SERIALIZED_LEN]) -> Self {\n        let mut encrypted_token_out_amount: [Field;2] = [0;2];\n        encrypted_token_out_amount[0] = fields[4];\n        encrypted_token_out_amount[1] = fields[5];\n\n        Round { \n            token_in_amount: fields[0],\n            token_out_amount_cancelled: fields[1],\n            token_out_amount: fields[2],\n            encrypted_token_out_amount,\n            executed: fields[5] as bool\n         }\n    }\n}\n\nimpl Serialize<ROUND_SERIALIZED_LEN> for Round {\n    fn serialize(self) -> [Field; ROUND_SERIALIZED_LEN] {\n        [\n            self.token_in_amount,\n            self.token_out_amount_cancelled,\n            self.token_out_amount,\n            self.encrypted_token_out_amount[0],\n            self.encrypted_token_out_amount[1],\n            self.executed as Field,\n        ]\n    }\n}\n\n","path":"/Users/jack-sw/Codes/abstract/dex-build/token-bridge-uniswap/packages/aztec-contracts/batcher_contract/src/round.nr"},"50":{"source":"use dep::aztec::prelude::{AztecAddress, NoteInterface, NoteHeader, PrivateContext, emit_encrypted_log};\nuse dep::aztec::{\n    note::{utils::compute_note_hash_for_consumption},\n    oracle::{nullifier_key::get_nullifier_secret_key, get_public_key::get_public_key},\n    hash::pedersen_hash, protocol_types::traits::Empty\n};\n\nglobal DEPOSIT_NOTE_LEN: Field = 3;\n\n#[aztec(note)]\nstruct DepositNote {\n    round: Field,\n    amount_out: Field,\n    owner: AztecAddress,\n}\n\nimpl DepositNote {\n    pub fn new(\n        round: Field,\n        amount_out: Field,\n        owner: AztecAddress\n    ) -> Self {\n        DepositNote { \n            round,\n            amount_out, \n            owner,\n            header: NoteHeader::empty()\n        }\n    }\n\n    pub fn empty() -> Self {\n        DepositNote::new(\n            0,\n            0,\n            AztecAddress::from_field(0),\n        )\n    }\n}\n\nimpl NoteInterface<DEPOSIT_NOTE_LEN> for DepositNote {\n    fn compute_nullifier(self, context: &mut PrivateContext) -> Field {\n        let note_hash_for_nullify = compute_note_hash_for_consumption(self);\n        let secret = context.request_nullifier_secret_key(self.owner);\n        pedersen_hash([\n            note_hash_for_nullify,\n            secret.high,\n            secret.low,\n        ],0)\n    }\n\n    fn compute_nullifier_without_context(self) -> Field {\n        let note_hash_for_nullify = compute_note_hash_for_consumption(self);\n        let secret = get_nullifier_secret_key(self.owner);\n        pedersen_hash([\n            note_hash_for_nullify,\n            secret.high,\n            secret.low,\n        ],0)\n    }\n\n    // Broadcasts the note as an encrypted log on L1.\n    fn broadcast(self, context: &mut PrivateContext, slot: Field) {\n        let encryption_pub_key = get_public_key(self.owner);\n        emit_encrypted_log(\n            context,\n            (*context).this_address(),\n            slot,\n            Self::get_note_type_id(),\n            encryption_pub_key,\n            self.serialize_content(),\n        );\n    }\n}\n","path":"/Users/jack-sw/Codes/abstract/dex-build/token-bridge-uniswap/packages/aztec-contracts/batcher_contract/src/deposit_note.nr"},"51":{"source":"use dep::noir_elgamal::elgamal::standard_fe;\n\nglobal gen: Field = 3618502788666131106986593281521497120414687020801267626233049500247285301248;\n\n    fn encrypt(\n        amount: Field,\n        pub_key: Field,\n        rand: Field\n    ) -> (Field, Field) {\n\n        let (c1, c2) = standard_fe::single_standard_encryption_fe(\n            gen, \n            pub_key, \n            amount,\n            rand\n        );\n\n        (c1, c2)\n    }\n\n    fn add(\n        c1_1: Field, \n        c2_1: Field,\n        c1_2: Field, \n        c2_2: Field) -> (Field, Field) \n    {\n        (c1_1*c1_2, c2_1*c2_2)\n    }\n\n    fn decrypt(\n        c1: Field,\n        c2: Field,\n        x: Field\n    ) -> Field {\n        standard_fe::single_decryption_fe(c1, c2, x)\n    }\n\n    fn validate_keypair(\n        he_pub_key:Field, \n        he_secret_key:Field\n    ) -> pub bool {\n        let ret = he_secret_key.pow_32(gen) == he_pub_key;\n        ret\n    }","path":"/Users/jack-sw/Codes/abstract/dex-build/token-bridge-uniswap/packages/aztec-contracts/batcher_contract/src/elgamal.nr"},"52":{"source":"mod deposit_note;\nmod interfaces;\nmod relayer;\nmod round;\nmod elgamal;\n\ncontract BatcherVault {\n    use dep::aztec::prelude::{\n        AztecAddress, EthAddress, FunctionSelector, NoteHeader, NoteGetterOptions, NoteViewerOptions,\n        Map, PublicMutable, PublicImmutable, PrivateMutable, SharedImmutable\n    };\n    use dep::aztec::{note::note_getter_options::Comparator, \n        context::{Context, PrivateContext, PublicContext, gas::GasOpts}\n    };\n    \n    // interfaces\n    use crate::interfaces::{Token, Uniswap};\n\n    // note\n    use crate::deposit_note::{DepositNote, DEPOSIT_NOTE_LEN};\n\n    // type \n    use crate::relayer::{BatchRelayer, RELAYER_SERIALIZED_LEN};\n    use crate::round::{Round, ROUND_SERIALIZED_LEN};\n    \n    // libs\n    use crate::elgamal;\n\n    #[aztec(storage)]\n    struct Storage {\n        admin: PublicImmutable<AztecAddress>, // admin\n        target: SharedImmutable<AztecAddress>, // amm or uniswap connect\n        token_out: SharedImmutable<AztecAddress>, // token sold e.g. dai\n        token_in: SharedImmutable<AztecAddress>, // token purchased e.g. eth\n        current_round: PublicMutable<Field>,\n        batch_relayer: PublicMutable<BatchRelayer>,\n        rounds: Map<Field, PublicMutable<Round>>,\n        deposit_notes: Map<AztecAddress, PrivateMutable<DepositNote>>, \n    }\n\n    impl Storage {\n      fn init(context: Context) -> Self {\n        Storage {\n            admin: PublicImmutable::new(context, 1),\n            target: SharedImmutable::new(context, 2),\n            token_out: SharedImmutable::new(context, 3),\n            token_in: SharedImmutable::new(context, 4),\n            current_round: PublicMutable::new(context, 5),\n            batch_relayer: PublicMutable::new(context, 6),\n            rounds: Map::new(context, 7, |context, slot| {\n                    PublicMutable::new(context, slot)\n                },\n            ),\n            deposit_notes: Map::new(context, 8,|context, slot| {\n                    PrivateMutable::new(context, slot)\n               },\n            ),\n        }\n      }\n    }\n\n    #[aztec(private)]\n    #[aztec(initializer)]\n    fn constructor(\n        admin: AztecAddress, \n        target:AztecAddress, \n        token_in:AztecAddress, \n        token_out:AztecAddress, \n        relayer: AztecAddress,\n        bonding_token: AztecAddress, \n        bonding_amount: Field,\n        he_pub_key: Field,\n        sk_hash: Field,\n        interval: Field,\n        he_secret_key: Field\n    ) {\n        // should put asserts to validate params\n        storage.admin.initialize(admin);\n        storage.target.initialize(target);\n        storage.token_in.initialize(token_in);\n        storage.token_out.initialize(token_out);\n\n        storage.current_round.write(1);\n\n        // validate that hash(new_he_secret_key) == sk_hash\n        let computed_sk_hash = dep::std::hash::pedersen_hash([he_secret_key]);\n        assert(sk_hash == computed_sk_hash, \"invalid sk_hash\");\n\n        // validate that new_he_pub_key corresponds to new_he_secret_key\n        assert(elgamal::validate_keypair(he_pub_key, he_secret_key), \"invalid he_pub_key\");\n\n        // initialize BatchRelayer\n        let batch_relayer = BatchRelayer::new(\n            relayer,\n            bonding_token,\n            bonding_amount,\n            he_pub_key,\n            sk_hash,\n            0, // TODO:  context.timestamp(),\n            interval\n        );\n\n        // store BatchRelayer\n        storage.batch_relayer.write(batch_relayer);\n\n        // relayer stakes bonding\n        context.call_public_function(\n            context.this_address(),\n            FunctionSelector::from_signature(\"stake((Field),(Field),Field)\"), \n            [relayer.to_field(), bonding_token.to_field(), bonding_amount]\n        );\n    }\n\n    /************************************************************************\n     * Admin's Operations\n     ************************************************************************/\n\n     // set_relayer(): set a new relayer\n     // set_relayer_params: set new relayer params, e.g. bonding_token, bonding_amount, etc...\n\n\n    /************************************************************************\n     * Users' Operations : Deposit, Withdraw, and Claim\n     ************************************************************************/\n    #[aztec(private)]\n    fn deposit_to_batch(\n        current_round: Field,\n        amount_out: Field, \n        relayer_he_pubkey: Field,\n        elgamal_rand: Field,\n        init: bool // true if deposit_note for an acc has never been created\n    ) {\n        // TODO: validate current_round\n\n        let sender = context.msg_sender();\n        let mut deposit_note = DepositNote::empty();\n\n        deposit_note = DepositNote::new(current_round, amount_out, sender);\n        storage.deposit_notes.at(sender).initialize(\n            &mut deposit_note,\n            true\n        );\n\n        let asset = storage.token_out.read_private();\n        Token::at(asset).transfer(\n            &mut context,\n            sender,\n            context.this_address(),\n            amount_out,\n            0\n        );\n\n        // TODO: validate relayer pubkey here\n\n        let (enc_c1, enc_c2) = elgamal::encrypt(\n            amount_out,\n            relayer_he_pubkey, \n            elgamal_rand\n        );\n\n        context.call_public_function(\n            context.this_address(),\n            FunctionSelector::from_signature(\"_add_token_out_amount(Field,Field)\"),\n            [enc_c1, enc_c2]\n        );\n    }\n\n    // TODO: this func or another func should let users withdraw in the case of relayer failure\n    // partial removal be a bit tricker but complete cancelling might be quite easy to implement\n    #[aztec(private)]\n    fn cancel_batch_and_claim(\n        current_round: Field, \n        secret_hash:Field\n    ) {\n        \n        let deposit_note = storage.deposit_notes.at(context.msg_sender()).get_note(false);\n\n        // transfer cancelled amount to the sender\n        let asset = storage.token_out.read_private();\n        Token::at(asset).transfer(\n            &mut context, \n            context.this_address(), \n            context.msg_sender(),\n            deposit_note.amount_out,\n            0\n        );\n\n        // report cancelled amount\n        context.call_public_function(\n            context.this_address(),\n            FunctionSelector::from_signature(\"_sub_token_out_amount((Field),Field)\"),\n            [deposit_note.amount_out, current_round]\n        ); \n\n        // make note empty\n        let mut empty_deposit_note = DepositNote::empty();\n        storage.deposit_notes.at(context.msg_sender()).replace(&mut empty_deposit_note, true);\n    }\n\n    // from user\n    #[aztec(private)]\n    fn claim_token_in(round: Field, total_token_in:Field, total_token_out: Field) {\n\n        // get msg_sender's note\n        let mut deposit_note = storage.deposit_notes.at(context.msg_sender()).get_note(false);\n\n        context.call_public_function(\n            context.this_address(),\n            FunctionSelector::from_signature(\"_validate_claim_params(Field[])\"), \n            [deposit_note.round, total_token_in, total_token_out]\n        ); \n\n        // calculate total token_in purchased at a specificed round\n        let token_in_amount = (total_token_in * deposit_note.amount_out / total_token_out);\n\n        // individual users can execute private transfer from this address to them with no permission..?\n        let _callStackItem = context.call_private_function(\n            storage.token_out.read_private(),\n            FunctionSelector::from_signature(\"transfer((Field),(Field),Field,Field)\"),\n            [context.this_address().to_field(), context.msg_sender().to_field(), token_in_amount, 0]\n        );\n\n        // TODO: note should be destroyed\n    }\n\n    /************************************************************************\n     * Relayer's Public Operations\n     ************************************************************************/\n\n    // from relayer or amind controlled by L1 contract with timestamp checkers\n    // minimum_output_amount should be calculated based on target twap\n    #[aztec(private)]\n    fn execute_batch(\n        encrypted_amount: [Field;2],\n        secret_key: Field,\n        token_out_amount_cancelled: Field,\n        input_asset_bridge: AztecAddress,\n        output_asset_bridge: AztecAddress,\n        nonce_for_transfer_approval: Field,\n        uniswap_fee_tier: Field,\n        minimum_output_amount: Field,\n        secret_hash_for_L1_to_l2_message: Field,\n        caller_on_L1: EthAddress,\n        nonce_for_swap_approval: Field\n    ) {\n        // caller should be an authorized relayer \n        // assert(context.msg_sender() == storage.batch_relayer.relayer, \"caller must be relayer\");\n\n        let amount_out = elgamal::decrypt(encrypted_amount[0], encrypted_amount[1], secret_key);\n        let amount_out_minus_cancelled = amount_out - token_out_amount_cancelled;\n\n        context.call_public_function(\n            context.this_address(),\n            FunctionSelector::from_signature(\"validate_execute_batch((Field),Field,Field,Field,Field)\"), \n            [\n                context.msg_sender().to_field(),\n                encrypted_amount[0], \n                encrypted_amount[1], \n                amount_out_minus_cancelled, \n                token_out_amount_cancelled\n            ]\n        );  \n\n        // TODO: unshield / redeem if necessary\n        \n        // let target = storage.target.read_public();\n        // Uniswap::at(target).swap_public(\n        //     &mut context,\n        //     context.this_address(),\n        //     input_asset_bridge,\n        //     input_amount.to_field(),\n        //     output_asset_bridge,\n        //     nonce_for_transfer_approval,\n        //     uniswap_fee_tier,\n        //     minimum_output_amount,\n        //     context.this_address(),\n        //     secret_hash_for_L1_to_l2_message,\n        //     caller_on_L1,\n        //     nonce_for_swap_approval\n        // );\n    }\n\n    // TODO: this func can have conditions to be executed \n    // 1: total deposit count: how many deposits are made so far\n    // 2: time: how long did it take since last batch execute\n    #[aztec(public)]\n    #[aztec(internal)]\n    fn validate_execute_batch(\n        sender:AztecAddress, \n        c1:Field, \n        c2:Field, \n        amount_out:Field,\n        amount_out_sub_cancelled:Field\n    ) {\n        let relayer = storage.batch_relayer.read();\n        let current_time = relayer.last_timestamp + relayer.interval;\n        assert(current_time as u64 >= context.timestamp() as u64, \"time hasn't elapsed enough to update round\");\n        assert(sender == relayer.relayer, \"caller must be relayer\");\n\n        let current_round = storage.current_round.read();\n        let mut round = storage.rounds.at(current_round).read();\n        assert(!round.executed, \"already executed\");\n        assert(round.token_out_amount_cancelled == amount_out_sub_cancelled, \"invalid_cancelled_amount_out\");\n\n        assert(\n            (round.encrypted_token_out_amount[0] == c1)\n            & (round.encrypted_token_out_amount[1] == c2), \n            \"invalid encrypted amount\"\n        );\n\n        round.token_out_amount = amount_out;\n        round.executed = true;\n        storage.rounds.at(current_round).write(round); \n\n\n    }\n\n    // here anyone can update the acquired eth reward of the latest round after eth purchase\n    // but this should only occur once each round, so...\n    #[aztec(public)]\n    fn finalize_execute(\n        secret_hash_for_redeeming_minted_notes: Field, // secret hash used to redeem minted notes at a later time. This enables anyone to call this function and mint tokens to a user on their behalf\n        amount: Field,\n        secret_for_L1_to_L2_message_consumption: Field \n    ) {\n       // assert caller == relayer\n\n        let current_round = storage.current_round.read();\n        let mut round = storage.rounds.at(current_round).read();\n        assert(round.executed, \"batch tx hasn't been executed\");\n        assert(round.token_in_amount == 0, \"already claimed\");\n\n        // store the new balance \n        round.token_in_amount = amount;\n        storage.rounds.at(current_round).write(round);\n        \n\n        // claim_private ( mint_private() )\n        // redeem_shield()\n\n        let new_round = storage.current_round.read() + 1;\n        storage.current_round.write(new_round); \n    }\n\n    // here probably there is need to implement create public auth wit\n    // so that target contract can receive(transfer) token from this cotnract.\n    #[aztec(public)] \n    fn spend_public_authwit(inner_hash: Field) -> Field {\n        // let message_hash = compute_outer_authwit_hash(\n        //     context.msg_sender(),\n        //     context.chain_id(),\n        //     context.version(),\n        //     inner_hash\n        // );\n        // let value = storage.approved_action.at(message_hash).read();\n        // if (value) {\n        //     context.push_new_nullifier(message_hash, 0);\n        //     IS_VALID_SELECTOR\n        // } else {\n        //     0\n        // }\n        0\n    }\n\n\n    /************************************************************************\n     * Functions for Relayer Dispute\n     ************************************************************************/\n\n    #[aztec(private)]\n    fn dipute_relayer(\n        he_secret_key: Field, \n        new_sk_hash: Field, \n        new_he_pub_key:Field,\n        new_he_secret_key: Field,\n        new_relayer: AztecAddress,\n        secret_hash: Field\n        ) {\n        let sk_hash = dep::std::hash::pedersen_hash([he_secret_key]);\n\n        context.call_public_function(\n            context.this_address(),\n            FunctionSelector::from_signature(\"check_sk_hash(Field)\"), // or (Field)[]\n            [sk_hash]\n        ); \n\n        // validate that new_sk_hash == hash(new_he_secret_key);\n        let new_computed_sk_hash = dep::std::hash::pedersen_hash([new_he_secret_key]);\n        assert(new_sk_hash == new_computed_sk_hash, \"invalid_new_sk_hash\");\n\n        // TODO: validate that new_he_pub_key corresponds to new_he_secret_key\n        // elgamal_lib.validate_keypair(new_he_pub_key, new_he_secret_key);\n\n        context.call_public_function(\n            context.this_address(),\n            FunctionSelector::from_signature(\"replace_relayer_and_slash_stake(Field,Field,(Field),Field)\"),\n            [new_sk_hash, new_he_pub_key, new_relayer.to_field(), secret_hash]\n        ); \n    }\n\n    #[aztec(public)]\n    fn check_sk_hash(sk_hash: Field) {\n        assert(sk_hash == storage.batch_relayer.read().sk_hash, \"invalid sk_hash\");\n    }\n\n\n    // register sk_hash\n\n    // replace_relayer_and_slash_stake\n    // 1: replace current relayer with a new relayer\n    // 2: slash bond token\n    // 3: make a new stake deposit from a new layer\n    #[aztec(public)]\n    #[aztec(internal)]\n    fn replace_relayer_and_slash_stake(sk_hash: Field, new_he_pub_key: Field, new_relayer:AztecAddress, secret_hash:Field) {\n        // replacement from slashed relayer to a new relayer ( disputer )\n        let mut relayer = storage.batch_relayer.read();\n        relayer.relayer = new_relayer;\n        relayer.sk_hash = sk_hash;\n        relayer.he_pub_key = new_he_pub_key;\n        storage.batch_relayer.write(relayer);\n\n        // slash by shielding staked asset to new relayer\n        Token::at(relayer.bonding_token).shield(\n            &mut context, \n            context.this_address(), \n            relayer.bonding_amount,\n            secret_hash, \n            0\n        );\n\n        // new stake deposit from new relayer\n        context.call_public_function(\n            context.this_address(),\n            FunctionSelector::from_signature(\"stake((Field),(Field),Field)\"), \n            [new_relayer.to_field(), relayer.bonding_token.to_field(), relayer.bonding_amount],\n            GasOpts::default()\n        ).assert_empty();  \n    }\n\n    #[aztec(public)] \n    #[aztec(internal)] \n    fn stake(relayer: AztecAddress, token:AztecAddress, amount:Field) {\n        // TODO: have a minimul bonding_amount and compare amount against it\n\n        // transfer public\n        Token::at(token).transfer_public(\n            &mut context, \n            relayer,\n            context.this_address(), \n            amount,\n            0\n        );\n    }\n\n    /************************************************************************\n     * Public Internal Function\n     ************************************************************************/\n\n    #[aztec(public)] \n    #[aztec(internal)]\n    fn _validate_claim_params(\n        _round: Field, \n        _total_token_in: Field,\n        _total_token_out: Field\n    ) {\n        let round = storage.rounds.at(_round).read();\n        assert(round.token_in_amount == _total_token_in, \"invalid _total_token_in\");\n        assert(round.token_out_amount == _total_token_out, \"invalid _total_token_in\");\n    }\n\n    #[aztec(public)]\n    #[aztec(internal)]\n    fn _add_token_out_amount(enc_c1: Field, enc_c2:Field) {\n        let current_round = storage.current_round.read();\n        let mut round = storage.rounds.at(current_round).read();\n        let (c1, c2) = round.get_encrypted_amount();\n        let (new_c1, new_c2) = elgamal::add(c1, c2, enc_c1, enc_c2);\n\n        round.encrypted_token_out_amount[0] = new_c1;\n        round.encrypted_token_out_amount[1] = new_c2;\n              \n        storage.rounds.at(current_round).write(round);\n    }\n\n    /// \"decrease\" (increase) `token_out_amount_cancelled` in rounds\n    #[aztec(public)]\n    #[aztec(internal)]\n    fn _sub_token_out_amount(amount: Field, _round: Field) {\n        let mut round = storage.rounds.at(_round).read();\n        round.token_out_amount_cancelled = amount;\n        storage.rounds.at(_round).write(round);\n    }\n\n    #[aztec(public)]\n    #[aztec(internal)]\n    fn _validate_round(round:Field) {\n        let current_round = storage.current_round.read();\n        assert(current_round == round, \"invalid_round\");\n    }\n\n    unconstrained fn get_admin() -> pub Field {\n        storage.admin.read().to_field()\n    }\n\n    unconstrained fn get_uniswap_address() -> pub Field {\n        storage.target.read_public().to_field()\n    }\n\n    unconstrained fn get_token_in() -> pub Field {\n        storage.token_in.read_public().to_field()\n    }\n\n    unconstrained fn get_token_out() -> pub Field {\n        storage.token_out.read_public().to_field()\n    }\n\n    unconstrained fn get_round() -> pub Field {\n        storage.current_round.read()\n    }\n    \n}\n","path":"/Users/jack-sw/Codes/abstract/dex-build/token-bridge-uniswap/packages/aztec-contracts/batcher_contract/src/main.nr"},"53":{"source":"use crate::context::{PrivateContext, PublicContext};\nuse crate::oracle;\nuse dep::protocol_types::{address::AztecAddress, grumpkin_point::GrumpkinPoint};\n\npub fn emit_encrypted_log<N>(\n    context: &mut PrivateContext,\n    contract_address: AztecAddress,\n    storage_slot: Field,\n    note_type_id: Field,\n    encryption_pub_key: GrumpkinPoint,\n    log: [Field; N]\n) {\n    let _ = oracle::logs::emit_encrypted_log(\n        contract_address,\n        storage_slot,\n        note_type_id,\n        encryption_pub_key,\n        log\n    );\n    context.accumulate_encrypted_logs(log);\n}\n\npub fn emit_unencrypted_log<T>(context: &mut PublicContext, log: T) {\n    let contract_address = context.this_address();\n    let event_selector = 5; // TODO: compute actual event selector.\n    let _ = oracle::logs::emit_unencrypted_log(contract_address, event_selector, log);\n    // context.accumulate_unencrypted_logs(log);\n}\n\n// TODO: We might want to remove this since emitting unencrypted logs from private functions is violating privacy.\n// --> might be a better approach to force devs to make a public function call that emits the log if needed then\n// it would be less easy to accidentally leak information.\n// If we decide to keep this function around would make sense to wait for traits and then merge it with emit_unencrypted_log.\npub fn emit_unencrypted_log_from_private<T>(context: &mut PrivateContext, log: T) {\n    let contract_address = context.this_address();\n    let event_selector = 5; // TODO: compute actual event selector.\n    let _ = oracle::logs::emit_unencrypted_log(contract_address, event_selector, log);\n    // context.accumulate_unencrypted_logs(log);\n}\n","path":"/Users/jack-sw/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.35.1/noir-projects/aztec-nr/aztec/src/log.nr"},"57":{"source":"use dep::protocol_types::{\n    constants::{\n    MAX_NOTE_HASH_READ_REQUESTS_PER_CALL, GET_NOTE_ORACLE_RETURN_LENGTH, GET_NOTES_ORACLE_RETURN_LENGTH,\n    MAX_NOTES_PER_PAGE, VIEW_NOTE_ORACLE_RETURN_LENGTH\n}\n};\nuse crate::context::PrivateContext;\nuse crate::note::{\n    note_getter_options::{NoteGetterOptions, Select, Sort, SortOrder, Comparator, NoteStatus, PropertySelector},\n    note_interface::NoteInterface, note_viewer_options::NoteViewerOptions,\n    utils::compute_note_hash_for_consumption\n};\nuse crate::oracle;\n\nfn extract_property_value_from_selector<N>(serialized_note: [Field; N], selector: PropertySelector) -> Field {\n    // Selectors use PropertySelectors in order to locate note properties inside the serialized note. \n    // This allows easier packing and custom (de)serialization schemas. A note property is located\n    // inside the serialized note using the index inside the array, a byte offset and a length.\n    let value = serialized_note[selector.index].to_be_bytes(32);\n    let offset = selector.offset;\n    let length = selector.length;\n    let mut value_field = 0 as Field;\n    let mut acc: Field = 1;\n    for i in 0..32 {\n        if i < length {\n            value_field += value[31 + offset - i] as Field * acc;\n            acc = acc * 256;\n        }\n    }\n    value_field\n}\n\nfn check_note_header<Note, N>(context: PrivateContext, storage_slot: Field, note: Note) where Note: NoteInterface<N> {\n    let header = note.get_header();\n    let contract_address = context.this_address();\n    assert(header.contract_address.eq(contract_address));\n    assert(header.storage_slot == storage_slot);\n}\n\nfn check_note_fields<N>(serialized_note: [Field; N], selects: BoundedVec<Option<Select>, N>) {\n    for i in 0..selects.len {\n        let select = selects.get_unchecked(i).unwrap_unchecked();\n        let value_field = extract_property_value_from_selector(serialized_note, select.property_selector);\n\n        // Values are computed ahead of time because circuits evaluate all branches\n        let is_equal = value_field == select.value.to_field();\n        let is_lt = value_field.lt(select.value.to_field());\n\n        if (select.comparator == Comparator.EQ) {\n            assert(is_equal, \"Mismatch return note field.\");\n        } else if (select.comparator == Comparator.NEQ) {\n            assert(!is_equal, \"Mismatch return note field.\");\n        } else if (select.comparator == Comparator.LT) {\n            assert(is_lt, \"Mismatch return note field.\");\n        } else if (select.comparator == Comparator.LTE) {\n            assert(is_lt | is_equal, \"Mismatch return note field.\");\n        } else if (select.comparator == Comparator.GT) {\n            assert(!is_lt & !is_equal, \"Mismatch return note field.\");\n        } else if (select.comparator == Comparator.GTE) {\n            assert(!is_lt, \"Mismatch return note field.\");\n        }\n    }\n}\n\nfn check_notes_order<N>(\n    fields_0: [Field; N],\n    fields_1: [Field; N],\n    sorts: BoundedVec<Option<Sort>, N>\n) {\n    for i in 0..sorts.len {\n        let sort = sorts.get_unchecked(i).unwrap_unchecked();\n        let field_0 = extract_property_value_from_selector(fields_0, sort.property_selector);\n        let field_1 = extract_property_value_from_selector(fields_1, sort.property_selector);\n        let eq = field_0 == field_1;\n        let lt = field_0.lt(field_1);\n        if sort.order == SortOrder.ASC {\n            assert(eq | lt, \"Return notes not sorted in ascending order.\");\n        } else if !eq {\n            assert(!lt, \"Return notes not sorted in descending order.\");\n        }\n    }\n}\n\npub fn get_note<Note, N>(\n    context: &mut PrivateContext,\n    storage_slot: Field\n) -> Note where Note: NoteInterface<N> {\n    let note = get_note_internal(storage_slot);\n\n    check_note_header(*context, storage_slot, note);\n\n    let note_hash_for_read_request = compute_note_hash_for_consumption(note);\n\n    context.push_note_hash_read_request(note_hash_for_read_request);\n    note\n}\n\npub fn get_notes<Note, N, FILTER_ARGS>(\n    context: &mut PrivateContext,\n    storage_slot: Field,\n    options: NoteGetterOptions<Note, N, FILTER_ARGS>\n) -> [Option<Note>; MAX_NOTE_HASH_READ_REQUESTS_PER_CALL] where Note: NoteInterface<N> {\n    let opt_notes = get_notes_internal(storage_slot, options);\n\n    _get_notes_constrain_get_notes_internal(context, storage_slot, opt_notes, options)\n}\n\npub fn _get_notes_constrain_get_notes_internal<Note, N, FILTER_ARGS>(\n    context: &mut PrivateContext,\n    storage_slot: Field,\n    opt_notes: [Option<Note>; MAX_NOTE_HASH_READ_REQUESTS_PER_CALL],\n    options: NoteGetterOptions<Note, N, FILTER_ARGS>\n) -> [Option<Note>; MAX_NOTE_HASH_READ_REQUESTS_PER_CALL] where Note: NoteInterface<N> {\n    let mut returned_notes = [Option::none(); MAX_NOTE_HASH_READ_REQUESTS_PER_CALL];\n\n    let mut num_notes = 0;\n    let mut prev_fields = [0; N];\n    for i in 0..opt_notes.len() {\n        let opt_note = opt_notes[i];\n        if opt_note.is_some() {\n            let note = opt_note.unwrap_unchecked();\n            let fields = note.serialize_content();\n            check_note_header(*context, storage_slot, note);\n            check_note_fields(fields, options.selects);\n            if i != 0 {\n                check_notes_order(prev_fields, fields, options.sorts);\n            }\n            prev_fields = fields;\n\n            let note_hash_for_read_request = compute_note_hash_for_consumption(note);\n            // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1410): test to ensure\n            // failure if malicious oracle injects 0 nonce here for a \"pre-existing\" note.\n            context.push_note_hash_read_request(note_hash_for_read_request);\n\n            // The below code is used to collapse a sparse array into one where the values are guaranteed to be at the front of the array\n            // We write at returned_notes[num_notes] because num_notes is only advanced when we have a value in opt_notes\n            returned_notes[num_notes] = Option::some(note);\n            num_notes += 1;\n        };\n    }\n    if options.limit != 0 {\n        assert(num_notes <= options.limit, \"Invalid number of return notes.\");\n    }\n\n    assert(num_notes != 0, \"Cannot return zero notes\");\n\n    returned_notes\n}\n\nunconstrained fn get_note_internal<Note, N>(storage_slot: Field) -> Note where Note: NoteInterface<N> {\n    let placeholder_note = [Option::none()];\n    let placeholder_fields = [0; GET_NOTE_ORACLE_RETURN_LENGTH];\n    let placeholder_note_length = [0; N];\n    oracle::notes::get_notes(\n        storage_slot,\n        0,\n        [],\n        [],\n        [],\n        [],\n        [],\n        [],\n        [],\n        [],\n        [],\n        1, // limit\n        0, // offset\n        NoteStatus.ACTIVE,\n        placeholder_note,\n        placeholder_fields,\n        placeholder_note_length\n    )[0].unwrap() // Notice: we don't allow dummies to be returned from get_note (singular).\n}\n\nunconstrained fn get_notes_internal<Note, N, FILTER_ARGS>(\n    storage_slot: Field,\n    options: NoteGetterOptions<Note, N, FILTER_ARGS>\n) -> [Option<Note>; MAX_NOTE_HASH_READ_REQUESTS_PER_CALL] where Note: NoteInterface<N> {\n    let (num_selects, select_by_indexes, select_by_offsets, select_by_lengths, select_values, select_comparators, sort_by_indexes, sort_by_offsets, sort_by_lengths, sort_order) = flatten_options(options.selects, options.sorts);\n    let placeholder_opt_notes = [Option::none(); MAX_NOTE_HASH_READ_REQUESTS_PER_CALL];\n    let placeholder_fields = [0; GET_NOTES_ORACLE_RETURN_LENGTH];\n    let placeholder_note_length = [0; N];\n    let opt_notes = oracle::notes::get_notes(\n        storage_slot,\n        num_selects,\n        select_by_indexes,\n        select_by_offsets,\n        select_by_lengths,\n        select_values,\n        select_comparators,\n        sort_by_indexes,\n        sort_by_offsets,\n        sort_by_lengths,\n        sort_order,\n        options.limit,\n        options.offset,\n        options.status,\n        placeholder_opt_notes,\n        placeholder_fields,\n        placeholder_note_length\n    );\n\n    let filter = options.filter;\n    let filter_args = options.filter_args;\n    filter(opt_notes, filter_args)\n}\n\nunconstrained pub fn view_notes<Note, N>(\n    storage_slot: Field,\n    options: NoteViewerOptions<Note, N>\n) -> [Option<Note>; MAX_NOTES_PER_PAGE] where Note: NoteInterface<N> {\n    let (num_selects, select_by_indexes, select_by_offsets, select_by_lengths, select_values, select_comparators, sort_by_indexes, sort_by_offsets, sort_by_lengths, sort_order) = flatten_options(options.selects, options.sorts);\n    let placeholder_opt_notes = [Option::none(); MAX_NOTES_PER_PAGE];\n    let placeholder_fields = [0; VIEW_NOTE_ORACLE_RETURN_LENGTH];\n    let placeholder_note_length = [0; N];\n    oracle::notes::get_notes(\n        storage_slot,\n        num_selects,\n        select_by_indexes,\n        select_by_offsets,\n        select_by_lengths,\n        select_values,\n        select_comparators,\n        sort_by_indexes,\n        sort_by_offsets,\n        sort_by_lengths,\n        sort_order,\n        options.limit,\n        options.offset,\n        options.status,\n        placeholder_opt_notes,\n        placeholder_fields,\n        placeholder_note_length\n    )\n}\n\nunconstrained fn flatten_options<Note, N>(\n    selects: BoundedVec<Option<Select>, N>,\n    sorts: BoundedVec<Option<Sort>, N>\n) -> (u8, [u8; N], [u8; N], [u8; N], [Field; N], [u8; N], [u8; N], [u8; N], [u8; N], [u8; N]) {\n    let mut num_selects = 0;\n    let mut select_by_indexes = [0; N];\n    let mut select_by_offsets = [0; N];\n    let mut select_by_lengths = [0; N];\n    let mut select_values = [0; N];\n    let mut select_comparators = [0; N];\n\n    for i in 0..selects.len {\n        let select = selects.get(i);\n        if select.is_some() {\n            select_by_indexes[num_selects] = select.unwrap_unchecked().property_selector.index;\n            select_by_offsets[num_selects] = select.unwrap_unchecked().property_selector.offset;\n            select_by_lengths[num_selects] = select.unwrap_unchecked().property_selector.length;\n            select_values[num_selects] = select.unwrap_unchecked().value;\n            select_comparators[num_selects] = select.unwrap_unchecked().comparator;\n            num_selects += 1;\n        };\n    }\n\n    let mut sort_by_indexes = [0; N];\n    let mut sort_by_offsets = [0; N];\n    let mut sort_by_lengths = [0; N];\n    let mut sort_order = [0; N];\n    for i in 0..sorts.len {\n        let sort = sorts.get(i);\n        if sort.is_some() {\n            sort_by_indexes[i] = sort.unwrap_unchecked().property_selector.index;\n            sort_by_offsets[i] = sort.unwrap_unchecked().property_selector.offset;\n            sort_by_lengths[i] = sort.unwrap_unchecked().property_selector.length;\n            sort_order[i] = sort.unwrap_unchecked().order;\n        };\n    }\n\n    (\n        num_selects, select_by_indexes, select_by_offsets, select_by_lengths, select_values, select_comparators, sort_by_indexes, sort_by_offsets, sort_by_lengths, sort_order\n    )\n}\n","path":"/Users/jack-sw/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.35.1/noir-projects/aztec-nr/aztec/src/note/note_getter.nr"},"58":{"source":"use crate::context::{PrivateContext, PublicContext};\nuse crate::note::{\n    note_header::NoteHeader, note_interface::NoteInterface,\n    utils::{compute_note_hash_for_insertion, compute_note_hash_for_consumption}\n};\nuse crate::oracle::notes::{notify_created_note, notify_nullified_note};\n\npub fn create_note<Note, N>(\n    context: &mut PrivateContext,\n    storage_slot: Field,\n    note: &mut Note,\n    broadcast: bool\n) where Note: NoteInterface<N> {\n    let contract_address = (*context).this_address();\n\n    let header = NoteHeader { contract_address, storage_slot, nonce: 0, is_transient: true };\n    // TODO: change this to note.set_header(header) once https://github.com/noir-lang/noir/issues/4095 is fixed\n    Note::set_header(note, header);\n    // As `is_transient` is true, this will compute the inner note hsah\n    let inner_note_hash = compute_note_hash_for_insertion(*note);\n\n    // TODO: Strong typing required because of https://github.com/noir-lang/noir/issues/4088\n    let serialized_note: [Field; N] = Note::serialize_content(*note);\n    assert(\n        notify_created_note(\n        storage_slot,\n        Note::get_note_type_id(),\n        serialized_note,\n        inner_note_hash\n    )\n        == 0\n    );\n\n    context.push_new_note_hash(inner_note_hash);\n\n    if broadcast {\n        Note::broadcast(*note, context, storage_slot);\n    }\n}\n\npub fn create_note_hash_from_public<Note, N>(\n    context: &mut PublicContext,\n    storage_slot: Field,\n    note: &mut Note\n) where Note: NoteInterface<N> {\n    let contract_address = (*context).this_address();\n\n    let header = NoteHeader { contract_address, storage_slot, nonce: 0, is_transient: true };\n    // TODO: change this to note.set_header(header) once https://github.com/noir-lang/noir/issues/4095 is fixed\n    Note::set_header(note, header);\n    let inner_note_hash = compute_note_hash_for_insertion(*note);\n\n    context.push_new_note_hash(inner_note_hash);\n}\n\npub fn destroy_note<Note, N>(context: &mut PrivateContext, note: Note) where Note: NoteInterface<N> {\n    let mut nullifier = 0;\n    let mut consumed_note_hash: Field = 0;\n    nullifier = note.compute_nullifier(context);\n\n    // We also need the note hash corresponding to the \"nullifier\"\n    let header = note.get_header();\n    // `consumed_note_hash` is used to inform the kernel which pending note hash\n    // the nullifier corresponds to so they can be matched and both squashed/deleted.\n    // nonzero nonce implies \"persistable\" nullifier (nullifies a persistent/in-tree\n    // note hash) in which case `consumed_note_hash` is not used since the kernel\n    // just siloes and forwards the nullifier to its output.\n    if (header.is_transient) {\n        // TODO(1718): Can we reuse the note hash computed in `compute_nullifier`?\n        consumed_note_hash = compute_note_hash_for_consumption(note);\n    }\n    assert(notify_nullified_note(nullifier, consumed_note_hash) == 0);\n\n    context.push_new_nullifier(nullifier, consumed_note_hash)\n}\n","path":"/Users/jack-sw/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.35.1/noir-projects/aztec-nr/aztec/src/note/lifecycle.nr"},"59":{"source":"use crate::{context::PrivateContext, note::{note_header::NoteHeader, note_interface::NoteInterface}};\n\nuse dep::protocol_types::{\n    address::AztecAddress,\n    constants::{GENERATOR_INDEX__OUTER_NULLIFIER, GENERATOR_INDEX__UNIQUE_NOTE_HASH, GENERATOR_INDEX__SILOED_NOTE_HASH},\n    hash::pedersen_hash, utils::arr_copy_slice\n};\n\nfn compute_siloed_hash(contract_address: AztecAddress, inner_note_hash: Field) -> Field {\n    let inputs = [contract_address.to_field(), inner_note_hash];\n    pedersen_hash(inputs, GENERATOR_INDEX__SILOED_NOTE_HASH)\n}\n\nfn compute_unique_hash(nonce: Field, siloed_note_hash: Field) -> Field {\n    let inputs = [nonce, siloed_note_hash];\n    pedersen_hash(inputs, GENERATOR_INDEX__UNIQUE_NOTE_HASH)\n}\n\nfn compute_inner_note_hash<Note, N>(note: Note) -> Field where Note: NoteInterface<N> {\n    let header = note.get_header();\n    let note_hash = note.compute_note_content_hash();\n\n    // TODO(#1205) Do we need a generator index here?\n    pedersen_hash([header.storage_slot, note_hash], 0)\n}\n\nfn compute_siloed_note_hash<Note, N>(note_with_header: Note) -> Field where Note: NoteInterface<N> {\n    let header = note_with_header.get_header();\n\n    let inner_note_hash = compute_inner_note_hash(note_with_header);\n\n    compute_siloed_hash(header.contract_address, inner_note_hash)\n}\n\nfn compute_unique_siloed_note_hash<Note, N>(note_with_header: Note) -> Field where Note: NoteInterface<N> {\n    let header = note_with_header.get_header();\n\n    let siloed_note_hash = compute_siloed_note_hash(note_with_header);\n\n    compute_unique_hash(header.nonce, siloed_note_hash)\n}\n\npub fn compute_siloed_nullifier<Note, N>(\n    note_with_header: Note,\n    context: &mut PrivateContext\n) -> Field where Note: NoteInterface<N> {\n    let header = note_with_header.get_header();\n    let inner_nullifier = note_with_header.compute_nullifier(context);\n\n    let input = [header.contract_address.to_field(), inner_nullifier];\n    pedersen_hash(input, GENERATOR_INDEX__OUTER_NULLIFIER)\n}\n\npub fn compute_note_hash_for_insertion<Note, N>(note: Note) -> Field where Note: NoteInterface<N> {\n    compute_inner_note_hash(note)\n}\n\npub fn compute_note_hash_for_consumption<Note, N>(note: Note) -> Field where Note: NoteInterface<N> {\n    let header = note.get_header();\n    // There are 3 cases for reading a note intended for consumption:\n    // 1. The note was inserted in this transaction, and is transient.\n    // 2. The note was inserted in a previous transaction, and was inserted in public\n    // 3. The note was inserted in a previous transaction, and was inserted in private\n\n    if (header.is_transient) {\n        // If a note is transient, we just read the inner_note_hash (kernel will silo by contract address).\n        compute_inner_note_hash(note)\n    } else if (header.nonce == 0) {\n        // If not transient and nonce is zero, that means we are reading a public note.\n        compute_siloed_note_hash(note)\n    } else {\n        // When nonce is nonzero, that means we are reading a settled note (from tree) created in a\n        // previous TX. So we need the unique_siloed_note_hash which has already been hashed with\n        // contract address and then nonce. This hash will match the existing leaf in the note hash\n        // tree, so the kernel can just perform a membership check directly on this hash/leaf.\n        compute_unique_siloed_note_hash(note)\n        // IMPORTANT NOTE ON REDUNDANT SILOING BY CONTRACT ADDRESS: The note hash computed above is\n        // \"siloed\" by contract address. When a note hash is computed solely for the purpose of\n        // nullification, it is not strictly necessary to silo the note hash before computing\n        // its nullifier. In other words, it is NOT NECESSARY for protocol security that a nullifier\n        // be computed from a siloed note hash. After all, persistable note hashes and nullifiers are\n        // siloed by the kernel circuit. That being said, the siloed note hash computed above CAN be\n        // used for nullifier computation, and this achieves the (arguably unnecessary) property that\n        // nullifiers are computed from a note hash's fully-computed note hash tree leaf.\n    }\n}\n\npub fn compute_note_hash_and_nullifier<T, N, S>(\n    // docs:start:compute_note_hash_and_nullifier_args\n    deserialize_content: fn([Field; N]) -> T,\n    note_header: NoteHeader,\n    serialized_note: [Field; S] // docs:end:compute_note_hash_and_nullifier_args\n) -> [Field; 4] where T: NoteInterface<N> {\n    let mut note = deserialize_content(arr_copy_slice(serialized_note, [0; N], 0));\n    // TODO: change this to note.set_header(header) once https://github.com/noir-lang/noir/issues/4095 is fixed\n    T::set_header((&mut note), note_header);\n\n    let inner_note_hash = compute_inner_note_hash(note);\n\n    let siloed_note_hash = compute_siloed_hash(note_header.contract_address, inner_note_hash);\n\n    let unique_siloed_note_hash = compute_unique_hash(note_header.nonce, siloed_note_hash);\n\n    let inner_nullifier = note.compute_nullifier_without_context();\n    // docs:start:compute_note_hash_and_nullifier_returns\n    [inner_note_hash, siloed_note_hash, unique_siloed_note_hash, inner_nullifier]\n    // docs:end:compute_note_hash_and_nullifier_returns\n}\n","path":"/Users/jack-sw/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.35.1/noir-projects/aztec-nr/aztec/src/note/utils.nr"},"60":{"source":"use dep::protocol_types::address::AztecAddress;\nuse dep::protocol_types::traits::{Empty, Serialize};\n\nstruct NoteHeader {\n    contract_address: AztecAddress,\n    nonce: Field,\n    storage_slot: Field,\n    // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1386)\n    // Remove this and check the nonce to see whether a note is transient or not.\n    is_transient: bool,\n}\n\nimpl Empty for NoteHeader {\n    fn empty() -> Self {\n        NoteHeader { contract_address: AztecAddress::zero(), nonce: 0, storage_slot: 0, is_transient: false }\n    }\n}\n\nimpl NoteHeader {\n    pub fn new(contract_address: AztecAddress, nonce: Field, storage_slot: Field) -> Self {\n        NoteHeader { contract_address, nonce, storage_slot, is_transient: false }\n    }\n}\n\nimpl Serialize<4> for NoteHeader {\n    fn serialize(self) -> [Field; 4] {\n        [self.contract_address.to_field(), self.nonce, self.storage_slot, self.is_transient as Field]\n    }\n}\n","path":"/Users/jack-sw/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.35.1/noir-projects/aztec-nr/aztec/src/note/note_header.nr"},"70":{"source":"use crate::{\n    context::{\n    inputs::PublicContextInputs, interface::ContextInterface, interface::PublicContextInterface,\n    gas::GasOpts\n},\n    messaging::process_l1_to_l2_message,\n    oracle::{arguments, public_call::call_public_function_internal, returns},\n    hash::{hash_args_array, ArgsHasher}\n};\nuse dep::protocol_types::{\n    abis::{\n    global_variables::GlobalVariables, function_selector::FunctionSelector,\n    private_circuit_public_inputs::PrivateCircuitPublicInputs,\n    public_call_stack_item::PublicCallStackItem,\n    public_circuit_public_inputs::PublicCircuitPublicInputs, read_request::ReadRequest,\n    side_effect::{SideEffect, SideEffectLinkedToNoteHash}\n},\n    hash::silo_nullifier, address::{AztecAddress, EthAddress},\n    constants::{\n    MAX_NEW_NOTE_HASHES_PER_CALL, MAX_NEW_L2_TO_L1_MSGS_PER_CALL, MAX_NEW_NULLIFIERS_PER_CALL,\n    MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL, MAX_PUBLIC_DATA_READS_PER_CALL,\n    MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL, MAX_NOTE_HASH_READ_REQUESTS_PER_CALL,\n    MAX_NULLIFIER_READ_REQUESTS_PER_CALL, MAX_NULLIFIER_NON_EXISTENT_READ_REQUESTS_PER_CALL\n},\n    contrakt::{storage_read::StorageRead, storage_update_request::StorageUpdateRequest}, header::Header,\n    messaging::l2_to_l1_message::L2ToL1Message, utils::reader::Reader, traits::{Deserialize, Empty}\n};\n\nstruct PublicContext {\n    inputs: PublicContextInputs,\n    side_effect_counter: u32,\n\n    args_hash : Field,\n    return_hash : Field,\n\n    nullifier_read_requests: BoundedVec<ReadRequest, MAX_NULLIFIER_READ_REQUESTS_PER_CALL>,\n    nullifier_non_existent_read_requests: BoundedVec<ReadRequest, MAX_NULLIFIER_NON_EXISTENT_READ_REQUESTS_PER_CALL>,\n    contract_storage_update_requests: BoundedVec<StorageUpdateRequest, MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL>,\n    contract_storage_reads: BoundedVec<StorageRead, MAX_PUBLIC_DATA_READS_PER_CALL>,\n    public_call_stack_hashes: BoundedVec<Field, MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL>,\n\n    new_note_hashes: BoundedVec<SideEffect, MAX_NEW_NOTE_HASHES_PER_CALL>,\n    new_nullifiers: BoundedVec<SideEffectLinkedToNoteHash, MAX_NEW_NULLIFIERS_PER_CALL>,\n\n    new_l2_to_l1_msgs: BoundedVec<L2ToL1Message, MAX_NEW_L2_TO_L1_MSGS_PER_CALL>,\n\n    unencrypted_logs_hash: Field,\n    unencrypted_logs_preimages_length: Field,\n\n    // Header of a block whose state is used during public execution. Set by sequencer to be a header of a block\n    // previous to the one in which the tx is included.\n    historical_header: Header,\n    prover_address: AztecAddress,\n}\n\nimpl PublicContext {\n    pub fn new(inputs: PublicContextInputs, args_hash: Field) -> PublicContext {\n        PublicContext {\n            inputs,\n            side_effect_counter: inputs.start_side_effect_counter,\n            args_hash,\n            return_hash: 0,\n            nullifier_read_requests: BoundedVec::new(),\n            nullifier_non_existent_read_requests: BoundedVec::new(),\n            contract_storage_update_requests: BoundedVec::new(),\n            contract_storage_reads: BoundedVec::new(),\n            public_call_stack_hashes: BoundedVec::new(),\n            new_note_hashes: BoundedVec::new(),\n            new_nullifiers: BoundedVec::new(),\n            new_l2_to_l1_msgs: BoundedVec::new(),\n            unencrypted_logs_hash: 0,\n            unencrypted_logs_preimages_length: 0,\n            historical_header: inputs.historical_header,\n            prover_address: AztecAddress::zero() // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n            // encrypted_logs_preimages: Vec::new(),\n            // unencrypted_logs_preimages: Vec::new(),\n        }\n    }\n\n    pub fn call_public_function_no_args<RETURNS_COUNT>(\n        self: &mut Self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector\n    ) -> FunctionReturns<RETURNS_COUNT> {\n        self.call_public_function_with_packed_args(contract_address, function_selector, 0, false, false)\n    }\n\n    pub fn static_call_public_function_no_args<RETURNS_COUNT>(\n        self: &mut Self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector\n    ) -> FunctionReturns<RETURNS_COUNT> {\n        self.call_public_function_with_packed_args(contract_address, function_selector, 0, true, false)\n    }\n\n    pub fn delegate_call_public_function_no_args<RETURNS_COUNT>(\n        self: &mut Self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector\n    ) -> FunctionReturns<RETURNS_COUNT> {\n        self.call_public_function_with_packed_args(contract_address, function_selector, 0, false, true)\n    }\n\n    pub fn call_public_function_with_packed_args<RETURNS_COUNT>(\n        self: &mut Self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args_hash: Field,\n        is_static_call: bool,\n        is_delegate_call: bool\n    ) -> FunctionReturns<RETURNS_COUNT> {\n        let side_effect_counter = self.side_effect_counter;\n        // TODO get next value from output of `call_public_function_internal`\n        self.side_effect_counter += 1;\n\n        let raw_returns = call_public_function_internal(\n            contract_address,\n            function_selector,\n            args_hash,\n            side_effect_counter,\n            is_static_call,\n            is_delegate_call\n        );\n\n        FunctionReturns::new(raw_returns)\n    }\n\n    pub fn set_return_hash(&mut self, returns_hasher: ArgsHasher) {\n        returns::pack_returns(returns_hasher.fields);\n        self.return_hash = returns_hasher.hash();\n    }\n\n    // Keep private or ask the AVM team if you want to change it.\n    fn push_nullifier_read_request(&mut self, nullifier: Field) {\n        let request = ReadRequest { value: nullifier, counter: self.side_effect_counter };\n        self.nullifier_read_requests.push(request);\n        self.side_effect_counter = self.side_effect_counter + 1;\n    }\n\n    // Keep private or ask the AVM team if you want to change it.\n    fn push_nullifier_non_existent_read_request(&mut self, nullifier: Field) {\n        let request = ReadRequest { value: nullifier, counter: self.side_effect_counter };\n        self.nullifier_non_existent_read_requests.push(request);\n        self.side_effect_counter = self.side_effect_counter + 1;\n    }\n\n    pub fn finish(self) -> PublicCircuitPublicInputs {\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n        let unencrypted_logs_hash = 0;\n        let unencrypted_log_preimages_length = 0;\n\n        // Compute the public call stack hashes\n        let pub_circuit_pub_inputs = PublicCircuitPublicInputs {\n            call_context: self.inputs.call_context, // Done\n            args_hash: self.args_hash, // Done\n            nullifier_read_requests: self.nullifier_read_requests.storage,\n            nullifier_non_existent_read_requests: self.nullifier_non_existent_read_requests.storage,\n            contract_storage_update_requests: self.contract_storage_update_requests.storage,\n            contract_storage_reads: self.contract_storage_reads.storage,\n            returns_hash: self.return_hash,\n            new_note_hashes: self.new_note_hashes.storage,\n            new_nullifiers: self.new_nullifiers.storage,\n            public_call_stack_hashes: self.public_call_stack_hashes.storage,\n            new_l2_to_l1_msgs: self.new_l2_to_l1_msgs.storage,\n            start_side_effect_counter: self.inputs.start_side_effect_counter,\n            end_side_effect_counter: self.side_effect_counter,\n            unencrypted_logs_hash,\n            unencrypted_log_preimages_length,\n            historical_header: self.inputs.historical_header,\n            prover_address: self.prover_address,\n            revert_code: 0,\n            gas_left: self.inputs.call_context.gas_left\n        };\n        pub_circuit_pub_inputs\n    }\n}\n\nimpl ContextInterface for PublicContext {\n    fn msg_sender(self) -> AztecAddress {\n        self.inputs.call_context.msg_sender\n    }\n\n    fn this_address(self) -> AztecAddress {\n        self.inputs.call_context.storage_contract_address\n    }\n\n    fn this_portal_address(self) -> EthAddress {\n        self.inputs.call_context.portal_contract_address\n    }\n\n    fn chain_id(self) -> Field {\n        self.inputs.public_global_variables.chain_id\n    }\n\n    fn version(self) -> Field {\n        self.inputs.public_global_variables.version\n    }\n\n    fn selector(self) -> FunctionSelector {\n        self.inputs.call_context.function_selector\n    }\n\n    fn get_args_hash(self) -> Field {\n        self.args_hash\n    }\n\n    fn push_new_note_hash(&mut self, note_hash: Field) {\n        let side_effect = SideEffect { value: note_hash, counter: self.side_effect_counter };\n        self.new_note_hashes.push(side_effect);\n        self.side_effect_counter = self.side_effect_counter + 1;\n    }\n\n    fn push_new_nullifier(&mut self, nullifier: Field, _nullified_commitment: Field) {\n        let side_effect = SideEffectLinkedToNoteHash {\n            value: nullifier,\n            note_hash: 0, // cannot nullify pending notes in public context\n            counter: self.side_effect_counter\n        };\n        self.new_nullifiers.push(side_effect);\n        self.side_effect_counter = self.side_effect_counter + 1;\n    }\n}\n\nimpl PublicContextInterface for PublicContext {\n    fn block_number(self) -> Field {\n        self.inputs.public_global_variables.block_number\n    }\n\n    fn timestamp(self) -> u64 {\n        self.inputs.public_global_variables.timestamp\n    }\n\n    fn coinbase(self) -> EthAddress {\n        self.inputs.public_global_variables.coinbase\n    }\n\n    fn fee_recipient(self) -> AztecAddress {\n        self.inputs.public_global_variables.fee_recipient\n    }\n\n    fn fee_per_da_gas(self) -> Field {\n        self.inputs.public_global_variables.gas_fees.fee_per_da_gas\n    }\n\n    fn fee_per_l1_gas(self) -> Field {\n        self.inputs.public_global_variables.gas_fees.fee_per_l1_gas\n    }\n\n    fn fee_per_l2_gas(self) -> Field {\n        self.inputs.public_global_variables.gas_fees.fee_per_l2_gas\n    }\n\n    fn nullifier_exists(self, unsiloed_nullifier: Field, address: AztecAddress) -> bool {\n        // Current public can only check for settled nullifiers, so we always silo.\n        let siloed_nullifier = silo_nullifier(address, unsiloed_nullifier);\n        nullifier_exists_oracle(siloed_nullifier) == 1\n    }\n\n    fn message_portal(&mut self, recipient: EthAddress, content: Field) {\n        let message = L2ToL1Message { recipient, content };\n        self.new_l2_to_l1_msgs.push(message);\n    }\n\n    // We can consume message with a secret in public context because the message cannot be modified and therefore\n    // there is no front-running risk (e.g. somebody could front run you to claim your tokens to your address).\n    fn consume_l1_to_l2_message(&mut self, content: Field, secret: Field, sender: EthAddress) {\n        let this = (*self).this_address();\n        let nullifier = process_l1_to_l2_message(\n            self.historical_header.state.l1_to_l2_message_tree.root,\n            this,\n            sender,\n            self.chain_id(),\n            self.version(),\n            content,\n            secret\n        );\n\n        // Push nullifier (and the \"commitment\" corresponding to this can be \"empty\")\n        self.push_new_nullifier(nullifier, 0)\n    }\n\n    fn accumulate_encrypted_logs<N>(&mut self, log: [Field; N]) {\n        let _void1 = self;\n        let _void2 = log;\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n    }\n\n    fn accumulate_unencrypted_logs<T>(&mut self, log: T) {\n        let _void1 = self;\n        let _void2 = log;\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n    }\n\n    fn call_public_function<ARGS_COUNT, RETURNS_COUNT>(\n        self: &mut Self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT],\n        _gas: GasOpts\n    ) -> FunctionReturns<RETURNS_COUNT> {\n        let args_hash = hash_args_array(args);\n        assert(args_hash == arguments::pack_arguments(args));\n        self.call_public_function_with_packed_args(contract_address, function_selector, args_hash, false, false)\n    }\n\n    fn static_call_public_function<ARGS_COUNT, RETURNS_COUNT>(\n        self: &mut Self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT],\n        _gas: GasOpts\n    ) -> FunctionReturns<RETURNS_COUNT> {\n        let args_hash = hash_args_array(args);\n        assert(args_hash == arguments::pack_arguments(args));\n        self.call_public_function_with_packed_args(contract_address, function_selector, args_hash, true, false)\n    }\n\n    fn delegate_call_public_function<ARGS_COUNT, RETURNS_COUNT>(\n        self: &mut Self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT]\n    ) -> FunctionReturns<RETURNS_COUNT> {\n        let args_hash = hash_args_array(args);\n        assert(args_hash == arguments::pack_arguments(args));\n        self.call_public_function_with_packed_args(contract_address, function_selector, args_hash, false, true)\n    }\n}\n\nimpl Empty for PublicContext {\n    fn empty() -> Self {\n        PublicContext {\n            inputs: PublicContextInputs::empty(),\n            side_effect_counter: 0 as u32,\n            args_hash : 0,\n            return_hash : 0,\n            nullifier_read_requests: BoundedVec::new(),\n            nullifier_non_existent_read_requests: BoundedVec::new(),\n            contract_storage_update_requests: BoundedVec::new(),\n            contract_storage_reads: BoundedVec::new(),\n            public_call_stack_hashes: BoundedVec::new(),\n            new_note_hashes: BoundedVec::new(),\n            new_nullifiers: BoundedVec::new(),\n            new_l2_to_l1_msgs: BoundedVec::new(),\n            unencrypted_logs_hash: 0,\n            unencrypted_logs_preimages_length: 0,\n            historical_header: Header::empty(),\n            prover_address: AztecAddress::zero(),\n        }\n    }\n}\n\n#[oracle(checkNullifierExists)]\nfn nullifier_exists_oracle(nullifier: Field) -> Field {}\n\nstruct FunctionReturns<N> {\n    values: [Field; N]\n}\n\nimpl<N> FunctionReturns<N> {\n    pub fn new(values: [Field; N]) -> FunctionReturns<N> {\n        FunctionReturns { values }\n    }\n\n    pub fn assert_empty(returns: FunctionReturns<0>) {\n        assert(returns.values.len() == 0);\n    }\n\n    pub fn raw(self) -> [Field; N] {\n        self.values\n    }\n\n    pub fn deserialize_into<T>(self) -> T where T: Deserialize<N> {\n        Deserialize::deserialize(self.raw())\n    }\n}\n","path":"/Users/jack-sw/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.35.1/noir-projects/aztec-nr/aztec/src/context/public_context.nr"},"72":{"source":"use crate::{\n    context::{inputs::PrivateContextInputs, interface::ContextInterface},\n    key::nullifier_key::validate_nullifier_key_against_address, messaging::process_l1_to_l2_message,\n    hash::{hash_args_array, ArgsHasher},\n    oracle::{\n    arguments, returns, call_private_function::call_private_function_internal,\n    enqueue_public_function_call::enqueue_public_function_call_internal, context::get_portal_address,\n    header::get_header_at, nullifier_key::{get_nullifier_key_pair, NullifierKeyPair}\n}\n};\nuse dep::protocol_types::{\n    abis::{\n    gas::Gas, call_context::CallContext, function_data::FunctionData,\n    function_selector::FunctionSelector, max_block_number::MaxBlockNumber,\n    nullifier_key_validation_request::NullifierKeyValidationRequest,\n    private_call_stack_item::PrivateCallStackItem,\n    private_circuit_public_inputs::PrivateCircuitPublicInputs,\n    public_call_stack_item::PublicCallStackItem,\n    public_circuit_public_inputs::PublicCircuitPublicInputs, read_request::ReadRequest,\n    side_effect::{SideEffect, SideEffectLinkedToNoteHash}\n},\n    address::{AztecAddress, EthAddress},\n    constants::{\n    MAX_NEW_NOTE_HASHES_PER_CALL, MAX_NEW_L2_TO_L1_MSGS_PER_CALL, MAX_NEW_NULLIFIERS_PER_CALL,\n    MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL, MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL,\n    MAX_PUBLIC_DATA_READS_PER_CALL, MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL,\n    MAX_NOTE_HASH_READ_REQUESTS_PER_CALL, MAX_NULLIFIER_READ_REQUESTS_PER_CALL,\n    MAX_NULLIFIER_NON_EXISTENT_READ_REQUESTS_PER_CALL, MAX_NULLIFIER_KEY_VALIDATION_REQUESTS_PER_CALL\n},\n    contrakt::{storage_read::StorageRead, storage_update_request::StorageUpdateRequest},\n    grumpkin_private_key::GrumpkinPrivateKey, header::Header,\n    messaging::l2_to_l1_message::L2ToL1Message, utils::reader::Reader,\n    traits::{is_empty, Deserialize, Empty}\n};\n\n// TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n// use dep::std::collections::vec::Vec;\n\n// When finished, one can call .finish() to convert back to the abi\nstruct PrivateContext {\n    // docs:start:private-context\n    inputs: PrivateContextInputs,\n    side_effect_counter: u32,\n\n    min_revertible_side_effect_counter: u32,\n\n    args_hash : Field,\n    return_hash : Field,\n\n    max_block_number: MaxBlockNumber,\n\n    note_hash_read_requests: BoundedVec<SideEffect, MAX_NOTE_HASH_READ_REQUESTS_PER_CALL>,\n    nullifier_read_requests: BoundedVec<ReadRequest, MAX_NULLIFIER_READ_REQUESTS_PER_CALL>,\n    nullifier_key_validation_requests: BoundedVec<NullifierKeyValidationRequest, MAX_NULLIFIER_KEY_VALIDATION_REQUESTS_PER_CALL>,\n\n    new_note_hashes: BoundedVec<SideEffect, MAX_NEW_NOTE_HASHES_PER_CALL>,\n    new_nullifiers: BoundedVec<SideEffectLinkedToNoteHash, MAX_NEW_NULLIFIERS_PER_CALL>,\n\n    private_call_stack_hashes : BoundedVec<Field, MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL>,\n    public_call_stack_hashes : BoundedVec<Field, MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL>,\n    new_l2_to_l1_msgs : BoundedVec<L2ToL1Message, MAX_NEW_L2_TO_L1_MSGS_PER_CALL>,\n    // docs:end:private-context\n\n    // Header of a block whose state is used during private execution (not the block the transaction is included in).\n    historical_header: Header,\n\n    // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n    // encrypted_logs_preimages: Vec<Field>,\n    // unencrypted_logs_preimages: Vec<Field>,\n\n    nullifier_key: Option<NullifierKeyPair>,\n}\n\nimpl ContextInterface for PrivateContext {\n    fn msg_sender(self) -> AztecAddress {\n        self.inputs.call_context.msg_sender\n    }\n\n    fn this_address(self) -> AztecAddress {\n        self.inputs.call_context.storage_contract_address\n    }\n\n    fn this_portal_address(self) -> EthAddress {\n        self.inputs.call_context.portal_contract_address\n    }\n\n    fn chain_id(self) -> Field {\n        self.inputs.private_global_variables.chain_id\n    }\n\n    fn version(self) -> Field {\n        self.inputs.private_global_variables.version\n    }\n\n    fn selector(self) -> FunctionSelector {\n        self.inputs.call_context.function_selector\n    }\n\n    fn get_args_hash(self) -> Field {\n        self.args_hash\n    }\n\n    fn push_new_note_hash(&mut self, note_hash: Field) {\n        let side_effect = SideEffect { value: note_hash, counter: self.side_effect_counter };\n        self.new_note_hashes.push(side_effect);\n        self.side_effect_counter = self.side_effect_counter + 1;\n    }\n\n    fn push_new_nullifier(&mut self, nullifier: Field, nullified_commitment: Field) {\n        let side_effect = SideEffectLinkedToNoteHash { value: nullifier, note_hash: nullified_commitment, counter: self.side_effect_counter };\n        self.new_nullifiers.push(side_effect);\n        self.side_effect_counter = self.side_effect_counter + 1;\n    }\n}\n\nimpl PrivateContext {\n    pub fn new(inputs: PrivateContextInputs, args_hash: Field) -> PrivateContext {\n        let side_effect_counter = inputs.start_side_effect_counter;\n        let mut min_revertible_side_effect_counter = 0;\n        if is_empty(inputs.call_context.msg_sender) {\n            min_revertible_side_effect_counter = side_effect_counter;\n        }\n        PrivateContext {\n            inputs,\n            side_effect_counter,\n            min_revertible_side_effect_counter,\n            args_hash,\n            return_hash: 0,\n            max_block_number: MaxBlockNumber::empty(),\n            note_hash_read_requests: BoundedVec::new(),\n            nullifier_read_requests: BoundedVec::new(),\n            nullifier_key_validation_requests: BoundedVec::new(),\n            new_note_hashes: BoundedVec::new(),\n            new_nullifiers: BoundedVec::new(),\n            historical_header: inputs.historical_header,\n            private_call_stack_hashes: BoundedVec::new(),\n            public_call_stack_hashes: BoundedVec::new(),\n            new_l2_to_l1_msgs: BoundedVec::new(),\n            // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n            // encrypted_logs_preimages: Vec::new(),\n            // unencrypted_logs_preimages: Vec::new(),\n            nullifier_key: Option::none()\n        }\n    }\n\n    // Returns the header of a block whose state is used during private execution (not the block the transaction is\n    // included in).\n    fn get_header(self) -> Header {\n        self.historical_header\n    }\n\n    // Returns the header of an arbitrary block whose block number is less than or equal to the block number\n    // of historical header.\n    pub fn get_header_at(self, block_number: u32) -> Header {\n        get_header_at(block_number, self)\n    }\n\n    pub fn set_return_hash(&mut self, returns_hasher: ArgsHasher) {\n        returns::pack_returns(returns_hasher.fields);\n        self.return_hash = returns_hasher.hash();\n    }\n\n    pub fn finish(self) -> PrivateCircuitPublicInputs {\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n        let encrypted_logs_hash = 0;\n        let unencrypted_logs_hash = 0;\n        let encrypted_log_preimages_length = 0;\n        let unencrypted_log_preimages_length = 0;\n\n        let priv_circuit_pub_inputs = PrivateCircuitPublicInputs {\n            call_context: self.inputs.call_context,\n            args_hash: self.args_hash,\n            returns_hash: self.return_hash,\n            min_revertible_side_effect_counter: self.min_revertible_side_effect_counter,\n            max_block_number: self.max_block_number,\n            note_hash_read_requests: self.note_hash_read_requests.storage,\n            nullifier_read_requests: self.nullifier_read_requests.storage,\n            nullifier_key_validation_requests: self.nullifier_key_validation_requests.storage,\n            new_note_hashes: self.new_note_hashes.storage,\n            new_nullifiers: self.new_nullifiers.storage,\n            private_call_stack_hashes: self.private_call_stack_hashes.storage,\n            public_call_stack_hashes: self.public_call_stack_hashes.storage,\n            new_l2_to_l1_msgs: self.new_l2_to_l1_msgs.storage,\n            start_side_effect_counter: self.inputs.start_side_effect_counter,\n            end_side_effect_counter: self.side_effect_counter,\n            encrypted_logs_hash,\n            unencrypted_logs_hash,\n            encrypted_log_preimages_length,\n            unencrypted_log_preimages_length,\n            historical_header: self.historical_header,\n            chain_id: self.inputs.private_global_variables.chain_id,\n            version: self.inputs.private_global_variables.version\n        };\n\n        priv_circuit_pub_inputs\n    }\n\n    pub fn capture_min_revertible_side_effect_counter(&mut self) {\n        self.min_revertible_side_effect_counter = self.side_effect_counter;\n    }\n\n    // docs:start:max-block-number\n    pub fn set_tx_max_block_number(&mut self, max_block_number: u32) {\n        // docs:end:max-block-number\n        self.max_block_number = MaxBlockNumber::min_with_u32(self.max_block_number, max_block_number);\n    }\n\n    pub fn push_note_hash_read_request(&mut self, note_hash: Field) {\n        let side_effect = SideEffect { value: note_hash, counter: self.side_effect_counter };\n        self.note_hash_read_requests.push(side_effect);\n        self.side_effect_counter = self.side_effect_counter + 1;\n    }\n\n    pub fn push_nullifier_read_request(&mut self, nullifier: Field) {\n        let request = ReadRequest { value: nullifier, counter: self.side_effect_counter };\n        self.nullifier_read_requests.push(request);\n        self.side_effect_counter = self.side_effect_counter + 1;\n    }\n\n    pub fn request_nullifier_secret_key(&mut self, account: AztecAddress) -> GrumpkinPrivateKey {\n        let key_pair = if self.nullifier_key.is_none() {\n            let key_pair = get_nullifier_key_pair(account);\n            validate_nullifier_key_against_address(account, key_pair.public_key);\n            let request = NullifierKeyValidationRequest { public_key: key_pair.public_key, secret_key: key_pair.secret_key };\n            self.nullifier_key_validation_requests.push(request);\n            self.nullifier_key = Option::some(key_pair);\n            key_pair\n        } else {\n            let key_pair = self.nullifier_key.unwrap_unchecked();\n            // If MAX_NULLIFIER_KEY_VALIDATION_REQUESTS_PER_CALL is larger than 1, need to update the way the key pair is cached.\n            assert(MAX_NULLIFIER_KEY_VALIDATION_REQUESTS_PER_CALL == 1);\n            assert(\n                key_pair.account == account, \"Cannot query nullifier key for more than one account per call\"\n            );\n            key_pair\n        };\n        key_pair.secret_key\n    }\n\n    // docs:start:context_message_portal\n    pub fn message_portal(&mut self, recipient: EthAddress, content: Field) {\n        // docs:end:context_message_portal\n        let message = L2ToL1Message { recipient, content };\n        self.new_l2_to_l1_msgs.push(message);\n    }\n\n    // docs:start:context_consume_l1_to_l2_message\n    // docs:start:consume_l1_to_l2_message\n    pub fn consume_l1_to_l2_message(&mut self, content: Field, secret: Field, sender: EthAddress) {\n        // docs:end:context_consume_l1_to_l2_message\n        let nullifier = process_l1_to_l2_message(\n            self.historical_header.state.l1_to_l2_message_tree.root,\n            self.this_address(),\n            sender,\n            self.chain_id(),\n            self.version(),\n            content,\n            secret\n        );\n\n        // Push nullifier (and the \"commitment\" corresponding to this can be \"empty\")\n        self.push_new_nullifier(nullifier, 0)\n    }\n    // docs:end:consume_l1_to_l2_message\n\n    pub fn accumulate_encrypted_logs<N>(&mut self, log: [Field; N]) {\n        let _void1 = self.inputs;\n        let _void2 = log;\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n    }\n\n    pub fn accumulate_unencrypted_logs<T>(&mut self, log: T) {\n        let _void1 = self.inputs;\n        let _void2 = log;\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n    }\n\n    pub fn call_private_function<ARGS_COUNT>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT]\n    ) -> PackedReturns {\n        let args_hash = hash_args_array(args);\n        assert(args_hash == arguments::pack_arguments(args));\n        self.call_private_function_with_packed_args(contract_address, function_selector, args_hash, false, false)\n    }\n\n    pub fn static_call_private_function<ARGS_COUNT>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT]\n    ) -> PackedReturns {\n        let args_hash = hash_args_array(args);\n        assert(args_hash == arguments::pack_arguments(args));\n        self.call_private_function_with_packed_args(contract_address, function_selector, args_hash, true, false)\n    }\n\n    pub fn delegate_call_private_function<ARGS_COUNT>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT]\n    ) -> PackedReturns {\n        let args_hash = hash_args_array(args);\n        assert(args_hash == arguments::pack_arguments(args));\n        self.call_private_function_with_packed_args(contract_address, function_selector, args_hash, false, true)\n    }\n\n    pub fn call_private_function_no_args<RETURNS_COUNT>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector\n    ) -> PackedReturns {\n        self.call_private_function_with_packed_args(contract_address, function_selector, 0, false, false)\n    }\n\n    pub fn static_call_private_function_no_args<RETURNS_COUNT>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector\n    ) -> PackedReturns {\n        self.call_private_function_with_packed_args(contract_address, function_selector, 0, true, false)\n    }\n\n    pub fn delegate_call_private_function_no_args<ARGS_COUNT>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector\n    ) -> PackedReturns {\n        self.call_private_function_with_packed_args(contract_address, function_selector, 0, false, true)\n    }\n\n    pub fn call_private_function_with_packed_args<RETURNS_COUNT>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args_hash: Field,\n        is_static_call: bool,\n        is_delegate_call: bool\n    ) -> PackedReturns {\n        let mut is_static_call = is_static_call | self.inputs.call_context.is_static_call;\n        let item = call_private_function_internal(\n            contract_address,\n            function_selector,\n            args_hash,\n            self.side_effect_counter,\n            is_static_call,\n            is_delegate_call\n        );\n\n        assert_eq(item.public_inputs.call_context.side_effect_counter, self.side_effect_counter);\n        assert_eq(item.public_inputs.start_side_effect_counter, self.side_effect_counter);\n        self.side_effect_counter = item.public_inputs.end_side_effect_counter + 1;\n\n        // TODO (fees) figure out why this crashes the prover and enable it\n        // we need this in order to pay fees inside child call contexts\n        // assert(\n        //     (item.public_inputs.min_revertible_side_effect_counter == 0 as u32)\n        //     | (item.public_inputs.min_revertible_side_effect_counter\n        //         > self.min_revertible_side_effect_counter)\n        // );\n\n        // if item.public_inputs.min_revertible_side_effect_counter\n        //     > self.min_revertible_side_effect_counter {\n        //     self.min_revertible_side_effect_counter = item.public_inputs.min_revertible_side_effect_counter;\n        // }\n\n        assert(contract_address.eq(item.contract_address));\n        assert(function_selector.eq(item.function_data.selector));\n\n        assert(args_hash == item.public_inputs.args_hash);\n\n        // Assert that the call context of the enqueued call generated by the oracle matches our request.\n        assert(item.public_inputs.call_context.is_delegate_call == is_delegate_call);\n        assert(item.public_inputs.call_context.is_static_call == is_static_call);\n\n        if (is_delegate_call) {\n            // For delegate calls, we also constrain the execution context address for the nested call to be equal to our address.\n            assert(\n                item.public_inputs.call_context.storage_contract_address.eq(self.inputs.call_context.storage_contract_address)\n            );\n            assert(item.public_inputs.call_context.msg_sender.eq(self.inputs.call_context.msg_sender));\n        } else {\n            // For non-delegate calls, we also constrain the execution context address for the nested call to be equal to the address we called.\n            assert(item.public_inputs.call_context.storage_contract_address.eq(contract_address));\n            assert(\n                item.public_inputs.call_context.msg_sender.eq(self.inputs.call_context.storage_contract_address)\n            );\n        }\n\n        self.private_call_stack_hashes.push(item.hash());\n\n        PackedReturns::new(item.public_inputs.returns_hash)\n    }\n\n    pub fn call_public_function<ARGS_COUNT>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT]\n    ) {\n        let args_hash = hash_args_array(args);\n        assert(args_hash == arguments::pack_arguments(args));\n        self.call_public_function_with_packed_args(contract_address, function_selector, args_hash, false, false)\n    }\n\n    pub fn static_call_public_function<ARGS_COUNT>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT]\n    ) {\n        let args_hash = hash_args_array(args);\n        assert(args_hash == arguments::pack_arguments(args));\n        self.call_public_function_with_packed_args(contract_address, function_selector, args_hash, true, false)\n    }\n\n    pub fn delegate_call_public_function<ARGS_COUNT>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT]\n    ) {\n        let args_hash = hash_args_array(args);\n        assert(args_hash == arguments::pack_arguments(args));\n        self.call_public_function_with_packed_args(contract_address, function_selector, args_hash, false, true)\n    }\n\n    pub fn call_public_function_no_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector\n    ) {\n        self.call_public_function_with_packed_args(contract_address, function_selector, 0, false, false)\n    }\n\n    pub fn static_call_public_function_no_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector\n    ) {\n        self.call_public_function_with_packed_args(contract_address, function_selector, 0, true, false)\n    }\n\n    pub fn delegate_call_public_function_no_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector\n    ) {\n        self.call_public_function_with_packed_args(contract_address, function_selector, 0, false, true)\n    }\n\n    pub fn call_public_function_with_packed_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args_hash: Field,\n        is_static_call: bool,\n        is_delegate_call: bool\n    ) {\n        let mut is_static_call = is_static_call | self.inputs.call_context.is_static_call;\n        let fields = enqueue_public_function_call_internal(\n            contract_address,\n            function_selector,\n            args_hash,\n            self.side_effect_counter,\n            is_static_call,\n            is_delegate_call\n        );\n\n        let mut reader = Reader::new(fields);\n\n        // Note: Not using PublicCirclePublicInputs::deserialize here, because everything below args_hash is 0 and\n        // there is no more data in fields because there is only ENQUEUE_PUBLIC_FUNCTION_CALL_RETURN_SIZE fields!\n        let item = PublicCallStackItem {\n            contract_address: AztecAddress::from_field(reader.read()),\n            function_data: reader.read_struct(FunctionData::deserialize),\n            public_inputs: PublicCircuitPublicInputs {\n                call_context: reader.read_struct(CallContext::deserialize),\n                args_hash: reader.read(),\n                returns_hash: 0,\n                nullifier_read_requests: [ReadRequest::empty(); MAX_NULLIFIER_READ_REQUESTS_PER_CALL],\n                nullifier_non_existent_read_requests: [ReadRequest::empty(); MAX_NULLIFIER_NON_EXISTENT_READ_REQUESTS_PER_CALL],\n                contract_storage_update_requests: [StorageUpdateRequest::empty(); MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL],\n                contract_storage_reads: [StorageRead::empty(); MAX_PUBLIC_DATA_READS_PER_CALL],\n                public_call_stack_hashes: [0; MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL],\n                new_note_hashes: [SideEffect::empty(); MAX_NEW_NOTE_HASHES_PER_CALL],\n                new_nullifiers: [SideEffectLinkedToNoteHash::empty(); MAX_NEW_NULLIFIERS_PER_CALL],\n                new_l2_to_l1_msgs: [L2ToL1Message::empty(); MAX_NEW_L2_TO_L1_MSGS_PER_CALL],\n                start_side_effect_counter: 0,\n                end_side_effect_counter: 0,\n                unencrypted_logs_hash: 0,\n                unencrypted_log_preimages_length: 0,\n                historical_header: Header::empty(),\n                prover_address: AztecAddress::zero(),\n                revert_code: 0,\n                gas_left: Gas::empty()\n            },\n            is_execution_request: true\n        };\n        reader.finish();\n\n        assert(contract_address.eq(item.contract_address));\n        assert(function_selector.eq(item.function_data.selector));\n\n        assert_eq(item.public_inputs.call_context.side_effect_counter, self.side_effect_counter);\n        // We increment the sideffect counter by one, to account for the call itself being a side effect.\n        self.side_effect_counter = self.side_effect_counter + 1;\n\n        assert(args_hash == item.public_inputs.args_hash);\n\n        // Assert that the call context of the enqueued call generated by the oracle matches our request.\n        assert(item.public_inputs.call_context.is_delegate_call == is_delegate_call);\n        assert(item.public_inputs.call_context.is_static_call == is_static_call);\n\n        if (is_delegate_call) {\n            // For delegate calls, we also constrain the execution context address for the nested call to be equal to our address.\n            assert(\n                item.public_inputs.call_context.storage_contract_address.eq(self.inputs.call_context.storage_contract_address)\n            );\n            assert(item.public_inputs.call_context.msg_sender.eq(self.inputs.call_context.msg_sender));\n        } else {\n            // For non-delegate calls, we also constrain the execution context address for the nested call to be equal to the address we called.\n            assert(item.public_inputs.call_context.storage_contract_address.eq(contract_address));\n            assert(\n                item.public_inputs.call_context.msg_sender.eq(self.inputs.call_context.storage_contract_address)\n            );\n        }\n\n        self.public_call_stack_hashes.push(item.hash());\n    }\n}\n\nimpl Empty for PrivateContext {\n    fn empty() -> Self {\n        PrivateContext {\n            inputs: PrivateContextInputs::empty(),\n            side_effect_counter: 0 as u32,\n            min_revertible_side_effect_counter: 0 as u32,\n            args_hash : 0,\n            return_hash : 0,\n            max_block_number: MaxBlockNumber::empty(),\n            note_hash_read_requests: BoundedVec::new(),\n            nullifier_read_requests: BoundedVec::new(),\n            nullifier_key_validation_requests: BoundedVec::new(),\n            new_note_hashes: BoundedVec::new(),\n            new_nullifiers: BoundedVec::new(),\n            private_call_stack_hashes : BoundedVec::new(),\n            public_call_stack_hashes : BoundedVec::new(),\n            new_l2_to_l1_msgs : BoundedVec::new(),\n            historical_header: Header::empty(),\n            nullifier_key: Option::none(),\n        }\n    }\n}\n\nstruct PackedReturns {\n  packed_returns: Field,\n}\n\nimpl PackedReturns {\n    pub fn new(packed_returns: Field) -> Self {\n        PackedReturns { packed_returns }\n    }\n\n    pub fn assert_empty(self) {\n        assert_eq(self.packed_returns, 0);\n    }\n\n    pub fn raw(self) -> Field {\n        self.packed_returns\n    }\n\n    pub fn unpack<N>(self) -> [Field; N] {\n        let unpacked: [Field; N] = returns::unpack_returns(self.packed_returns);\n        assert_eq(self.packed_returns, hash_args_array(unpacked));\n        unpacked\n    }\n\n    pub fn unpack_into<T, N>(self) -> T where T: Deserialize<N> {\n        let unpacked: [Field; N] = self.unpack();\n        Deserialize::deserialize(unpacked)\n    }\n}\n","path":"/Users/jack-sw/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.35.1/noir-projects/aztec-nr/aztec/src/context/private_context.nr"},"77":{"source":"use dep::protocol_types::{abis::function_selector::FunctionSelector, address::AztecAddress};\n\n#[oracle(callPublicFunction)]\nfn call_public_function_oracle<RETURNS_COUNT>(\n    _contract_address: AztecAddress,\n    _function_selector: FunctionSelector,\n    _args_hash: Field,\n    _side_effect_counter: u32,\n    _is_static_call: bool,\n    _is_delegate_call: bool\n) -> [Field; RETURNS_COUNT] {}\n\nunconstrained pub fn call_public_function_internal<RETURNS_COUNT>(\n    contract_address: AztecAddress,\n    function_selector: FunctionSelector,\n    args_hash: Field,\n    side_effect_counter: u32,\n    is_static_call: bool,\n    is_delegate_call: bool\n) -> [Field; RETURNS_COUNT] {\n    call_public_function_oracle(\n        contract_address,\n        function_selector,\n        args_hash,\n        side_effect_counter,\n        is_static_call,\n        is_delegate_call\n    )\n}\n","path":"/Users/jack-sw/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.35.1/noir-projects/aztec-nr/aztec/src/oracle/public_call.nr"},"79":{"source":"use dep::protocol_types::{\n    abis::{function_selector::FunctionSelector, private_call_stack_item::PrivateCallStackItem},\n    address::AztecAddress, constants::PRIVATE_CALL_STACK_ITEM_LENGTH\n};\n\n#[oracle(callPrivateFunction)]\nfn call_private_function_oracle(\n    _contract_address: AztecAddress,\n    _function_selector: FunctionSelector,\n    _args_hash: Field,\n    _start_side_effect_counter: u32,\n    _is_static_call: bool,\n    _is_delegate_call: bool\n) -> [Field; PRIVATE_CALL_STACK_ITEM_LENGTH] {}\n\nunconstrained pub fn call_private_function_internal(\n    contract_address: AztecAddress,\n    function_selector: FunctionSelector,\n    args_hash: Field,\n    start_side_effect_counter: u32,\n    is_static_call: bool,\n    is_delegate_call: bool\n) -> PrivateCallStackItem {\n    let fields = call_private_function_oracle(\n        contract_address,\n        function_selector,\n        args_hash,\n        start_side_effect_counter,\n        is_static_call,\n        is_delegate_call\n    );\n\n    PrivateCallStackItem::deserialize(fields)\n}\n","path":"/Users/jack-sw/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.35.1/noir-projects/aztec-nr/aztec/src/oracle/call_private_function.nr"},"80":{"source":"use crate::note::{note_header::NoteHeader, note_interface::NoteInterface};\n\nuse dep::protocol_types::{address::AztecAddress, utils::arr_copy_slice};\n\n#[oracle(notifyCreatedNote)]\nfn notify_created_note_oracle<N>(\n    _storage_slot: Field,\n    _note_type_id: Field,\n    _serialized_note: [Field; N],\n    _inner_note_hash: Field\n) -> Field {}\n\nunconstrained pub fn notify_created_note<N>(\n    storage_slot: Field,\n    note_type_id: Field,\n    serialized_note: [Field; N],\n    inner_note_hash: Field\n) -> Field {\n    notify_created_note_oracle(storage_slot, note_type_id, serialized_note, inner_note_hash)\n}\n\n#[oracle(notifyNullifiedNote)]\nfn notify_nullified_note_oracle<N>(_nullifier: Field, _inner_note_hash: Field) -> Field {}\n\nunconstrained pub fn notify_nullified_note<N>(nullifier: Field, inner_note_hash: Field) -> Field {\n    notify_nullified_note_oracle(nullifier, inner_note_hash)\n}\n\n#[oracle(getNotes)]\nfn get_notes_oracle<N, S>(\n    _storage_slot: Field,\n    _num_selects: u8,\n    _select_by_indexes: [u8; N],\n    _select_by_offsets: [u8; N],\n    _select_by_lengths: [u8; N],\n    _select_values: [Field; N],\n    _select_comparators: [u8; N],\n    _sort_by_indexes: [u8; N],\n    _sort_by_offsets: [u8; N],\n    _sort_by_lengths: [u8; N],\n    _sort_order: [u8; N],\n    _limit: u32,\n    _offset: u32,\n    _status: u8,\n    _return_size: u32,\n    _placeholder_fields: [Field; S]\n) -> [Field; S] {}\n\nunconstrained fn get_notes_oracle_wrapper<N, S>(\n    storage_slot: Field,\n    num_selects: u8,\n    select_by_indexes: [u8; N],\n    select_by_offsets: [u8; N],\n    select_by_lengths: [u8; N],\n    select_values: [Field; N],\n    select_comparators: [u8; N],\n    sort_by_indexes: [u8; N],\n    sort_by_offsets: [u8; N],\n    sort_by_lengths: [u8; N],\n    sort_order: [u8; N],\n    limit: u32,\n    offset: u32,\n    status: u8,\n    mut placeholder_fields: [Field; S]\n) -> [Field; S] {\n    let return_size = placeholder_fields.len() as u32;\n    get_notes_oracle(\n        storage_slot,\n        num_selects,\n        select_by_indexes,\n        select_by_offsets,\n        select_by_lengths,\n        select_values,\n        select_comparators,\n        sort_by_indexes,\n        sort_by_offsets,\n        sort_by_lengths,\n        sort_order,\n        limit,\n        offset,\n        status,\n        return_size,\n        placeholder_fields\n    )\n}\n\nunconstrained pub fn get_notes<Note, N, M, S, NS>(\n    storage_slot: Field,\n    num_selects: u8,\n    select_by_indexes: [u8; M],\n    select_by_offsets: [u8; M],\n    select_by_lengths: [u8; M],\n    select_values: [Field; M],\n    select_comparators: [u8; M],\n    sort_by_indexes: [u8; M],\n    sort_by_offsets: [u8; M],\n    sort_by_lengths: [u8; M],\n    sort_order: [u8; M],\n    limit: u32,\n    offset: u32,\n    status: u8,\n    mut placeholder_opt_notes: [Option<Note>; S], // TODO: Remove it and use `limit` to initialize the note array.\n    placeholder_fields: [Field; NS], // TODO: Remove it and use `limit` to initialize the note array.\n    _placeholder_note_length: [Field; N] // Turbofish hack? Compiler breaks calculating read_offset unless we add this parameter\n) -> [Option<Note>; S] where Note: NoteInterface<N> {\n    let fields = get_notes_oracle_wrapper(\n        storage_slot,\n        num_selects,\n        select_by_indexes,\n        select_by_offsets,\n        select_by_lengths,\n        select_values,\n        select_comparators,\n        sort_by_indexes,\n        sort_by_offsets,\n        sort_by_lengths,\n        sort_order,\n        limit,\n        offset,\n        status,\n        placeholder_fields\n    );\n    let num_notes = fields[0] as u64;\n    let contract_address = AztecAddress::from_field(fields[1]);\n    for i in 0..placeholder_opt_notes.len() {\n        if i < num_notes {\n            // lengths named as per typescript.\n            let return_header_length: u64 = 2; // num_notes & contract_address.\n            let extra_preimage_length: u64 = 2; // nonce & is_transient.\n            let read_offset: u64 = return_header_length + i * (N + extra_preimage_length);\n            let nonce = fields[read_offset];\n            let is_transient = fields[read_offset + 1] as bool;\n            let header = NoteHeader { contract_address, nonce, storage_slot, is_transient };\n            let serialized_note = arr_copy_slice(fields, [0; N], read_offset + 2);\n            let mut note = Note::deserialize_content(serialized_note);\n            // TODO: change this to note.set_header(header) once https://github.com/noir-lang/noir/issues/4095 is fixed\n            Note::set_header(&mut note, header);\n            placeholder_opt_notes[i] = Option::some(note);\n        };\n    }\n    placeholder_opt_notes\n}\n\n// Only ever use this in private!\n#[oracle(checkNullifierExists)]\nfn check_nullifier_exists_oracle(_inner_nullifier: Field) -> Field {}\n\n// Only ever use this in private!\nunconstrained pub fn check_nullifier_exists(inner_nullifier: Field) -> bool {\n    check_nullifier_exists_oracle(inner_nullifier) == 1\n}\n","path":"/Users/jack-sw/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.35.1/noir-projects/aztec-nr/aztec/src/oracle/notes.nr"},"81":{"source":"#[oracle(packReturns)]\nfn pack_returns_oracle<N>(_returns: [Field]) -> Field {}\n\nunconstrained pub fn pack_returns(returns: [Field]) {\n    let _unused = pack_returns_oracle(returns);\n}\n\n#[oracle(unpackReturns)]\nfn unpack_returns_oracle<N>(_return_hash: Field) -> [Field; N] {}\n\nunconstrained pub fn unpack_returns<N>(return_hash: Field) -> [Field; N] {\n    unpack_returns_oracle(return_hash)\n}\n","path":"/Users/jack-sw/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.35.1/noir-projects/aztec-nr/aztec/src/oracle/returns.nr"},"82":{"source":"use dep::protocol_types::{\n    abis::function_selector::FunctionSelector, address::AztecAddress,\n    constants::ENQUEUE_PUBLIC_FUNCTION_CALL_RETURN_LENGTH\n};\n\n#[oracle(enqueuePublicFunctionCall)]\nfn enqueue_public_function_call_oracle(\n    _contract_address: AztecAddress,\n    _function_selector: FunctionSelector,\n    _args_hash: Field,\n    _side_effect_counter: u32,\n    _is_static_call: bool,\n    _is_delegate_call: bool\n) -> [Field; ENQUEUE_PUBLIC_FUNCTION_CALL_RETURN_LENGTH] {}\n\nunconstrained pub fn enqueue_public_function_call_internal(\n    contract_address: AztecAddress,\n    function_selector: FunctionSelector,\n    args_hash: Field,\n    side_effect_counter: u32,\n    is_static_call: bool,\n    is_delegate_call: bool\n) -> [Field; ENQUEUE_PUBLIC_FUNCTION_CALL_RETURN_LENGTH] {\n    enqueue_public_function_call_oracle(\n        contract_address,\n        function_selector,\n        args_hash,\n        side_effect_counter,\n        is_static_call,\n        is_delegate_call\n    )\n}\n","path":"/Users/jack-sw/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.35.1/noir-projects/aztec-nr/aztec/src/oracle/enqueue_public_function_call.nr"},"83":{"source":"#[oracle(packArguments)]\nfn pack_arguments_oracle<N>(_args: [Field; N]) -> Field {}\n\n/// - Pack arguments will notify the simulator that these arguments will be used later at\n///   some point in the call. \n/// - When the external call is made later, the simulator will know what the values unpack to.\n/// - This oracle will not be required in public vm functions, as the vm will keep track of arguments \n///   itself.\nunconstrained pub fn pack_arguments<N>(args: [Field; N]) -> Field {\n    pack_arguments_oracle(args)\n}\n","path":"/Users/jack-sw/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.35.1/noir-projects/aztec-nr/aztec/src/oracle/arguments.nr"},"84":{"source":"use dep::protocol_types::{address::{AztecAddress, PartialAddress, PublicKeysHash}, grumpkin_point::GrumpkinPoint};\n\n#[oracle(getPublicKeyAndPartialAddress)]\nfn get_public_key_and_partial_address_oracle(_address: AztecAddress) -> [Field; 3] {}\n\nunconstrained fn get_public_key_and_partial_address_internal(address: AztecAddress) -> [Field; 3] {\n    get_public_key_and_partial_address_oracle(address)\n}\n\npub fn get_public_key(address: AztecAddress) -> GrumpkinPoint {\n    let result = get_public_key_and_partial_address_internal(address);\n    let pub_key = GrumpkinPoint::new(result[0], result[1]);\n    let partial_address = PartialAddress::from_field(result[2]);\n\n    let calculated_address = AztecAddress::compute(PublicKeysHash::compute(pub_key), partial_address);\n    assert(calculated_address.eq(address));\n\n    pub_key\n}\n","path":"/Users/jack-sw/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.35.1/noir-projects/aztec-nr/aztec/src/oracle/get_public_key.nr"},"85":{"source":"use dep::protocol_types::traits::{Deserialize, Serialize};\n\n#[oracle(storageRead)]\nfn storage_read_oracle<N>(_storage_slot: Field, _number_of_elements: Field) -> [Field; N] {}\n\nunconstrained fn storage_read_oracle_wrapper<N>(_storage_slot: Field) -> [Field; N] {\n    storage_read_oracle(_storage_slot, N)\n}\n\npub fn storage_read<N>(storage_slot: Field) -> [Field; N] {\n    storage_read_oracle_wrapper(storage_slot)\n}\n\n#[oracle(storageWrite)]\nfn storage_write_oracle<N>(_storage_slot: Field, _values: [Field; N]) -> [Field; N] {}\n\nunconstrained pub fn storage_write<N>(storage_slot: Field, fields: [Field; N]) {\n    let _hash = storage_write_oracle(storage_slot, fields);\n}\n","path":"/Users/jack-sw/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.35.1/noir-projects/aztec-nr/aztec/src/oracle/storage.nr"},"87":{"source":"use dep::protocol_types::{address::AztecAddress, grumpkin_point::GrumpkinPoint};\n\n// TODO: Should take encrypted data.\n#[oracle(emitEncryptedLog)]\nfn emit_encrypted_log_oracle<N>(\n    _contract_address: AztecAddress,\n    _storage_slot: Field,\n    _note_type_id: Field,\n    _encryption_pub_key: GrumpkinPoint,\n    _preimage: [Field; N]\n) -> Field {}\n\nunconstrained pub fn emit_encrypted_log<N>(\n    contract_address: AztecAddress,\n    storage_slot: Field,\n    note_type_id: Field,\n    encryption_pub_key: GrumpkinPoint,\n    preimage: [Field; N]\n) -> Field {\n    emit_encrypted_log_oracle(\n        contract_address,\n        storage_slot,\n        note_type_id,\n        encryption_pub_key,\n        preimage\n    )\n}\n\n#[oracle(emitUnencryptedLog)]\nfn emit_unencrypted_log_oracle<T>(\n    _contract_address: AztecAddress,\n    _event_selector: Field,\n    _message: T\n) -> Field {}\n\nunconstrained pub fn emit_unencrypted_log<T>(\n    contract_address: AztecAddress,\n    event_selector: Field,\n    message: T\n) -> Field {\n    // https://github.com/AztecProtocol/aztec-packages/issues/885\n    emit_unencrypted_log_oracle(contract_address, event_selector, message)\n}\n","path":"/Users/jack-sw/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.35.1/noir-projects/aztec-nr/aztec/src/oracle/logs.nr"},"90":{"source":"use dep::protocol_types::{\n    constants::PUBLIC_DATA_TREE_HEIGHT, hash::pedersen_hash,\n    public_data_tree_leaf_preimage::PublicDataTreeLeafPreimage, traits::{Hash, Serialize},\n    utils::arr_copy_slice\n};\n\nglobal LEAF_PREIMAGE_LENGTH: u64 = 4;\nglobal PUBLIC_DATA_WITNESS: Field = 45;\n\nstruct PublicDataWitness {\n    index: Field,\n    leaf_preimage: PublicDataTreeLeafPreimage,\n    path: [Field; PUBLIC_DATA_TREE_HEIGHT],\n}\n\n#[oracle(getPublicDataTreeWitness)]\nfn get_public_data_witness_oracle(\n    _block_number: u32,\n    _leaf_slot: Field\n) -> [Field; PUBLIC_DATA_WITNESS] {}\n\nunconstrained pub fn get_public_data_witness(block_number: u32, leaf_slot: Field) -> PublicDataWitness {\n    let fields = get_public_data_witness_oracle(block_number, leaf_slot);\n    PublicDataWitness {\n        index: fields[0],\n        leaf_preimage: PublicDataTreeLeafPreimage { slot: fields[1], value: fields[2], next_index: fields[3] as u64, next_slot: fields[4] },\n        path: arr_copy_slice(fields, [0; PUBLIC_DATA_TREE_HEIGHT], 1 + LEAF_PREIMAGE_LENGTH)\n    }\n}\n","path":"/Users/jack-sw/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.35.1/noir-projects/aztec-nr/aztec/src/oracle/get_public_data_witness.nr"},"91":{"source":"use dep::protocol_types::{address::AztecAddress, grumpkin_point::GrumpkinPoint, grumpkin_private_key::GrumpkinPrivateKey};\n\nstruct NullifierKeyPair {\n    account: AztecAddress,\n    public_key: GrumpkinPoint,\n    secret_key: GrumpkinPrivateKey,\n}\n\n#[oracle(getNullifierKeyPair)]\nfn get_nullifier_key_pair_oracle(_account: AztecAddress) -> [Field; 4] {}\n\nunconstrained fn get_nullifier_key_pair_internal(account: AztecAddress) -> NullifierKeyPair {\n    let result = get_nullifier_key_pair_oracle(account);\n    NullifierKeyPair {\n        account,\n        public_key: GrumpkinPoint { x: result[0], y: result[1] },\n        secret_key: GrumpkinPrivateKey { high: result[2], low: result[3] }\n    }\n}\n\npub fn get_nullifier_key_pair(account: AztecAddress) -> NullifierKeyPair {\n    get_nullifier_key_pair_internal(account)\n}\n\npub fn get_nullifier_secret_key(account: AztecAddress) -> GrumpkinPrivateKey {\n    get_nullifier_key_pair_internal(account).secret_key\n}\n","path":"/Users/jack-sw/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.35.1/noir-projects/aztec-nr/aztec/src/oracle/nullifier_key.nr"},"92":{"source":"use dep::protocol_types::{\n    address::AztecAddress, contract_instance::ContractInstance, utils::arr_copy_slice,\n    constants::CONTRACT_INSTANCE_LENGTH, utils::reader::Reader\n};\n\n#[oracle(getContractInstance)]\nfn get_contract_instance_oracle(_address: AztecAddress) -> [Field; CONTRACT_INSTANCE_LENGTH] {}\n\n// Returns a ContractInstance plus a boolean indicating whether the instance was found.\n#[oracle(avmOpcodeGetContractInstance)]\nfn get_contract_instance_oracle_avm(_address: AztecAddress) -> [Field; CONTRACT_INSTANCE_LENGTH + 1] {}\n\nunconstrained fn get_contract_instance_internal(address: AztecAddress) -> [Field; CONTRACT_INSTANCE_LENGTH] {\n    get_contract_instance_oracle(address)\n}\n\nunconstrained fn get_contract_instance_internal_avm(address: AztecAddress) -> [Field; CONTRACT_INSTANCE_LENGTH + 1] {\n    get_contract_instance_oracle_avm(address)\n}\n\npub fn get_contract_instance(address: AztecAddress) -> ContractInstance {\n    let instance = ContractInstance::deserialize(get_contract_instance_internal(address));\n    assert(instance.to_address().eq(address));\n    instance\n}\n\npub fn get_contract_instance_avm(address: AztecAddress) -> Option<ContractInstance> {\n    let mut reader = Reader::new(get_contract_instance_internal_avm(address));\n    let found = reader.read();\n    if found == 0 {\n        Option::none()\n    } else {\n        Option::some(reader.read_struct(ContractInstance::deserialize))\n    }\n}\n","path":"/Users/jack-sw/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.35.1/noir-projects/aztec-nr/aztec/src/oracle/get_contract_instance.nr"},"93":{"source":"use dep::protocol_types::{\n    abis::nullifier_leaf_preimage::{NullifierLeafPreimage, NULLIFIER_LEAF_PREIMAGE_LENGTH},\n    constants::NULLIFIER_TREE_HEIGHT, hash::pedersen_hash, utils::arr_copy_slice\n};\n\n// INDEX_LENGTH + NULLIFIER_LEAF_PREIMAGE_LENGTH + NULLIFIER_TREE_HEIGHT\nglobal NULLIFIER_MEMBERSHIP_WITNESS: Field = 24;\n\nstruct NullifierMembershipWitness {\n    index: Field,\n    leaf_preimage: NullifierLeafPreimage,\n    path: [Field; NULLIFIER_TREE_HEIGHT],\n}\n\nimpl NullifierMembershipWitness {\n    pub fn deserialize(fields: [Field; NULLIFIER_MEMBERSHIP_WITNESS]) -> Self {\n        let leaf_preimage_fields = arr_copy_slice(fields, [0; NULLIFIER_LEAF_PREIMAGE_LENGTH], 1);\n        Self {\n            index: fields[0],\n            leaf_preimage: NullifierLeafPreimage::deserialize(leaf_preimage_fields),\n            path: arr_copy_slice(\n                fields,\n                [0; NULLIFIER_TREE_HEIGHT],\n                1 + NULLIFIER_LEAF_PREIMAGE_LENGTH\n            )\n        }\n    }\n}\n\n#[oracle(getLowNullifierMembershipWitness)]\nfn get_low_nullifier_membership_witness_oracle(\n    _block_number: u32,\n    _nullifier: Field\n) -> [Field; NULLIFIER_MEMBERSHIP_WITNESS] {}\n\n// Nullifier here refers to the nullifier we are looking to get non-inclusion proof for (by proving that a lower\n// nullifier's next_value is bigger than the nullifier)\nunconstrained pub fn get_low_nullifier_membership_witness(block_number: u32, nullifier: Field) -> NullifierMembershipWitness {\n    let fields = get_low_nullifier_membership_witness_oracle(block_number, nullifier);\n    NullifierMembershipWitness::deserialize(fields)\n}\n\n#[oracle(getNullifierMembershipWitness)]\nfn get_nullifier_membership_witness_oracle(\n    _block_number: u32,\n    _nullifier: Field\n) -> [Field; NULLIFIER_MEMBERSHIP_WITNESS] {}\n\n// Nullifier here refers to the nullifier we are looking to get non-inclusion proof for (by proving that a lower\n// nullifier's next_value is bigger than the nullifier)\nunconstrained pub fn get_nullifier_membership_witness(block_number: u32, nullifier: Field) -> NullifierMembershipWitness {\n    let fields = get_nullifier_membership_witness_oracle(block_number, nullifier);\n    NullifierMembershipWitness::deserialize(fields)\n}\n","path":"/Users/jack-sw/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.35.1/noir-projects/aztec-nr/aztec/src/oracle/get_nullifier_membership_witness.nr"},"99":{"source":"mod globals;\nmod inputs;\n\nmod private_context;\nmod public_context;\nmod avm_context;\nmod interface;\nmod gas;\n\nuse interface::ContextInterface;\nuse private_context::PrivateContext;\nuse private_context::PackedReturns;\nuse public_context::PublicContext;\nuse public_context::FunctionReturns;\nuse avm_context::AvmContext;\n\nstruct Context {\n    private: Option<&mut PrivateContext>,\n    public: Option<&mut PublicContext>,\n    avm: Option<&mut AvmContext>,\n}\n\nimpl Context {\n    pub fn private(context: &mut PrivateContext) -> Context {\n        Context { private: Option::some(context), public: Option::none(), avm: Option::none() }\n    }\n\n    pub fn public(context: &mut PublicContext) -> Context {\n        Context { public: Option::some(context), private: Option::none(), avm: Option::none() }\n    }\n\n    pub fn avm(context: &mut AvmContext) -> Context {\n        Context { avm: Option::some(context), public: Option::none(), private: Option::none() }\n    }\n\n    pub fn none() -> Context {\n        Context { public: Option::none(), private: Option::none(), avm: Option::none() }\n    }\n}\n","path":"/Users/jack-sw/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.35.1/noir-projects/aztec-nr/aztec/src/context.nr"},"102":{"source":"use dep::protocol_types::{\n    constants::GENERATOR_INDEX__PUBLIC_LEAF_INDEX, hash::pedersen_hash, address::AztecAddress,\n    header::Header, utils::field::full_field_less_than\n};\nuse dep::std::merkle::compute_merkle_root;\n\nuse crate::{context::PrivateContext, oracle::get_public_data_witness::get_public_data_witness};\n\nfn _public_storage_historical_read(storage_slot: Field, contract_address: AztecAddress, header: Header) -> Field {\n    // 1) Compute the leaf slot by siloing the storage slot with the contract address\n    let public_value_leaf_slot = pedersen_hash(\n        [contract_address.to_field(), storage_slot],\n        GENERATOR_INDEX__PUBLIC_LEAF_INDEX\n    );\n\n    // 2) Get the membership witness of the slot\n    let witness = get_public_data_witness(\n        header.global_variables.block_number as u32,\n        public_value_leaf_slot\n    );\n\n    // 3) Extract the value from the witness leaf and check that the storage slot is correct\n    let preimage = witness.leaf_preimage;\n\n    // Here we have two cases. Code based on same checks in `validate_public_data_reads` in `base_rollup_inputs`\n    // 1. The value is the same as the one in the witness\n    // 2. The value was never initialized and is zero\n    let is_less_than_slot = full_field_less_than(preimage.slot, public_value_leaf_slot);\n    let is_next_greater_than = full_field_less_than(public_value_leaf_slot, preimage.next_slot);\n    let is_max = ((preimage.next_index == 0) & (preimage.next_slot == 0));\n    let is_in_range = is_less_than_slot & (is_next_greater_than | is_max);\n\n    let value = if is_in_range {\n        0\n    } else {\n        assert_eq(preimage.slot, public_value_leaf_slot, \"Public data slot doesn't match witness\");\n        preimage.value\n    };\n\n    // 4) Prove that the leaf exists in the public data tree. Note that `hash` returns not just the hash of the value\n    // but also the metadata (slot, next index and next slot).\n    assert(\n        header.state.partial.public_data_tree.root\n        == compute_merkle_root(preimage.hash(), witness.index, witness.path), \"Proving public value inclusion failed\"\n    );\n\n    value\n}\n\npub fn public_storage_historical_read(\n    context: PrivateContext,\n    storage_slot: Field, // The storage slot to read\n    contract_address: AztecAddress // The contract we want to look into\n) -> Field {\n    _public_storage_historical_read(storage_slot, contract_address, context.historical_header)\n}\n\npub fn public_storage_historical_read_at(\n    context: PrivateContext,\n    storage_slot: Field, // The storage slot to read\n    contract_address: AztecAddress, // The contract we want to look into\n    block_number: u32 // The block number at the end of which we'll read the value\n) -> Field {\n    let header = context.get_header_at(block_number);\n\n    _public_storage_historical_read(storage_slot, contract_address, header)\n}\n","path":"/Users/jack-sw/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.35.1/noir-projects/aztec-nr/aztec/src/history/public_storage.nr"},"105":{"source":"use dep::std::merkle::compute_merkle_root;\nuse dep::protocol_types::header::Header;\n\nuse crate::{\n    context::PrivateContext, oracle::get_nullifier_membership_witness::get_nullifier_membership_witness,\n    note::{utils::compute_siloed_nullifier, note_interface::NoteInterface}\n};\n\nfn _nullifier_inclusion(nullifier: Field, header: Header) {\n    // 1) Get the membership witness of the nullifier\n    let witness = get_nullifier_membership_witness(header.global_variables.block_number as u32, nullifier);\n\n    // 2) Check that the witness we obtained matches the nullifier\n    assert(witness.leaf_preimage.nullifier == nullifier, \"Nullifier does not match value in witness\");\n\n    // 3) Compute the nullifier tree leaf\n    let nullifier_leaf = witness.leaf_preimage.hash();\n\n    // 4) Prove that the nullifier is in the nullifier tree\n    assert(\n        header.state.partial.nullifier_tree.root\n        == compute_merkle_root(nullifier_leaf, witness.index, witness.path), \"Proving nullifier inclusion failed\"\n    );\n    // --> Now we have traversed the trees all the way up to archive root and verified that the nullifier\n    //     was included in the nullifier tree.\n}\n\npub fn prove_nullifier_inclusion(nullifier: Field, context: PrivateContext) {\n    _nullifier_inclusion(nullifier, context.get_header());\n}\n\npub fn prove_nullifier_inclusion_at(\n    nullifier: Field,\n    block_number: u32, // The block at which we'll prove that the nullifier exists in the nullifier tree\n    context: PrivateContext\n) {\n    let header = context.get_header_at(block_number);\n\n    _nullifier_inclusion(nullifier, header);\n}\n\npub fn prove_note_is_nullified<Note, N>(\n    note: Note,\n    context: &mut PrivateContext\n) where Note: NoteInterface<N> {\n    let nullifier = compute_siloed_nullifier(note, context);\n\n    _nullifier_inclusion(nullifier, context.historical_header);\n}\n\npub fn prove_note_is_nullified_at<Note, N>(\n    note: Note,\n    block_number: u32,\n    context: &mut PrivateContext\n) where Note: NoteInterface<N> {\n    let nullifier = compute_siloed_nullifier(note, context);\n    let header = context.get_header_at(block_number);\n\n    _nullifier_inclusion(nullifier, header);\n}\n","path":"/Users/jack-sw/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.35.1/noir-projects/aztec-nr/aztec/src/history/nullifier_inclusion.nr"},"106":{"source":"use dep::protocol_types::{\n    address::AztecAddress, hash::{silo_nullifier, pedersen_hash},\n    constants::GENERATOR_INDEX__CONSTRUCTOR, abis::function_selector::FunctionSelector\n};\n\nuse crate::{\n    context::{PrivateContext, PublicContext, AvmContext, ContextInterface},\n    oracle::get_contract_instance::get_contract_instance,\n    oracle::get_contract_instance::get_contract_instance_avm,\n    history::nullifier_inclusion::prove_nullifier_inclusion\n};\n\npub fn mark_as_initialized_public(context: &mut PublicContext) {\n    mark_as_initialized(context);\n}\n\npub fn mark_as_initialized_avm(context: &mut AvmContext) {\n    mark_as_initialized(context);\n}\n\npub fn mark_as_initialized_private(context: &mut PrivateContext) {\n    mark_as_initialized(context);\n}\n\nfn mark_as_initialized<TContext>(context: &mut TContext) where TContext: ContextInterface {\n    let init_nullifier = compute_unsiloed_contract_initialization_nullifier((*context).this_address());\n    ContextInterface::push_new_nullifier(context, init_nullifier, 0);\n}\n\npub fn assert_is_initialized_public(context: &mut PublicContext) {\n    let init_nullifier = compute_unsiloed_contract_initialization_nullifier(context.this_address());\n    assert(context.nullifier_exists(init_nullifier, context.this_address()), \"Not initialized\");\n}\n\npub fn assert_is_initialized_avm(context: &mut AvmContext) {\n    let init_nullifier = compute_unsiloed_contract_initialization_nullifier(context.this_address());\n    assert(context.nullifier_exists(init_nullifier, context.this_address()), \"Not initialized\");\n}\n\npub fn assert_is_initialized_private(context: &mut PrivateContext) {\n    let init_nullifier = compute_contract_initialization_nullifier(context.this_address());\n    prove_nullifier_inclusion(init_nullifier, *context);\n}\n\nfn compute_contract_initialization_nullifier(address: AztecAddress) -> Field {\n    silo_nullifier(\n        address,\n        compute_unsiloed_contract_initialization_nullifier(address)\n    )\n}\n\nfn compute_unsiloed_contract_initialization_nullifier(address: AztecAddress) -> Field {\n    address.to_field()\n}\n\npub fn assert_initialization_matches_address_preimage_public(context: PublicContext) {\n    assert_initialization_matches_address_preimage(context);\n}\n\npub fn assert_initialization_matches_address_preimage_avm(context: AvmContext) {\n    let address = context.this_address();\n    let instance = get_contract_instance_avm(address).unwrap();\n    let expected_init = compute_initialization_hash(context.selector(), context.get_args_hash());\n    assert(instance.initialization_hash == expected_init, \"Initialization hash does not match\");\n    assert(\n        (instance.deployer.is_zero()) | (instance.deployer == context.msg_sender()), \"Initializer address is not the contract deployer\"\n    );\n}\n\npub fn assert_initialization_matches_address_preimage_private(context: PrivateContext) {\n    assert_initialization_matches_address_preimage(context);\n}\n\nfn assert_initialization_matches_address_preimage<TContext>(context: TContext) where TContext: ContextInterface {\n    let address = context.this_address();\n    let instance = get_contract_instance(address);\n    let expected_init = compute_initialization_hash(context.selector(), context.get_args_hash());\n    assert(instance.initialization_hash == expected_init, \"Initialization hash does not match\");\n    assert(\n        (instance.deployer.is_zero()) | (instance.deployer == context.msg_sender()), \"Initializer address is not the contract deployer\"\n    );\n}\n\npub fn compute_initialization_hash(init_selector: FunctionSelector, init_args_hash: Field) -> Field {\n    pedersen_hash(\n        [init_selector.to_field(), init_args_hash],\n        GENERATOR_INDEX__CONSTRUCTOR\n    )\n}\n","path":"/Users/jack-sw/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.35.1/noir-projects/aztec-nr/aztec/src/initializer.nr"},"107":{"source":"use dep::protocol_types::{\n    address::{AztecAddress, EthAddress},\n    constants::{\n    GENERATOR_INDEX__L1_TO_L2_MESSAGE_SECRET, GENERATOR_INDEX__NULLIFIER, ARGS_HASH_CHUNK_COUNT,\n    GENERATOR_INDEX__FUNCTION_ARGS, ARGS_HASH_CHUNK_LENGTH\n},\n    traits::Hash, hash::{pedersen_hash, silo_nullifier}\n};\n\nuse dep::protocol_types::hash::sha256_to_field;\n\npub fn compute_secret_hash(secret: Field) -> Field {\n    // TODO(#1205) This is probably not the right index to use\n    pedersen_hash([secret], GENERATOR_INDEX__L1_TO_L2_MESSAGE_SECRET)\n}\n\npub fn compute_message_hash(\n    sender: EthAddress,\n    chain_id: Field,\n    recipient: AztecAddress,\n    version: Field,\n    content: Field,\n    secret_hash: Field\n) -> Field {\n    let mut hash_bytes = [0 as u8; 192];\n    let sender_bytes = sender.to_field().to_be_bytes(32);\n    let chain_id_bytes = chain_id.to_be_bytes(32);\n    let recipient_bytes = recipient.to_field().to_be_bytes(32);\n    let version_bytes = version.to_be_bytes(32);\n    let content_bytes = content.to_be_bytes(32);\n    let secret_hash_bytes = secret_hash.to_be_bytes(32);\n\n    for i in 0..32 {\n        hash_bytes[i] = sender_bytes[i];\n        hash_bytes[i + 32] = chain_id_bytes[i];\n        hash_bytes[i + 64] = recipient_bytes[i];\n        hash_bytes[i + 96] = version_bytes[i];\n        hash_bytes[i + 128] = content_bytes[i];\n        hash_bytes[i + 160] = secret_hash_bytes[i];\n    }\n\n    sha256_to_field(hash_bytes)\n}\n\n// The nullifier of a l1 to l2 message is the hash of the message salted with the secret and index of the message hash\n// in the L1 to L2 message tree\npub fn compute_message_nullifier(message_hash: Field, secret: Field, leaf_index: Field) -> Field {\n    pedersen_hash(\n        [message_hash, secret, leaf_index],\n        GENERATOR_INDEX__NULLIFIER\n    )\n}\n\npub fn compute_siloed_nullifier(address: AztecAddress, nullifier: Field) -> Field {\n    silo_nullifier(address, nullifier)\n}\n\nstruct ArgsHasher {\n    fields: [Field],\n}\n\nimpl Hash for ArgsHasher {\n    fn hash(self) -> Field {\n        hash_args(self.fields)\n    }\n}\n\nimpl ArgsHasher {\n    pub fn new() -> Self {\n        Self { fields: [] }\n    }\n\n    pub fn add(&mut self, field: Field) {\n        self.fields = self.fields.push_back(field);\n    }\n\n    pub fn add_multiple<N>(&mut self, fields: [Field; N]) {\n        for i in 0..N {\n            self.fields = self.fields.push_back(fields[i]);\n        }\n    }\n}\n\npub fn hash_args_array<N>(args: [Field; N]) -> Field {\n    hash_args(args.as_slice())\n}\n\npub fn hash_args(args: [Field]) -> Field {\n    if args.len() == 0 {\n        0\n    } else {\n        assert(args.len() < ARGS_HASH_CHUNK_COUNT * ARGS_HASH_CHUNK_LENGTH);\n        let mut chunks_hashes = [0; ARGS_HASH_CHUNK_COUNT];\n        let mut current_chunk_values = [0; ARGS_HASH_CHUNK_LENGTH];\n\n        let mut current_chunk_index = 0;\n        let mut index_inside_current_chunk = 0;\n        for i in 0..args.len() {\n            current_chunk_values[index_inside_current_chunk] = args[i];\n            index_inside_current_chunk+=1;\n            if index_inside_current_chunk == ARGS_HASH_CHUNK_LENGTH {\n                chunks_hashes[current_chunk_index] = pedersen_hash(current_chunk_values, GENERATOR_INDEX__FUNCTION_ARGS);\n                current_chunk_values = [0; ARGS_HASH_CHUNK_LENGTH];\n                current_chunk_index+=1;\n                index_inside_current_chunk = 0;\n            }\n        }\n        if index_inside_current_chunk > 0 {\n            chunks_hashes[current_chunk_index] = pedersen_hash(current_chunk_values, GENERATOR_INDEX__FUNCTION_ARGS);\n        }\n        pedersen_hash(chunks_hashes, GENERATOR_INDEX__FUNCTION_ARGS)\n    }\n}\n\n#[test]\nfn compute_var_args_hash() {\n    let mut input = ArgsHasher::new();\n    for i in 0..800 {\n        input.add(i as Field);\n    }\n    let hash = input.hash();\n    assert(hash == 0x05a1023fef839ac88731f49ae983e172c1b600a3c8f3393ad0ac25d819ac0f0f);\n}\n","path":"/Users/jack-sw/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.35.1/noir-projects/aztec-nr/aztec/src/hash.nr"},"111":{"source":"use dep::protocol_types::{address::AztecAddress, constants::GENERATOR_INDEX__INITIALIZATION_NULLIFIER, hash::pedersen_hash};\n\nuse crate::context::{PrivateContext, PublicContext, Context};\nuse crate::note::{\n    lifecycle::{create_note, destroy_note}, note_getter::{get_note, view_notes},\n    note_interface::NoteInterface, note_viewer_options::NoteViewerOptions\n};\nuse crate::oracle::{nullifier_key::get_nullifier_secret_key, notes::check_nullifier_exists};\nuse crate::state_vars::storage::Storage;\n\n// docs:start:struct\nstruct PrivateMutable<Note> {\n    context: Option<&mut PrivateContext>,\n    storage_slot: Field\n}\n// docs:end:struct\n\nimpl<T> Storage<T> for PrivateMutable<T> {}\n\nimpl<Note> PrivateMutable<Note> {\n    // docs:start:new\n    pub fn new(context: Context, storage_slot: Field) -> Self {\n        assert(storage_slot != 0, \"Storage slot 0 not allowed. Storage slots must start from 1.\");\n        Self { context: context.private, storage_slot }\n    }\n    // docs:end:new\n\n    // The following computation is leaky, in that it doesn't hide the storage slot that has been initialized, nor does it hide the contract address of this contract.\n    // When this initialization nullifier is emitted, an observer could do a dictionary or rainbow attack to learn the preimage of this nullifier to deduce the storage slot and contract address.\n    // For some applications, leaking the details that a particular state variable of a particular contract has been initialized will be unacceptable.\n    // Under such circumstances, such application developers might wish to _not_ use this state variable type.\n    // This is especially dangerous for initial assignment to elements of a `Map<AztecAddress, PrivateMutable>` type (for example), because the storage slot often also identifies an actor. e.g.\n    // the initial assignment to `my_map.at(msg.sender)` will leak: `msg.sender`, the fact that an element of `my_map` was assigned-to for the first time, and the contract_address.\n    // Note: subsequent nullification of this state variable, via the `replace` method will not be leaky, if the `compute_nullifier()` method of the underlying note is designed to ensure privacy.\n    // For example, if the `compute_nullifier()` method injects the secret key of a note owner into the computed nullifier's preimage.\n    pub fn compute_initialization_nullifier(self) -> Field {\n        pedersen_hash(\n            [self.storage_slot],\n            GENERATOR_INDEX__INITIALIZATION_NULLIFIER\n        )\n    }\n\n    // docs:start:is_initialized\n    unconstrained pub fn is_initialized(self) -> bool {\n        let nullifier = self.compute_initialization_nullifier();\n        check_nullifier_exists(nullifier)\n    }\n    // docs:end:is_initialized\n\n    // docs:start:initialize\n    pub fn initialize<N>(self, note: &mut Note, broadcast: bool) where Note: NoteInterface<N> {\n        let context = self.context.unwrap();\n\n        // Nullify the storage slot.\n        let nullifier = self.compute_initialization_nullifier();\n        context.push_new_nullifier(nullifier, 0);\n\n        create_note(context, self.storage_slot, note, broadcast);\n    }\n    // docs:end:initialize\n\n    // docs:start:replace\n    pub fn replace<N>(self, new_note: &mut Note, broadcast: bool) where Note: NoteInterface<N> {\n        let context = self.context.unwrap();\n        let prev_note: Note = get_note(context, self.storage_slot);\n\n        // Nullify previous note.\n        destroy_note(context, prev_note);\n\n        // Add replacement note.\n        create_note(context, self.storage_slot, new_note, broadcast);\n    }\n    // docs:end:replace\n\n    // docs:start:get_note\n    pub fn get_note<N>(self, broadcast: bool) -> Note where Note: NoteInterface<N> {\n        let context = self.context.unwrap();\n        let mut note = get_note(context, self.storage_slot);\n\n        // Nullify current note to make sure it's reading the latest note.\n        destroy_note(context, note);\n\n        // Add the same note again.\n        // Because a nonce is added to every note in the kernel, its nullifier will be different.\n        create_note(context, self.storage_slot, &mut note, broadcast);\n\n        note\n    }\n    // docs:end:get_note\n\n    // docs:start:view_note\n    unconstrained pub fn view_note<N>(self) -> Note where Note: NoteInterface<N> {\n        let mut options = NoteViewerOptions::new();\n        view_notes(self.storage_slot, options.set_limit(1))[0].unwrap()\n    }\n    // docs:end:view_note\n}\n","path":"/Users/jack-sw/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.35.1/noir-projects/aztec-nr/aztec/src/state_vars/private_mutable.nr"},"112":{"source":"use crate::{\n    context::Context, history::public_storage::public_storage_historical_read,\n    oracle::{storage::{storage_read, storage_write}}, state_vars::storage::Storage\n};\nuse dep::protocol_types::{constants::INITIALIZATION_SLOT_SEPARATOR, traits::{Deserialize, Serialize}};\n\n// Just like PublicImmutable but with the ability to read from private functions.\nstruct SharedImmutable<T>{\n    context: Context,\n    storage_slot: Field,\n}\n\nimpl<T> Storage<T> for SharedImmutable<T> {}\n\nimpl<T> SharedImmutable<T> {\n    pub fn new(\n        // Note: Passing the contexts to new(...) just to have an interface compatible with a Map.\n        context: Context,\n        storage_slot: Field\n    ) -> Self {\n        assert(storage_slot != 0, \"Storage slot 0 not allowed. Storage slots must start from 1.\");\n        Self { context, storage_slot }\n    }\n\n    // Intended to be only called once. \n    pub fn initialize<T_SERIALIZED_LEN>(self, value: T) where T: Serialize<T_SERIALIZED_LEN> {\n        assert(\n            self.context.private.is_none(), \"SharedImmutable can only be initialized from public functions\"\n        );\n        // TODO(#4738): Uncomment the following assert\n        // assert(\n        //     self.context.public.unwrap_unchecked().is_deployment(), \"SharedImmutable can only be initialized during contract deployment\"\n        // );\n\n        // We check that the struct is not yet initialized by checking if the initialization slot is 0\n        let initialization_slot = INITIALIZATION_SLOT_SEPARATOR + self.storage_slot;\n        let fields_read: [Field; 1] = storage_read(initialization_slot);\n        assert(fields_read[0] == 0, \"SharedImmutable already initialized\");\n\n        // We populate the initialization slot with a non-zero value to indicate that the struct is initialized\n        storage_write(initialization_slot, [0xdead]);\n\n        let fields_write = T::serialize(value);\n        storage_write(self.storage_slot, fields_write);\n    }\n\n    pub fn read_public<T_SERIALIZED_LEN>(self) -> T where T: Deserialize<T_SERIALIZED_LEN> {\n        assert(self.context.private.is_none(), \"Public read only supported in public functions\");\n        let fields = storage_read(self.storage_slot);\n        T::deserialize(fields)\n    }\n\n    pub fn read_private<T_SERIALIZED_LEN>(self) -> T  where T: Deserialize<T_SERIALIZED_LEN> {\n        assert(self.context.public.is_none(), \"Private read only supported in private functions\");\n        let private_context = self.context.private.unwrap();\n\n        let mut fields = [0; T_SERIALIZED_LEN];\n\n        for i in 0..fields.len() {\n            fields[i] =\n                public_storage_historical_read(\n                    (*private_context),\n                    self.storage_slot + i as Field,\n                    (*private_context).this_address()\n                );\n        }\n        T::deserialize(fields)\n    }\n}\n","path":"/Users/jack-sw/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.35.1/noir-projects/aztec-nr/aztec/src/state_vars/shared_immutable.nr"},"113":{"source":"use crate::context::{PrivateContext, PublicContext, Context};\nuse dep::protocol_types::{hash::pedersen_hash, traits::ToField};\nuse crate::state_vars::storage::Storage;\n\n// docs:start:map\nstruct Map<K, V> {\n    context: Context,\n    storage_slot: Field,\n    state_var_constructor: fn(Context, Field) -> V,\n}\n// docs:end:map\n\nimpl<K, T> Storage<T> for Map<K, T> {}\n\nimpl<K, V> Map<K, V> {\n    // docs:start:new\n    pub fn new(\n        context: Context,\n        storage_slot: Field,\n        state_var_constructor: fn(Context, Field) -> V\n    ) -> Self {\n        assert(storage_slot != 0, \"Storage slot 0 not allowed. Storage slots must start from 1.\");\n        Map { context, storage_slot, state_var_constructor }\n    }\n    // docs:end:new\n\n    // docs:start:at\n    pub fn at(self, key: K) -> V where K: ToField {\n        // TODO(#1204): use a generator index for the storage slot\n        let derived_storage_slot = pedersen_hash([self.storage_slot, key.to_field()], 0);\n\n        let state_var_constructor = self.state_var_constructor;\n        state_var_constructor(self.context, derived_storage_slot)\n    }\n    // docs:end:at\n}\n","path":"/Users/jack-sw/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.35.1/noir-projects/aztec-nr/aztec/src/state_vars/map.nr"},"117":{"source":"use crate::context::Context;\nuse crate::oracle::storage::storage_read;\nuse crate::oracle::storage::storage_write;\nuse dep::protocol_types::traits::{Deserialize, Serialize};\nuse crate::state_vars::storage::Storage;\n\n// docs:start:public_mutable_struct\nstruct PublicMutable<T> {\n    context: Context,\n    storage_slot: Field,\n}\n// docs:end:public_mutable_struct\n\nimpl<T> Storage<T> for PublicMutable<T> {}\n\nimpl<T> PublicMutable<T> {\n    // docs:start:public_mutable_struct_new\n    pub fn new(\n        // Note: Passing the contexts to new(...) just to have an interface compatible with a Map.\n        context: Context,\n        storage_slot: Field\n    ) -> Self {\n        assert(storage_slot != 0, \"Storage slot 0 not allowed. Storage slots must start from 1.\");\n        PublicMutable { context, storage_slot }\n    }\n    // docs:end:public_mutable_struct_new\n\n    // docs:start:public_mutable_struct_read\n    pub fn read<T_SERIALIZED_LEN>(self) -> T where T: Deserialize<T_SERIALIZED_LEN> {\n        assert(self.context.private.is_none(), \"PublicMutable reads only supported in public functions\");\n        let fields = storage_read(self.storage_slot);\n        T::deserialize(fields)\n    }\n    // docs:end:public_mutable_struct_read\n\n    // docs:start:public_mutable_struct_write\n    pub fn write<T_SERIALIZED_LEN>(self, value: T) where T: Serialize<T_SERIALIZED_LEN> {\n        assert(self.context.private.is_none(), \"PublicMutable writes only supported in public functions\");\n        let fields = T::serialize(value);\n        storage_write(self.storage_slot, fields);\n    }\n    // docs:end:public_mutable_struct_write\n}\n","path":"/Users/jack-sw/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.35.1/noir-projects/aztec-nr/aztec/src/state_vars/public_mutable.nr"},"118":{"source":"use crate::{context::Context, oracle::{storage::{storage_read, storage_write}}, state_vars::storage::Storage};\nuse dep::protocol_types::{constants::INITIALIZATION_SLOT_SEPARATOR, traits::{Deserialize, Serialize}};\n\n// Just like SharedImmutable but without the ability to read from private functions.\n// docs:start:public_immutable_struct\nstruct PublicImmutable<T> {\n    context: Context,\n    storage_slot: Field,\n}\n// docs:end:public_immutable_struct\n\nimpl<T> Storage<T> for PublicImmutable<T> {}\n\nimpl<T> PublicImmutable<T> {\n    // docs:start:public_immutable_struct_new\n    pub fn new(\n        // Note: Passing the contexts to new(...) just to have an interface compatible with a Map.\n        context: Context,\n        storage_slot: Field\n    ) -> Self {\n        assert(storage_slot != 0, \"Storage slot 0 not allowed. Storage slots must start from 1.\");\n        PublicImmutable { context, storage_slot }\n    }\n    // docs:end:public_immutable_struct_new\n\n    // docs:start:public_immutable_struct_write\n    pub fn initialize<T_SERIALIZED_LEN>(self, value: T) where T: Serialize<T_SERIALIZED_LEN> {\n        assert(\n            self.context.private.is_none(), \"PublicImmutable can only be initialized from public functions\"\n        );\n        // TODO(#4738): Uncomment the following assert\n        // assert(\n        //     self.context.public.unwrap_unchecked().is_deployment(), \"PublicImmutable can only be initialized during contract deployment\"\n        // );\n\n        // We check that the struct is not yet initialized by checking if the initialization slot is 0\n        let initialization_slot = INITIALIZATION_SLOT_SEPARATOR + self.storage_slot;\n        let fields_read: [Field; 1] = storage_read(initialization_slot);\n        assert(fields_read[0] == 0, \"PublicImmutable already initialized\");\n\n        // We populate the initialization slot with a non-zero value to indicate that the struct is initialized\n        storage_write(initialization_slot, [0xdead]);\n\n        let fields_write = T::serialize(value);\n        storage_write(self.storage_slot, fields_write);\n    }\n    // docs:end:public_immutable_struct_write\n\n    // docs:start:public_immutable_struct_read\n    pub fn read<T_SERIALIZED_LEN>(self) -> T where T: Deserialize<T_SERIALIZED_LEN> {\n        assert(self.context.private.is_none(), \"PublicImmutable reads only supported in public functions\");\n        let fields = storage_read(self.storage_slot);\n        T::deserialize(fields)\n    }\n    // docs:end:public_immutable_struct_read\n}\n","path":"/Users/jack-sw/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.35.1/noir-projects/aztec-nr/aztec/src/state_vars/public_immutable.nr"},"127":{"source":"use dep::std::cmp::Eq;\nuse crate::{\n    address::AztecAddress,\n    constants::{NULLIFIER_KEY_VALIDATION_REQUEST_CONTEXT_LENGTH, NULLIFIER_KEY_VALIDATION_REQUEST_LENGTH},\n    traits::{Empty, Serialize, Deserialize}, grumpkin_point::GrumpkinPoint,\n    grumpkin_private_key::GrumpkinPrivateKey\n};\n\nstruct NullifierKeyValidationRequest {\n    public_key: GrumpkinPoint,\n    secret_key: GrumpkinPrivateKey,\n}\n\nimpl Eq for NullifierKeyValidationRequest {\n    fn eq(self, request: NullifierKeyValidationRequest) -> bool {\n        (request.public_key.eq(self.public_key))\n            & (request.secret_key.eq(self.secret_key))\n    }\n}\n\nimpl Empty for NullifierKeyValidationRequest {\n    fn empty() -> Self {\n        NullifierKeyValidationRequest {\n            public_key: GrumpkinPoint::zero(),\n            secret_key: GrumpkinPrivateKey::zero(),\n        }\n    }\n}\n\nimpl Serialize<NULLIFIER_KEY_VALIDATION_REQUEST_LENGTH> for NullifierKeyValidationRequest {\n    fn serialize(self) -> [Field; NULLIFIER_KEY_VALIDATION_REQUEST_LENGTH] {\n        [\n            self.public_key.x,\n            self.public_key.y,\n            self.secret_key.high,\n            self.secret_key.low,\n        ]\n    }\n}\n\nimpl Deserialize<NULLIFIER_KEY_VALIDATION_REQUEST_LENGTH> for NullifierKeyValidationRequest {\n    fn deserialize(fields: [Field; NULLIFIER_KEY_VALIDATION_REQUEST_LENGTH]) -> Self {\n        Self {\n            public_key: GrumpkinPoint::new(fields[0], fields[1]),\n            secret_key: GrumpkinPrivateKey::new(fields[2], fields[3]),\n        }\n    }\n}\n\nimpl NullifierKeyValidationRequest {\n    pub fn to_context(self, contract_address: AztecAddress) -> NullifierKeyValidationRequestContext {\n        NullifierKeyValidationRequestContext { public_key: self.public_key, secret_key: self.secret_key, contract_address }\n    }\n}\n\nstruct NullifierKeyValidationRequestContext {\n    public_key: GrumpkinPoint,\n    secret_key: GrumpkinPrivateKey,\n    contract_address: AztecAddress,\n}\n\nimpl Eq for NullifierKeyValidationRequestContext {\n    fn eq(self, request: NullifierKeyValidationRequestContext) -> bool {\n        (request.public_key.eq(self.public_key))\n            & (request.secret_key.eq(self.secret_key))\n            & (request.contract_address.eq(self.contract_address))\n    }\n}\n\nimpl Empty for NullifierKeyValidationRequestContext {\n    fn empty() -> Self {\n        NullifierKeyValidationRequestContext {\n            public_key: GrumpkinPoint::zero(),\n            secret_key: GrumpkinPrivateKey::zero(),\n            contract_address: AztecAddress::zero(),\n        }\n    }\n}\n\nimpl Serialize<NULLIFIER_KEY_VALIDATION_REQUEST_CONTEXT_LENGTH> for NullifierKeyValidationRequestContext {\n    fn serialize(self) -> [Field; NULLIFIER_KEY_VALIDATION_REQUEST_CONTEXT_LENGTH] {\n        [\n            self.public_key.x,\n            self.public_key.y,\n            self.secret_key.high,\n            self.secret_key.low,\n            self.contract_address.to_field(),\n        ]\n    }\n}\n\nimpl Deserialize<NULLIFIER_KEY_VALIDATION_REQUEST_CONTEXT_LENGTH> for NullifierKeyValidationRequestContext {\n    fn deserialize(fields: [Field; NULLIFIER_KEY_VALIDATION_REQUEST_CONTEXT_LENGTH]) -> Self {\n        Self {\n            public_key: GrumpkinPoint::new(fields[0], fields[1]),\n            secret_key: GrumpkinPrivateKey::new(fields[2], fields[3]),\n            contract_address: AztecAddress::from_field(fields[4]),\n        }\n    }\n}\n\n","path":"/Users/jack-sw/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.35.1/noir-projects/noir-protocol-circuits/crates/types/src/abis/nullifier_key_validation_request.nr"},"128":{"source":"use dep::std::cmp::Eq;\nuse crate::{\n    address::{AztecAddress, EthAddress}, abis::gas_fees::GasFees,\n    constants::{GENERATOR_INDEX__GLOBAL_VARIABLES, GLOBAL_VARIABLES_LENGTH},\n    traits::{Deserialize, Empty, Hash, Serialize}, utils::reader::Reader\n};\n\n// docs:start:global-variables\nstruct GlobalVariables {\n    chain_id : Field,\n    version : Field,\n    block_number : Field,\n    timestamp : u64,\n    coinbase : EthAddress,\n    fee_recipient : AztecAddress,\n    gas_fees : GasFees\n}\n// docs:end:global-variables\n\nimpl Serialize<GLOBAL_VARIABLES_LENGTH> for GlobalVariables {\n    fn serialize(self) -> [Field; GLOBAL_VARIABLES_LENGTH] {\n        let mut serialized: BoundedVec<Field, GLOBAL_VARIABLES_LENGTH> = BoundedVec::new();\n\n        serialized.push(self.chain_id);\n        serialized.push(self.version);\n        serialized.push(self.block_number);\n        serialized.push(self.timestamp as Field);\n        serialized.push(self.coinbase.to_field());\n        serialized.push(self.fee_recipient.to_field());\n        serialized.extend_from_array(self.gas_fees.serialize());\n\n        serialized.storage\n    }\n}\n\nimpl Deserialize<GLOBAL_VARIABLES_LENGTH> for GlobalVariables {\n    fn deserialize(serialized: [Field; GLOBAL_VARIABLES_LENGTH]) -> GlobalVariables {\n        let mut reader = Reader::new(serialized);\n        GlobalVariables {\n            chain_id: reader.read(),\n            version: reader.read(),\n            block_number: reader.read(),\n            timestamp: reader.read() as u64,\n            coinbase: EthAddress::from_field(reader.read()),\n            fee_recipient: AztecAddress::from_field(reader.read()),\n            gas_fees: reader.read_struct(GasFees::deserialize)\n        }\n    }\n}\n\nimpl Eq for GlobalVariables {\n    fn eq(self, other : GlobalVariables) -> bool {\n        (self.chain_id == other.chain_id) &\n        (self.version == other.version) &\n        (self.block_number == other.block_number) &\n        (self.timestamp == other.timestamp) &\n        (self.coinbase == other.coinbase) &\n        (self.fee_recipient == other.fee_recipient) &\n        (self.gas_fees == other.gas_fees) \n    }\n}\n\nimpl Empty for GlobalVariables {\n    fn empty() -> Self {\n        Self {\n            chain_id: 0,\n            version: 0,\n            block_number: 0,\n            timestamp: 0,\n            coinbase: EthAddress::empty(),\n            fee_recipient: AztecAddress::empty(),\n            gas_fees: GasFees::empty()\n        }\n    }\n}\n\n#[test]\nfn serialization_of_empty() {\n    let vars = GlobalVariables::empty();\n    let _serialized = vars.serialize();\n    let _deserialized = GlobalVariables::deserialize(_serialized);\n}\n","path":"/Users/jack-sw/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.35.1/noir-projects/noir-protocol-circuits/crates/types/src/abis/global_variables.nr"},"129":{"source":"use crate::{\n    abis::{function_data::FunctionData, private_circuit_public_inputs::PrivateCircuitPublicInputs},\n    address::AztecAddress,\n    constants::{GENERATOR_INDEX__CALL_STACK_ITEM, PRIVATE_CALL_STACK_ITEM_LENGTH}, hash::pedersen_hash,\n    traits::{Deserialize, Hash, Serialize, Empty}, utils::reader::Reader\n};\n\nstruct PrivateCallStackItem {\n    // This is the _actual_ contract address relating to where this function's code resides in the\n    // contract tree. Regardless of whether this is a call or delegatecall, this\n    // `contract_address` _does not change_. Amongst other things, it's used as a lookup for\n    // getting the correct code from the tree. There is a separate `storage_contract_address`\n    // within a CallStackItem which varies depending on whether this is a call or delegatecall.\n    contract_address: AztecAddress,\n    function_data: FunctionData,\n    public_inputs: PrivateCircuitPublicInputs,\n}\n\nimpl Eq for PrivateCallStackItem {\n    fn eq(self, other: Self) -> bool {\n        self.contract_address.eq(other.contract_address) &\n        self.function_data.eq(other.function_data) &\n        self.public_inputs.eq(other.public_inputs)\n    }\n}\n\nimpl Serialize<PRIVATE_CALL_STACK_ITEM_LENGTH> for PrivateCallStackItem {\n    fn serialize(self) -> [Field; PRIVATE_CALL_STACK_ITEM_LENGTH] {\n        let mut fields: BoundedVec<Field, PRIVATE_CALL_STACK_ITEM_LENGTH> = BoundedVec::new();\n\n        fields.push(self.contract_address.to_field());\n        fields.extend_from_array(self.function_data.serialize());\n        fields.extend_from_array(self.public_inputs.serialize());\n\n        assert_eq(fields.len(), PRIVATE_CALL_STACK_ITEM_LENGTH);\n\n        fields.storage\n    }\n}\n\nimpl Deserialize<PRIVATE_CALL_STACK_ITEM_LENGTH> for PrivateCallStackItem {\n    fn deserialize(serialized: [Field; PRIVATE_CALL_STACK_ITEM_LENGTH]) -> Self {\n        // TODO(#4390): This should accept a reader ^ to avoid copying data.\n        let mut reader = Reader::new(serialized);\n\n        let item = Self {\n            contract_address: reader.read_struct(AztecAddress::deserialize),\n            function_data: reader.read_struct(FunctionData::deserialize),\n            public_inputs: reader.read_struct(PrivateCircuitPublicInputs::deserialize),\n        };\n\n        reader.finish();\n        item\n    }\n}\n\nimpl Hash for PrivateCallStackItem {\n    fn hash(self) -> Field {\n        pedersen_hash(self.serialize(), GENERATOR_INDEX__CALL_STACK_ITEM)\n    }\n}\n\nimpl Empty for PrivateCallStackItem {\n    fn empty() -> Self {\n        PrivateCallStackItem {\n            contract_address: AztecAddress::empty(),\n            function_data: FunctionData::empty(),\n            public_inputs: PrivateCircuitPublicInputs::empty(),\n        }\n    }\n}\n\n#[test]\nfn serialization_of_empty() {\n    let item = PrivateCallStackItem::empty();\n    let serialized = item.serialize();\n    let deserialized = PrivateCallStackItem::deserialize(serialized);\n    assert(item.eq(deserialized));\n}\n\n#[test]\nfn empty_hash() {\n    let mut item = PrivateCallStackItem::empty();\n    item.function_data.is_private = true;\n    let hash = item.hash();\n\n    // Value from private_call_stack_item.test.ts \"computes empty item hash\" test\n    let test_data_empty_hash = 0x243b1b69ea529d158803cc7a16b52293c5e5f2a1859337e3f69e4b20f55c6fb6;\n    assert_eq(hash, test_data_empty_hash);\n}\n","path":"/Users/jack-sw/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.35.1/noir-projects/noir-protocol-circuits/crates/types/src/abis/private_call_stack_item.nr"},"131":{"source":"use crate::{\n    abis::function_selector::FunctionSelector, address::{EthAddress, AztecAddress},\n    constants::GAS_LENGTH, hash::pedersen_hash, traits::{Deserialize, Hash, Serialize, Empty},\n    abis::side_effect::Ordered, utils::reader::Reader\n};\n\nstruct Gas {\n    da_gas: u32,\n    l1_gas: u32,\n    l2_gas: u32,\n}\n\nimpl Gas {\n    pub fn new(da_gas: u32, l1_gas: u32, l2_gas: u32) -> Self {\n        Self { da_gas, l1_gas, l2_gas }\n    }\n\n    fn add(self, other: Gas) -> Self {\n        Gas::new(\n            self.da_gas + other.da_gas,\n            self.l1_gas + other.l1_gas,\n            self.l2_gas + other.l2_gas\n        )\n    }\n\n    fn sub(self, other: Gas) -> Self {\n        Gas::new(\n            self.da_gas - other.da_gas,\n            self.l1_gas - other.l1_gas,\n            self.l2_gas - other.l2_gas\n        )\n    }\n}\n\nimpl Serialize<GAS_LENGTH> for Gas {\n    fn serialize(self) -> [Field; GAS_LENGTH] {\n        [self.da_gas as Field, self.l1_gas as Field, self.l2_gas as Field]\n    }\n}\n\nimpl Deserialize<GAS_LENGTH> for Gas {\n    fn deserialize(serialized: [Field; GAS_LENGTH]) -> Gas {\n        Gas::new(serialized[0] as u32, serialized[1] as u32, serialized[2] as u32)\n    }\n}\n\nimpl Eq for Gas {\n    fn eq(self, other : Gas) -> bool {\n        (self.da_gas == other.da_gas) & (self.l1_gas == other.l1_gas) & (self.l2_gas == other.l2_gas)\n    }\n}\n\nimpl Empty for Gas {\n    fn empty() -> Self {\n        Gas::new(0, 0, 0)\n    }\n}\n\n","path":"/Users/jack-sw/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.35.1/noir-projects/noir-protocol-circuits/crates/types/src/abis/gas.nr"},"133":{"source":"use crate::{\n    abis::function_selector::FunctionSelector, address::{EthAddress, AztecAddress}, abis::gas::Gas,\n    constants::{GAS_SETTINGS_LENGTH, DIMENSION_GAS_SETTINGS_LENGTH}, hash::pedersen_hash,\n    traits::{Deserialize, Hash, Serialize, Empty}, abis::side_effect::Ordered, utils::reader::Reader\n};\n\nstruct GasSettings {\n    da: DimensionGasSettings,\n    l1: DimensionGasSettings,\n    l2: DimensionGasSettings,\n    inclusion_fee: Field,\n}\n\nimpl GasSettings {\n    fn new(\n        da: DimensionGasSettings,\n        l1: DimensionGasSettings,\n        l2: DimensionGasSettings,\n        inclusion_fee: Field\n    ) -> Self {\n        Self { da, l1, l2, inclusion_fee }\n    }\n\n    fn get_gas_limits(self) -> Gas {\n        Gas { da_gas: self.da.gas_limit, l1_gas: self.l1.gas_limit, l2_gas: self.l2.gas_limit }\n    }\n}\n\nimpl Eq for GasSettings {\n    fn eq(self, other: Self) -> bool {\n        (self.da == other.da) & (self.l1 == other.l1) & (self.l2 == other.l2) & (self.inclusion_fee == other.inclusion_fee)\n    }\n}\n\nimpl Empty for GasSettings {\n    fn empty() -> Self {\n        GasSettings::new(\n            DimensionGasSettings::empty(),\n            DimensionGasSettings::empty(),\n            DimensionGasSettings::empty(),\n            0,\n        )\n    }\n}\n\nimpl Serialize<GAS_SETTINGS_LENGTH> for GasSettings {\n    fn serialize(self) -> [Field; GAS_SETTINGS_LENGTH] {\n        let mut serialized: BoundedVec<Field, GAS_SETTINGS_LENGTH> = BoundedVec::new();\n\n        serialized.extend_from_array(self.da.serialize());\n        serialized.extend_from_array(self.l1.serialize());\n        serialized.extend_from_array(self.l2.serialize());\n        serialized.push(self.inclusion_fee);\n    \n        serialized.storage\n    }\n}\n\nimpl Deserialize<GAS_SETTINGS_LENGTH> for GasSettings {\n    fn deserialize(serialized: [Field; GAS_SETTINGS_LENGTH]) -> GasSettings {\n        let mut reader = Reader::new(serialized);\n        GasSettings {\n            da: reader.read_struct(DimensionGasSettings::deserialize),\n            l1: reader.read_struct(DimensionGasSettings::deserialize),\n            l2: reader.read_struct(DimensionGasSettings::deserialize),\n            inclusion_fee: reader.read(),\n        }\n    }\n}\n\nstruct DimensionGasSettings {\n    gas_limit: u32,\n    teardown_gas_limit: u32,\n    max_fee_per_gas: Field,\n}\n\nimpl DimensionGasSettings {\n    pub fn new(gas_limit: u32, teardown_gas_limit: u32, max_fee_per_gas: Field) -> Self {\n        Self { gas_limit, teardown_gas_limit, max_fee_per_gas }\n    }\n}\n\nimpl Eq for DimensionGasSettings {\n    fn eq(self, other: Self) -> bool {\n        (self.gas_limit == other.gas_limit) & (self.teardown_gas_limit == other.teardown_gas_limit) & (self.max_fee_per_gas == other.max_fee_per_gas)\n    }\n\n}\n\nimpl Serialize<DIMENSION_GAS_SETTINGS_LENGTH> for DimensionGasSettings {\n    fn serialize(self) -> [Field; DIMENSION_GAS_SETTINGS_LENGTH] {\n        [\n            self.gas_limit as Field,\n            self.teardown_gas_limit as Field,\n            self.max_fee_per_gas,\n        ]\n    }\n}\n\nimpl Deserialize<DIMENSION_GAS_SETTINGS_LENGTH> for DimensionGasSettings {\n    fn deserialize(serialized: [Field; DIMENSION_GAS_SETTINGS_LENGTH]) -> DimensionGasSettings {\n        DimensionGasSettings::new(serialized[0] as u32, serialized[1] as u32, serialized[2])\n    }\n}\n\nimpl Empty for DimensionGasSettings {\n    fn empty() -> Self {\n        DimensionGasSettings::new(0,0,0)\n    }\n}\n","path":"/Users/jack-sw/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.35.1/noir-projects/noir-protocol-circuits/crates/types/src/abis/gas_settings.nr"},"134":{"source":"use crate::{\n    abis::{\n    call_context::CallContext, max_block_number::MaxBlockNumber,\n    nullifier_key_validation_request::NullifierKeyValidationRequest, read_request::ReadRequest,\n    side_effect::{SideEffect, SideEffectLinkedToNoteHash}\n},\n    constants::{\n    MAX_NOTE_HASH_READ_REQUESTS_PER_CALL, MAX_NULLIFIER_READ_REQUESTS_PER_CALL,\n    MAX_NULLIFIER_KEY_VALIDATION_REQUESTS_PER_CALL, MAX_NEW_NOTE_HASHES_PER_CALL,\n    MAX_NEW_NULLIFIERS_PER_CALL, MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL,\n    MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL, MAX_NEW_L2_TO_L1_MSGS_PER_CALL,\n    PRIVATE_CIRCUIT_PUBLIC_INPUTS_LENGTH, GENERATOR_INDEX__PRIVATE_CIRCUIT_PUBLIC_INPUTS\n},\n    header::Header, hash::pedersen_hash, messaging::l2_to_l1_message::L2ToL1Message,\n    traits::{Deserialize, Hash, Serialize, Empty}, utils::reader::Reader\n};\n\nstruct PrivateCircuitPublicInputs {\n    call_context: CallContext,\n\n    args_hash: Field,\n    returns_hash: Field,\n\n    min_revertible_side_effect_counter: u32,\n\n    max_block_number: MaxBlockNumber,\n\n    note_hash_read_requests: [SideEffect; MAX_NOTE_HASH_READ_REQUESTS_PER_CALL],\n    nullifier_read_requests: [ReadRequest; MAX_NULLIFIER_READ_REQUESTS_PER_CALL],\n    nullifier_key_validation_requests: [NullifierKeyValidationRequest; MAX_NULLIFIER_KEY_VALIDATION_REQUESTS_PER_CALL],\n\n    new_note_hashes: [SideEffect; MAX_NEW_NOTE_HASHES_PER_CALL],\n    new_nullifiers: [SideEffectLinkedToNoteHash; MAX_NEW_NULLIFIERS_PER_CALL],\n    private_call_stack_hashes: [Field; MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL],\n    public_call_stack_hashes: [Field; MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL],\n    new_l2_to_l1_msgs: [L2ToL1Message; MAX_NEW_L2_TO_L1_MSGS_PER_CALL],\n\n    start_side_effect_counter : u32,\n    end_side_effect_counter : u32,\n    encrypted_logs_hash: Field,\n    unencrypted_logs_hash: Field,\n\n    // Here so that the gas cost of this request can be measured by circuits, without actually needing to feed in the\n    // variable-length data.\n    encrypted_log_preimages_length: Field,\n    unencrypted_log_preimages_length: Field,\n\n    // Header of a block whose state is used during private execution (not the block the transaction is included in).\n    historical_header: Header,\n\n    // Note: The following 2 values are not redundant to the values in self.historical_header.global_variables because\n    // they can be different in case of a protocol upgrade. In such a situation we could be using header from a block\n    // before the upgrade took place but be using the updated protocol to execute and prove the transaction.\n    chain_id: Field,\n    version: Field,\n}\n\nimpl Eq for PrivateCircuitPublicInputs {\n    fn eq(self, other: Self) -> bool {\n        self.call_context.eq(other.call_context) &\n        self.args_hash.eq(other.args_hash) &\n        (self.returns_hash == other.returns_hash) &\n        (self.max_block_number == other.max_block_number) &\n        (self.note_hash_read_requests == other.note_hash_read_requests) &\n        (self.nullifier_read_requests == other.nullifier_read_requests) &\n        (self.nullifier_key_validation_requests == other.nullifier_key_validation_requests) &\n        (self.new_note_hashes == other.new_note_hashes) &\n        (self.new_nullifiers == other.new_nullifiers) &\n        (self.private_call_stack_hashes == other.private_call_stack_hashes) &\n        (self.public_call_stack_hashes == other.public_call_stack_hashes) &\n        (self.new_l2_to_l1_msgs == other.new_l2_to_l1_msgs) &\n        (self.start_side_effect_counter == other.start_side_effect_counter) &\n        (self.end_side_effect_counter == other.end_side_effect_counter) &\n        (self.encrypted_logs_hash == other.encrypted_logs_hash) &\n        (self.unencrypted_logs_hash == other.unencrypted_logs_hash) &\n        (self.encrypted_log_preimages_length == other.encrypted_log_preimages_length) &\n        (self.unencrypted_log_preimages_length == other.unencrypted_log_preimages_length) &\n        self.historical_header.eq(other.historical_header) &\n        self.chain_id.eq(other.chain_id) &\n        self.version.eq(other.version)\n    }\n}\n\nimpl Serialize<PRIVATE_CIRCUIT_PUBLIC_INPUTS_LENGTH> for PrivateCircuitPublicInputs {\n    fn serialize(self) -> [Field; PRIVATE_CIRCUIT_PUBLIC_INPUTS_LENGTH] {\n        let mut fields: BoundedVec<Field, PRIVATE_CIRCUIT_PUBLIC_INPUTS_LENGTH> = BoundedVec::new();\n        fields.extend_from_array(self.call_context.serialize());\n        fields.push(self.args_hash);\n        fields.push(self.returns_hash);\n\n        fields.push(self.min_revertible_side_effect_counter as Field);\n\n        fields.extend_from_array(self.max_block_number.serialize());\n\n        for i in 0..MAX_NOTE_HASH_READ_REQUESTS_PER_CALL{\n            fields.extend_from_array(self.note_hash_read_requests[i].serialize());\n        }\n        for i in 0..MAX_NULLIFIER_READ_REQUESTS_PER_CALL{\n            fields.extend_from_array(self.nullifier_read_requests[i].serialize());\n        }\n        for i in 0..MAX_NULLIFIER_KEY_VALIDATION_REQUESTS_PER_CALL{\n            fields.extend_from_array(self.nullifier_key_validation_requests[i].serialize());\n        }\n        for i in 0..MAX_NEW_NOTE_HASHES_PER_CALL{\n            fields.extend_from_array(self.new_note_hashes[i].serialize());\n        }\n        for i in 0..MAX_NEW_NULLIFIERS_PER_CALL{\n            fields.extend_from_array(self.new_nullifiers[i].serialize());\n        }\n        fields.extend_from_array(self.private_call_stack_hashes);\n        fields.extend_from_array(self.public_call_stack_hashes);\n        for i in 0..MAX_NEW_L2_TO_L1_MSGS_PER_CALL {\n            fields.extend_from_array(self.new_l2_to_l1_msgs[i].serialize());\n        }\n        fields.push(self.start_side_effect_counter as Field);\n        fields.push(self.end_side_effect_counter as Field);\n        fields.push(self.encrypted_logs_hash);\n        fields.push(self.unencrypted_logs_hash);\n        fields.push(self.encrypted_log_preimages_length);\n        fields.push(self.unencrypted_log_preimages_length);\n        fields.extend_from_array(self.historical_header.serialize());\n        fields.push(self.chain_id);\n        fields.push(self.version);\n\n        assert_eq(fields.len(), PRIVATE_CIRCUIT_PUBLIC_INPUTS_LENGTH);\n\n        fields.storage\n    }\n}\n\nimpl Deserialize<PRIVATE_CIRCUIT_PUBLIC_INPUTS_LENGTH> for PrivateCircuitPublicInputs {\n    fn deserialize(serialized: [Field; PRIVATE_CIRCUIT_PUBLIC_INPUTS_LENGTH]) -> Self {\n        // TODO(#4390): This should accept a reader ^ to avoid copying data.\n        let mut reader = Reader::new(serialized);\n        let inputs = Self {\n            call_context: reader.read_struct(CallContext::deserialize),\n            args_hash: reader.read(),\n            returns_hash: reader.read(),\n            min_revertible_side_effect_counter: reader.read() as u32,\n            max_block_number: reader.read_struct(MaxBlockNumber::deserialize),\n            note_hash_read_requests: reader.read_struct_array(SideEffect::deserialize, [SideEffect::empty(); MAX_NOTE_HASH_READ_REQUESTS_PER_CALL]),\n            nullifier_read_requests: reader.read_struct_array(ReadRequest::deserialize, [ReadRequest::empty(); MAX_NULLIFIER_READ_REQUESTS_PER_CALL]),\n            nullifier_key_validation_requests: reader.read_struct_array(NullifierKeyValidationRequest::deserialize, [NullifierKeyValidationRequest::empty(); MAX_NULLIFIER_KEY_VALIDATION_REQUESTS_PER_CALL]),\n            new_note_hashes: reader.read_struct_array(SideEffect::deserialize, [SideEffect::empty(); MAX_NEW_NOTE_HASHES_PER_CALL]),\n            new_nullifiers: reader.read_struct_array(SideEffectLinkedToNoteHash::deserialize, [SideEffectLinkedToNoteHash::empty(); MAX_NEW_NULLIFIERS_PER_CALL]),\n            private_call_stack_hashes: reader.read_array([0; MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL]),\n            public_call_stack_hashes: reader.read_array([0; MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL]),\n            new_l2_to_l1_msgs: reader.read_struct_array(L2ToL1Message::deserialize, [L2ToL1Message::empty(); MAX_NEW_L2_TO_L1_MSGS_PER_CALL]),\n            start_side_effect_counter: reader.read() as u32,\n            end_side_effect_counter: reader.read() as u32,\n            encrypted_logs_hash: reader.read() as Field,\n            unencrypted_logs_hash: reader.read() as Field,\n            encrypted_log_preimages_length: reader.read(),\n            unencrypted_log_preimages_length: reader.read(),\n            historical_header: reader.read_struct(Header::deserialize),\n            chain_id: reader.read(),\n            version: reader.read(),\n        };\n\n        reader.finish();\n        inputs\n    }\n}\n\nimpl Hash for PrivateCircuitPublicInputs {\n    fn hash(self) -> Field {\n        pedersen_hash(self.serialize(), GENERATOR_INDEX__PRIVATE_CIRCUIT_PUBLIC_INPUTS)\n    }\n}\n\n\nimpl Empty for PrivateCircuitPublicInputs {\n    fn empty() -> Self {\n        PrivateCircuitPublicInputs {\n            call_context: CallContext::empty(),\n            args_hash: 0,\n            returns_hash: 0,\n            min_revertible_side_effect_counter: 0 as u32,\n            max_block_number: MaxBlockNumber::empty(),\n            note_hash_read_requests: [SideEffect::empty(); MAX_NOTE_HASH_READ_REQUESTS_PER_CALL],\n            nullifier_read_requests: [ReadRequest::empty(); MAX_NULLIFIER_READ_REQUESTS_PER_CALL],\n            nullifier_key_validation_requests: [NullifierKeyValidationRequest::empty(); MAX_NULLIFIER_KEY_VALIDATION_REQUESTS_PER_CALL],\n            new_note_hashes: [SideEffect::empty(); MAX_NEW_NOTE_HASHES_PER_CALL],\n            new_nullifiers: [SideEffectLinkedToNoteHash::empty(); MAX_NEW_NULLIFIERS_PER_CALL],\n            private_call_stack_hashes: [0; MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL],\n            public_call_stack_hashes: [0; MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL],\n            new_l2_to_l1_msgs: [L2ToL1Message::empty(); MAX_NEW_L2_TO_L1_MSGS_PER_CALL],\n            start_side_effect_counter : 0 as u32,\n            end_side_effect_counter : 0 as u32,\n            encrypted_logs_hash: 0,\n            unencrypted_logs_hash: 0,\n            encrypted_log_preimages_length: 0,\n            unencrypted_log_preimages_length: 0,\n            historical_header: Header::empty(),\n            chain_id: 0,\n            version: 0,\n        }\n    }\n}\n\n#[test]\nfn serialization_of_empty() {\n    let pcpi = PrivateCircuitPublicInputs::empty();\n    let serialized = pcpi.serialize();\n    let deserialized = PrivateCircuitPublicInputs::deserialize(serialized);\n    assert(pcpi.eq(deserialized));\n}\n\n#[test]\nfn empty_hash() {\n    let inputs = PrivateCircuitPublicInputs::empty();\n    let hash = inputs.hash();\n\n    // Value from private_circuit_public_inputs.test.ts \"computes empty item hash\" test\n    let test_data_empty_hash = 0x02e09d8c4897d560bd4caf05ab45fa22e1d4a251bf5b5e0448310a7f40f7a0b8;\n    assert_eq(hash, test_data_empty_hash);\n}\n","path":"/Users/jack-sw/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.35.1/noir-projects/noir-protocol-circuits/crates/types/src/abis/private_circuit_public_inputs.nr"},"135":{"source":"use crate::{\n    address::AztecAddress, constants::GENERATOR_INDEX__SIDE_EFFECT,\n    traits::{Empty, Hash, Serialize, Deserialize}\n};\nuse dep::std::cmp::Eq;\n\nglobal SIDE_EFFECT_SERIALIZED_LEN = 2;\n\ntrait Ordered {\n    fn counter(self) -> u32;\n}\n\ntrait OrderedValue<T> where T: Eq {\n    fn value(self) -> T;\n    fn counter(self) -> u32;\n}\n\ntrait ContractScopedOrderedValue<T> where T: Eq {\n    fn value(self) -> T;\n    fn counter(self) -> u32;\n    fn contract_address(self) -> AztecAddress;\n}\n\nstruct SideEffect {\n    value: Field,\n    counter: u32,\n}\n\nimpl Ordered for SideEffect {\n    fn counter(self) -> u32 {\n        self.counter\n    }\n}\n\nimpl OrderedValue<Field> for SideEffect {\n    fn value(self) -> Field {\n        self.value\n    }\n    fn counter(self) -> u32 {\n        self.counter\n    }\n}\n\nimpl Eq for SideEffect {\n    fn eq(self, side_effect: SideEffect) -> bool {\n        (self.value == side_effect.value)\n        & (self.counter == side_effect.counter)\n    }\n}\n\nimpl Empty for SideEffect {\n    fn empty() -> Self {\n        SideEffect {\n            value: 0,\n            counter: 0,\n        }\n    }\n}\n\nimpl Hash for SideEffect {\n    fn hash(self) -> Field {\n        dep::std::hash::pedersen_hash_with_separator(\n            self.serialize() , GENERATOR_INDEX__SIDE_EFFECT)\n    }\n}\n\nimpl Serialize<SIDE_EFFECT_SERIALIZED_LEN> for SideEffect {\n    fn serialize(self) -> [Field; SIDE_EFFECT_SERIALIZED_LEN] {\n        [self.value, self.counter as Field]\n    }\n}\n\nimpl Deserialize<SIDE_EFFECT_SERIALIZED_LEN> for SideEffect {\n    fn deserialize(values: [Field; SIDE_EFFECT_SERIALIZED_LEN]) -> Self {\n        Self {\n            value: values[0],\n            counter: values[1] as u32,\n        }\n    }\n}\n\nstruct SideEffectLinkedToNoteHash{\n    value: Field,\n    note_hash: Field,\n    counter: u32,\n}\n\nimpl Ordered for SideEffectLinkedToNoteHash {\n    fn counter(self) -> u32 {\n        self.counter\n    }\n}\n\nimpl OrderedValue<Field> for SideEffectLinkedToNoteHash {\n    fn value(self) -> Field {\n        self.value\n    }\n    fn counter(self) -> u32 {\n        self.counter\n    }\n}\n\nimpl Eq for SideEffectLinkedToNoteHash {\n    fn eq(self, side_effect: SideEffectLinkedToNoteHash) -> bool {\n        (self.value == side_effect.value)\n            & (self.note_hash == side_effect.note_hash) \n            & (self.counter == side_effect.counter)\n    }\n}\n\nimpl Empty for SideEffectLinkedToNoteHash {\n    fn empty() -> Self {\n        SideEffectLinkedToNoteHash {\n            value: 0,\n            note_hash: 0,\n            counter: 0,\n        }\n    }\n}\n\nimpl Hash for SideEffectLinkedToNoteHash {\n    fn hash(self) -> Field {\n        dep::std::hash::pedersen_hash_with_separator(\n            self.serialize(),\n        GENERATOR_INDEX__SIDE_EFFECT)\n    }\n}\n\nimpl Serialize<3> for SideEffectLinkedToNoteHash {\n    fn serialize(self) -> [Field; 3] {\n        [self.value, self.note_hash, self.counter as Field]\n    }\n}\n\nimpl Deserialize<3> for SideEffectLinkedToNoteHash {\n    fn deserialize(values: [Field; 3]) -> Self {\n        Self {\n            value: values[0],\n            note_hash: values[1],\n            counter: values[2] as u32,\n        }\n    }\n}\n","path":"/Users/jack-sw/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.35.1/noir-projects/noir-protocol-circuits/crates/types/src/abis/side_effect.nr"},"136":{"source":"use crate::{\n    abis::function_selector::FunctionSelector, address::{EthAddress, AztecAddress},\n    constants::{CALL_CONTEXT_LENGTH, GENERATOR_INDEX__CALL_CONTEXT}, hash::pedersen_hash,\n    traits::{Deserialize, Hash, Serialize, Empty}, abis::side_effect::Ordered,\n    abis::{gas_settings::GasSettings, gas::Gas}, utils::reader::Reader\n};\n\n// docs:start:call-context\nstruct CallContext {\n    msg_sender : AztecAddress,\n    storage_contract_address : AztecAddress,\n    portal_contract_address : EthAddress,\n    function_selector : FunctionSelector,\n    gas_left: Gas,\n\n    is_delegate_call : bool,\n    is_static_call : bool,\n\n    side_effect_counter : u32,\n\n    gas_settings: GasSettings,\n    transaction_fee: Field,\n}\n// docs:end:call-context\n\nimpl CallContext {\n    fn assert_is_zero(self) {\n        let serialized: [Field; CALL_CONTEXT_LENGTH] = self.serialize();\n\n        for i in 0..CALL_CONTEXT_LENGTH {\n            assert(serialized[i] == 0);\n        }\n    }\n}\n\nimpl Eq for CallContext {\n    fn eq(self, other: CallContext) -> bool {\n        self.serialize() == other.serialize()\n    }\n}\n\nimpl Hash for CallContext {\n    fn hash(self) -> Field {\n        pedersen_hash(self.serialize(), GENERATOR_INDEX__CALL_CONTEXT)\n    }\n}\n\nimpl Serialize<CALL_CONTEXT_LENGTH> for CallContext {\n    fn serialize(self) -> [Field; CALL_CONTEXT_LENGTH] {\n        let mut serialized: BoundedVec<Field, CALL_CONTEXT_LENGTH> = BoundedVec::new();\n\n        serialized.push(self.msg_sender.to_field());\n        serialized.push(self.storage_contract_address.to_field());\n        serialized.push(self.portal_contract_address.to_field());\n        serialized.push(self.function_selector.to_field());\n        serialized.extend_from_array(self.gas_left.serialize());\n        serialized.push(self.is_delegate_call as Field);\n        serialized.push(self.is_static_call as Field);\n        serialized.push(self.side_effect_counter as Field);\n        serialized.extend_from_array(self.gas_settings.serialize());\n        serialized.push(self.transaction_fee);\n    \n        serialized.storage\n    }\n}\n\nimpl Deserialize<CALL_CONTEXT_LENGTH> for CallContext {\n    fn deserialize(serialized: [Field; CALL_CONTEXT_LENGTH]) -> CallContext {\n        let mut reader = Reader::new(serialized);\n        CallContext {\n            msg_sender: AztecAddress::from_field(reader.read()),\n            storage_contract_address: AztecAddress::from_field(reader.read()),\n            portal_contract_address: EthAddress::from_field(reader.read()),\n            function_selector: FunctionSelector::from_field(reader.read()),\n            gas_left: reader.read_struct(Gas::deserialize),\n            is_delegate_call: reader.read() as bool,\n            is_static_call: reader.read() as bool,\n            side_effect_counter: reader.read() as u32,\n            gas_settings: reader.read_struct(GasSettings::deserialize),\n            transaction_fee: reader.read(),\n        }\n    }\n}\n\nimpl Empty for CallContext {\n    fn empty() -> Self {\n        CallContext {\n            msg_sender: AztecAddress::empty(),\n            storage_contract_address: AztecAddress::empty(),\n            portal_contract_address: EthAddress::empty(),\n            function_selector: FunctionSelector::empty(),\n            gas_left: Gas::empty(),\n            is_delegate_call: false,\n            is_static_call: false,\n            side_effect_counter: 0,\n            gas_settings: GasSettings::empty(),\n            transaction_fee: 0,\n        }\n    }\n}\n\n#[test]\nfn serialize_deserialize_of_empty() {\n    let context = CallContext::empty();\n    let serialized = context.serialize();\n    let deserialized = CallContext::deserialize(serialized);\n    assert(context.eq(deserialized));\n}\n\n#[test]\nfn assert_is_zero() {\n    let context = CallContext::empty();\n    context.assert_is_zero();\n}\n\n#[test(should_fail)]\nfn not_zero_assert_is_zero() {\n    let mut context = CallContext::empty();\n    context.is_delegate_call = true;\n    context.assert_is_zero();\n}\n\n#[test]\nfn test_eq() {\n    let mut context1 = CallContext::empty();\n    let mut context2 = CallContext::empty();\n\n    context1.is_delegate_call = true;\n    context2.is_delegate_call = true;\n\n    let address: AztecAddress = AztecAddress::from_field(69420);\n    context1.msg_sender = address;\n    context2.msg_sender = address;\n\n    assert(context1.eq(context2));\n}\n\n#[test(should_fail)]\nfn not_eq_test_eq() {\n    let mut context1 = CallContext::empty();\n    let mut context2 = CallContext::empty();\n\n    context1.is_delegate_call = true;\n    context2.is_delegate_call = false;\n\n    let address1: AztecAddress = AztecAddress::from_field(69420);\n    let address2: AztecAddress = AztecAddress::from_field(42069);\n\n    context1.msg_sender = address1;\n    context2.msg_sender = address2;\n\n    assert(context1.eq(context2));\n}\n\n#[test]\nfn hash_smoke() {\n    let context = CallContext::empty();\n    let _hashed = context.hash();\n}\n","path":"/Users/jack-sw/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.35.1/noir-projects/noir-protocol-circuits/crates/types/src/abis/call_context.nr"},"137":{"source":"use crate::{\n    abis::{\n    call_context::CallContext, read_request::ReadRequest,\n    side_effect::{SideEffect, SideEffectLinkedToNoteHash}, gas::Gas\n},\n    address::AztecAddress,\n    constants::{\n    MAX_NEW_L2_TO_L1_MSGS_PER_CALL, MAX_NEW_NULLIFIERS_PER_CALL, MAX_NEW_NOTE_HASHES_PER_CALL,\n    MAX_NULLIFIER_READ_REQUESTS_PER_CALL, MAX_NULLIFIER_NON_EXISTENT_READ_REQUESTS_PER_CALL,\n    MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL, MAX_PUBLIC_DATA_READS_PER_CALL,\n    MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL, GENERATOR_INDEX__PUBLIC_CIRCUIT_PUBLIC_INPUTS,\n    PUBLIC_CIRCUIT_PUBLIC_INPUTS_LENGTH\n},\n    contrakt::{storage_read::StorageRead, storage_update_request::StorageUpdateRequest},\n    hash::pedersen_hash, header::Header, messaging::l2_to_l1_message::L2ToL1Message,\n    traits::{Hash, Serialize, Deserialize, Empty}, utils::reader::Reader\n};\n\nstruct PublicCircuitPublicInputs{\n    call_context: CallContext,\n\n    args_hash: Field,\n    returns_hash: Field,\n\n    nullifier_read_requests: [ReadRequest; MAX_NULLIFIER_READ_REQUESTS_PER_CALL],\n    nullifier_non_existent_read_requests: [ReadRequest; MAX_NULLIFIER_NON_EXISTENT_READ_REQUESTS_PER_CALL],\n    contract_storage_update_requests: [StorageUpdateRequest; MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL],\n    contract_storage_reads: [StorageRead; MAX_PUBLIC_DATA_READS_PER_CALL],\n\n    // todo: add sideeffect ranges for the input to these hashes\n    public_call_stack_hashes: [Field; MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL],\n    new_note_hashes: [SideEffect; MAX_NEW_NOTE_HASHES_PER_CALL],\n    new_nullifiers: [SideEffectLinkedToNoteHash; MAX_NEW_NULLIFIERS_PER_CALL],\n    new_l2_to_l1_msgs: [L2ToL1Message; MAX_NEW_L2_TO_L1_MSGS_PER_CALL],\n\n    start_side_effect_counter: u32,\n    end_side_effect_counter: u32,\n\n    unencrypted_logs_hash: Field,\n\n    // Here so that the gas cost of this request can be measured by circuits, without actually needing to feed in the\n    // variable-length data.\n    unencrypted_log_preimages_length: Field,\n\n    // Header of a block whose state is used during public execution. Set by sequencer to be a header of a block\n    // previous to the one in which the tx is included.\n    historical_header: Header,\n\n    prover_address: AztecAddress,\n\n    revert_code: u8,\n    \n    // gas left after execution is completed\n    gas_left: Gas,\n}\n\nimpl Eq for PublicCircuitPublicInputs {\n    fn eq(self, other: Self) -> bool {\n        self.serialize() == other.serialize()\n    }\n}\n\nimpl Serialize<PUBLIC_CIRCUIT_PUBLIC_INPUTS_LENGTH> for PublicCircuitPublicInputs {\n    fn serialize(self) -> [Field; PUBLIC_CIRCUIT_PUBLIC_INPUTS_LENGTH] {\n        let mut fields: BoundedVec<Field, PUBLIC_CIRCUIT_PUBLIC_INPUTS_LENGTH> = BoundedVec::new();\n        fields.extend_from_array(self.call_context.serialize());\n        fields.push(self.args_hash);\n        fields.push(self.returns_hash);\n        for i in 0..MAX_NULLIFIER_READ_REQUESTS_PER_CALL {\n            fields.extend_from_array(self.nullifier_read_requests[i].serialize());\n        }\n        for i in 0..MAX_NULLIFIER_NON_EXISTENT_READ_REQUESTS_PER_CALL {\n            fields.extend_from_array(self.nullifier_non_existent_read_requests[i].serialize());\n        }\n        for i in 0..MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL {\n            fields.extend_from_array(self.contract_storage_update_requests[i].serialize());\n        }\n        for i in 0..MAX_PUBLIC_DATA_READS_PER_CALL {\n            fields.extend_from_array(self.contract_storage_reads[i].serialize());\n        }\n        fields.extend_from_array(self.public_call_stack_hashes);\n\n        for i in 0..MAX_NEW_NOTE_HASHES_PER_CALL {\n            fields.extend_from_array(self.new_note_hashes[i].serialize());\n        }\n        for i in 0..MAX_NEW_NULLIFIERS_PER_CALL {\n            fields.extend_from_array(self.new_nullifiers[i].serialize());\n        }\n        for i in 0..MAX_NEW_L2_TO_L1_MSGS_PER_CALL {\n            fields.extend_from_array(self.new_l2_to_l1_msgs[i].serialize());\n        }\n\n        fields.push(self.start_side_effect_counter as Field);\n        fields.push(self.end_side_effect_counter as Field);\n\n        fields.push(self.unencrypted_logs_hash);\n        fields.push(self.unencrypted_log_preimages_length);\n        fields.extend_from_array(self.historical_header.serialize());\n        fields.push(self.prover_address.to_field());\n        fields.push(self.revert_code as Field);\n        fields.extend_from_array(self.gas_left.serialize());\n        fields.storage\n    }\n}\n\nimpl Deserialize<PUBLIC_CIRCUIT_PUBLIC_INPUTS_LENGTH> for PublicCircuitPublicInputs {\n    fn deserialize(serialized: [Field; PUBLIC_CIRCUIT_PUBLIC_INPUTS_LENGTH]) -> Self {\n        // TODO(#4390): This should accept a reader ^ to avoid copying data.\n        let mut reader = Reader::new(serialized);\n        let inputs = PublicCircuitPublicInputs {\n            call_context: reader.read_struct(CallContext::deserialize),\n            args_hash: reader.read(),\n            returns_hash: reader.read(),\n            nullifier_read_requests: reader.read_struct_array(ReadRequest::deserialize, [ReadRequest::empty(); MAX_NULLIFIER_READ_REQUESTS_PER_CALL]),\n            nullifier_non_existent_read_requests: reader.read_struct_array(ReadRequest::deserialize, [ReadRequest::empty(); MAX_NULLIFIER_NON_EXISTENT_READ_REQUESTS_PER_CALL]),\n            contract_storage_update_requests: reader.read_struct_array(StorageUpdateRequest::deserialize, [StorageUpdateRequest::empty(); MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL]),\n            contract_storage_reads: reader.read_struct_array(StorageRead::deserialize, [StorageRead::empty(); MAX_PUBLIC_DATA_READS_PER_CALL]),\n            public_call_stack_hashes: reader.read_array([0; MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL]),\n            new_note_hashes: reader.read_struct_array(SideEffect::deserialize, [SideEffect::empty(); MAX_NEW_NOTE_HASHES_PER_CALL]),\n            new_nullifiers: reader.read_struct_array(SideEffectLinkedToNoteHash::deserialize, [SideEffectLinkedToNoteHash::empty(); MAX_NEW_NULLIFIERS_PER_CALL]),\n            new_l2_to_l1_msgs: reader.read_struct_array(L2ToL1Message::deserialize, [L2ToL1Message::empty(); MAX_NEW_L2_TO_L1_MSGS_PER_CALL]),\n            start_side_effect_counter: reader.read() as u32,\n            end_side_effect_counter: reader.read() as u32,\n            unencrypted_logs_hash: reader.read() as Field,\n            unencrypted_log_preimages_length: reader.read(),\n            historical_header: reader.read_struct(Header::deserialize),\n            prover_address: reader.read_struct(AztecAddress::deserialize),\n            revert_code: reader.read() as u8,\n            gas_left: reader.read_struct(Gas::deserialize),\n        };\n\n        reader.finish();\n        inputs\n    }\n}\n\nimpl Hash for PublicCircuitPublicInputs {\n    fn hash(self) -> Field {\n        pedersen_hash(self.serialize(), GENERATOR_INDEX__PUBLIC_CIRCUIT_PUBLIC_INPUTS)\n    }\n}\n\nimpl Empty for PublicCircuitPublicInputs {\n    fn empty() -> Self {\n        PublicCircuitPublicInputs {\n            call_context: CallContext::empty(),\n            args_hash: 0,\n            returns_hash: 0,\n            nullifier_read_requests: [ReadRequest::empty(); MAX_NULLIFIER_READ_REQUESTS_PER_CALL],\n            nullifier_non_existent_read_requests: [ReadRequest::empty(); MAX_NULLIFIER_NON_EXISTENT_READ_REQUESTS_PER_CALL],\n            contract_storage_update_requests: [StorageUpdateRequest::empty(); MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL],\n            contract_storage_reads: [StorageRead::empty(); MAX_PUBLIC_DATA_READS_PER_CALL],\n            public_call_stack_hashes: [0; MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL],\n            new_note_hashes: [SideEffect::empty(); MAX_NEW_NOTE_HASHES_PER_CALL],\n            new_nullifiers: [SideEffectLinkedToNoteHash::empty(); MAX_NEW_NULLIFIERS_PER_CALL],\n            new_l2_to_l1_msgs: [L2ToL1Message::empty(); MAX_NEW_L2_TO_L1_MSGS_PER_CALL],\n            start_side_effect_counter: 0 as u32,\n            end_side_effect_counter: 0 as u32,\n            unencrypted_logs_hash: 0,\n            unencrypted_log_preimages_length: 0,\n            historical_header: Header::empty(),\n            prover_address: AztecAddress::zero(),\n            revert_code: 0 as u8,\n            gas_left: Gas::empty(),\n        }\n    }\n}\n\n#[test]\nfn serialization_of_empty() {\n    let pcpi = PublicCircuitPublicInputs::empty();\n    let serialized = pcpi.serialize();\n    let deserialized = PublicCircuitPublicInputs::deserialize(serialized);\n    assert(pcpi.eq(deserialized));\n}\n\n#[test]\nfn empty_hash() {\n    let inputs = PublicCircuitPublicInputs::empty();\n    let hash = inputs.hash();\n\n    // Value from public_circuit_public_inputs.test.ts \"computes empty item hash\" test\n    let test_data_empty_hash = 0x00147d3d2cde08ee1046bf73cb6664c2bdf11b43c5dca0e72f4137f354bdad25;\n    assert_eq(hash, test_data_empty_hash);\n}\n","path":"/Users/jack-sw/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.35.1/noir-projects/noir-protocol-circuits/crates/types/src/abis/public_circuit_public_inputs.nr"},"144":{"source":"global NULLIFIER_LEAF_PREIMAGE_LENGTH: u64 = 3;\n\nuse crate::{merkle_tree::leaf_preimage::{LeafPreimage, IndexedTreeLeafPreimage}, traits::{Empty, Hash}};\n\nstruct NullifierLeafPreimage {\n    nullifier : Field,\n    next_nullifier :Field,\n    next_index : u64,\n}\n\nimpl Empty for NullifierLeafPreimage {\n    fn empty() -> Self {\n        Self {\n            nullifier : 0,\n            next_nullifier : 0,\n            next_index : 0,\n        }\n    }\n}\n\nimpl Hash for NullifierLeafPreimage {\n    fn hash(self) -> Field {\n        if self.is_empty() {\n            0\n        } else {\n            dep::std::hash::pedersen_hash(self.serialize())\n        }\n    }\n}\n\nimpl LeafPreimage for NullifierLeafPreimage {\n    fn get_key(self) -> Field {\n        self.nullifier\n    }\n\n    fn as_leaf(self) -> Field {\n        self.hash()\n    }\n}\n\nimpl IndexedTreeLeafPreimage for NullifierLeafPreimage {\n    fn get_key(self) -> Field {\n        self.nullifier\n    }\n\n    fn get_next_key(self) -> Field {\n        self.next_nullifier\n    }\n\n    fn as_leaf(self) -> Field {\n        self.hash()\n    }\n}\n\nimpl NullifierLeafPreimage {\n    pub fn is_empty(self) -> bool {\n        (self.nullifier == 0) & (self.next_nullifier == 0) & (self.next_index == 0)\n    }\n\n    pub fn serialize(self) -> [Field; NULLIFIER_LEAF_PREIMAGE_LENGTH] {\n        [self.nullifier, self.next_nullifier, self.next_index as Field]\n    }\n\n    pub fn deserialize(fields: [Field; NULLIFIER_LEAF_PREIMAGE_LENGTH]) -> Self {\n        Self { nullifier: fields[0], next_nullifier: fields[1], next_index: fields[2] as u64 }\n    }\n}\n","path":"/Users/jack-sw/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.35.1/noir-projects/noir-protocol-circuits/crates/types/src/abis/nullifier_leaf_preimage.nr"},"145":{"source":"use crate::abis::{function_data::FunctionData, public_circuit_public_inputs::PublicCircuitPublicInputs};\nuse crate::address::AztecAddress;\nuse crate::constants::GENERATOR_INDEX__CALL_STACK_ITEM;\nuse crate::traits::Hash;\n\nstruct PublicCallStackItem {\n    contract_address: AztecAddress,\n    public_inputs: PublicCircuitPublicInputs,\n    function_data: FunctionData,\n    // True if this call stack item represents a request to execute a function rather than a\n    // fulfilled execution. Used when enqueuing calls from private to public functions.\n    is_execution_request: bool,\n}\n\nimpl Hash for PublicCallStackItem {\n    fn hash(self) -> Field {\n        let item = if self.is_execution_request {\n            self.as_execution_request()\n        } else {\n            self\n        };\n\n        dep::std::hash::pedersen_hash_with_separator([\n            item.contract_address.to_field(),\n            item.function_data.hash(),\n            item.public_inputs.hash(),\n        ], GENERATOR_INDEX__CALL_STACK_ITEM)\n    }\n}\n\nimpl PublicCallStackItem {\n    fn as_execution_request(self) -> Self {\n        let public_inputs = self.public_inputs;\n        let mut request_public_inputs = PublicCircuitPublicInputs::empty();\n        request_public_inputs.call_context = public_inputs.call_context;\n        request_public_inputs.args_hash = public_inputs.args_hash;\n\n        let call_stack_item = PublicCallStackItem {\n            contract_address: self.contract_address,\n            function_data: self.function_data,\n            is_execution_request: true,\n            public_inputs: request_public_inputs\n        };\n        call_stack_item\n    }\n}\n\nmod tests {\n    use crate::{\n        abis::{\n        function_data::FunctionData, function_selector::FunctionSelector,\n        public_circuit_public_inputs::PublicCircuitPublicInputs,\n        public_call_stack_item::PublicCallStackItem, side_effect::SideEffect\n    },\n        address::AztecAddress, constants::GENERATOR_INDEX__CALL_STACK_ITEM, traits::Hash\n    };\n\n    #[test]\n    fn compute_call_stack_item_request_hash() {\n        let contract_address = AztecAddress::from_field(1);\n        let function_data = FunctionData { selector: FunctionSelector::from_u32(2), is_private: false };\n\n        let mut public_inputs = PublicCircuitPublicInputs::empty();\n        public_inputs.new_note_hashes[0] = SideEffect{\n            value: 1,\n            counter: 0,\n        };\n\n        let call_stack_item = PublicCallStackItem { contract_address, public_inputs, is_execution_request: true, function_data };\n\n        // Value from public_call_stack_item.test.ts \"Computes a callstack item request hash\" test\n        let test_data_call_stack_item_request_hash = 0x12c634ebadf4209e2def6cac0753f151422faf11237dc4f136bc17a84c8c2d76;\n        assert_eq(call_stack_item.hash(), test_data_call_stack_item_request_hash);\n    }\n\n    #[test]\n    fn compute_call_stack_item_hash() {\n        let contract_address = AztecAddress::from_field(1);\n        let function_data = FunctionData { selector: FunctionSelector::from_u32(2), is_private: false };\n\n        let mut public_inputs = PublicCircuitPublicInputs::empty();\n        public_inputs.new_note_hashes[0] = SideEffect{\n            value: 1,\n            counter: 0,\n        };\n\n        let call_stack_item = PublicCallStackItem { contract_address, public_inputs, is_execution_request: false, function_data };\n\n        // Value from public_call_stack_item.test.ts \"Computes a callstack item hash\" test\n        let test_data_call_stack_item_hash = 0x0864975afc9bec7eb7ec5b5608bbef648ec9afead1bbe986d0af148e3c944b9b;\n        assert_eq(call_stack_item.hash(), test_data_call_stack_item_hash);\n    }\n}\n","path":"/Users/jack-sw/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.35.1/noir-projects/noir-protocol-circuits/crates/types/src/abis/public_call_stack_item.nr"},"152":{"source":"use crate::{\n    abis::function_selector::FunctionSelector,\n    constants::{GENERATOR_INDEX__FUNCTION_DATA, FUNCTION_DATA_LENGTH}, hash::pedersen_hash,\n    traits::{Serialize, Hash, Deserialize, Empty}\n};\n\nstruct FunctionData {\n    selector : FunctionSelector,\n    is_private : bool,\n}\n\nimpl Eq for FunctionData {\n    fn eq(self, other: Self) -> bool {\n        self.selector.eq(other.selector) &\n        self.is_private == other.is_private\n    }\n}\n\nimpl Serialize<FUNCTION_DATA_LENGTH> for FunctionData {\n    // A field is ~256 bits\n    // TODO(https://github.com/AztecProtocol/aztec-packages/issues/3057): Since, function data can fit into a Field,\n    // This method will simply return a bit packed Field instead of hashing\n    fn serialize(self) -> [Field; FUNCTION_DATA_LENGTH] {\n        [\n            self.selector.to_field(),\n            self.is_private as Field,\n        ]\n    }\n}\n\nimpl Deserialize<FUNCTION_DATA_LENGTH> for FunctionData {\n    fn deserialize(serialized: [Field; FUNCTION_DATA_LENGTH]) -> Self {\n        Self {\n            selector: FunctionSelector::from_field(serialized[0]),\n            is_private: serialized[1] as bool,\n        }\n    }\n}\n\nimpl Hash for FunctionData {\n    fn hash(self) -> Field {\n        pedersen_hash(self.serialize(), GENERATOR_INDEX__FUNCTION_DATA)\n    }\n}\n\nimpl Empty for FunctionData {\n    fn empty() -> Self {\n        FunctionData {\n            selector: FunctionSelector::empty(),\n            is_private: false,\n        }\n    }\n}\n\n#[test]\nfn serialization_of_empty() {\n    let data = FunctionData::empty();\n    let serialized = data.serialize();\n    let deserialized = FunctionData::deserialize(serialized);\n    assert(data.eq(deserialized));\n}\n\n#[test]\nfn empty_hash() {\n    let data = FunctionData::empty();\n    let hash = data.hash();\n\n    // Value from function_data.test.ts \"computes empty item hash\" test\n    let test_data_empty_hash = 0x27b1d0839a5b23baf12a8d195b18ac288fcf401afb2f70b8a4b529ede5fa9fed;\n    assert_eq(hash, test_data_empty_hash);\n}\n","path":"/Users/jack-sw/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.35.1/noir-projects/noir-protocol-circuits/crates/types/src/abis/function_data.nr"},"157":{"source":"use crate::utils::field::field_from_bytes;\nuse dep::std::cmp::Eq;\nuse crate::traits::{Serialize, Deserialize, FromField, ToField, Empty};\n\nglobal SELECTOR_SIZE = 4;\n\nstruct FunctionSelector {\n    // 1st 4-bytes of abi-encoding of function.\n    inner: u32,\n}\n\nimpl Eq for FunctionSelector {\n    fn eq(self, function_selector: FunctionSelector) -> bool {\n        function_selector.inner == self.inner\n    }\n}\n\nimpl Serialize<1> for FunctionSelector {\n    fn serialize(self: Self) -> [Field; 1] {\n        [self.inner as Field]\n    }\n}\n\nimpl Deserialize<1> for FunctionSelector {\n    fn deserialize(fields: [Field; 1]) -> Self {\n        Self {\n            inner: fields[0] as u32\n        }\n    }\n}\n\nimpl FromField for FunctionSelector {\n    fn from_field(field: Field) -> Self {\n        Self { inner: field as u32 }\n    }\n}\n\nimpl ToField for FunctionSelector {\n    fn to_field(self) -> Field {\n        self.inner as Field\n    }\n}\n\nimpl Empty for FunctionSelector {\n    fn empty() -> Self {\n        Self { inner: 0 as u32 }\n    }\n}\n\nimpl FunctionSelector {\n    pub fn from_u32(value: u32) -> Self {\n        Self { inner: value }\n    }\n\n    pub fn from_signature<N>(signature: str<N>) -> Self {\n        let bytes = signature.as_bytes();\n        let hash = dep::std::hash::keccak256(bytes, bytes.len() as u32);\n\n        let mut selector_be_bytes = [0; SELECTOR_SIZE];\n        for i in 0..SELECTOR_SIZE {\n            selector_be_bytes[i] = hash[i];\n        }\n\n        FunctionSelector::from_field(field_from_bytes(selector_be_bytes, true))\n    }\n\n    pub fn zero() -> Self {\n        Self { inner: 0 }\n    }\n}\n","path":"/Users/jack-sw/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.35.1/noir-projects/noir-protocol-circuits/crates/types/src/abis/function_selector.nr"},"159":{"source":"use dep::std::cmp::Eq;\n\nstruct AppendOnlyTreeSnapshot {\n    root : Field,\n    // TODO(Alvaro) change this to a u64\n    next_available_leaf_index : u32\n}\n\nglobal APPEND_ONLY_TREE_SNAPSHOT_LENGTH: u64 = 2;\n\nimpl AppendOnlyTreeSnapshot {\n    pub fn serialize(self) -> [Field; APPEND_ONLY_TREE_SNAPSHOT_LENGTH] {\n        [self.root, self.next_available_leaf_index as Field]\n    }\n\n    pub fn deserialize(serialized: [Field; APPEND_ONLY_TREE_SNAPSHOT_LENGTH]) -> AppendOnlyTreeSnapshot {\n        AppendOnlyTreeSnapshot { root: serialized[0], next_available_leaf_index: serialized[1] as u32 }\n    }\n\n    pub fn zero() -> Self {\n        Self { root: 0, next_available_leaf_index: 0 }\n    }\n}\n\nimpl Eq for AppendOnlyTreeSnapshot {\n    fn eq(self, other : AppendOnlyTreeSnapshot) -> bool {\n        (self.root == other.root) & (self.next_available_leaf_index == other.next_available_leaf_index)\n    }\n}","path":"/Users/jack-sw/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.35.1/noir-projects/noir-protocol-circuits/crates/types/src/abis/append_only_tree_snapshot.nr"},"161":{"source":"use crate::{\n    abis::side_effect::{OrderedValue, ContractScopedOrderedValue},\n    traits::{Empty, Serialize, Deserialize}, address::AztecAddress\n};\nuse dep::std::cmp::Eq;\n\nglobal READ_REQUEST_SERIALIZED_LEN = 2;\nglobal READ_REQUEST_CONTEXT_SERIALIZED_LEN = 3;\n\nstruct ReadRequest {\n    value: Field,\n    counter: u32,\n}\n\nimpl OrderedValue<Field> for ReadRequest {\n    fn value(self) -> Field {\n        self.value\n    }\n    fn counter(self) -> u32 {\n        self.counter\n    }\n}\n\nimpl Eq for ReadRequest {\n    fn eq(self, read_request: ReadRequest) -> bool {\n        (self.value == read_request.value)\n        & (self.counter == read_request.counter)\n    }\n}\n\nimpl Empty for ReadRequest {\n    fn empty() -> Self {\n        ReadRequest {\n            value: 0,\n            counter: 0,\n        }\n    }\n}\n\nimpl Serialize<READ_REQUEST_SERIALIZED_LEN> for ReadRequest {\n    fn serialize(self) -> [Field; READ_REQUEST_SERIALIZED_LEN] {\n        [self.value, self.counter as Field]\n    }\n}\n\nimpl Deserialize<READ_REQUEST_SERIALIZED_LEN> for ReadRequest {\n    fn deserialize(values: [Field; READ_REQUEST_SERIALIZED_LEN]) -> Self {\n        Self {\n            value: values[0],\n            counter: values[1] as u32,\n        }\n    }\n}\n\nimpl ReadRequest {\n    pub fn to_context(self, contract_address: AztecAddress) -> ReadRequestContext {\n        ReadRequestContext { value: self.value, counter: self.counter, contract_address }\n    }\n}\n\nstruct ReadRequestContext {\n    value: Field,\n    counter: u32,\n    contract_address: AztecAddress,\n}\n\nimpl OrderedValue<Field> for ReadRequestContext {\n    fn value(self) -> Field {\n        self.value\n    }\n    fn counter(self) -> u32 {\n        self.counter\n    }\n}\n\nimpl ContractScopedOrderedValue<Field> for ReadRequestContext {\n    fn value(self) -> Field {\n        self.value\n    }\n    fn counter(self) -> u32 {\n        self.counter\n    }\n    fn contract_address(self) -> AztecAddress {\n        self.contract_address\n    }\n}\n\nimpl Eq for ReadRequestContext {\n    fn eq(self, read_request: ReadRequestContext) -> bool {\n        (self.value == read_request.value)\n        & (self.counter == read_request.counter)\n        & (self.contract_address.eq(read_request.contract_address))\n    }\n}\n\nimpl Empty for ReadRequestContext {\n    fn empty() -> Self {\n        ReadRequestContext {\n            value: 0,\n            counter: 0,\n            contract_address: AztecAddress::empty(),\n        }\n    }\n}\n\nimpl Serialize<READ_REQUEST_CONTEXT_SERIALIZED_LEN> for ReadRequestContext {\n    fn serialize(self) -> [Field; READ_REQUEST_CONTEXT_SERIALIZED_LEN] {\n        [self.value, self.counter as Field, self.contract_address.to_field()]\n    }\n}\n\nimpl Deserialize<READ_REQUEST_CONTEXT_SERIALIZED_LEN> for ReadRequestContext {\n    fn deserialize(values: [Field; READ_REQUEST_CONTEXT_SERIALIZED_LEN]) -> Self {\n        Self {\n            value: values[0],\n            counter: values[1] as u32,\n            contract_address: AztecAddress::from_field(values[2]),\n        }\n    }\n}\n\n","path":"/Users/jack-sw/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.35.1/noir-projects/noir-protocol-circuits/crates/types/src/abis/read_request.nr"},"164":{"source":"use crate::{\n    abis::function_selector::FunctionSelector, address::{EthAddress, AztecAddress},\n    constants::GAS_FEES_LENGTH, hash::pedersen_hash, traits::{Deserialize, Hash, Serialize, Empty},\n    abis::side_effect::Ordered, utils::reader::Reader\n};\n\nstruct GasFees {\n    fee_per_da_gas: Field,\n    fee_per_l1_gas: Field,\n    fee_per_l2_gas: Field,\n}\n\nimpl GasFees {\n    fn new(fee_per_da_gas: Field, fee_per_l1_gas: Field, fee_per_l2_gas: Field) -> Self {\n        Self { fee_per_da_gas, fee_per_l1_gas, fee_per_l2_gas }\n    }\n}\n\nimpl Serialize<GAS_FEES_LENGTH> for GasFees {\n    fn serialize(self) -> [Field; GAS_FEES_LENGTH] {\n        [self.fee_per_da_gas, self.fee_per_l1_gas, self.fee_per_l2_gas]\n    }\n}\n\nimpl Deserialize<GAS_FEES_LENGTH> for GasFees {\n    fn deserialize(serialized: [Field; GAS_FEES_LENGTH]) -> GasFees {\n        GasFees::new(serialized[0], serialized[1], serialized[2])\n    }\n}\n\nimpl Eq for GasFees {\n    fn eq(self, other : GasFees) -> bool {\n        (self.fee_per_da_gas == other.fee_per_da_gas) & (self.fee_per_l1_gas == other.fee_per_l1_gas) & (self.fee_per_l2_gas == other.fee_per_l2_gas)\n    }\n}\n\nimpl Empty for GasFees {\n    fn empty() -> Self {\n        GasFees::new(0, 0, 0)\n    }\n}\n","path":"/Users/jack-sw/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.35.1/noir-projects/noir-protocol-circuits/crates/types/src/abis/gas_fees.nr"},"166":{"source":"use crate::{constants::MAX_BLOCK_NUMBER_LENGTH, traits::{Deserialize, Serialize, Empty}};\n\nstruct MaxBlockNumber {\n    _opt: Option<u32>\n}\n\nimpl Empty for MaxBlockNumber {\n    fn empty() -> Self {\n        Self { _opt: Option::none() }\n    }\n}\n\nimpl Eq for MaxBlockNumber {\n    fn eq(self, other: Self) -> bool {\n        self._opt == other._opt\n    }\n}\n\nimpl Serialize<MAX_BLOCK_NUMBER_LENGTH> for MaxBlockNumber {\n    fn serialize(self) -> [Field; MAX_BLOCK_NUMBER_LENGTH] {\n        [self._opt._is_some as Field, self._opt._value as Field]\n    }\n}\n\nimpl Deserialize<MAX_BLOCK_NUMBER_LENGTH> for MaxBlockNumber {\n    fn deserialize(serialized: [Field; MAX_BLOCK_NUMBER_LENGTH]) -> MaxBlockNumber {\n        MaxBlockNumber {\n            _opt: Option {\n                _is_some: serialized[0] as bool,\n                _value: serialized[1] as u32,\n            }\n        }\n    }\n}\n\nimpl MaxBlockNumber {\n    pub fn new(max_block_number: u32) -> Self {\n        Self { _opt: Option::some(max_block_number) }\n    }\n\n    pub fn is_none(self) -> bool {\n        self._opt.is_none()\n    }\n\n    pub fn is_some(self) -> bool {\n        self._opt.is_some()\n    }\n\n    pub fn unwrap(self) -> u32 {\n        self._opt.unwrap()\n    }\n\n    pub fn unwrap_unchecked(self) -> u32 {\n        self._opt.unwrap_unchecked()\n    }\n\n    pub fn min(lhs: MaxBlockNumber, rhs: MaxBlockNumber) -> MaxBlockNumber {\n        if rhs.is_none() {\n            lhs // lhs might also be none, but in that case both would be\n        } else {\n            MaxBlockNumber::min_with_u32(lhs, rhs.unwrap_unchecked())\n        }\n    }\n\n    pub fn min_with_u32(lhs: MaxBlockNumber, rhs: u32) -> MaxBlockNumber {\n        if lhs._opt.is_none() {\n            MaxBlockNumber::new(rhs)\n        } else {\n            let lhs_value = lhs._opt.unwrap_unchecked();\n\n            MaxBlockNumber::new(if lhs_value < rhs { lhs_value } else { rhs })\n        }\n    }\n}\n\n#[test]\nfn zeroed_is_none() {\n    // Large parts of the kernel rely on zeroed to initialize structs. This conveniently matches what `default` does,\n    // and though we should eventually move everything to use `default`, it's good to check for now that both are\n    // equivalent.\n    let a = MaxBlockNumber::empty();\n    assert(a.is_none());\n}\n\n#[test]\nfn serde_default() {\n    let a = MaxBlockNumber::empty();\n    let b = MaxBlockNumber::deserialize(a.serialize());\n    assert(b.is_none());\n}\n\n#[test]\nfn serde_some() {\n    let a = MaxBlockNumber::new(13);\n    let b = MaxBlockNumber::deserialize(a.serialize());\n    assert_eq(b.unwrap(), 13);\n}\n\n#[test(should_fail)]\nfn default_unwrap_panics() {\n    let a = MaxBlockNumber::empty();\n    let _ = a.unwrap();\n}\n\n#[test]\nfn min_default_default() {\n    let a = MaxBlockNumber::empty();\n    let b = MaxBlockNumber::empty();\n\n    assert(MaxBlockNumber::min(a, b).is_none());\n}\n\n#[test]\nfn min_default_some() {\n    let a = MaxBlockNumber::empty();\n    let b = MaxBlockNumber::new(13);\n\n    assert_eq(MaxBlockNumber::min(a, b).unwrap(), 13);\n    assert_eq(MaxBlockNumber::min(b, a).unwrap(), 13);\n}\n\n#[test]\nfn min_some_some() {\n    let a = MaxBlockNumber::new(13);\n    let b = MaxBlockNumber::new(42);\n\n    assert_eq(MaxBlockNumber::min(a, b).unwrap(), 13);\n    assert_eq(MaxBlockNumber::min(b, a).unwrap(), 13);\n}\n\n#[test]\nfn min_with_u32_default() {\n    let a = MaxBlockNumber::empty();\n    let b = 42;\n\n    assert_eq(MaxBlockNumber::min_with_u32(a, b).unwrap(), 42);\n}\n\n#[test]\nfn min_with_u32_some() {\n    let a = MaxBlockNumber::new(13);\n    let b = 42;\n    let c = 8;\n\n    assert_eq(MaxBlockNumber::min_with_u32(a, b).unwrap(), 13);\n    assert_eq(MaxBlockNumber::min_with_u32(a, c).unwrap(), 8);\n}\n","path":"/Users/jack-sw/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.35.1/noir-projects/noir-protocol-circuits/crates/types/src/abis/max_block_number.nr"},"171":{"source":"use crate::{\n    abis::{\n    append_only_tree_snapshot::{AppendOnlyTreeSnapshot, APPEND_ONLY_TREE_SNAPSHOT_LENGTH},\n    global_variables::{GlobalVariables, GLOBAL_VARIABLES_LENGTH}\n},\n    constants::{GENERATOR_INDEX__BLOCK_HASH, HEADER_LENGTH, STATE_REFERENCE_LENGTH, CONTENT_COMMITMENT_LENGTH},\n    hash::pedersen_hash, state_reference::StateReference, traits::{Deserialize, Empty, Hash, Serialize},\n    utils::arr_copy_slice, content_commitment::ContentCommitment\n};\n\n// docs:start:header\nstruct Header {\n    last_archive: AppendOnlyTreeSnapshot,\n    content_commitment: ContentCommitment,\n    state: StateReference,\n    global_variables: GlobalVariables,\n}\n// docs:end:header\n\nimpl Eq for Header {\n    fn eq(self, other: Self) -> bool {\n        self.last_archive.eq(other.last_archive) &\n        self.content_commitment.eq(other.content_commitment) &\n        self.state.eq(other.state) &\n        self.global_variables.eq(other.global_variables)\n    }\n}\n\nimpl Serialize<HEADER_LENGTH> for Header {\n    fn serialize(self) -> [Field; HEADER_LENGTH] {\n        let mut fields: BoundedVec<Field, HEADER_LENGTH> = BoundedVec::new();\n\n        fields.extend_from_array(self.last_archive.serialize());\n        fields.extend_from_array(self.content_commitment.serialize());\n        fields.extend_from_array(self.state.serialize());\n        fields.extend_from_array(self.global_variables.serialize());\n\n        fields.storage\n    }\n}\n\nimpl Deserialize<HEADER_LENGTH> for Header {\n    fn deserialize(serialized: [Field; HEADER_LENGTH]) -> Self {\n        let mut offset = 0;\n\n        let last_archive_fields = arr_copy_slice(serialized, [0; APPEND_ONLY_TREE_SNAPSHOT_LENGTH], offset);\n        offset = offset + APPEND_ONLY_TREE_SNAPSHOT_LENGTH;\n\n        let content_commitment_fields = arr_copy_slice(serialized, [0; CONTENT_COMMITMENT_LENGTH], offset);\n        offset = offset + CONTENT_COMMITMENT_LENGTH;\n\n        let state_fields = arr_copy_slice(serialized, [0; STATE_REFERENCE_LENGTH], offset);\n        offset = offset + STATE_REFERENCE_LENGTH;\n\n        let global_variables_fields = arr_copy_slice(serialized, [0; GLOBAL_VARIABLES_LENGTH], offset);\n\n        Header {\n            last_archive: AppendOnlyTreeSnapshot::deserialize(last_archive_fields),\n            content_commitment: ContentCommitment::deserialize(content_commitment_fields),\n            state: StateReference::deserialize(state_fields),\n            global_variables: GlobalVariables::deserialize(global_variables_fields),\n        }\n    }\n}\n\nimpl Empty for Header {\n    fn empty() -> Self {\n        Self {\n            last_archive: AppendOnlyTreeSnapshot::zero(),\n            content_commitment: ContentCommitment::empty(),\n            state: StateReference::empty(),\n            global_variables: GlobalVariables::empty(),\n        }\n    }\n}\n\nimpl Hash for Header {\n    fn hash(self) -> Field {\n        pedersen_hash(self.serialize(), GENERATOR_INDEX__BLOCK_HASH)\n    }\n}\n\n#[test]\nfn serialization_of_empty() {\n    let header = Header::empty();\n    let serialized = header.serialize();\n    let deserialized = Header::deserialize(serialized);\n    assert(header.eq(deserialized));\n}\n\n#[test]\nfn hash_smoke() {\n    let header = Header::empty();\n    let _hashed = header.hash();\n}\n\n#[test]\nfn empty_hash_is_zero() {\n    let header = Header::empty();\n    let hash = header.hash();\n\n    // Value from new_contract_data.test.ts \"computes empty hash\" test\n    let test_data_empty_hash = 0x124e8c40a6eca2e3ad10c04050b01a3fad00df3cea47b13592c7571b6914c7a7;\n    assert_eq(hash, test_data_empty_hash);\n}\n","path":"/Users/jack-sw/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.35.1/noir-projects/noir-protocol-circuits/crates/types/src/header.nr"},"198":{"source":"pub fn field_from_bytes<N>(bytes: [u8; N], big_endian: bool) -> Field {\n    assert(bytes.len() < 32, \"field_from_bytes: N must be less than 32\");\n    let mut as_field = 0;\n    let mut offset = 1;\n    for i in 0..N {\n        let mut index = i;\n        if big_endian {\n            index = N - i - 1;\n        }\n        as_field += (bytes[index] as Field) * offset;\n        offset *= 256;\n    }\n\n    as_field\n}\n\n// Convert a 32 byte array to a field element by truncating the final byte\npub fn field_from_bytes_32_trunc(bytes32: [u8; 32]) -> Field {\n    // Convert it to a field element\n    let mut v = 1;\n    let mut high = 0 as Field;\n    let mut low = 0 as Field;\n\n    for i in 0..15 {\n        // covers bytes 16..30 (31 is truncated and ignored)\n        low = low + (bytes32[15 + 15 - i] as Field) * v;\n        v = v * 256;\n        // covers bytes 0..14\n        high = high + (bytes32[14 - i] as Field) * v;\n    }\n    // covers byte 15\n    low = low + (bytes32[15] as Field) * v;\n\n    low + high * v\n}\n\n// TODO to radix returns u8, so we cannot use bigger radixes. It'd be ideal to use a radix of the maximum range-constrained integer noir supports\npub fn full_field_less_than(lhs: Field, rhs: Field) -> bool {\n    lhs.lt(rhs)\n}\n\npub fn full_field_greater_than(lhs: Field, rhs: Field) -> bool {\n    rhs.lt(lhs)\n}\n\n#[test]\nunconstrained fn bytes_field_test() {\n    // Tests correctness of field_from_bytes_32_trunc against existing methods\n    // Bytes representing 0x543e0a6642ffeb8039296861765a53407bba62bd1c97ca43374de950bbe0a7\n    let inputs = [\n        84, 62, 10, 102, 66, 255, 235, 128, 57, 41, 104, 97, 118, 90, 83, 64, 123, 186, 98, 189, 28, 151, 202, 67, 55, 77, 233, 80, 187, 224, 167\n    ];\n    let field = field_from_bytes(inputs, true);\n    let return_bytes = field.to_be_bytes(31);\n    for i in 0..31 {\n        assert_eq(inputs[i], return_bytes[i]);\n    }\n    // 32 bytes - we remove the final byte, and check it matches the field\n    let inputs2 = [\n        84, 62, 10, 102, 66, 255, 235, 128, 57, 41, 104, 97, 118, 90, 83, 64, 123, 186, 98, 189, 28, 151, 202, 67, 55, 77, 233, 80, 187, 224, 167, 158\n    ];\n    let field2 = field_from_bytes_32_trunc(inputs2);\n    let return_bytes2 = field.to_be_bytes(31);\n\n    for i in 0..31 {\n        assert_eq(return_bytes2[i], return_bytes[i]);\n    }\n    assert_eq(field2, field);\n}\n","path":"/Users/jack-sw/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.35.1/noir-projects/noir-protocol-circuits/crates/types/src/utils/field.nr"},"200":{"source":"struct Reader<N> {\n    data: [Field; N],\n    offset: u64,\n}\n\nimpl<N> Reader<N> {\n    pub fn new(data: [Field; N]) -> Self {\n        Self { data, offset: 0 }\n    }\n\n    pub fn read(&mut self) -> Field {\n        let result = self.data[self.offset];\n        self.offset += 1;\n        result\n    }\n\n    pub fn read_array<K>(&mut self, mut result: [Field; K]) -> [Field; K] {\n        for i in 0..K {\n            result[i] = self.data[self.offset + i];\n        }\n        self.offset += K;\n        result\n    }\n\n    // TODO(#4394)\n    pub fn read_struct<T, K>(&mut self, deserialise: fn([Field; K]) -> T) -> T {\n        let result = deserialise(self.read_array([0; K]));\n        result\n    }\n\n    pub fn read_struct_array<T, K, C>(&mut self, deserialise: fn([Field; K]) -> T, mut result: [T; C]) -> [T; C] {\n        for i in 0..C {\n            result[i] = self.read_struct(deserialise);\n        }\n        result\n    }\n\n    pub fn finish(self) {\n        assert(self.offset == self.data.len(), \"Reader did not read all data\");\n    }\n}\n","path":"/Users/jack-sw/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.35.1/noir-projects/noir-protocol-circuits/crates/types/src/utils/reader.nr"},"202":{"source":"use crate::traits::{Empty, Hash};\n\nstruct PublicDataTreeLeafPreimage {\n    slot : Field,\n    value: Field,\n    next_slot :Field,\n    next_index : u64,\n}\n\nimpl Empty for PublicDataTreeLeafPreimage {\n    fn empty() -> Self {\n        Self {\n            slot: 0,\n            value: 0,\n            next_slot: 0,\n            next_index: 0,\n        }\n    }\n}\n\nimpl Hash for PublicDataTreeLeafPreimage {\n    fn hash(self) -> Field {\n        if self.is_empty() {\n            0\n        } else {\n            dep::std::hash::pedersen_hash([self.slot, self.value, (self.next_index as Field), self.next_slot])\n        }\n    }\n}\n\nimpl PublicDataTreeLeafPreimage {\n    pub fn is_empty(self) -> bool {\n        (self.slot == 0) & (self.value == 0) & (self.next_slot == 0) & (self.next_index == 0)\n    }\n}\n","path":"/Users/jack-sw/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.35.1/noir-projects/noir-protocol-circuits/crates/types/src/public_data_tree_leaf_preimage.nr"},"204":{"source":"use dep::std::cmp::Eq;\n\n// Trait: is_empty\n//\n// The general is_empty trait checks if a data type is is empty,\n// and it defines empty for the basic data types as 0.\n//\n// If a Field is equal to zero, then it is regarded as zero.\n// We will go with this definition for now, however it can be problematic \n// if a value can actually be zero. In a future refactor, we can \n// use the optional type for safety. Doing it now would lead to a worse devex\n// and would make it harder to sync up with the cpp code.\n// Preferred over Default trait to convey intent, as default doesn't necessarily mean empty.\ntrait Empty {\n    fn empty() -> Self;\n}\n\nimpl Empty for Field { fn empty() -> Self {0} }\n\nimpl Empty for u1 { fn empty() -> Self {0} }\nimpl Empty for u8 { fn empty() -> Self {0} }\nimpl Empty for u32 { fn empty() -> Self {0} }\nimpl Empty for u64 { fn empty() -> Self {0} }\nimpl Empty for U128 { fn empty() -> Self {U128::from_integer(0)} }\n\npub fn is_empty<T>(item: T) -> bool where T: Empty + Eq {\n    item.eq(T::empty())\n}\n\npub fn is_empty_array<T, N>(array: [T; N]) -> bool where T: Empty + Eq {\n    array.all(|elem| is_empty(elem))\n}\n\ntrait Hash {\n    fn hash(self) -> Field;\n}\n\ntrait ToField {\n    fn to_field(self) -> Field;\n}\n\nimpl ToField for Field {\n    fn to_field(self) -> Field {\n        self\n    }\n}\n\nimpl ToField for bool { fn to_field(self) -> Field { self as Field } }\nimpl ToField for u1 { fn to_field(self) -> Field { self as Field } }\nimpl ToField for u8 { fn to_field(self) -> Field { self as Field } }\nimpl ToField for u32 { fn to_field(self) -> Field { self as Field } }\nimpl ToField for u64 { fn to_field(self) -> Field { self as Field } }\nimpl ToField for U128 {\n    fn to_field(self) -> Field {\n        self.to_integer()\n    }\n}\n\ntrait FromField {\n    fn from_field(value: Field) -> Self;\n}\n\nimpl FromField for Field {\n    fn from_field(value: Field) -> Self {\n        value\n    }\n}\n\nimpl FromField for bool { fn from_field(value: Field) -> Self { value as bool } }\nimpl FromField for u1 { fn from_field(value: Field) -> Self { value as u1 } }\nimpl FromField for u8 { fn from_field(value: Field) -> Self { value as u8 } }\nimpl FromField for u32 { fn from_field(value: Field) -> Self { value as u32 } }\nimpl FromField for u64 { fn from_field(value: Field) -> Self { value as u64 } }\nimpl FromField for U128 {\n    fn from_field(value: Field) -> Self {\n        U128::from_integer(value)\n    }\n}\n\n// docs:start:serialize\ntrait Serialize<N> {\n    fn serialize(self) -> [Field; N];\n}\n// docs:end:serialize\n\n// docs:start:deserialize\ntrait Deserialize<N> {\n    fn deserialize(fields: [Field; N]) -> Self;\n}\n// docs:end:deserialize\n","path":"/Users/jack-sw/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.35.1/noir-projects/noir-protocol-circuits/crates/types/src/traits.nr"},"205":{"source":"use crate::traits::{Serialize, Deserialize};\n\nglobal BOOL_SERIALIZED_LEN: Field = 1;\nglobal U8_SERIALIZED_LEN: Field = 1;\nglobal U32_SERIALIZED_LEN: Field = 1;\nglobal U64_SERIALIZED_LEN: Field = 1;\nglobal U128_SERIALIZED_LEN: Field = 1;\nglobal FIELD_SERIALIZED_LEN: Field = 1;\n\nimpl Serialize<BOOL_SERIALIZED_LEN> for bool {\n    fn serialize(self) -> [Field; BOOL_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<BOOL_SERIALIZED_LEN> for bool {\n    fn deserialize(fields: [Field; BOOL_SERIALIZED_LEN]) -> bool {\n        fields[0] as bool\n    }\n}\n\nimpl Serialize<U8_SERIALIZED_LEN> for u8 {\n    fn serialize(self) -> [Field; U32_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<U8_SERIALIZED_LEN> for u8 {\n    fn deserialize(fields: [Field; U8_SERIALIZED_LEN]) -> Self {\n        fields[0] as u8\n    }\n}\n\nimpl Serialize<U32_SERIALIZED_LEN> for u32 {\n    fn serialize(self) -> [Field; U32_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<U32_SERIALIZED_LEN> for u32 {\n    fn deserialize(fields: [Field; U32_SERIALIZED_LEN]) -> Self {\n        fields[0] as u32\n    }\n}\n\nimpl Serialize<U64_SERIALIZED_LEN> for u64 {\n    fn serialize(self) -> [Field; U64_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<U64_SERIALIZED_LEN> for u64 {\n    fn deserialize(fields: [Field; U64_SERIALIZED_LEN]) -> Self {\n        fields[0] as u64\n    }\n}\n\nimpl Serialize<U128_SERIALIZED_LEN> for U128 {\n    fn serialize(self) -> [Field; 1] {\n        [self.to_integer()]\n    }\n\n}\n\nimpl Deserialize<U128_SERIALIZED_LEN> for U128 {\n    fn deserialize(fields: [Field; U128_SERIALIZED_LEN]) -> Self {\n        U128::from_integer(fields[0])\n    }\n}\n\nimpl Serialize<FIELD_SERIALIZED_LEN> for Field {\n    fn serialize(self) -> [Field; U32_SERIALIZED_LEN] {\n        [self]\n    }\n}\n\nimpl Deserialize<FIELD_SERIALIZED_LEN> for Field {\n    fn deserialize(fields: [Field; FIELD_SERIALIZED_LEN]) -> Self {\n        fields[0]\n    }\n}\n","path":"/Users/jack-sw/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.35.1/noir-projects/noir-protocol-circuits/crates/types/src/type_serialization.nr"},"206":{"source":"use crate::{\n    abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot, constants::PARTIAL_STATE_REFERENCE_LENGTH,\n    traits::{Deserialize, Empty, Hash, Serialize}\n};\n\nstruct PartialStateReference {\n    note_hash_tree: AppendOnlyTreeSnapshot,\n    nullifier_tree: AppendOnlyTreeSnapshot,\n    public_data_tree: AppendOnlyTreeSnapshot,\n}\n\nimpl Eq for PartialStateReference {\n    fn eq(self, other: PartialStateReference) -> bool {\n        self.note_hash_tree.eq(other.note_hash_tree) &\n        self.nullifier_tree.eq(other.nullifier_tree) &\n        self.public_data_tree.eq(other.public_data_tree)\n    }\n}\n\nimpl Serialize<PARTIAL_STATE_REFERENCE_LENGTH> for PartialStateReference {\n    fn serialize(self) -> [Field; PARTIAL_STATE_REFERENCE_LENGTH] {\n        let serialized_note_hash_tree = self.note_hash_tree.serialize();\n        let serialized_nullifier_tree = self.nullifier_tree.serialize();\n        let serialized_public_data_tree = self.public_data_tree.serialize();\n\n        [\n            serialized_note_hash_tree[0], \n            serialized_note_hash_tree[1],\n            serialized_nullifier_tree[0],\n            serialized_nullifier_tree[1],\n            serialized_public_data_tree[0],\n            serialized_public_data_tree[1],\n        ]\n    }\n}\n\nimpl Deserialize<PARTIAL_STATE_REFERENCE_LENGTH> for PartialStateReference {\n    fn deserialize(serialized: [Field; PARTIAL_STATE_REFERENCE_LENGTH]) -> PartialStateReference {\n        PartialStateReference {\n            note_hash_tree: AppendOnlyTreeSnapshot::deserialize(\n                [serialized[0], serialized[1]]\n            ),\n            nullifier_tree: AppendOnlyTreeSnapshot::deserialize(\n                [serialized[2], serialized[3]]\n            ),\n            public_data_tree: AppendOnlyTreeSnapshot::deserialize(\n                [serialized[4], serialized[5]]\n            ),\n        }\n    }\n}\n\nimpl Empty for PartialStateReference {\n    fn empty() -> Self {\n        Self {\n            note_hash_tree: AppendOnlyTreeSnapshot::zero(),\n            nullifier_tree: AppendOnlyTreeSnapshot::zero(),\n            public_data_tree: AppendOnlyTreeSnapshot::zero(),\n        }\n    }\n}\n\n#[test]\nfn serialization_of_empty() {\n    let partial = PartialStateReference::empty();\n    let _serialized = partial.serialize();\n    let _deserialized = PartialStateReference::deserialize(_serialized);\n}\n","path":"/Users/jack-sw/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.35.1/noir-projects/noir-protocol-circuits/crates/types/src/partial_state_reference.nr"},"208":{"source":"use crate::{\n    constants::CONTENT_COMMITMENT_LENGTH, traits::{Deserialize, Empty, Hash, Serialize},\n    utils::arr_copy_slice\n};\n\nstruct ContentCommitment {\n  tx_tree_height: Field,\n  txs_effects_hash: Field,\n  in_hash: Field,\n  out_hash: Field,\n}\n\nimpl Serialize<CONTENT_COMMITMENT_LENGTH> for ContentCommitment {\n  fn serialize(self) -> [Field; CONTENT_COMMITMENT_LENGTH] {\n    let mut fields: BoundedVec<Field, CONTENT_COMMITMENT_LENGTH> = BoundedVec::new();\n\n    fields.push(self.tx_tree_height);\n    fields.push(self.txs_effects_hash);\n    fields.push(self.in_hash);\n    fields.push(self.out_hash);\n\n    fields.storage\n  }\n}\n\nimpl Deserialize<CONTENT_COMMITMENT_LENGTH> for ContentCommitment {\n  fn deserialize(serialized: [Field; CONTENT_COMMITMENT_LENGTH]) -> Self {\n    let tx_tree_height = serialized[0];\n\n    let txs_effects_hash = serialized[1];\n\n    let in_hash = serialized[2];\n\n    let out_hash = serialized[3];\n\n    Self {\n      tx_tree_height,\n      txs_effects_hash,\n      in_hash,\n      out_hash,\n    }\n  }\n}\n\nimpl Empty for ContentCommitment {\n  fn empty() -> Self {\n    Self {\n      tx_tree_height: 0,\n      txs_effects_hash: 0,\n      in_hash: 0,\n      out_hash: 0,\n    }\n  }\n}\n\nimpl Eq for ContentCommitment {\n  fn eq(self, other: Self) -> bool {\n    (self.tx_tree_height == other.tx_tree_height)\n      & (self.txs_effects_hash == other.txs_effects_hash)\n      & (self.in_hash == other.in_hash)\n      & (self.out_hash == other.out_hash)\n  }\n}\n\n#[test]\nfn serialization_of_empty() {\n    let empty = ContentCommitment::empty();\n    let serialized = empty.serialize();\n    let deserialized = ContentCommitment::deserialize(serialized);\n\n    assert(empty.eq(deserialized));\n}\n","path":"/Users/jack-sw/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.35.1/noir-projects/noir-protocol-circuits/crates/types/src/content_commitment.nr"},"209":{"source":"use crate::{\n    address::{\n    aztec_address::AztecAddress, eth_address::EthAddress, partial_address::PartialAddress,\n    public_keys_hash::PublicKeysHash\n},\n    contract_class_id::ContractClassId,\n    constants::{GENERATOR_INDEX__CONTRACT_DEPLOYMENT_DATA, CONTRACT_INSTANCE_LENGTH},\n    traits::{Deserialize, Hash, Serialize}\n};\n\nstruct ContractInstance {\n    salt : Field,\n    deployer: AztecAddress,\n    contract_class_id : ContractClassId,\n    initialization_hash : Field,\n    portal_contract_address : EthAddress,\n    public_keys_hash : PublicKeysHash,\n}\n\nimpl Eq for ContractInstance {\n    fn eq(self, other: Self) -> bool {\n        self.public_keys_hash.eq(other.public_keys_hash) &\n        self.initialization_hash.eq(other.initialization_hash) &\n        self.contract_class_id.eq(other.contract_class_id) &\n        self.salt.eq(other.salt) &\n        self.portal_contract_address.eq(other.portal_contract_address)\n    }\n}\n\nimpl Serialize<CONTRACT_INSTANCE_LENGTH> for ContractInstance {\n    fn serialize(self) -> [Field; CONTRACT_INSTANCE_LENGTH] {\n        [\n            self.salt,\n            self.deployer.to_field(),\n            self.contract_class_id.to_field(),\n            self.initialization_hash,\n            self.portal_contract_address.to_field(),\n            self.public_keys_hash.to_field()\n        ]\n    }\n}\n\nimpl Deserialize<CONTRACT_INSTANCE_LENGTH> for ContractInstance {\n    fn deserialize(serialized: [Field; CONTRACT_INSTANCE_LENGTH]) -> Self {\n        Self {\n            salt: serialized[0],\n            deployer: AztecAddress::from_field(serialized[1]),\n            contract_class_id: ContractClassId::from_field(serialized[2]),\n            initialization_hash: serialized[3],\n            portal_contract_address: EthAddress::from_field(serialized[4]),\n            public_keys_hash: PublicKeysHash::from_field(serialized[5]),\n        }\n    }\n}\n\nimpl Hash for ContractInstance {\n    fn hash(self) -> Field {\n        self.to_address().to_field()\n    }\n}\n\nimpl ContractInstance {\n    fn to_address(self) -> AztecAddress {\n        AztecAddress::compute(\n            self.public_keys_hash,\n            PartialAddress::compute(\n                self.contract_class_id,\n                self.salt,\n                self.initialization_hash,\n                self.portal_contract_address,\n                self.deployer\n            )\n        )\n    }\n}\n","path":"/Users/jack-sw/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.35.1/noir-projects/noir-protocol-circuits/crates/types/src/contract_instance.nr"},"210":{"source":"// general util packages/modules are usually bad practice\n// because there is no criteria for what we should not put in here.\n// Reducing the size of this package would be welcome.\n\nmod arrays;\nmod field;\nmod reader;\nmod uint256;\n\n// if predicate == true then return lhs, else return rhs\npub fn conditional_assign(predicate: bool, lhs: Field, rhs: Field) -> Field {\n    if predicate { lhs } else { rhs }\n}\n\npub fn arr_copy_slice<T, N, M>(src: [T; N], mut dst: [T; M], offset: u64) -> [T; M] {\n    for i in 0..dst.len() {\n        dst[i] = src[i + offset];\n    }\n    dst\n}\n","path":"/Users/jack-sw/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.35.1/noir-projects/noir-protocol-circuits/crates/types/src/utils.nr"},"211":{"source":"use crate::{\n    crate::address::{eth_address::EthAddress, partial_address::PartialAddress, public_keys_hash::PublicKeysHash},\n    constants::{AZTEC_ADDRESS_LENGTH, GENERATOR_INDEX__CONTRACT_ADDRESS},\n    contract_class_id::ContractClassId, hash::pedersen_hash, grumpkin_point::GrumpkinPoint,\n    traits::{Empty, FromField, ToField, Serialize, Deserialize}, utils\n};\n\n// Aztec address\nstruct AztecAddress {\n    inner : Field\n}\n\nimpl Eq for AztecAddress {\n    fn eq(self, other : Self) -> bool {\n        self.to_field() == other.to_field()\n    }\n}\n\nimpl Empty for AztecAddress {\n    fn empty() -> Self {\n        Self {\n            inner : 0\n        }\n    }\n}\n\nimpl ToField for AztecAddress {\n    fn to_field(self) -> Field {\n        self.inner\n    }\n}\n\nimpl FromField for AztecAddress {\n    fn from_field(value: Field) -> AztecAddress {\n        AztecAddress { inner: value }\n    }\n}\n\nimpl Serialize<AZTEC_ADDRESS_LENGTH> for AztecAddress {\n    fn serialize(self: Self) -> [Field; AZTEC_ADDRESS_LENGTH] {\n        [self.to_field()]\n    }\n}\n\nimpl Deserialize<AZTEC_ADDRESS_LENGTH> for AztecAddress {\n    fn deserialize(fields: [Field; AZTEC_ADDRESS_LENGTH]) -> Self {\n        FromField::from_field(fields[0])\n    }\n}\n\nimpl AztecAddress {\n    pub fn zero() -> Self {\n        Self { inner: 0 }\n    }\n\n    pub fn compute_from_public_key(\n        pub_key: GrumpkinPoint,\n        contract_class_id: ContractClassId,\n        salt: Field,\n        initialization_hash: Field,\n        portal_contract_address: EthAddress,\n        deployer: AztecAddress\n    ) -> AztecAddress {\n        AztecAddress::compute(\n            PublicKeysHash::compute(pub_key),\n            PartialAddress::compute(\n                contract_class_id,\n                salt,\n                initialization_hash,\n                portal_contract_address,\n                deployer\n            )\n        )\n    }\n\n    pub fn compute(pub_keys_hash: PublicKeysHash, partial_address: PartialAddress) -> AztecAddress {\n        AztecAddress::from_field(\n            pedersen_hash(\n                [pub_keys_hash.to_field(), partial_address.to_field()],\n                GENERATOR_INDEX__CONTRACT_ADDRESS\n            )\n        )\n    }\n\n    pub fn is_zero(self) -> bool {\n        self.inner == 0\n    }\n\n    pub fn assert_is_zero(self) {\n        assert(self.to_field() == 0);\n    }\n\n    pub fn conditional_assign(predicate: bool, lhs: Self, rhs: Self) -> Self {\n        let result = utils::conditional_assign(predicate, rhs.to_field(), lhs.to_field());\n        Self { inner: result }\n    }\n}\n\n#[test]\nfn compute_address() {\n    let point = GrumpkinPoint { x: 1, y: 2 };\n    let contract_address_salt = 3;\n    let contract_class_id = ContractClassId::from_field(4);\n    let initialization_hash = 5;\n    let portal_contract_address = EthAddress::from_field(6);\n    let deployer = AztecAddress::from_field(7);\n\n    let address = AztecAddress::compute_from_public_key(\n        point,\n        contract_class_id,\n        contract_address_salt,\n        initialization_hash,\n        portal_contract_address,\n        deployer\n    );\n\n    let expected_computed_address_from_preimage = 0x027ea2b41ced2ec9a98305984e96dd28518536a4628883ccdc06e38aa8997220;\n    assert(address.to_field() == expected_computed_address_from_preimage);\n}\n\n#[test]\nfn compute_address_from_partial_and_pubkey() {\n    let point = GrumpkinPoint { x: 1, y: 2 };\n    let partial_address = PartialAddress::from_field(3);\n\n    let address = AztecAddress::compute(PublicKeysHash::compute(point), partial_address);\n    let expected_computed_address_from_partial_and_pubkey = 0x0447f893197175723deb223696e2e96dbba1e707ee8507766373558877e74197;\n    assert(address.to_field() == expected_computed_address_from_partial_and_pubkey);\n}\n\n#[test]\nfn from_field_to_field() {\n    let address = AztecAddress { inner: 37 };\n    assert_eq(FromField::from_field(address.to_field()), address);\n}\n\n#[test]\nfn serde() {\n    let address = AztecAddress { inner: 37 };\n    assert_eq(Deserialize::deserialize(address.serialize()), address);\n}\n","path":"/Users/jack-sw/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.35.1/noir-projects/noir-protocol-circuits/crates/types/src/address/aztec_address.nr"},"212":{"source":"use crate::{\n    constants::GENERATOR_INDEX__PARTIAL_ADDRESS, hash::pedersen_hash, grumpkin_point::GrumpkinPoint,\n    traits::{ToField, Serialize, Deserialize}\n};\n\n// Public keys hash. Used in the computation of an address.\nstruct PublicKeysHash {\n    inner: Field\n}\n\nimpl ToField for PublicKeysHash {\n    fn to_field(self) -> Field {\n        self.inner\n    }\n}\n\nimpl Serialize<1> for PublicKeysHash {\n    fn serialize(self: Self) -> [Field; 1] {\n        [self.to_field()]\n    }\n}\n\nimpl Deserialize<1> for PublicKeysHash {\n    fn deserialize(fields: [Field; 1]) -> Self {\n        PublicKeysHash::from_field(fields[0])\n    }\n}\n\nimpl Eq for PublicKeysHash {\n    fn eq(self, other: Self) -> bool {\n        self.inner == other.inner\n    }\n}\n\nimpl PublicKeysHash {\n    pub fn from_field(field: Field) -> Self {\n        Self { inner: field }\n    }\n\n    pub fn compute(public_key: GrumpkinPoint) -> Self {\n        PublicKeysHash::from_field(\n            pedersen_hash(\n                [\n            public_key.x,\n            public_key.y\n        ],\n                GENERATOR_INDEX__PARTIAL_ADDRESS\n            )\n        )\n    }\n\n    pub fn to_field(self) -> Field {\n        self.inner\n    }\n\n    pub fn assert_is_zero(self) {\n        assert(self.to_field() == 0);\n    }\n}\n\n#[test]\nfn compute_public_keys_hash() {\n    let point = GrumpkinPoint { x: 1, y: 2 };\n    let actual = PublicKeysHash::compute(point);\n    let expected_public_keys_hash = 0x1923a6246e305720b6aaf751fde0342613e93c82e455c3831e28375c16dd40d8;\n    assert(actual.to_field() == expected_public_keys_hash);\n}\n","path":"/Users/jack-sw/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.35.1/noir-projects/noir-protocol-circuits/crates/types/src/address/public_keys_hash.nr"},"213":{"source":"use crate::{\n    address::{eth_address::EthAddress, aztec_address::AztecAddress},\n    constants::GENERATOR_INDEX__PARTIAL_ADDRESS, hash::pedersen_hash, traits::ToField\n};\n\n// Salted initialization hash. Used in the computation of a partial address.\nstruct SaltedInitializationHash {\n    inner: Field\n}\n\nimpl ToField for SaltedInitializationHash {\n    fn to_field(self) -> Field {\n        self.inner\n    }\n}\n\nimpl SaltedInitializationHash {\n    pub fn from_field(field: Field) -> Self {\n        Self { inner: field }\n    }\n\n    pub fn compute(\n        salt: Field,\n        initialization_hash: Field,\n        portal_contract_address: EthAddress,\n        deployer: AztecAddress\n    ) -> Self {\n        SaltedInitializationHash::from_field(\n            pedersen_hash(\n                [\n            salt,\n            initialization_hash,\n            deployer.to_field(),\n            portal_contract_address.to_field()\n        ],\n                GENERATOR_INDEX__PARTIAL_ADDRESS\n            )\n        )\n    }\n\n    pub fn assert_is_zero(self) {\n        assert(self.to_field() == 0);\n    }\n}\n","path":"/Users/jack-sw/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.35.1/noir-projects/noir-protocol-circuits/crates/types/src/address/salted_initialization_hash.nr"},"214":{"source":"use crate::{\n    address::{\n    eth_address::EthAddress, salted_initialization_hash::SaltedInitializationHash,\n    aztec_address::AztecAddress\n},\n    constants::GENERATOR_INDEX__PARTIAL_ADDRESS, contract_class_id::ContractClassId,\n    hash::pedersen_hash, traits::ToField\n};\n\n// Partial address\nstruct PartialAddress {\n    inner : Field\n}\n\nimpl ToField for PartialAddress {\n    fn to_field(self) -> Field {\n        self.inner\n    }\n}\n\nimpl PartialAddress {\n    pub fn from_field(field: Field) -> Self {\n        Self { inner: field }\n    }\n\n    pub fn compute(\n        contract_class_id: ContractClassId,\n        salt: Field,\n        initialization_hash: Field,\n        portal_contract_address: EthAddress,\n        deployer: AztecAddress\n    ) -> Self {\n        PartialAddress::compute_from_salted_initialization_hash(\n            contract_class_id,\n            SaltedInitializationHash::compute(salt, initialization_hash, portal_contract_address, deployer)\n        )\n    }\n\n    pub fn compute_from_salted_initialization_hash(\n        contract_class_id: ContractClassId,\n        salted_initialization_hash: SaltedInitializationHash\n    ) -> Self {\n        PartialAddress::from_field(\n            pedersen_hash(\n                [\n            contract_class_id.to_field(),\n            salted_initialization_hash.to_field()\n        ],\n                GENERATOR_INDEX__PARTIAL_ADDRESS\n            )\n        )\n    }\n\n    pub fn to_field(self) -> Field {\n        self.inner\n    }\n\n    pub fn assert_is_zero(self) {\n        assert(self.to_field() == 0);\n    }\n}\n","path":"/Users/jack-sw/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.35.1/noir-projects/noir-protocol-circuits/crates/types/src/address/partial_address.nr"},"215":{"source":"use crate::{\n    constants::ETH_ADDRESS_LENGTH, hash::pedersen_hash,\n    traits::{Empty, ToField, Serialize, Deserialize}, utils\n};\n\nstruct EthAddress{\n    inner : Field\n}\n\nimpl Eq for EthAddress {\n    fn eq(self, other : Self) -> bool {\n        self.to_field() == other.to_field()\n    }\n}\n\nimpl Empty for EthAddress {\n    fn empty() -> Self {\n        Self {\n            inner : 0\n        }\n    }\n}\n\nimpl ToField for EthAddress {\n    fn to_field(self) -> Field {\n        self.inner\n    }\n}\n\nimpl Serialize<ETH_ADDRESS_LENGTH> for EthAddress {\n    fn serialize(self: Self) -> [Field; ETH_ADDRESS_LENGTH] {\n        [self.inner]\n    }\n}\n\nimpl Deserialize<ETH_ADDRESS_LENGTH> for EthAddress {\n    fn deserialize(fields: [Field; ETH_ADDRESS_LENGTH]) -> Self {\n        EthAddress::from_field(fields[0])\n    }\n}\n\nimpl EthAddress {\n    pub fn zero() -> Self {\n        Self { inner: 0 }\n    }\n\n    pub fn from_field(field: Field) -> Self {\n        field.assert_max_bit_size(160);\n        Self { inner: field }\n    }\n\n    pub fn is_zero(self) -> bool {\n        self.inner == 0\n    }\n\n    pub fn assert_is_zero(self) {\n        assert(self.to_field() == 0);\n    }\n\n    pub fn conditional_assign(predicate: bool, lhs: Self, rhs: Self) -> Self {\n        let result = utils::conditional_assign(predicate, rhs.to_field(), lhs.to_field());\n        Self { inner: result }\n    }\n}\n","path":"/Users/jack-sw/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.35.1/noir-projects/noir-protocol-circuits/crates/types/src/address/eth_address.nr"},"217":{"source":"use crate::address::{AztecAddress, EthAddress};\nuse crate::mocked::VerificationKey;\nuse crate::abis::function_selector::FunctionSelector;\nuse crate::abis::contract_class_function_leaf_preimage::ContractClassFunctionLeafPreimage;\nuse crate::contract_class_id::ContractClassId;\nuse crate::utils::{uint256::U256, field::field_from_bytes_32_trunc};\nuse crate::constants::{\n    FUNCTION_TREE_HEIGHT, GENERATOR_INDEX__SILOED_NOTE_HASH, GENERATOR_INDEX__OUTER_NULLIFIER,\n    GENERATOR_INDEX__VK, GENERATOR_INDEX__CONSTRUCTOR, GENERATOR_INDEX__PARTIAL_ADDRESS,\n    GENERATOR_INDEX__CONTRACT_ADDRESS, GENERATOR_INDEX__NOTE_HASH_NONCE,\n    GENERATOR_INDEX__UNIQUE_NOTE_HASH\n};\nuse crate::traits::Hash;\nuse crate::messaging::l2_to_l1_message::L2ToL1Message;\nuse crate::merkle_tree::root::root_from_sibling_path;\nuse dep::std::hash::{pedersen_hash_with_separator, sha256};\n\npub fn sha256_to_field<N>(bytes_to_hash: [u8; N]) -> Field {\n    let sha256_hashed = sha256(bytes_to_hash);\n    let hash_in_a_field = field_from_bytes_32_trunc(sha256_hashed);\n\n    hash_in_a_field\n}\n\npub fn private_functions_root_from_siblings(\n    selector: FunctionSelector,\n    vk_hash: Field,\n    function_leaf_index: Field,\n    function_leaf_sibling_path: [Field; FUNCTION_TREE_HEIGHT]\n) -> Field {\n    let function_leaf_preimage = ContractClassFunctionLeafPreimage { selector, vk_hash };\n    let function_leaf = function_leaf_preimage.hash();\n    root_from_sibling_path(function_leaf, function_leaf_index, function_leaf_sibling_path)\n}\n\npub fn silo_note_hash(address: AztecAddress, inner_commitment: Field) -> Field {\n    pedersen_hash(\n        [\n        address.to_field(),\n        inner_commitment\n    ],\n        GENERATOR_INDEX__SILOED_NOTE_HASH\n    )\n}\n\npub fn silo_nullifier(address: AztecAddress, nullifier: Field) -> Field {\n    pedersen_hash(\n        [\n        address.to_field(),\n        nullifier\n    ],\n        GENERATOR_INDEX__OUTER_NULLIFIER\n    )\n}\n\npub fn merkle_hash(left: Field, right: Field) -> Field {\n    pedersen_hash([left, right], 0)\n}\n\npub fn stdlib_recursion_verification_key_compress_native_vk(_vk: VerificationKey) -> Field {\n    // Original cpp code\n    // stdlib::recursion::verification_key<CT::bn254>::compress_native(private_call.vk, GeneratorIndex::VK);\n    // The above cpp method is only ever called on verification key, so it has been special cased here\n    let _hash_index = GENERATOR_INDEX__VK;\n    0\n}\n\npub fn compute_l2_to_l1_hash(\n    contract_address: AztecAddress,\n    rollup_version_id: Field,\n    chain_id: Field,\n    message: L2ToL1Message\n) -> Field {\n    let mut bytes: BoundedVec<u8, 160> = BoundedVec::new();\n\n    let inputs = [\n        contract_address.to_field(), rollup_version_id, message.recipient.to_field(), chain_id, message.content\n    ];\n    for i in 0..inputs.len() {\n        // TODO are bytes be in fr.to_buffer() ?\n        let item_bytes = inputs[i].to_be_bytes(32);\n        for j in 0..32 {\n            bytes.push(item_bytes[j]);\n        }\n    }\n\n    sha256_to_field(bytes.storage)\n}\n\n// Computes sha256 hash of 2 input hashes.\n//\n// NB: This method now takes in two 31 byte fields - it assumes that any input\n// is the result of a sha_to_field hash and => is truncated\n//\n// TODO(Jan and David): This is used for the encrypted_log hashes.\n// Can we check to see if we can just use hash_to_field or pedersen_compress here?\n//\npub fn accumulate_sha256(input: [Field; 2]) -> Field {\n    // This is a note about the cpp code, since it takes an array of Fields\n    // instead of a U128.\n    // 4 Field elements when converted to bytes will usually \n    // occupy 4 * 32 = 128 bytes.\n    // However, this function is making the assumption that each Field \n    // only occupies 128 bits.\n    //\n    // TODO(David): This does not seem to be getting guaranteed anywhere in the code?\n\n    // Concatentate two fields into 32x2 = 64 bytes\n    // accumulate_sha256 assumes that the inputs are pre-truncated 31 byte numbers\n    let mut hash_input_flattened = [0; 64];\n    for offset in 0..input.len() {\n        let input_as_bytes = input[offset].to_be_bytes(32);\n        for byte_index in 0..32 {\n            hash_input_flattened[offset * 32 + byte_index] = input_as_bytes[byte_index];\n        }\n    }\n\n    sha256_to_field(hash_input_flattened)\n}\n\npub fn compute_logs_hash(previous_log_hash: Field, current_log_hash: Field) -> Field {\n    accumulate_sha256(\n        [\n        previous_log_hash,\n        current_log_hash\n    ]\n    )\n}\n\npub fn compute_note_hash_nonce(first_nullifier: Field, commitment_index: u64) -> Field {\n    pedersen_hash(\n        [\n        first_nullifier,\n        commitment_index as Field\n    ],\n        GENERATOR_INDEX__NOTE_HASH_NONCE\n    )\n}\n\npub fn compute_unique_siloed_note_hash(nonce: Field, siloed_note_hash: Field) -> Field {\n    pedersen_hash(\n        [\n        nonce,\n        siloed_note_hash\n    ],\n        GENERATOR_INDEX__UNIQUE_NOTE_HASH\n    )\n}\n\npub fn pedersen_hash<N>(inputs: [Field; N], hash_index: u32) -> Field {\n    dep::std::hash::pedersen_hash_with_separator(inputs, hash_index)\n}\n\n#[test]\nfn smoke_sha256_to_field() {\n    let full_buffer = [\n        0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19,\n        20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39,\n        40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59,\n        60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79,\n        80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99,\n        100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119,\n        120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139,\n        140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159\n    ];\n    let result = sha256_to_field(full_buffer);\n\n    assert(result == 0x448ebbc9e1a31220a2f3830c18eef61b9bd070e5084b7fa2a359fe729184c7);\n\n    // to show correctness of the current ver (truncate one byte) vs old ver (mod full bytes):\n    let result_bytes = sha256(full_buffer);\n    let truncated_field = crate::utils::field::field_from_bytes_32_trunc(result_bytes);\n    assert(truncated_field == result);\n    let mod_res = result + (result_bytes[31] as Field);\n    assert(mod_res == 0x448ebbc9e1a31220a2f3830c18eef61b9bd070e5084b7fa2a359fe729184e0);\n}\n\n#[test]\nfn compute_l2_l1_hash() {\n    // All zeroes\n    let hash_result = compute_l2_to_l1_hash(AztecAddress::from_field(0), 0, 0, L2ToL1Message::empty());\n    assert(hash_result == 0xb393978842a0fa3d3e1470196f098f473f9678e72463cb65ec4ab5581856c2);\n\n    // Non-zero case\n    let message = L2ToL1Message { recipient: EthAddress::from_field(3), content: 5 };\n    let hash_result = compute_l2_to_l1_hash(AztecAddress::from_field(1), 2, 4, message);\n    assert(hash_result == 0x3f88c1044a05e5340ed20466276500f6d45ca5603913b9091e957161734e16);\n}\n","path":"/Users/jack-sw/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.35.1/noir-projects/noir-protocol-circuits/crates/types/src/hash.nr"},"221":{"source":"use crate::{address::EthAddress, constants::L2_TO_L1_MESSAGE_LENGTH, traits::{Deserialize, Empty, Serialize}};\n\n// Note: Not to be confused with L2ToL1Msg in Solidity\nstruct L2ToL1Message {\n    recipient: EthAddress,\n    content: Field,\n}\n\nimpl Empty for L2ToL1Message {\n    fn empty() -> Self {\n        Self {\n            recipient: EthAddress::empty(),\n            content: 0,\n        }\n    }\n}\n\nimpl Eq for L2ToL1Message {\n    fn eq(self, other: Self) -> bool {\n        (self.recipient == other.recipient) & (self.content == other.content)\n    }\n}\n\nimpl Serialize<L2_TO_L1_MESSAGE_LENGTH> for L2ToL1Message {\n    fn serialize(self) -> [Field; L2_TO_L1_MESSAGE_LENGTH] {\n        [self.recipient.to_field(), self.content]\n    }\n}\n\nimpl Deserialize<L2_TO_L1_MESSAGE_LENGTH> for L2ToL1Message {\n    fn deserialize(values: [Field; L2_TO_L1_MESSAGE_LENGTH]) -> Self {\n        Self {\n            recipient: EthAddress::from_field(values[0]),\n            content: values[1],\n        }\n    }\n}\n","path":"/Users/jack-sw/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.35.1/noir-projects/noir-protocol-circuits/crates/types/src/messaging/l2_to_l1_message.nr"},"223":{"source":"use crate::{\n    abis::append_only_tree_snapshot::{AppendOnlyTreeSnapshot, APPEND_ONLY_TREE_SNAPSHOT_LENGTH},\n    constants::{PARTIAL_STATE_REFERENCE_LENGTH, STATE_REFERENCE_LENGTH},\n    partial_state_reference::PartialStateReference, traits::{Deserialize, Empty, Hash, Serialize},\n    utils::arr_copy_slice\n};\n\nstruct StateReference {\n    l1_to_l2_message_tree: AppendOnlyTreeSnapshot,\n    partial: PartialStateReference,\n}\n\nimpl Eq for StateReference {\n    fn eq(self, other: StateReference) -> bool {\n        self.l1_to_l2_message_tree.eq(other.l1_to_l2_message_tree) &\n        self.partial.eq(other.partial)\n    }\n}\n\nimpl Serialize<STATE_REFERENCE_LENGTH> for StateReference {\n    fn serialize(self) -> [Field; STATE_REFERENCE_LENGTH] {\n        let mut fields: BoundedVec<Field, STATE_REFERENCE_LENGTH> = BoundedVec::new();\n\n        fields.extend_from_array(self.l1_to_l2_message_tree.serialize());\n        fields.extend_from_array(self.partial.serialize());\n\n        fields.storage\n    }\n}\n\nimpl Deserialize<STATE_REFERENCE_LENGTH> for StateReference {\n    fn deserialize(serialized: [Field; STATE_REFERENCE_LENGTH]) -> StateReference {\n        let mut offset = 0;\n\n        let l1_to_l2_message_tree_fields = arr_copy_slice(serialized, [0; APPEND_ONLY_TREE_SNAPSHOT_LENGTH], offset);\n        offset = offset + APPEND_ONLY_TREE_SNAPSHOT_LENGTH;\n\n        let partial_fields = arr_copy_slice(serialized, [0; PARTIAL_STATE_REFERENCE_LENGTH], offset);\n\n        StateReference {\n            l1_to_l2_message_tree: AppendOnlyTreeSnapshot::deserialize(l1_to_l2_message_tree_fields),\n            partial: PartialStateReference::deserialize(partial_fields),\n        }\n    }\n}\n\nimpl Empty for StateReference {\n    fn empty() -> Self {\n        Self {\n            l1_to_l2_message_tree: AppendOnlyTreeSnapshot::zero(),\n            partial: PartialStateReference::empty(),\n        }\n    }\n}\n\n#[test]\nfn serialization_of_empty() {\n    let state = StateReference::empty();\n    let _serialized = state.serialize();\n    let _deserialized = StateReference::deserialize(_serialized);\n}\n","path":"/Users/jack-sw/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.35.1/noir-projects/noir-protocol-circuits/crates/types/src/state_reference.nr"},"228":{"source":"use dep::std;\n/// ElGamal encryption/decryption for Field elements\n\n// Given generator gen, public key pub_key, message m and randomness r\n// Output ciphertext (c1,c2)\n// c1 = gen^r\n// c2 = m * pub_key^r\n// TODO acording to function comment assumes exponent under 32 bits. \n// It seems to work for random test values, but probably perfomance isn't optimal. \nfn single_standard_encryption_fe(\n  gen: Field, \n  pub_key: Field, \n  m: Field, \n  r: Field\n  ) -> (Field, Field) {\n\n  // let c1 = gen.pow_32(r);\n  // let temp = pub_key.pow_32(r);\n  // let c2 = m * temp;\n  // let c1 = r.pow_32(gen);\n  // let temp1 = r.pow_32(pub_key);\n  // let temp2 = m.pow_32(gen) ;\n  // let c2 = temp1 + temp2;\n\n  //　single_hom_encryption_fe\n  // let c1 = gen.pow_32(r);\n   let c1 = gen * r;\n  let temp1 = pub_key.pow_32(r);\n  let temp2 = gen.pow_32(m) ;\n  let c2 = temp2 * temp1;\n  (c1, c2)\n}\n\n#[test]\nfn testsingle_standard_encryption_fe() {\n  let gen = 3618502788666131106986593281521497120414687020801267626233049500247285301248;\n  let g_pub_key = 0x8601d0dec944deca8918a6431526acb8530afea2ffa295142b348dfbce36c20b;\n  let m = 42830;\n  let r = 1152000579019524719769048073517805207578464470827627862468450398349088064047;\n  let (c1, c2) = single_standard_encryption_fe(gen, g_pub_key, m, r);\n  std::println(c1);\n  std::println(c2);\n\n}\n\n// TODO assumes exponent under 32 bits?\nfn single_decryption_fe(\n  c1: Field,\n  c2: Field,\n  x: Field\n) -> Field {\n\n  // The shared secret\n  let s = c1.pow_32(x);\n  let s_inv = 1/s;\n  \n  // Check in parigp\n  // Mod(1/31250, 21888242871839275222246405745257275088548364400416034343698204186575808495617)\n  // note that this assumes field is bn254\n  \n  // Check here - works\n  // let test = s * s_inv;\n  // std::println(\"test\");\n  // std::println(test);\n\n  // recover and return m\n  c2 * s_inv\n}\n\n\n#[test]\nfn test_single_encryption_fe_1() {\n  // small values\n\n  // priv key\n  let x = 2;\n  let gen = 5;\n  // pub_key = gen^x\n  // assumes exponent fits in 32 bits\n  // 25 = 0x19\n  let pub_key = gen.pow_32(x);\n\n  let msg = 11111;\n  let randomness = 6;\n  let (c1, c2) = single_standard_encryption_fe(gen, pub_key, msg, randomness);\n  let m_decrypted =  single_decryption_fe(c1, c2, x);\n  \n  assert(msg == m_decrypted);\n}\n\n#[test]\nfn test_single_encryption_fe_2() {\n  // with generated values parigp\n  // random(21888242871839275222246405745257275088548364400416034343698204186575808495617)\n\n  // priv key\n  let x = 7115637666404682632379307215493662218327241124760828634863089038725962038957;\n  \n  // gen = 0x183227397098d014dc2822db40c0ac2e9419f4243cdcb848a1f0fac9fd2c88d0\n  let gen = 10944121435919637611123202872628637544274182200208017171849102093287991052496;\n  \n  // pub_key = gen^x\n  let pub_key = gen.pow_32(x);\n  std::println(pub_key); // 0x06c4dfa71f2a7a8810dc34ce86938764a51b6bf5bce71da90c1c5fc9407e0ebc\n\n  let msg = 11111;\n  // hex 25ea07206ae935e88e774161a280fc15ddd2cbc78d99d2123f3bd562956d466a\n  let randomness = 17149066796940759370530693659488791163567038136671713582338765584448638240362;\n  let (c1, c2) = single_standard_encryption_fe(gen, pub_key, msg, randomness);\n  let m_decrypted =  single_decryption_fe(c1, c2, x);\n\n  assert(msg == m_decrypted);\n}","path":"/Users/jack-sw/Codes/abstract/dex-build/token-bridge-uniswap/packages/aztec-contracts/noir-elgamal/src/elgamal/standard_fe.nr"}}}